#!/usr/bin/env python3
"""
Script para criar serviÃ§os faltantes no sistema
"""

from app import app, db
from models import Servico

def criar_servicos_faltantes():
    with app.app_context():
        print("Criando serviÃ§os faltantes...")
        
        servicos_para_criar = [
            {
                'nome': 'FundaÃ§Ã£o em Concreto Armado',
                'descricao': 'ExecuÃ§Ã£o de fundaÃ§Ãµes em concreto armado',
                'categoria': 'estrutura',
                'unidade_medida': 'm3',
                'unidade_simbolo': 'mÂ³',
                'custo_unitario': 450.00,
                'complexidade': 4
            },
            {
                'nome': 'Cobertura em Telhas CerÃ¢micas',
                'descricao': 'InstalaÃ§Ã£o de cobertura com telhas cerÃ¢micas',
                'categoria': 'acabamento',
                'unidade_medida': 'm2',
                'unidade_simbolo': 'mÂ²',
                'custo_unitario': 85.00,
                'complexidade': 3
            },
            {
                'nome': 'Pintura Interna e Externa',
                'descricao': 'ServiÃ§os de pintura interna e externa',
                'categoria': 'acabamento',
                'unidade_medida': 'm2',
                'unidade_simbolo': 'mÂ²',
                'custo_unitario': 25.00,
                'complexidade': 2
            },
            {
                'nome': 'InstalaÃ§Ãµes ElÃ©tricas',
                'descricao': 'InstalaÃ§Ã£o de sistemas elÃ©tricos',
                'categoria': 'instalacoes',
                'unidade_medida': 'un',
                'unidade_simbolo': 'un',
                'custo_unitario': 350.00,
                'complexidade': 4
            },
            {
                'nome': 'InstalaÃ§Ãµes HidrÃ¡ulicas',
                'descricao': 'InstalaÃ§Ã£o de sistemas hidrÃ¡ulicos',
                'categoria': 'instalacoes',
                'unidade_medida': 'un',
                'unidade_simbolo': 'un',
                'custo_unitario': 280.00,
                'complexidade': 4
            },
            {
                'nome': 'Esquadrias de AlumÃ­nio',
                'descricao': 'InstalaÃ§Ã£o de esquadrias de alumÃ­nio',
                'categoria': 'acabamento',
                'unidade_medida': 'un',
                'unidade_simbolo': 'un',
                'custo_unitario': 420.00,
                'complexidade': 3
            },
            {
                'nome': 'EscavaÃ§Ã£o e Terraplanagem',
                'descricao': 'ServiÃ§os de escavaÃ§Ã£o e terraplanagem',
                'categoria': 'estrutura',
                'unidade_medida': 'm3',
                'unidade_simbolo': 'mÂ³',
                'custo_unitario': 35.00,
                'complexidade': 2
            }
        ]
        
        servicos_criados = 0
        for servico_data in servicos_para_criar:
            # Verificar se o serviÃ§o jÃ¡ existe
            servico_existente = Servico.query.filter_by(nome=servico_data['nome']).first()
            if not servico_existente:
                servico = Servico(
                    nome=servico_data['nome'],
                    descricao=servico_data['descricao'],
                    categoria=servico_data['categoria'],
                    unidade_medida=servico_data['unidade_medida'],
                    unidade_simbolo=servico_data['unidade_simbolo'],
                    custo_unitario=servico_data['custo_unitario'],
                    complexidade=servico_data['complexidade'],
                    requer_especializacao=servico_data['complexidade'] >= 4,
                    ativo=True
                )
                db.session.add(servico)
                servicos_criados += 1
                print(f"âœ“ Criado: {servico_data['nome']}")
            else:
                print(f"- JÃ¡ existe: {servico_data['nome']}")
        
        db.session.commit()
        print(f"\nâœ… {servicos_criados} novos serviÃ§os criados!")
        
        # Listar todos os serviÃ§os
        print("\nðŸ“‹ ServiÃ§os disponÃ­veis no sistema:")
        servicos = Servico.query.filter_by(ativo=True).order_by(Servico.categoria, Servico.nome).all()
        for servico in servicos:
            print(f"  - {servico.nome} ({servico.categoria}) - {servico.unidade_simbolo}")

if __name__ == '__main__':
    criar_servicos_faltantes()