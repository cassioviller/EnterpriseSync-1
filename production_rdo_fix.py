#!/usr/bin/env python3
"""
CORRE√á√ÉO CR√çTICA RDO PRODU√á√ÉO - APLICA√á√ÉO DIRETA
Aplica os logs e corre√ß√µes necess√°rias diretamente no views.py
"""
import os
import re

def aplicar_logs_rdo_producao():
    """Aplica logs espec√≠ficos para capturar erro de subatividades em produ√ß√£o"""
    
    views_path = '/app/views.py'
    
def corrigir_svg_base():
    """Corrige o problema do SVG corrompido no template base"""
    
    base_path = '/app/templates/base.html'
    
    if not os.path.exists(base_path):
        print(f"‚ùå Arquivo {base_path} n√£o encontrado")
        return False
    
    print("üîß Corrigindo SVG corrompido no template base...")
    
    with open(base_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Corrigir o SVG problem√°tico
    old_svg = r'const svg = `data:image/svg\+xml;base64,\$\{btoa\(`'
    new_svg = 'const svg = `data:image/svg+xml;charset=utf-8,${encodeURIComponent(`'
    
    if re.search(old_svg, content):
        content = re.sub(old_svg, new_svg, content)
        
        try:
            with open(base_path, 'w', encoding='utf-8') as f:
                f.write(content)
            print("‚úÖ SVG corrompido corrigido no template base")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao salvar base.html: {e}")
            return False
    else:
        print("‚ÑπÔ∏è SVG j√° estava correto")
        return True
    
    if not os.path.exists(views_path):
        print(f"‚ùå Arquivo {views_path} n√£o encontrado")
        return False
    
    print("üîß Aplicando corre√ß√µes de logs RDO para produ√ß√£o...")
    
    with open(views_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # Corre√ß√£o 1: Adicionar logs no in√≠cio do processamento de subatividades
    old_pattern = r'print\("DEBUG CORRIGIDO: Processando subatividades do formul√°rio\.\.\."\)'
    new_code = '''print("‚ùå [RDO_SAVE] INICIO_PROCESSAMENTO_SUBATIVIDADES")
        print(f"‚ùå [RDO_SAVE] ADMIN_ID_USADO: {admin_id_correto}")
        print(f"‚ùå [RDO_SAVE] TOTAL_CAMPOS_FORM: {len(request.form)}")
        print("‚ùå [RDO_SAVE] TODOS_CAMPOS_FORM:")'''
    
    if re.search(old_pattern, content):
        content = re.sub(old_pattern, new_code, content)
        print("‚úÖ Logs de in√≠cio aplicados")
    
    # Corre√ß√£o 2: Adicionar valida√ß√£o de erro quando n√£o h√° subatividades
    old_validation = r'print\(f"‚úÖ TOTAL SUBATIVIDADES PROCESSADAS: \{subatividades_processadas\}"\)'
    new_validation = '''print(f"‚ùå [RDO_SAVE] TOTAL_SUBATIVIDADES_PROCESSADAS: {subatividades_processadas}")
        
        # VALIDA√á√ÉO ESPEC√çFICA PARA PRODU√á√ÉO
        if subatividades_processadas == 0:
            print("‚ùå [RDO_SAVE] ERRO_VALIDACAO_PRODUCAO:")
            print(f"   - Nenhuma subatividade processada")
            print(f"   - Admin_ID: {admin_id_correto}")
            flash('Erro de valida√ß√£o: Nenhuma subatividade encontrada no formul√°rio', 'error')
            return redirect(url_for('main.rdo_novo_unificado'))'''
    
    if re.search(old_validation, content):
        content = re.sub(old_validation, new_validation, content)
        print("‚úÖ Valida√ß√£o de erro aplicada")
    
    # Salvar arquivo corrigido
    try:
        with open(views_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ Arquivo views.py atualizado com logs de produ√ß√£o")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar views.py: {e}")
        return False

if __name__ == "__main__":
    print("üéØ INICIANDO CORRE√á√ÉO RDO + SVG PRODU√á√ÉO")
    
    # Corrigir SVG primeiro
    svg_ok = corrigir_svg_base()
    
    # Aplicar logs RDO
    rdo_ok = aplicar_logs_rdo_producao()
    
    if svg_ok and rdo_ok:
        print("‚úÖ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!")
    else:
        print("‚ùå FALHA EM ALGUMAS CORRE√á√ïES")
        exit(1)