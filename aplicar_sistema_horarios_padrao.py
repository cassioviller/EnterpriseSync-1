#!/usr/bin/env python3
"""
APLICA√á√ÉO COMPLETA DO SISTEMA DE HOR√ÅRIOS PADR√ÉO - SIGE v8.2
Data: 06 de Agosto de 2025
Implementa l√≥gica correta de c√°lculo de horas extras baseada em hor√°rio padr√£o
"""

from app import app, db
from models import Funcionario, RegistroPonto, HorarioPadrao
from datetime import time, date, datetime
import logging

logging.basicConfig(level=logging.INFO)

def criar_horarios_padrao_funcionarios():
    """Criar hor√°rios padr√£o para todos os funcion√°rios ativos"""
    print("üìã CRIANDO HOR√ÅRIOS PADR√ÉO PARA FUNCION√ÅRIOS")
    
    with app.app_context():
        try:
            # Buscar funcion√°rios ativos
            funcionarios = Funcionario.query.filter_by(ativo=True).all()
            print(f"üë• Encontrados {len(funcionarios)} funcion√°rios ativos")
            
            horarios_criados = 0
            
            for funcionario in funcionarios:
                # Verificar se j√° tem hor√°rio padr√£o ativo
                existe = HorarioPadrao.query.filter_by(
                    funcionario_id=funcionario.id,
                    ativo=True
                ).first()
                
                if existe:
                    print(f"‚ö†Ô∏è {funcionario.nome} j√° tem hor√°rio padr√£o")
                    continue
                
                # Criar hor√°rio padr√£o comum (07:12 √†s 17:00)
                horario = HorarioPadrao(
                    funcionario_id=funcionario.id,
                    entrada_padrao=time(7, 12),      # 07:12
                    saida_almoco_padrao=time(12, 0), # 12:00
                    retorno_almoco_padrao=time(13, 0), # 13:00
                    saida_padrao=time(17, 0),        # 17:00
                    ativo=True,
                    data_inicio=date(2025, 1, 1)
                )
                
                db.session.add(horario)
                horarios_criados += 1
                print(f"‚úÖ CRIADO: {funcionario.nome} - 07:12 √†s 17:00")
            
            db.session.commit()
            print(f"üìã {horarios_criados} hor√°rios padr√£o criados!")
            return horarios_criados
            
        except Exception as e:
            print(f"‚ùå Erro ao criar hor√°rios padr√£o: {e}")
            db.session.rollback()
            return 0

def time_para_minutos(time_obj):
    """Converte objeto time para minutos desde 00:00"""
    if not time_obj:
        return 0
    return (time_obj.hour * 60) + time_obj.minute

def calcular_horas_extras_por_horario_padrao(registro):
    """
    Calcula horas extras baseado na diferen√ßa entre hor√°rio padr√£o e real
    
    Args:
        registro (RegistroPonto): Registro de ponto do funcion√°rio
        
    Returns:
        tuple: (minutos_extras_entrada, minutos_extras_saida, total_horas_extras)
    """
    try:
        funcionario = registro.funcionario_ref
        horario_padrao = funcionario.get_horario_padrao_ativo(registro.data)
        
        if not horario_padrao:
            print(f"‚ö†Ô∏è {funcionario.nome} sem hor√°rio padr√£o para {registro.data}")
            return 0, 0, 0.0
        
        if not registro.hora_entrada or not registro.hora_saida:
            return 0, 0, 0.0
        
        minutos_extras_entrada = 0
        minutos_extras_saida = 0
        
        print(f"üë§ {funcionario.nome} ({registro.data})")
        print(f"üïê Padr√£o: {horario_padrao.entrada_padrao} √†s {horario_padrao.saida_padrao}")
        print(f"üïê Real: {registro.hora_entrada} √†s {registro.hora_saida}")
        
        # 1. Calcular extras por entrada antecipada
        entrada_real_min = time_para_minutos(registro.hora_entrada)
        entrada_padrao_min = time_para_minutos(horario_padrao.entrada_padrao)
        
        if entrada_real_min < entrada_padrao_min:
            minutos_extras_entrada = entrada_padrao_min - entrada_real_min
            print(f"‚è∞ Entrada antecipada: {minutos_extras_entrada}min extras")
        
        # 2. Calcular extras por sa√≠da atrasada
        saida_real_min = time_para_minutos(registro.hora_saida)
        saida_padrao_min = time_para_minutos(horario_padrao.saida_padrao)
        
        if saida_real_min > saida_padrao_min:
            minutos_extras_saida = saida_real_min - saida_padrao_min
            print(f"‚è∞ Sa√≠da atrasada: {minutos_extras_saida}min extras")
        
        # 3. Calcular total em horas decimais
        total_minutos_extras = minutos_extras_entrada + minutos_extras_saida
        total_horas_extras = round(total_minutos_extras / 60, 2)
        
        print(f"üìä Total: {total_minutos_extras}min = {total_horas_extras}h\n")
        
        return minutos_extras_entrada, minutos_extras_saida, total_horas_extras
        
    except Exception as e:
        print(f"‚ùå Erro no c√°lculo de extras: {e}")
        return 0, 0, 0.0

def atualizar_registro_com_horario_padrao(registro):
    """Atualiza um registro com a nova l√≥gica de hor√°rio padr√£o"""
    try:
        # Calcular com nova l√≥gica
        entrada_extras, saida_extras, total_extras = calcular_horas_extras_por_horario_padrao(registro)
        
        # Atualizar campos
        registro.minutos_extras_entrada = entrada_extras
        registro.minutos_extras_saida = saida_extras
        registro.total_minutos_extras = entrada_extras + saida_extras
        registro.horas_extras_detalhadas = total_extras
        registro.horas_extras = total_extras  # Manter compatibilidade
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao atualizar registro {registro.id}: {e}")
        return False

def corrigir_registros_existentes():
    """Corrige registros existentes com nova l√≥gica"""
    print("üö® CORRIGINDO REGISTROS EXISTENTES COM NOVA L√ìGICA")
    
    with app.app_context():
        try:
            # Buscar registros com hor√°rios (√∫ltimos 50 para teste)
            registros = RegistroPonto.query.filter(
                RegistroPonto.hora_entrada.isnot(None),
                RegistroPonto.hora_saida.isnot(None)
            ).order_by(RegistroPonto.data.desc()).limit(50).all()
            
            print(f"üìä Processando {len(registros)} registros...")
            
            corrigidos = 0
            erros = 0
            
            for registro in registros:
                try:
                    valores_antigos = {
                        'horas_extras': registro.horas_extras or 0,
                        'funcionario': registro.funcionario_ref.nome,
                        'data': registro.data
                    }
                    
                    # Atualizar com nova l√≥gica
                    if atualizar_registro_com_horario_padrao(registro):
                        print(f"‚úÖ {valores_antigos['funcionario']} ({valores_antigos['data']}): "
                              f"{valores_antigos['horas_extras']}h ‚Üí {registro.horas_extras}h")
                        corrigidos += 1
                    else:
                        erros += 1
                        
                except Exception as e:
                    print(f"‚ùå Erro no registro {registro.id}: {e}")
                    erros += 1
            
            if corrigidos > 0:
                db.session.commit()
                print(f"‚úÖ CORRE√á√ÉO CONCLU√çDA: {corrigidos} registros corrigidos, {erros} erros")
            else:
                print(f"‚ö†Ô∏è Nenhum registro corrigido, {erros} erros")
                
            return corrigidos
            
        except Exception as e:
            print(f"‚ùå Erro na corre√ß√£o: {e}")
            db.session.rollback()
            return 0

def validar_calculo_exemplo():
    """Valida c√°lculo com exemplo fornecido"""
    print("üß™ VALIDANDO C√ÅLCULO COM EXEMPLO REAL:")
    print("Hor√°rio Padr√£o: 07:12 √†s 17:00")
    print("Hor√°rio Real: 07:05 √†s 17:50")
    
    # Dados do exemplo
    entrada_padrao = time(7, 12)    # 07:12
    entrada_real = time(7, 5)       # 07:05
    saida_padrao = time(17, 0)      # 17:00
    saida_real = time(17, 50)       # 17:50
    
    # Calcular extras entrada
    entrada_padrao_min = time_para_minutos(entrada_padrao)  # 432min
    entrada_real_min = time_para_minutos(entrada_real)      # 425min
    extras_entrada = entrada_padrao_min - entrada_real_min  # 7min
    
    # Calcular extras sa√≠da
    saida_padrao_min = time_para_minutos(saida_padrao)      # 1020min
    saida_real_min = time_para_minutos(saida_real)          # 1070min
    extras_saida = saida_real_min - saida_padrao_min        # 50min
    
    # Total
    total_minutos = extras_entrada + extras_saida           # 57min
    total_horas = round(total_minutos / 60, 2)              # 0.95h
    
    print(f"‚úÖ RESULTADO VALIDA√á√ÉO:")
    print(f"   Entrada: {extras_entrada}min extras")
    print(f"   Sa√≠da: {extras_saida}min extras")  
    print(f"   Total: {total_minutos}min = {total_horas}h")
    print(f"   {'‚úÖ Correto!' if total_horas == 0.95 else '‚ùå Erro - esperado 0.95h'}")
    
    return total_horas == 0.95

def testar_com_registro_real():
    """Testa com um registro real do sistema"""
    print("üß™ TESTANDO COM REGISTRO REAL DO SISTEMA")
    
    with app.app_context():
        # Buscar um registro espec√≠fico para teste
        registro = RegistroPonto.query.filter(
            RegistroPonto.hora_entrada.isnot(None),
            RegistroPonto.hora_saida.isnot(None)
        ).first()
        
        if not registro:
            print("‚ùå Nenhum registro encontrado para teste")
            return False
        
        print(f"üìã REGISTRO TESTE: {registro.funcionario_ref.nome} - {registro.data}")
        print(f"   Entrada: {registro.hora_entrada}")
        print(f"   Sa√≠da: {registro.hora_saida}")
        
        # Aplicar nova l√≥gica
        entrada_extras, saida_extras, total_extras = calcular_horas_extras_por_horario_padrao(registro)
        
        print(f"üìä RESULTADO:")
        print(f"   Extras entrada: {entrada_extras}min")
        print(f"   Extras sa√≠da: {saida_extras}min")
        print(f"   Total: {total_extras}h")
        
        return True

if __name__ == "__main__":
    print("üöÄ APLICANDO SISTEMA COMPLETO DE HOR√ÅRIOS PADR√ÉO")
    
    # Fase 1: Criar hor√°rios padr√£o
    print("\nüìã FASE 1: CRIANDO HOR√ÅRIOS PADR√ÉO...")
    horarios_criados = criar_horarios_padrao_funcionarios()
    
    # Fase 2: Validar c√°lculo
    print("\nüìã FASE 2: VALIDANDO C√ÅLCULO...")
    validacao_ok = validar_calculo_exemplo()
    
    # Fase 3: Testar com registro real
    print("\nüìã FASE 3: TESTANDO COM REGISTRO REAL...")
    teste_ok = testar_com_registro_real()
    
    # Fase 4: Corrigir registros existentes
    print("\nüìã FASE 4: CORRIGINDO REGISTROS EXISTENTES...")
    registros_corrigidos = corrigir_registros_existentes()
    
    # Relat√≥rio final
    print(f"\nüìã RELAT√ìRIO FINAL:")
    print(f"‚úì Hor√°rios padr√£o criados: {horarios_criados}")
    print(f"‚úì Valida√ß√£o do c√°lculo: {'Sim' if validacao_ok else 'N√£o'}")
    print(f"‚úì Teste com registro real: {'Sim' if teste_ok else 'N√£o'}")
    print(f"‚úì Registros corrigidos: {registros_corrigidos}")
    
    if horarios_criados > 0 and validacao_ok:
        print("\nüéØ SISTEMA DE HOR√ÅRIOS PADR√ÉO APLICADO COM SUCESSO!")
        print("üìã Pr√≥ximas etapas:")
        print("   1. Interface para gerenciar hor√°rios padr√£o")
        print("   2. Atualiza√ß√£o da engine de KPIs")
        print("   3. Relat√≥rios com nova l√≥gica")
    else:
        print("\n‚ö†Ô∏è Algumas etapas falharam - verificar logs acima")