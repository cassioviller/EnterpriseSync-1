#!/bin/bash
# Script de entrada unificado para SIGE v8.2
# Sistema "Servi√ßos da Obra" baseado em RDO + Subatividades

set -e

echo "üöÄ Iniciando SIGE v8.2 (Servi√ßos da Obra Corrigido)"

# Detectar ambiente
if [[ "${FLASK_ENV:-production}" == "development" ]]; then
    echo "üîß Modo: DESENVOLVIMENTO"
    ENABLE_DEBUG=true
else
    echo "üè≠ Modo: PRODU√á√ÉO"
    ENABLE_DEBUG=false
fi

# Verificar e configurar DATABASE_URL
if [[ -z "${DATABASE_URL}" ]]; then
    echo "‚ö†Ô∏è  DATABASE_URL n√£o definida, usando padr√£o EasyPanel"
    export DATABASE_URL="postgresql://sige:sige@viajey_sige:5432/sige"
fi

# Adicionar sslmode=disable se n√£o estiver presente (para EasyPanel)
if [[ "${DATABASE_URL}" != *"sslmode="* ]]; then
    if [[ "${DATABASE_URL}" == *"?"* ]]; then
        export DATABASE_URL="${DATABASE_URL}&sslmode=disable"
    else
        export DATABASE_URL="${DATABASE_URL}?sslmode=disable"
    fi
    echo "üîí SSL desabilitado para compatibilidade EasyPanel"
fi

# Aguardar conex√£o com PostgreSQL
echo "‚è≥ Verificando conex√£o com PostgreSQL..."

# Extrair componentes da DATABASE_URL de forma mais robusta
if [[ $DATABASE_URL =~ postgres(ql)?://([^:]+):([^@]+)@([^:]+):([0-9]+)/([^?]+) ]]; then
    DB_USER="${BASH_REMATCH[2]}"
    DB_PASS="${BASH_REMATCH[3]}" 
    DB_HOST="${BASH_REMATCH[4]}"
    DB_PORT="${BASH_REMATCH[5]}"
    DB_NAME="${BASH_REMATCH[6]}"
else
    # Valores padr√£o para EasyPanel
    DB_HOST="viajey_sige"
    DB_PORT="5432"
    DB_USER="sige"
    DB_NAME="sige"
fi

echo "üîç Conectando em: ${DB_HOST}:${DB_PORT} (usu√°rio: ${DB_USER})"

# Aguardar banco com timeout
TIMEOUT=60
COUNTER=0

until pg_isready -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" >/dev/null 2>&1; do
    if [[ ${COUNTER} -eq ${TIMEOUT} ]]; then
        echo "‚ùå Timeout: PostgreSQL n√£o respondeu em ${TIMEOUT}s"
        echo "üîç Debug: DATABASE_URL=${DATABASE_URL}"
        echo "üîç Debug: Host=${DB_HOST}, Port=${DB_PORT}, User=${DB_USER}"
        exit 1
    fi
    
    echo "‚è≥ PostgreSQL n√£o dispon√≠vel, tentativa $((COUNTER + 1))/${TIMEOUT}..."
    sleep 2
    COUNTER=$((COUNTER + 1))
done

echo "‚úÖ PostgreSQL conectado!"

# Executar migra√ß√µes autom√°ticas
echo "üîÑ Executando migra√ß√µes autom√°ticas..."
python -c "
import sys
import traceback
from app import app, db

with app.app_context():
    try:
        print('üîÑ Testando conex√£o com banco...')
        from sqlalchemy import text
        db.session.execute(text('SELECT 1'))
        print('‚úÖ Conex√£o com banco OK')
        
        # Importar e executar migra√ß√µes
        import migrations
        print('‚úÖ Migra√ß√µes executadas com sucesso')
        
    except Exception as e:
        print(f'‚ùå Erro nas migra√ß√µes: {e}')
        print('üìã Traceback:')
        traceback.print_exc()
        
        # Em produ√ß√£o, falhar se migra√ß√µes n√£o funcionarem
        if '${FLASK_ENV}' == 'production':
            sys.exit(1)
        else:
            print('‚ö†Ô∏è  Continuando em modo desenvolvimento...')
"

if [[ $? -ne 0 && "${FLASK_ENV}" == "production" ]]; then
    echo "‚ùå Falha cr√≠tica nas migra√ß√µes em produ√ß√£o"
    exit 1
fi

# Verificar integridade dos templates cr√≠ticos
echo "üîç Verificando templates cr√≠ticos..."
TEMPLATES_ESSENCIAIS=(
    "templates/rdo/novo.html"
    "templates/funcionarios.html" 
    "templates/dashboard.html"
    "templates/base_completo.html"
)

for template in "${TEMPLATES_ESSENCIAIS[@]}"; do
    if [[ ! -f "/app/${template}" ]]; then
        echo "‚ùå Template cr√≠tico n√£o encontrado: ${template}"
        exit 1
    fi
done

echo "‚úÖ Todos os templates cr√≠ticos encontrados"

# Verificar estrutura de rotas essenciais
echo "üîç Verificando estrutura de rotas..."
python -c "
from app import app
from flask import url_for

with app.app_context():
    try:
        # Testar rotas cr√≠ticas (incluindo novas APIs v8.2)
        rotas_criticas = [
            'main.dashboard',
            'main.funcionarios', 
            'main.funcionario_rdo_consolidado',
            'main.funcionario_rdo_novo',
            'main.health_check',
            'main.adicionar_servico_rdo_obra',
            'main.api_servicos_disponiveis_obra'
        ]
        
        for rota in rotas_criticas:
            try:
                url_for(rota)
                print(f'‚úÖ Rota OK: {rota}')
            except Exception as e:
                print(f'‚ùå Rota falhou: {rota} - {e}')
                
        print('‚úÖ Verifica√ß√£o de rotas conclu√≠da')
        
    except Exception as e:
        print(f'‚ùå Erro na verifica√ß√£o de rotas: {e}')
"

# Mostrar estat√≠sticas finais
echo "üìä Estat√≠sticas do sistema:"
echo "   - Python: $(python --version)"
echo "   - Diret√≥rio: $(pwd)"
echo "   - Usu√°rio: $(whoami)"
echo "   - Templates: $(find /app/templates -name '*.html' | wc -l) arquivos"
echo "   - Arquivos est√°ticos: $(find /app/static -type f | wc -l) arquivos"

if [[ "${ENABLE_DEBUG}" == "true" ]]; then
    echo "üîß Informa√ß√µes de debug ativadas"
    echo "   - Blueprints registrados:"
    python -c "
from app import app
for blueprint in app.blueprints:
    print(f'     - {blueprint}')
"
fi

echo "üéØ Sistema pronto! Iniciando aplica√ß√£o..."
exec "$@"