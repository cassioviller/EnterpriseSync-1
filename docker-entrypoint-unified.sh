#!/bin/bash
# Script de entrada unificado para SIGE v8.2
# Sistema "Servi√ßos da Obra" baseado em RDO + Subatividades

set -e

echo "üöÄ Iniciando SIGE v8.2 (Servi√ßos da Obra Corrigido)"

# Detectar ambiente
if [[ "${FLASK_ENV:-production}" == "development" ]]; then
    echo "üîß Modo: DESENVOLVIMENTO"
    ENABLE_DEBUG=true
else
    echo "üè≠ Modo: PRODU√á√ÉO"
    ENABLE_DEBUG=false
fi

# Verificar e configurar DATABASE_URL
if [[ -z "${DATABASE_URL}" ]]; then
    echo "‚ö†Ô∏è  DATABASE_URL n√£o definida, usando padr√£o EasyPanel"
    export DATABASE_URL="postgresql://sige:sige@viajey_sige:5432/sige"
fi

# Adicionar sslmode=disable se n√£o estiver presente (para EasyPanel)
if [[ "${DATABASE_URL}" != *"sslmode="* ]]; then
    if [[ "${DATABASE_URL}" == *"?"* ]]; then
        export DATABASE_URL="${DATABASE_URL}&sslmode=disable"
    else
        export DATABASE_URL="${DATABASE_URL}?sslmode=disable"
    fi
    echo "üîí SSL desabilitado para compatibilidade EasyPanel"
fi

# Aguardar conex√£o com PostgreSQL
echo "‚è≥ Verificando conex√£o com PostgreSQL..."

# Extrair componentes da DATABASE_URL de forma mais robusta
if [[ $DATABASE_URL =~ postgres(ql)?://([^:]+):([^@]+)@([^:]+):([0-9]+)/([^?]+) ]]; then
    DB_USER="${BASH_REMATCH[2]}"
    DB_PASS="${BASH_REMATCH[3]}" 
    DB_HOST="${BASH_REMATCH[4]}"
    DB_PORT="${BASH_REMATCH[5]}"
    DB_NAME="${BASH_REMATCH[6]}"
else
    # Valores padr√£o para EasyPanel
    DB_HOST="viajey_sige"
    DB_PORT="5432"
    DB_USER="sige"
    DB_NAME="sige"
fi

echo "üîç Conectando em: ${DB_HOST}:${DB_PORT} (usu√°rio: ${DB_USER})"

# Aguardar banco com timeout
TIMEOUT=60
COUNTER=0

until pg_isready -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" >/dev/null 2>&1; do
    if [[ ${COUNTER} -eq ${TIMEOUT} ]]; then
        echo "‚ùå Timeout: PostgreSQL n√£o respondeu em ${TIMEOUT}s"
        echo "üîç Debug: DATABASE_URL=${DATABASE_URL}"
        echo "üîç Debug: Host=${DB_HOST}, Port=${DB_PORT}, User=${DB_USER}"
        exit 1
    fi
    
    echo "‚è≥ PostgreSQL n√£o dispon√≠vel, tentativa $((COUNTER + 1))/${TIMEOUT}..."
    sleep 2
    COUNTER=$((COUNTER + 1))
done

echo "‚úÖ PostgreSQL conectado!"

# Executar migra√ß√µes autom√°ticas
echo "üîÑ Executando migra√ß√µes autom√°ticas..."
python -c "
import sys
import traceback
from app import app, db

with app.app_context():
    try:
        print('üîÑ Testando conex√£o com banco...')
        from sqlalchemy import text
        db.session.execute(text('SELECT 1'))
        print('‚úÖ Conex√£o com banco OK')
        
        # Importar e executar migra√ß√µes
        import migrations
        print('‚úÖ Migra√ß√µes executadas com sucesso')
        
    except Exception as e:
        print(f'‚ùå Erro nas migra√ß√µes: {e}')
        print('üìã Traceback:')
        traceback.print_exc()
        
        # Em produ√ß√£o, falhar se migra√ß√µes n√£o funcionarem
        if '${FLASK_ENV}' == 'production':
            sys.exit(1)
        else:
            print('‚ö†Ô∏è  Continuando em modo desenvolvimento...')
"

# Verificar dados de produ√ß√£o ap√≥s migra√ß√µes
echo "üîç Verificando dados de produ√ß√£o..."
python -c "
from app import app, db
from sqlalchemy import text

with app.app_context():
    try:
        print('üìä VERIFICA√á√ÉO COMPLETA DE DADOS DE PRODU√á√ÉO:')
        print('='*60)
        
        # Verificar admin_ids dispon√≠veis em cada tabela
        print('üîç Admin_IDs por tabela:')
        
        # Funcion√°rios
        funcionarios = db.session.execute(text('SELECT admin_id, COUNT(*) FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY admin_id')).fetchall()
        print(f'   üë• Funcion√°rios: {dict(funcionarios) if funcionarios else \"Nenhum\"}')
        
        # Servi√ßos  
        servicos = db.session.execute(text('SELECT admin_id, COUNT(*) FROM servico WHERE ativo = true GROUP BY admin_id ORDER BY admin_id')).fetchall()
        print(f'   üîß Servi√ßos: {dict(servicos) if servicos else \"Nenhum\"}')
        
        # Subatividades
        subatividades = db.session.execute(text('SELECT admin_id, COUNT(*) FROM subatividade_mestre WHERE ativo = true GROUP BY admin_id ORDER BY admin_id')).fetchall()
        print(f'   üìã Subatividades: {dict(subatividades) if subatividades else \"Nenhum\"}')
        
        # Obras
        obras = db.session.execute(text('SELECT admin_id, COUNT(*) FROM obra GROUP BY admin_id ORDER BY admin_id')).fetchall()
        print(f'   üèóÔ∏è  Obras: {dict(obras) if obras else \"Nenhum\"}')
        
        # Detectar admin_id recomendado para produ√ß√£o
        print('\\nüéØ DETEC√á√ÉO AUTOM√ÅTICA DE ADMIN_ID:')
        
        # Buscar admin_id com mais dados combinados (query corrigida)
        combined_query = text('''
            SELECT all_admins.admin_id, 
                   COALESCE(f.funcionarios, 0) + COALESCE(s.servicos, 0) + COALESCE(o.obras, 0) as total_dados
            FROM (
                SELECT DISTINCT admin_id FROM funcionario 
                UNION SELECT DISTINCT admin_id FROM servico 
                UNION SELECT DISTINCT admin_id FROM obra WHERE admin_id IS NOT NULL
            ) all_admins
            LEFT JOIN (SELECT admin_id, COUNT(*) as funcionarios FROM funcionario WHERE ativo = true GROUP BY admin_id) f ON all_admins.admin_id = f.admin_id
            LEFT JOIN (SELECT admin_id, COUNT(*) as servicos FROM servico WHERE ativo = true GROUP BY admin_id) s ON all_admins.admin_id = s.admin_id  
            LEFT JOIN (SELECT admin_id, COUNT(*) as obras FROM obra GROUP BY admin_id) o ON all_admins.admin_id = o.admin_id
            ORDER BY total_dados DESC, all_admins.admin_id ASC
            LIMIT 1
        ''')
        
        recommended = db.session.execute(combined_query).fetchone()
        if recommended and recommended[0]:
            print(f'   ‚úÖ Admin_ID recomendado para produ√ß√£o: {recommended[0]} (total: {recommended[1]} registros)')
        else:
            print('   ‚ö†Ô∏è  Nenhum admin_id encontrado com dados')
        
        print('='*60)
        print('‚úÖ Verifica√ß√£o de produ√ß√£o conclu√≠da com sucesso!')
        
    except Exception as e:
        print(f'‚ùå Erro na verifica√ß√£o de produ√ß√£o: {e}')
        import traceback
        traceback.print_exc()
"

if [[ $? -ne 0 && "${FLASK_ENV}" == "production" ]]; then
    echo "‚ùå Falha cr√≠tica nas migra√ß√µes em produ√ß√£o"
    exit 1
fi

# Verificar integridade dos templates cr√≠ticos
echo "üîç Verificando templates cr√≠ticos..."
TEMPLATES_ESSENCIAIS=(
    "templates/rdo/novo.html"
    "templates/funcionarios.html" 
    "templates/dashboard.html"
    "templates/base_completo.html"
)

for template in "${TEMPLATES_ESSENCIAIS[@]}"; do
    if [[ ! -f "/app/${template}" ]]; then
        echo "‚ùå Template cr√≠tico n√£o encontrado: ${template}"
        exit 1
    fi
done

echo "‚úÖ Todos os templates cr√≠ticos encontrados"

# Verificar rotas com script dedicado
echo "üîç Verificando rotas..."
python /app/check_routes.py

if [[ $? -ne 0 ]]; then
    echo "‚ö†Ô∏è Problemas na verifica√ß√£o de rotas, mas continuando..."
fi

# Mostrar estat√≠sticas finais
echo "üìä Estat√≠sticas do sistema:"
echo "   - Python: $(python --version)"
echo "   - Diret√≥rio: $(pwd)"
echo "   - Usu√°rio: $(whoami)"
echo "   - Templates: $(find /app/templates -name '*.html' | wc -l) arquivos"
echo "   - Arquivos est√°ticos: $(find /app/static -type f | wc -l) arquivos"

if [[ "${ENABLE_DEBUG}" == "true" ]]; then
    echo "üîß Informa√ß√µes de debug ativadas"
    echo "   - Blueprints registrados:"
    python -c "
from app import app
for blueprint in app.blueprints:
    print(f'     - {blueprint}')
"
fi

echo "üéØ Sistema pronto! Iniciando aplica√ß√£o..."
exec "$@"