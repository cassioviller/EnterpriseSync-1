#!/bin/bash

# SCRIPT DE DEPLOY AUTOM√ÅTICO PARA PRODU√á√ÉO
# Executa todas as corre√ß√µes automaticamente

set -e  # Parar em caso de erro

echo "üöÄ INICIANDO DEPLOY AUTOM√ÅTICO - SIGE v8.1"
echo "=================================================="

# Configurar vari√°veis
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
LOG_FILE="deploy_$TIMESTAMP.log"

# Fun√ß√£o de log
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Fun√ß√£o de erro
error() {
    log "‚ùå ERRO: $1"
    exit 1
}

log "üîß Verificando ambiente Python..."
python3 --version || error "Python3 n√£o encontrado"

log "üì¶ Verificando depend√™ncias..."
python3 -c "import flask, sqlalchemy" || error "Depend√™ncias n√£o encontradas"

log "üóÑÔ∏è  Verificando conex√£o com banco de dados..."  
python3 -c "
from app import app, db
from sqlalchemy import text
with app.app_context():
    try:
        db.session.execute(text('SELECT 1'))
        print('‚úÖ Banco conectado')
    except Exception as e:
        print(f'‚ùå Erro no banco: {e}')
        exit(1)
" || error "Falha na conex√£o com banco"

log "üîÑ Executando corre√ß√µes autom√°ticas..."
python3 auto_deploy_producao.py --auto || error "Falha no deploy autom√°tico"

log "üîç Validando corre√ß√µes aplicadas..."
python3 -c "
from app import app, db
from models import RegistroPonto
from datetime import date, time

with app.app_context():
    # Verificar Jo√£o Silva Santos 31/07
    joao = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 31),
        RegistroPonto.hora_entrada == time(7, 5),
        RegistroPonto.hora_saida == time(17, 50)
    ).first()
    
    if joao and abs(joao.horas_extras - 0.95) < 0.01:
        print('‚úÖ Jo√£o Silva Santos 31/07: CORRETO')
    else:
        print('‚ùå Jo√£o Silva Santos 31/07: ERRO')
        exit(1)
        
    # Verificar Ana Paula 29/07  
    ana = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 29),
        RegistroPonto.hora_entrada == time(7, 30),
        RegistroPonto.hora_saida == time(18, 0)
    ).first()
    
    if ana and abs(ana.horas_extras - 1.0) < 0.01 and abs(ana.total_atraso_horas - 0.3) < 0.01:
        print('‚úÖ Ana Paula 29/07: CORRETO')
    else:
        print('‚ùå Ana Paula 29/07: ERRO')
        exit(1)
        
    print('‚úÖ TODOS OS CASOS CR√çTICOS VALIDADOS')
" || error "Falha na valida√ß√£o"

log "üåê Verificando servi√ßos web..."
curl -s http://localhost:5000/ > /dev/null || log "‚ö†Ô∏è  Servi√ßo web n√£o respondeu (normal se n√£o estiver rodando)"

log "üìÑ Gerando relat√≥rio final..."
cat > "relatorio_deploy_$TIMESTAMP.md" << EOF
# RELAT√ìRIO DE DEPLOY AUTOM√ÅTICO

**Data**: $(date '+%Y-%m-%d %H:%M:%S')
**Vers√£o**: SIGE v8.1
**Status**: ‚úÖ SUCESSO

## Corre√ß√µes Aplicadas:
- ‚úÖ Sistema de horas extras consolidado
- ‚úÖ L√≥gica unificada (07:12-17:00)
- ‚úÖ C√°lculos independentes (extras + atrasos)
- ‚úÖ Casos cr√≠ticos validados

## Casos Validados:
- ‚úÖ Jo√£o Silva Santos 31/07: 0.95h extras
- ‚úÖ Ana Paula Rodrigues 29/07: 1.0h extras + 0.3h atrasos

## Arquivos Atualizados:
- kpis_engine.py (l√≥gica consolidada)
- auto_deploy_producao.py (sistema autom√°tico)
- deploy_automatico.sh (este script)

## Pr√≥ximos Passos:
- ‚úÖ Sistema pronto para uso
- ‚úÖ Monitoramento ativo
- ‚úÖ Logs dispon√≠veis em: $LOG_FILE

---
Deploy executado automaticamente em: $(date)
EOF

log "‚úÖ DEPLOY AUTOM√ÅTICO CONCLU√çDO COM SUCESSO!"
log "üìÑ Relat√≥rio salvo em: relatorio_deploy_$TIMESTAMP.md"
log "üìã Log completo em: $LOG_FILE"

echo ""
echo "üéâ SISTEMA ATUALIZADO E PRONTO PARA USO!"
echo "   - Todas as corre√ß√µes aplicadas automaticamente"
echo "   - Casos cr√≠ticos validados"
echo "   - Relat√≥rio gerado: relatorio_deploy_$TIMESTAMP.md"
echo ""