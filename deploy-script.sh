#!/bin/bash
# Script de deploy automatizado para SIGE v8.0
# Unificado para desenvolvimento e produ√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Banner
echo -e "${BLUE}"
echo "======================================"
echo "  SIGE v8.0 - Deploy Autom√°tico"
echo "  Sistema Integrado de Gest√£o"
echo "======================================"
echo -e "${NC}"

# Detectar ambiente
AMBIENTE=${AMBIENTE:-production}
if [[ "${AMBIENTE}" == "development" ]]; then
    echo -e "${YELLOW}üîß Modo: DESENVOLVIMENTO${NC}"
    COMPOSE_FILE="docker-compose.unificado.yml"
    BUILD_ENV="development"
    FLASK_ENV="development"
else
    echo -e "${GREEN}üè≠ Modo: PRODU√á√ÉO${NC}"
    COMPOSE_FILE="docker-compose.unificado.yml"
    BUILD_ENV="production"
    FLASK_ENV="production"
fi

# Verificar pr√©-requisitos
echo -e "${BLUE}üîç Verificando pr√©-requisitos...${NC}"

if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n√£o encontrado${NC}"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n√£o encontrado${NC}"
    exit 1
fi

# Verificar arquivos essenciais
ARQUIVOS_ESSENCIAIS=(
    "Dockerfile.unified"
    "docker-entrypoint-unified.sh"
    "main.py"
    "app.py"
    "models.py"
    "views.py"
    "templates/base_completo.html"
    "templates/dashboard.html"
    "templates/funcionarios.html"
    "static/css/app.css"
    "static/js/app.js"
)

for arquivo in "${ARQUIVOS_ESSENCIAIS[@]}"; do
    if [[ ! -f "$arquivo" ]]; then
        echo -e "${RED}‚ùå Arquivo essencial n√£o encontrado: $arquivo${NC}"
        exit 1
    fi
done

echo -e "${GREEN}‚úÖ Todos os arquivos essenciais encontrados${NC}"

# Executar verifica√ß√£o de consist√™ncia
echo -e "${BLUE}üîç Executando verifica√ß√£o de consist√™ncia...${NC}"
if python verificar_consistencia.py; then
    echo -e "${GREEN}‚úÖ Verifica√ß√£o de consist√™ncia OK${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Algumas verifica√ß√µes falharam, mas continuando...${NC}"
fi

# Parar containers existentes
echo -e "${BLUE}üõë Parando containers existentes...${NC}"
docker-compose -f $COMPOSE_FILE down --remove-orphans || true

# Limpar imagens antigas (opcional)
if [[ "${LIMPAR_IMAGENS:-false}" == "true" ]]; then
    echo -e "${BLUE}üßπ Limpando imagens antigas...${NC}"
    docker system prune -f
    docker image prune -f
fi

# Build da aplica√ß√£o
echo -e "${BLUE}üî® Construindo aplica√ß√£o...${NC}"
docker-compose -f $COMPOSE_FILE build --no-cache \
    --build-arg BUILD_ENV=$BUILD_ENV sige

# Aguardar banco de dados
echo -e "${BLUE}üóÉÔ∏è  Iniciando banco de dados...${NC}"
docker-compose -f $COMPOSE_FILE up -d postgres

echo -e "${YELLOW}‚è≥ Aguardando PostgreSQL...${NC}"
while ! docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U postgres -d sige &>/dev/null; do
    echo -n "."
    sleep 2
done
echo -e "\n${GREEN}‚úÖ PostgreSQL pronto${NC}"

# Executar migra√ß√µes
echo -e "${BLUE}üîÑ Executando migra√ß√µes...${NC}"
docker-compose -f $COMPOSE_FILE run --rm \
    -e FLASK_ENV=$FLASK_ENV \
    -e BUILD_ENV=$BUILD_ENV \
    sige python -c "
from app import app, db
with app.app_context():
    try:
        import migrations
        print('‚úÖ Migra√ß√µes executadas com sucesso')
    except Exception as e:
        print(f'‚ùå Erro nas migra√ß√µes: {e}')
        import traceback
        traceback.print_exc()
        exit(1)
"

# Verificar sa√∫de da aplica√ß√£o
echo -e "${BLUE}üöÄ Iniciando aplica√ß√£o...${NC}"
docker-compose -f $COMPOSE_FILE up -d sige

echo -e "${YELLOW}‚è≥ Aguardando aplica√ß√£o ficar pronta...${NC}"
TIMEOUT=60
COUNTER=0

while [[ $COUNTER -lt $TIMEOUT ]]; do
    if curl -f -s http://localhost:5000/health >/dev/null 2>&1; then
        echo -e "\n${GREEN}‚úÖ Aplica√ß√£o funcionando!${NC}"
        break
    fi
    
    echo -n "."
    sleep 2
    COUNTER=$((COUNTER + 2))
done

if [[ $COUNTER -ge $TIMEOUT ]]; then
    echo -e "\n${RED}‚ùå Timeout: Aplica√ß√£o n√£o respondeu em ${TIMEOUT}s${NC}"
    echo -e "${YELLOW}üìã Logs da aplica√ß√£o:${NC}"
    docker-compose -f $COMPOSE_FILE logs --tail=20 sige
    exit 1
fi

# Verifica√ß√µes finais
echo -e "${BLUE}üß™ Executando testes finais...${NC}"

# Testar rotas cr√≠ticas
ROTAS_CRITICAS=(
    "/health"
    "/login"
    # Adicione outras rotas conforme necess√°rio
)

for rota in "${ROTAS_CRITICAS[@]}"; do
    if curl -f -s "http://localhost:5000${rota}" >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Rota OK: ${rota}${NC}"
    else
        echo -e "${RED}‚ùå Rota falhou: ${rota}${NC}"
    fi
done

# Relat√≥rio final
echo -e "${BLUE}"
echo "======================================"
echo "       DEPLOY CONCLU√çDO COM SUCESSO"
echo "======================================"
echo -e "${NC}"

echo -e "${GREEN}‚úÖ Sistema SIGE v8.0 funcionando${NC}"
echo -e "üåê Acesso: http://localhost:5000"
echo -e "üîß Ambiente: ${AMBIENTE}"
echo -e "üìä Status: $(docker-compose -f $COMPOSE_FILE ps --services --filter status=running | wc -l) servi√ßos rodando"

if [[ "${AMBIENTE}" == "development" ]]; then
    echo -e "${YELLOW}"
    echo "üîß COMANDOS √öTEIS PARA DESENVOLVIMENTO:"
    echo "  - Ver logs: docker-compose -f $COMPOSE_FILE logs -f sige"
    echo "  - Entrar no container: docker-compose -f $COMPOSE_FILE exec sige bash"
    echo "  - Parar: docker-compose -f $COMPOSE_FILE down"
    echo "  - Reiniciar: docker-compose -f $COMPOSE_FILE restart sige"
    echo -e "${NC}"
fi

echo -e "${GREEN}üéâ Deploy finalizado!${NC}"