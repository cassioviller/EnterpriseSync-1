#!/bin/bash
# DOCKER ENTRYPOINT PRODUCTION FIX - SIGE v8.0 FINAL
set -e

echo "üöÄ SIGE v8.0.1 - Iniciando (Full Sync Dev-Prod - 03/09/2025)"

# Configura√ß√£o do ambiente
export PYTHONPATH=/app
export FLASK_APP=main.py
export FLASK_ENV=production

# Detectar DATABASE_URL
if [ -z "$DATABASE_URL" ]; then
    if [ -n "$POSTGRES_URL" ]; then
        export DATABASE_URL="$POSTGRES_URL"
    else
        export DATABASE_URL="postgres://sige:sige@viajey_sige:5432/sige?sslmode=disable"
    fi
fi

echo "üìç DATABASE_URL: $(echo $DATABASE_URL | sed 's/:\/\/[^:]*:[^@]*@/:\/\/****:****@/')"

# Aguardar PostgreSQL
echo "‚è≥ Verificando PostgreSQL..."
TIMEOUT=30
COUNTER=0

until psql "$DATABASE_URL" -c "SELECT 1;" >/dev/null 2>&1; do
    if [[ ${COUNTER} -eq ${TIMEOUT} ]]; then
        echo "‚ùå Timeout PostgreSQL (${TIMEOUT}s)"
        exit 1
    fi
    sleep 1
    COUNTER=$((COUNTER + 1))
done

echo "‚úÖ PostgreSQL conectado!"

# CORRE√á√ïES ATUALIZADAS - DESENVOLVIMENTO SINCRONIZADO
echo "üîß CORRE√á√ïES ATUALIZADAS: Sincronizando dev-prod e aplicando fixes RDO..."

# Executar corre√ß√£o em bloco √∫nico
psql "$DATABASE_URL" -v ON_ERROR_STOP=1 << 'EOSQL'
DO $$
DECLARE
    column_exists boolean := false;
    user_exists boolean := false;
    servico_count integer := 0;
BEGIN
    -- CORRE√á√ÉO CR√çTICA: Adicionar coluna obra.cliente se n√£o existir
    IF NOT EXISTS (
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'obra' AND column_name = 'cliente'
    ) THEN
        ALTER TABLE obra ADD COLUMN cliente VARCHAR(200);
        RAISE NOTICE '‚úÖ Coluna obra.cliente adicionada';
    ELSE
        RAISE NOTICE '‚úÖ Coluna obra.cliente j√° existe';
    END IF;

    -- 1. Verificar se coluna admin_id existe na tabela servico
    SELECT EXISTS (
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'servico' AND column_name = 'admin_id'
    ) INTO column_exists;
    
    -- 2. Verificar se usu√°rio admin existe
    SELECT EXISTS (
        SELECT id FROM usuario WHERE id = 10
    ) INTO user_exists;
    
    -- 3. Contar servi√ßos existentes
    SELECT COUNT(*) FROM servico INTO servico_count;
    
    RAISE NOTICE 'üîç STATUS INICIAL:';
    RAISE NOTICE '   - Coluna admin_id existe: %', column_exists;
    RAISE NOTICE '   - Usu√°rio admin existe: %', user_exists;
    RAISE NOTICE '   - Total de servi√ßos: %', servico_count;
    
    -- 4. Criar usu√°rio admin se n√£o existir
    IF NOT user_exists THEN
        RAISE NOTICE '1Ô∏è‚É£ Criando usu√°rio admin (ID: 10)...';
        INSERT INTO usuario (
            id, 
            username, 
            email, 
            password_hash, 
            nome, 
            ativo, 
            tipo_usuario, 
            admin_id, 
            created_at
        ) VALUES (
            10,
            'admin_sistema',
            'admin@sistema.local',
            'pbkdf2:sha256:260000$salt$hash_placeholder',
            'Admin Sistema',
            TRUE,
            'admin',
            10,
            NOW()
        );
        RAISE NOTICE '‚úÖ Usu√°rio admin criado com sucesso';
    ELSE
        RAISE NOTICE '‚úÖ Usu√°rio admin j√° existe';
    END IF;
    
    -- 5. Adicionar coluna admin_id se n√£o existir
    IF NOT column_exists THEN
        RAISE NOTICE '2Ô∏è‚É£ Adicionando coluna admin_id na tabela servico...';
        ALTER TABLE servico ADD COLUMN admin_id INTEGER;
        
        RAISE NOTICE '3Ô∏è‚É£ Populando % servi√ßos com admin_id = 10...', servico_count;
        UPDATE servico SET admin_id = 10 WHERE admin_id IS NULL;
        
        RAISE NOTICE '4Ô∏è‚É£ Definindo coluna como NOT NULL...';
        ALTER TABLE servico ALTER COLUMN admin_id SET NOT NULL;
        
        RAISE NOTICE '5Ô∏è‚É£ Adicionando foreign key constraint...';
        ALTER TABLE servico ADD CONSTRAINT fk_servico_admin 
        FOREIGN KEY (admin_id) REFERENCES usuario(id);
        
        RAISE NOTICE '‚úÖ HOTFIX COMPLETADO COM SUCESSO!';
        RAISE NOTICE 'üìä Estrutura da tabela servico atualizada';
    ELSE
        RAISE NOTICE '‚úÖ Coluna admin_id j√° existe - sistema OK';
    END IF;
    
    -- 6. Verifica√ß√£o final
    SELECT COUNT(*) FROM servico WHERE admin_id = 10 INTO servico_count;
    RAISE NOTICE 'üéØ VERIFICA√á√ÉO FINAL: % servi√ßos com admin_id = 10', servico_count;
    
END
$$;
EOSQL

HOTFIX_RESULT=$?

if [ $HOTFIX_RESULT -eq 0 ]; then
    echo "‚úÖ HOTFIX DEFINITIVO EXECUTADO COM SUCESSO!"
    
    # Verifica√ß√£o adicional
    echo "üîç Verifica√ß√£o p√≥s-hotfix..."
    FINAL_COUNT=$(psql "$DATABASE_URL" -t -c "SELECT COUNT(*) FROM information_schema.columns WHERE table_name='servico' AND column_name='admin_id';" 2>/dev/null | xargs)
    
    if [ "$FINAL_COUNT" = "1" ]; then
        echo "‚úÖ SUCESSO CONFIRMADO: Coluna admin_id existe!"
        
        # Testar query que estava falhando
        echo "üß™ Testando query original..."
        psql "$DATABASE_URL" -c "SELECT COUNT(*) as total FROM servico;" >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            echo "‚úÖ QUERY ORIGINAL FUNCIONANDO!"
        else
            echo "‚ö†Ô∏è Query ainda com problemas"
        fi
    else
        echo "‚ùå FALHA: Coluna ainda n√£o existe"
        exit 1
    fi
else
    echo "‚ùå HOTFIX FALHOU - C√≥digo de sa√≠da: $HOTFIX_RESULT"
    exit 1
fi

# Criar diret√≥rio de logs para produ√ß√£o
echo "üìÅ Criando sistema de logs para produ√ß√£o..."
mkdir -p /app/logs
mkdir -p /app/templates/debug
mkdir -p /app/templates/errors
touch /app/logs/production_errors.log
touch /app/logs/production_debug.log
chmod 755 /app/logs
chmod 644 /app/logs/*.log

# Inicializa√ß√£o da aplica√ß√£o
echo "üîß Inicializando aplica√ß√£o SIGE v8.0.1 com sistema de logs..."
python -c "
import sys
sys.path.append('/app')
try:
    from app import app
    print('‚úÖ App Flask carregado com sucesso')
except Exception as e:
    print(f'‚ùå Erro ao carregar app: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
" 2>/dev/null

if [[ $? -ne 0 ]]; then
    echo "‚ùå Falha na inicializa√ß√£o da aplica√ß√£o"
    exit 1
fi

echo "üéØ Sistema SIGE v8.0.1 pronto para uso - SINCRONIZADO!"
echo "üìç URLs de teste: /servicos | /rdo | /dashboard | /funcionarios"
echo "üîß Corre√ß√µes inclu√≠das: RDO continua√ß√£o, mapping IDs, salvamento de subatividades"

# Executar comando principal
exec "$@"