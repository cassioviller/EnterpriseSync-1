#!/usr/bin/env python3
"""
Script para inicializar e executar migra√ß√µes do Flask-Migrate
SIGE v8.0 - Sistema Integrado de Gest√£o Empresarial
"""

import os
import subprocess
import sys
from flask import Flask
from flask_migrate import init, migrate, upgrade
from app import app, db

def run_flask_command(command_args):
    """Executa comando do Flask"""
    env = os.environ.copy()
    env['FLASK_APP'] = 'app.py'
    
    try:
        result = subprocess.run(
            ['flask'] + command_args,
            env=env,
            capture_output=True,
            text=True,
            check=True
        )
        print(f"‚úÖ Comando executado: flask {' '.join(command_args)}")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao executar: flask {' '.join(command_args)}")
        if e.stderr:
            print(f"Erro: {e.stderr}")
        if e.stdout:
            print(f"Output: {e.stdout}")
        return False

def initialize_migrations():
    """Inicializa sistema de migra√ß√µes"""
    print("üöÄ INICIALIZANDO SISTEMA DE MIGRA√á√ïES - SIGE v8.0")
    print("=" * 60)
    
    with app.app_context():
        # Verificar se diret√≥rio migrations existe
        if not os.path.exists('migrations'):
            print("üìÅ Inicializando diret√≥rio de migra√ß√µes...")
            if not run_flask_command(['db', 'init']):
                return False
        else:
            print("‚úÖ Diret√≥rio de migra√ß√µes j√° existe")
        
        # Criar migra√ß√£o inicial
        print("üìã Criando migra√ß√£o inicial...")
        if not run_flask_command(['db', 'migrate', '-m', 'Initial migration']):
            print("‚ö†Ô∏è  Migra√ß√£o pode j√° existir, tentando aplicar...")
        
        # Aplicar migra√ß√µes
        print("üîÑ Aplicando migra√ß√µes ao banco de dados...")
        if run_flask_command(['db', 'upgrade']):
            print("‚úÖ Migra√ß√µes aplicadas com sucesso!")
            return True
        else:
            print("‚ùå Erro ao aplicar migra√ß√µes")
            return False

def create_production_setup():
    """Cria script de setup para produ√ß√£o"""
    setup_script = '''#!/usr/bin/env python3
"""
Script de setup para produ√ß√£o - SIGE v8.0
Execute este arquivo no container de produ√ß√£o
"""

import os
import sys
from werkzeug.security import generate_password_hash
from datetime import datetime, date, time

# Configurar Flask app
os.environ.setdefault('FLASK_APP', 'app.py')

# Importar app e modelos
from app import app, db
from models import *

def setup_production_database():
    """Configura banco de dados para produ√ß√£o"""
    print("üöÄ CONFIGURA√á√ÉO PRODU√á√ÉO - SIGE v8.0")
    print("=" * 50)
    
    with app.app_context():
        try:
            # Aplicar migra√ß√µes
            print("üîÑ Aplicando migra√ß√µes...")
            os.system('flask db upgrade')
            
            # Verificar se super admin existe
            super_admin = Usuario.query.filter_by(tipo_usuario=TipoUsuario.SUPER_ADMIN).first()
            
            if not super_admin:
                print("üëë Criando Super Admin...")
                super_admin = Usuario(
                    nome='Super Administrador',
                    username='admin',
                    email='admin@sige.com',
                    password_hash=generate_password_hash('admin123'),
                    tipo_usuario=TipoUsuario.SUPER_ADMIN,
                    ativo=True
                )
                db.session.add(super_admin)
                db.session.commit()
                print("‚úÖ Super Admin criado: admin@sige.com / admin123")
            else:
                print("‚úÖ Super Admin j√° existe")
            
            # Criar admin demo se n√£o existir
            demo_admin = Usuario.query.filter_by(username='valeverde').first()
            
            if not demo_admin:
                print("üèóÔ∏è Criando Admin Demo...")
                demo_admin = Usuario(
                    nome='Vale Verde Constru√ß√µes',
                    username='valeverde',
                    email='admin@valeverde.com',
                    password_hash=generate_password_hash('admin123'),
                    tipo_usuario=TipoUsuario.ADMIN,
                    ativo=True
                )
                db.session.add(demo_admin)
                db.session.commit()
                print("‚úÖ Admin Demo criado: valeverde / admin123")
            else:
                print("‚úÖ Admin Demo j√° existe")
            
            # Criar dados b√°sicos se necess√°rio
            if Departamento.query.count() == 0:
                print("üìã Criando dados b√°sicos...")
                
                # Departamentos
                departamentos = [
                    Departamento(nome='Administra√ß√£o', descricao='Setor administrativo'),
                    Departamento(nome='Obras', descricao='Execu√ß√£o de obras'),
                    Departamento(nome='Engenharia', descricao='Projetos e planejamento'),
                    Departamento(nome='Manuten√ß√£o', descricao='Manuten√ß√£o de equipamentos')
                ]
                for dept in departamentos:
                    db.session.add(dept)
                
                # Fun√ß√µes
                funcoes = [
                    Funcao(nome='Pedreiro', salario_base=2500.0, descricao='Execu√ß√£o de alvenaria'),
                    Funcao(nome='Servente', salario_base=1800.0, descricao='Aux√≠lio geral'),
                    Funcao(nome='Encarregado', salario_base=3500.0, descricao='Supervis√£o de equipes'),
                    Funcao(nome='Engenheiro', salario_base=8000.0, descricao='Gest√£o t√©cnica')
                ]
                for funcao in funcoes:
                    db.session.add(funcao)
                
                # Hor√°rio padr√£o
                horario = HorarioTrabalho(
                    nome='Padr√£o (7h12-17h)',
                    entrada=time(7, 12),
                    saida_almoco=time(12, 0),
                    retorno_almoco=time(13, 0),
                    saida=time(17, 0),
                    dias_semana='1,2,3,4,5',
                    horas_diarias=8.0,
                    valor_hora=15.0
                )
                db.session.add(horario)
                
                db.session.commit()
                print("‚úÖ Dados b√°sicos criados")
            
            print("\\nüéØ SETUP CONCLU√çDO COM SUCESSO!")
            print("=" * 50)
            print("üîë CREDENCIAIS:")
            print("   Super Admin: admin@sige.com / admin123")
            print("   Admin Demo:  valeverde / admin123")
            print("\\nüìä DADOS:")
            print(f"   ‚Ä¢ {Usuario.query.count()} usu√°rios")
            print(f"   ‚Ä¢ {Departamento.query.count()} departamentos")
            print(f"   ‚Ä¢ {Funcao.query.count()} fun√ß√µes")
            print(f"   ‚Ä¢ {HorarioTrabalho.query.count()} hor√°rios")
            
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            return False
    
    return True

if __name__ == "__main__":
    setup_production_database()
'''
    
    with open('setup_prod.py', 'w', encoding='utf-8') as f:
        f.write(setup_script)
    
    print("‚úÖ Script de produ√ß√£o criado: setup_prod.py")

def main():
    """Fun√ß√£o principal"""
    print("Escolha uma op√ß√£o:")
    print("1. Inicializar migra√ß√µes (desenvolvimento)")
    print("2. Criar script de produ√ß√£o")
    print("3. Executar ambos")
    
    choice = input("Digite sua escolha (1-3): ").strip()
    
    if choice in ['1', '3']:
        if not initialize_migrations():
            sys.exit(1)
    
    if choice in ['2', '3']:
        create_production_setup()
    
    print("\\n‚úÖ Processo conclu√≠do!")

if __name__ == "__main__":
    main()