#!/usr/bin/env python3
"""
Script para popular as obras com servi√ßos associados
"""

from app import app, db
from models import Obra, Servico, ServicoObra

def popular_servicos_obras():
    with app.app_context():
        print("Iniciando popula√ß√£o de servi√ßos nas obras...")
        
        # Buscar todas as obras
        obras = Obra.query.all()
        servicos = Servico.query.filter_by(ativo=True).all()
        
        if not obras:
            print("Nenhuma obra encontrada!")
            return
            
        if not servicos:
            print("Nenhum servi√ßo encontrado!")
            return
            
        print(f"Encontradas {len(obras)} obras e {len(servicos)} servi√ßos")
        
        # Limpar associa√ß√µes existentes
        ServicoObra.query.delete()
        db.session.commit()
        print("Associa√ß√µes existentes removidas")
        
        # Associar servi√ßos √†s obras
        for i, obra in enumerate(obras):
            print(f"\nProcessando obra: {obra.nome}")
            
            if i == 0:  # Primeira obra - Residencial Belo Horizonte
                # Servi√ßos mais comuns para constru√ß√£o residencial
                servicos_obra = [
                    {'servico_nome': 'Funda√ß√£o em Concreto Armado', 'quantidade': 45.0, 'executada': 12.0},
                    {'servico_nome': 'Alvenaria de Blocos Cer√¢micos', 'quantidade': 280.0, 'executada': 75.0},
                    {'servico_nome': 'Estrutura de Concreto Armado', 'quantidade': 35.0, 'executada': 8.0},
                    {'servico_nome': 'Cobertura em Telhas Cer√¢micas', 'quantidade': 150.0, 'executada': 0.0},
                    {'servico_nome': 'Revestimento Cer√¢mico', 'quantidade': 120.0, 'executada': 25.0},
                    {'servico_nome': 'Pintura Interna e Externa', 'quantidade': 300.0, 'executada': 45.0},
                ]
                
            elif i == 1:  # Segunda obra - Pr√©dio Comercial
                # Servi√ßos para constru√ß√£o comercial
                servicos_obra = [
                    {'servico_nome': 'Funda√ß√£o em Concreto Armado', 'quantidade': 80.0, 'executada': 80.0},
                    {'servico_nome': 'Estrutura de Concreto Armado', 'quantidade': 120.0, 'executada': 95.0},
                    {'servico_nome': 'Alvenaria de Blocos Cer√¢micos', 'quantidade': 450.0, 'executada': 350.0},
                    {'servico_nome': 'Instala√ß√µes El√©tricas', 'quantidade': 25.0, 'executada': 18.0},
                    {'servico_nome': 'Instala√ß√µes Hidr√°ulicas', 'quantidade': 30.0, 'executada': 22.0},
                    {'servico_nome': 'Esquadrias de Alum√≠nio', 'quantidade': 45.0, 'executada': 15.0},
                    {'servico_nome': 'Revestimento Cer√¢mico', 'quantidade': 200.0, 'executada': 80.0},
                ]
                
            else:  # Demais obras
                # Servi√ßos variados
                servicos_obra = [
                    {'servico_nome': 'Escava√ß√£o e Terraplanagem', 'quantidade': 180.0, 'executada': 180.0},
                    {'servico_nome': 'Funda√ß√£o em Concreto Armado', 'quantidade': 65.0, 'executada': 40.0},
                    {'servico_nome': 'Alvenaria de Blocos Cer√¢micos', 'quantidade': 320.0, 'executada': 160.0},
                    {'servico_nome': 'Cobertura em Telhas Cer√¢micas', 'quantidade': 180.0, 'executada': 45.0},
                    {'servico_nome': 'Pintura Interna e Externa', 'quantidade': 250.0, 'executada': 0.0},
                ]
            
            # Criar associa√ß√µes
            for servico_data in servicos_obra:
                servico = Servico.query.filter_by(nome=servico_data['servico_nome']).first()
                if servico:
                    servico_obra_obj = ServicoObra(
                        obra_id=obra.id,
                        servico_id=servico.id,
                        quantidade_planejada=servico_data['quantidade'],
                        quantidade_executada=servico_data['executada'],
                        observacoes=f"Servi√ßo associado automaticamente √† obra {obra.nome}",
                        ativo=True
                    )
                    db.session.add(servico_obra_obj)
                    print(f"  ‚úì {servico.nome}: {servico_data['quantidade']} {servico.unidade_simbolo} (executado: {servico_data['executada']})")
                else:
                    print(f"  ‚úó Servi√ßo '{servico_data['servico_nome']}' n√£o encontrado!")
        
        # Salvar mudan√ßas
        db.session.commit()
        print(f"\n‚úÖ Popula√ß√£o conclu√≠da! Todas as obras agora possuem servi√ßos associados.")
        
        # Verificar resultado
        print("\nüìä Resumo das associa√ß√µes:")
        for obra in obras:
            total_servicos = ServicoObra.query.filter_by(obra_id=obra.id, ativo=True).count()
            print(f"  {obra.nome}: {total_servicos} servi√ßos associados")

if __name__ == '__main__':
    popular_servicos_obras()