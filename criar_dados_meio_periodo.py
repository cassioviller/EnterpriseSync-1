#!/usr/bin/env python3
"""
Script para criar dados de teste demonstrando meio per√≠odo/sa√≠da antecipada
"""

from app import app, db
from models import RegistroPonto, Funcionario
from datetime import date, time, datetime, timedelta
import random

def criar_dados_meio_periodo():
    """
    Cria dados de teste para demonstrar a l√≥gica de meio per√≠odo
    """
    with app.app_context():
        # Buscar funcion√°rios ativos
        funcionarios = Funcionario.query.filter_by(ativo=True).limit(3).all()
        
        if not funcionarios:
            print("‚ùå Nenhum funcion√°rio encontrado!")
            return
        
        # Data base para criar os registros (√∫ltimos 5 dias √∫teis)
        hoje = date.today()
        
        # Criar registros variados para demonstrar a l√≥gica
        registros_criados = 0
        
        for funcionario in funcionarios:
            print(f"\nüìã Criando registros para: {funcionario.nome}")
            
            # Registros dos √∫ltimos 5 dias √∫teis
            for i in range(5):
                data_registro = hoje - timedelta(days=i)
                
                # Pular fins de semana
                if data_registro.weekday() >= 5:
                    continue
                
                # Verificar se j√° existe registro para esta data
                registro_existente = RegistroPonto.query.filter_by(
                    funcionario_id=funcionario.id,
                    data=data_registro
                ).first()
                
                if registro_existente:
                    print(f"   ‚ö†Ô∏è  Registro j√° existe para {data_registro.strftime('%d/%m/%Y')}")
                    continue
                
                # Criar diferentes cen√°rios
                cenario = i % 4
                
                if cenario == 0:
                    # CEN√ÅRIO 1: Meio per√≠odo - sa√≠da antecipada (como no exemplo)
                    entrada = time(8, 0)      # 08:00
                    saida = time(14, 30)      # 14:30 (sa√≠da antecipada)
                    almoco_saida = time(12, 0)
                    almoco_retorno = time(13, 0)
                    
                    # Calcular horas trabalhadas
                    entrada_dt = datetime.combine(data_registro, entrada)
                    saida_dt = datetime.combine(data_registro, saida)
                    almoco_total = 1.0  # 1 hora
                    
                    total_minutos = (saida_dt - entrada_dt).total_seconds() / 60
                    horas_trabalhadas = (total_minutos - (almoco_total * 60)) / 60
                    
                    print(f"   ‚úÖ Meio per√≠odo: {entrada.strftime('%H:%M')}-{saida.strftime('%H:%M')} = {horas_trabalhadas:.1f}h")
                    
                elif cenario == 1:
                    # CEN√ÅRIO 2: Atraso
                    entrada = time(8, 45)     # 08:45 (45 min de atraso)
                    saida = time(17, 0)       # 17:00
                    almoco_saida = time(12, 0)
                    almoco_retorno = time(13, 0)
                    
                    # Calcular horas trabalhadas
                    entrada_dt = datetime.combine(data_registro, entrada)
                    saida_dt = datetime.combine(data_registro, saida)
                    almoco_total = 1.0
                    
                    total_minutos = (saida_dt - entrada_dt).total_seconds() / 60
                    horas_trabalhadas = (total_minutos - (almoco_total * 60)) / 60
                    
                    print(f"   ‚è∞ Atraso: {entrada.strftime('%H:%M')}-{saida.strftime('%H:%M')} = {horas_trabalhadas:.1f}h")
                    
                elif cenario == 2:
                    # CEN√ÅRIO 3: Dia normal
                    entrada = time(8, 0)      # 08:00
                    saida = time(17, 0)       # 17:00
                    almoco_saida = time(12, 0)
                    almoco_retorno = time(13, 0)
                    
                    # Calcular horas trabalhadas
                    entrada_dt = datetime.combine(data_registro, entrada)
                    saida_dt = datetime.combine(data_registro, saida)
                    almoco_total = 1.0
                    
                    total_minutos = (saida_dt - entrada_dt).total_seconds() / 60
                    horas_trabalhadas = (total_minutos - (almoco_total * 60)) / 60
                    
                    print(f"   ‚úÖ Normal: {entrada.strftime('%H:%M')}-{saida.strftime('%H:%M')} = {horas_trabalhadas:.1f}h")
                    
                else:
                    # CEN√ÅRIO 4: Falta (sem registro)
                    print(f"   ‚ùå Falta: {data_registro.strftime('%d/%m/%Y')} (sem registro)")
                    continue
                
                # Criar o registro no banco
                novo_registro = RegistroPonto(
                    funcionario_id=funcionario.id,
                    data=data_registro,
                    hora_entrada=entrada,
                    hora_saida=saida,
                    hora_almoco_saida=almoco_saida,
                    hora_almoco_retorno=almoco_retorno,
                    horas_trabalhadas=horas_trabalhadas,
                    horas_extras=max(0, horas_trabalhadas - 8),
                    observacoes=f"Teste - {['Meio per√≠odo', 'Atraso', 'Normal'][cenario]}"
                )
                
                db.session.add(novo_registro)
                registros_criados += 1
        
        # Salvar tudo no banco
        try:
            db.session.commit()
            print(f"\n‚úÖ {registros_criados} registros criados com sucesso!")
            print("\nüìä Exemplos criados:")
            print("   ‚Ä¢ Meio per√≠odo: Funcion√°rio sai 14:30 (1.5h perdidas)")
            print("   ‚Ä¢ Atraso: Funcion√°rio chega 08:45 (45 min atraso)")
            print("   ‚Ä¢ Normal: Funcion√°rio trabalha 08:00-17:00")
            print("   ‚Ä¢ Falta: Dias sem registro")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao salvar: {e}")

def testar_calculo_meio_periodo():
    """
    Testa o c√°lculo de meio per√≠odo com exemplo pr√°tico
    """
    from utils import processar_meio_periodo_exemplo
    
    exemplo = processar_meio_periodo_exemplo()
    
    print("\nüßÆ Exemplo de C√°lculo de Meio Per√≠odo:")
    print(f"   Entrada: {exemplo['entrada']}")
    print(f"   Sa√≠da: {exemplo['saida']}")
    print(f"   Horas Trabalhadas: {exemplo['horas_trabalhadas']:.1f}h")
    print(f"   Horas Perdidas: {exemplo['horas_perdidas']:.1f}h")
    print(f"   Situa√ß√£o: {exemplo['situacao']}")

if __name__ == "__main__":
    print("üöÄ Criando dados de teste para meio per√≠odo...")
    criar_dados_meio_periodo()
    testar_calculo_meio_periodo()
    print("\n‚úÖ Pronto! Agora voc√™ pode visualizar na p√°gina de perfil do funcion√°rio.")