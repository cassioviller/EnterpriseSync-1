# PROMPT: L√≥gica Correta de Heran√ßa de RDO - Sistema de Continuidade

## L√ìGICA DO SISTEMA RDO

### REGRA FUNDAMENTAL:
1. **PRIMEIRA RDO da obra** ‚Üí Todas as subatividades come√ßam com **0%**
2. **PR√ìXIMAS RDOs** ‚Üí Carregam as porcentagens da **√∫ltima RDO** para continuar de onde parou

### OBJETIVO:
O usu√°rio s√≥ preenche o **progresso adicional** do dia, n√£o recome√ßa do zero.

## IMPLEMENTA√á√ÉO CORRETA

### 1. FUN√á√ÉO PRINCIPAL - Detectar Primeira vs. Pr√≥xima RDO

```javascript
function carregarDadosUltimoRDO() {
    const obraId = document.getElementById('obra_id').value;
    
    if (!obraId) {
        alert('Selecione uma obra primeiro');
        return;
    }
    
    console.log('üîç Carregando dados para obra:', obraId);
    
    fetch(`/api/ultimo-rdo-dados/${obraId}`)
        .then(response => response.json())
        .then(data => {
            console.log('üì¶ Dados recebidos:', data);
            
            if (data.success) {
                // L√ìGICA CORRETA: Verificar se √© primeira RDO ou n√£o
                const isPrimeiraRDO = !data.ultimo_rdo || 
                                     !data.ultimo_rdo.id || 
                                     data.ultimo_rdo.numero_rdo === 'PRIMEIRA_RDO';
                
                if (isPrimeiraRDO) {
                    // üÜï PRIMEIRA RDO - Carregar com 0%
                    console.log('üÜï PRIMEIRA RDO da obra - carregando com 0%');
                    exibirFormularioRDO(data.ultimo_rdo, 'primeira');
                    mostrarAlertaPrimeiraRDO(data.ultimo_rdo);
                    
                } else {
                    // üîÑ PR√ìXIMA RDO - Carregar com porcentagens da √∫ltima RDO
                    console.log('üîÑ PR√ìXIMA RDO - carregando porcentagens da √∫ltima RDO:', data.ultimo_rdo.numero_rdo);
                    exibirFormularioRDO(data.ultimo_rdo, 'continuacao');
                    mostrarAlertaContinuacao(data.ultimo_rdo);
                }
            } else {
                console.error('‚ùå Erro na API:', data.error);
                alert('Erro ao carregar dados do √∫ltimo RDO');
            }
        })
        .catch(error => {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            alert('Erro ao conectar com o servidor');
        });
}
```

### 2. FUN√á√ÉO UNIFICADA - Gerar Formul√°rio com Base no Tipo

```javascript
function exibirFormularioRDO(dadosRDO, tipoRDO) {
    console.log(`üéØ Gerando formul√°rio - Tipo: ${tipoRDO}`, dadosRDO);
    
    const container = document.getElementById('servicos-container');
    
    if (!dadosRDO || !dadosRDO.servicos) {
        console.error('‚ùå Dados do RDO inv√°lidos');
        return;
    }
    
    let html = '<div class="servicos-accordion">';
    
    // Gerar formul√°rio para cada servi√ßo
    dadosRDO.servicos.forEach((servico, index) => {
        const servicoId = `servico-${servico.id}`;
        const isExpanded = index === 0; // Primeiro servi√ßo expandido
        
        html += `
        <div class="servico-card mb-3">
            <div class="servico-header" onclick="toggleServico('${servicoId}')">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0">
                            <i class="fas fa-wrench text-primary"></i>
                            ${servico.nome}
                        </h5>
                        <small class="text-muted">${servico.categoria || 'N√£o categorizado'}</small>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-secondary">${servico.subatividades?.length || 0} subatividades</span>
                        <i class="fas fa-chevron-${isExpanded ? 'up' : 'down'}" id="icon-${servicoId}"></i>
                    </div>
                </div>
            </div>
            
            <div class="servico-body ${isExpanded ? '' : 'collapse'}" id="${servicoId}">
                <div class="row subatividades-grid">`;
        
        // Gerar campos edit√°veis para cada subatividade
        if (servico.subatividades && servico.subatividades.length > 0) {
            servico.subatividades.forEach(subatividade => {
                // L√ìGICA PRINCIPAL: Definir percentual inicial
                let percentualInicial;
                let placeholderText;
                let helpText;
                
                if (tipoRDO === 'primeira') {
                    // PRIMEIRA RDO: Sempre 0%
                    percentualInicial = 0;
                    placeholderText = "0";
                    helpText = "Primeira RDO - come√ßar do 0%";
                } else {
                    // PR√ìXIMA RDO: Usar percentual da √∫ltima RDO
                    percentualInicial = subatividade.percentual || 0;
                    placeholderText = percentualInicial.toString();
                    helpText = `√öltima RDO: ${percentualInicial}% - ajustar conforme progresso`;
                }
                
                html += `
                <div class="col-md-6 mb-3">
                    <label class="form-label">
                        ${subatividade.nome}
                        ${tipoRDO === 'continuacao' && percentualInicial > 0 ? 
                          `<span class="badge bg-info ms-2">${percentualInicial}%</span>` : ''}
                    </label>
                    <div class="input-group">
                        <input type="number" 
                               class="form-control" 
                               name="subatividade_${subatividade.id}_percentual"
                               value="${percentualInicial}"
                               min="0" 
                               max="100" 
                               step="0.1"
                               placeholder="${placeholderText}"
                               data-ultima-porcentagem="${percentualInicial}">
                        <span class="input-group-text">%</span>
                    </div>
                    <small class="form-text text-muted">${helpText}</small>
                </div>`;
            });
        } else {
            html += `
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Nenhuma subatividade cadastrada para este servi√ßo.
                </div>
            </div>`;
        }
        
        html += `
                </div>
            </div>
        </div>`;
    });
    
    html += '</div>';
    
    // Atualizar container
    container.innerHTML = html;
    
    console.log(`‚úÖ Formul√°rio ${tipoRDO} gerado com sucesso`);
    
    // Preencher funcion√°rios se for continua√ß√£o
    if (tipoRDO === 'continuacao' && dadosRDO.funcionarios) {
        preencherFuncionariosContinuacao(dadosRDO.funcionarios);
    }
}
```

### 3. ALERTAS INFORMATIVOS

```javascript
function mostrarAlertaPrimeiraRDO(dadosRDO) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-success mb-4';
    alertDiv.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-seedling fa-2x me-3"></i>
            <div>
                <h5 class="alert-heading mb-1">üÜï Primeira RDO da Obra!</h5>
                <p class="mb-0">
                    Servi√ßos carregados com percentual <strong>0%</strong> para in√≠cio dos trabalhos.<br>
                    <small class="text-muted">
                        Total: ${dadosRDO.servicos?.length || 0} servi√ßos | 
                        ${dadosRDO.total_subatividades || 0} subatividades
                    </small>
                </p>
            </div>
        </div>
    `;
    
    const container = document.getElementById('servicos-container');
    container.insertBefore(alertDiv, container.firstChild);
}

function mostrarAlertaContinuacao(ultimoRDO) {
    const alertDiv = document.createElement('div');
    alertDiv.className = 'alert alert-info mb-4';
    alertDiv.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="fas fa-history fa-2x me-3"></i>
            <div>
                <h5 class="alert-heading mb-1">üîÑ Continua√ß√£o dos Trabalhos</h5>
                <p class="mb-0">
                    Dados carregados do <strong>${ultimoRDO.numero_rdo}</strong> (${ultimoRDO.data_relatorio}).<br>
                    <small class="text-muted">
                        Ajuste as porcentagens conforme o progresso de hoje. 
                        Valores atuais representam o progresso at√© a √∫ltima RDO.
                    </small>
                </p>
            </div>
        </div>
    `;
    
    const container = document.getElementById('servicos-container');
    container.insertBefore(alertDiv, container.firstChild);
}
```

### 4. PREENCHER FUNCION√ÅRIOS DE CONTINUA√á√ÉO

```javascript
function preencherFuncionariosContinuacao(funcionarios) {
    console.log('üë• Preenchendo funcion√°rios da √∫ltima RDO:', funcionarios);
    
    funcionarios.forEach(funcionario => {
        // Buscar funcion√°rio na lista e marcar como selecionado
        const funcionarioElement = document.querySelector(`[data-funcionario-id="${funcionario.id}"]`);
        
        if (funcionarioElement) {
            // Marcar checkbox
            const checkbox = funcionarioElement.querySelector('input[type="checkbox"]');
            if (checkbox) {
                checkbox.checked = true;
            }
            
            // Preencher horas trabalhadas
            const horasInput = funcionarioElement.querySelector('input[name*="_horas"]');
            if (horasInput) {
                horasInput.value = funcionario.horas_trabalhadas || 8.0;
            }
            
            console.log(`‚úÖ Funcion√°rio ${funcionario.nome} pr√©-selecionado com ${funcionario.horas_trabalhadas}h`);
        }
    });
}
```

### 5. CORRE√á√ÉO NA API BACKEND

**Garantir que a API retorna os dados corretos:**

```python
@rdo_bp.route('/api/ultimo-rdo-dados/<int:obra_id>')
def api_ultimo_rdo_dados(obra_id):
    try:
        admin_id = obter_admin_id()
        
        # Buscar √∫ltimo RDO da obra
        ultimo_rdo = obter_ultimo_rdo_obra(obra_id, date.today(), admin_id)
        
        if not ultimo_rdo:
            # PRIMEIRA RDO: Carregar servi√ßos com 0%
            servicos_obra = obter_servicos_obra(obra_id, admin_id)
            
            servicos_dados = []
            for servico in servicos_obra:
                subatividades = obter_subatividades_servico(servico.id, admin_id)
                
                servico_data = {
                    'id': servico.id,
                    'nome': servico.nome,
                    'categoria': servico.categoria or 'N√£o categorizado',
                    'subatividades': [
                        {
                            'id': sub.id,
                            'nome': sub.nome,
                            'percentual': 0,  # PRIMEIRA RDO = 0%
                            'descricao': sub.descricao
                        } for sub in subatividades
                    ]
                }
                servicos_dados.append(servico_data)
            
            return jsonify({
                'success': True,
                'ultimo_rdo': {
                    'id': None,
                    'numero_rdo': 'PRIMEIRA_RDO',
                    'data_relatorio': date.today().strftime('%Y-%m-%d'),
                    'servicos': servicos_dados,
                    'funcionarios': [],
                    'total_servicos': len(servicos_dados),
                    'total_subatividades': sum(len(s['subatividades']) for s in servicos_dados)
                }
            })
        
        else:
            # PR√ìXIMA RDO: Carregar com porcentagens da √∫ltima RDO
            servicos_dados = carregar_servicos_ultimo_rdo(ultimo_rdo)
            funcionarios_dados = carregar_funcionarios_ultimo_rdo(ultimo_rdo)
            
            return jsonify({
                'success': True,
                'ultimo_rdo': {
                    'id': ultimo_rdo.id,
                    'numero_rdo': ultimo_rdo.numero_rdo,
                    'data_relatorio': ultimo_rdo.data_relatorio.strftime('%Y-%m-%d'),
                    'servicos': servicos_dados,
                    'funcionarios': funcionarios_dados,
                    'total_servicos': len(servicos_dados),
                    'total_funcionarios': len(funcionarios_dados)
                }
            })
            
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500
```

## FLUXO COMPLETO DO SISTEMA

### CEN√ÅRIO 1: PRIMEIRA RDO
1. Usu√°rio clica "Testar √öltimo RDO"
2. Sistema detecta que n√£o h√° RDO anterior
3. Carrega todos os servi√ßos da obra com **0%**
4. Mostra alert: "üÜï Primeira RDO da Obra!"
5. Usu√°rio preenche o progresso inicial

### CEN√ÅRIO 2: PR√ìXIMA RDO
1. Usu√°rio clica "Testar √öltimo RDO"
2. Sistema encontra RDO anterior (ex: RDO-2025-001)
3. Carrega porcentagens da √∫ltima RDO (ex: Pintura 25%, Estrutura 80%)
4. Mostra alert: "üîÑ Continua√ß√£o dos Trabalhos - RDO-2025-001"
5. Usu√°rio ajusta apenas o progresso adicional do dia

## RESULTADO FINAL

‚úÖ **Primeira RDO:** Formul√°rio com 0% em todas as subatividades
‚úÖ **Pr√≥ximas RDOs:** Formul√°rio com porcentagens da √∫ltima RDO
‚úÖ **Continuidade:** Usu√°rio s√≥ preenche o progresso adicional
‚úÖ **Funcion√°rios:** Pr√©-selecionados da √∫ltima RDO (se houver)
‚úÖ **Interface Clara:** Alertas explicam qual situa√ß√£o est√° sendo exibida

O sistema agora funciona como um verdadeiro acompanhamento de obra, onde cada RDO continua de onde a anterior parou!
