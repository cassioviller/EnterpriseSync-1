# üîß PROMPT PARA CORRE√á√ÉO ESPEC√çFICA - Sistema SIGE v8.0

## üéØ MISS√ÉO CR√çTICA

Voc√™ √© um especialista DevOps/Flask respons√°vel por corrigir URGENTEMENTE um sistema em produ√ß√£o que est√° falhando devido a problemas de migra√ß√£o de banco de dados. O sistema SIGE v8.0 est√° deployado via Docker no EasyPanel e apresenta erro cr√≠tico que impede o funcionamento.

## üìã CONTEXTO ESPEC√çFICO DO PROBLEMA

### **Sistema Afetado:**
- **Nome**: SIGE v8.0 (Sistema Integrado de Gest√£o Empresarial)
- **Stack**: Flask + SQLAlchemy + PostgreSQL
- **Deploy**: Docker no EasyPanel
- **URL Produ√ß√£o**: https://www.sige.cassioviller.tech/servicos
- **Status**: üî¥ CR√çTICO - Sistema inacess√≠vel

### **Erro Principal:**
```
psycopg2.errors.UndefinedColumn: column servico.admin_id does not exist
LINE 1: ...servico.ativo AS servico_ativo, servico.admin_id AS servico_admin_id...
```

### **Problemas Identificados:**
1. **Migra√ß√£o Falhada**: Coluna `admin_id` n√£o existe na tabela `servico` em produ√ß√£o
2. **Foreign Key Error**: Tentativa de criar FK para usu√°rio inexistente (admin_id=10)
3. **Conex√£o PostgreSQL**: Problemas de socket durante migra√ß√µes
4. **Deploy Process**: Migra√ß√µes n√£o executam corretamente no container

## üîç AN√ÅLISE T√âCNICA OBRIGAT√ìRIA

### **1. VERIFICA√á√ÉO DO ESTADO ATUAL**

Execute estas queries para diagnosticar o estado exato:

```sql
-- 1. Verificar se tabela servico existe
SELECT table_name FROM information_schema.tables 
WHERE table_schema = 'public' AND table_name = 'servico';

-- 2. Verificar colunas existentes na tabela servico
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns 
WHERE table_name = 'servico' 
ORDER BY ordinal_position;

-- 3. Verificar se usu√°rio admin padr√£o existe
SELECT id, nome, email FROM usuario WHERE id = 10;

-- 4. Contar registros na tabela servico
SELECT COUNT(*) as total_servicos FROM servico;

-- 5. Verificar constraints existentes
SELECT constraint_name, constraint_type 
FROM information_schema.table_constraints 
WHERE table_name = 'servico';
```

### **2. AN√ÅLISE DO DOCKERFILE**

O Dockerfile est√° configurado corretamente com:
- Script de entrypoint: `docker-entrypoint-production-fix.sh`
- PostgreSQL client instalado
- Vari√°veis de ambiente corretas
- Health check configurado

**PROBLEMA**: O script de migra√ß√£o pode estar falhando silenciosamente.

### **3. AN√ÅLISE DO MAIN.PY**

O arquivo main.py mostra:
- Sistema de migra√ß√£o autom√°tica implementado
- Configura√ß√£o de banco correta para EasyPanel
- Tentativa de executar `executar_migracoes()` no contexto da aplica√ß√£o

**PROBLEMA**: Migra√ß√µes executam ap√≥s `db.create_all()` mas podem falhar devido a depend√™ncias.

## üö® CORRE√á√ÉO URGENTE NECESS√ÅRIA

### **ETAPA 1: HOTFIX IMEDIATO**

Crie um script SQL robusto para execu√ß√£o manual:

```sql
-- HOTFIX SIGE v8.0 - Corre√ß√£o admin_id
-- Execute este script diretamente no PostgreSQL

BEGIN;

-- 1. Verificar e criar usu√°rio admin padr√£o se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM usuario WHERE id = 10) THEN
        INSERT INTO usuario (id, nome, email, senha_hash, ativo, admin_id, created_at, updated_at)
        VALUES (10, 'Admin Sistema', 'admin@sistema.local', 'hash_temporario', true, 10, NOW(), NOW());
        RAISE NOTICE '‚úÖ Usu√°rio admin padr√£o criado (ID: 10)';
    ELSE
        RAISE NOTICE '‚úÖ Usu√°rio admin j√° existe (ID: 10)';
    END IF;
END
$$;

-- 2. Verificar e adicionar coluna admin_id se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'servico' AND column_name = 'admin_id'
    ) THEN
        -- Adicionar coluna
        ALTER TABLE servico ADD COLUMN admin_id INTEGER;
        RAISE NOTICE '‚úÖ Coluna admin_id adicionada';
        
        -- Popular com valor padr√£o
        UPDATE servico SET admin_id = 10 WHERE admin_id IS NULL;
        RAISE NOTICE '‚úÖ Dados populados com admin_id = 10';
        
        -- Adicionar constraint NOT NULL
        ALTER TABLE servico ALTER COLUMN admin_id SET NOT NULL;
        RAISE NOTICE '‚úÖ Constraint NOT NULL adicionada';
        
        -- Adicionar foreign key
        ALTER TABLE servico ADD CONSTRAINT fk_servico_admin 
        FOREIGN KEY (admin_id) REFERENCES usuario(id);
        RAISE NOTICE '‚úÖ Foreign key constraint adicionada';
        
    ELSE
        RAISE NOTICE '‚úÖ Coluna admin_id j√° existe';
    END IF;
END
$$;

-- 3. Verificar resultado final
SELECT 
    COUNT(*) as total_servicos,
    COUNT(admin_id) as servicos_com_admin,
    MIN(admin_id) as min_admin_id,
    MAX(admin_id) as max_admin_id
FROM servico;

COMMIT;

-- Mensagem final
SELECT 'üéØ HOTFIX SIGE v8.0 CONCLU√çDO COM SUCESSO!' as status;
```

### **ETAPA 2: CORRE√á√ÉO DO SCRIPT DE ENTRYPOINT**

Modifique o `docker-entrypoint-production-fix.sh`:

```bash
#!/bin/bash
set -e

echo "üö® SIGE v8.0 - Iniciando corre√ß√£o de produ√ß√£o..."

# Verificar DATABASE_URL
if [ -z "$DATABASE_URL" ]; then
    echo "‚ùå DATABASE_URL n√£o definida"
    exit 1
fi

echo "üìç DATABASE_URL detectado: ${DATABASE_URL%:*}:****"

# Aguardar PostgreSQL estar dispon√≠vel
echo "‚è≥ Aguardando PostgreSQL..."
until pg_isready -d "$DATABASE_URL" -q; do
    echo "‚è≥ PostgreSQL n√£o dispon√≠vel, aguardando..."
    sleep 2
done
echo "‚úÖ PostgreSQL dispon√≠vel"

# Executar HOTFIX cr√≠tico
echo "üîß EXECUTANDO HOTFIX CR√çTICO..."
psql "$DATABASE_URL" -v ON_ERROR_STOP=1 << 'EOSQL'
-- HOTFIX SIGE v8.0
BEGIN;

-- Criar usu√°rio admin se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM usuario WHERE id = 10) THEN
        INSERT INTO usuario (id, nome, email, senha_hash, ativo, admin_id, created_at, updated_at)
        VALUES (10, 'Admin Sistema', 'admin@sistema.local', 'hash_temporario', true, 10, NOW(), NOW());
        RAISE NOTICE '‚úÖ Usu√°rio admin criado';
    END IF;
END
$$;

-- Adicionar coluna admin_id se n√£o existir
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'servico' AND column_name = 'admin_id'
    ) THEN
        ALTER TABLE servico ADD COLUMN admin_id INTEGER;
        UPDATE servico SET admin_id = 10 WHERE admin_id IS NULL;
        ALTER TABLE servico ALTER COLUMN admin_id SET NOT NULL;
        ALTER TABLE servico ADD CONSTRAINT fk_servico_admin 
        FOREIGN KEY (admin_id) REFERENCES usuario(id);
        RAISE NOTICE '‚úÖ HOTFIX admin_id aplicado';
    ELSE
        RAISE NOTICE '‚úÖ admin_id j√° existe';
    END IF;
END
$$;

COMMIT;
EOSQL

if [ $? -eq 0 ]; then
    echo "‚úÖ HOTFIX EXECUTADO COM SUCESSO"
else
    echo "‚ùå HOTFIX FALHOU - Tentando m√©todo alternativo..."
    # M√©todo alternativo mais simples
    psql "$DATABASE_URL" -c "ALTER TABLE servico ADD COLUMN IF NOT EXISTS admin_id INTEGER DEFAULT 10;" || true
    psql "$DATABASE_URL" -c "UPDATE servico SET admin_id = 10 WHERE admin_id IS NULL;" || true
    echo "‚ö†Ô∏è M√©todo alternativo executado"
fi

# Executar aplica√ß√£o
echo "üöÄ Iniciando aplica√ß√£o SIGE v8.0..."
exec "$@"
```

### **ETAPA 3: VALIDA√á√ÉO P√ìS-CORRE√á√ÉO**

Ap√≥s aplicar a corre√ß√£o, execute estas verifica√ß√µes:

```sql
-- 1. Verificar estrutura da tabela
\d servico

-- 2. Verificar dados
SELECT id, nome, admin_id FROM servico LIMIT 5;

-- 3. Verificar constraints
SELECT constraint_name, constraint_type 
FROM information_schema.table_constraints 
WHERE table_name = 'servico' AND constraint_type = 'FOREIGN KEY';

-- 4. Testar query que estava falhando
SELECT servico.id, servico.nome, servico.admin_id 
FROM servico 
ORDER BY servico.categoria, servico.nome 
LIMIT 3;
```

## üéØ PLANO DE EXECU√á√ÉO IMEDIATO

### **PASSO 1: Acesso ao Banco**
```bash
# Conectar diretamente ao PostgreSQL do container
docker exec -it <container_name> psql $DATABASE_URL
```

### **PASSO 2: Executar Hotfix**
- Copie e execute o script SQL da ETAPA 1
- Verifique cada mensagem de NOTICE
- Confirme que n√£o h√° erros

### **PASSO 3: Redeploy**
- Atualize o script de entrypoint
- Fa√ßa redeploy no EasyPanel
- Monitore logs de inicializa√ß√£o

### **PASSO 4: Teste Funcional**
- Acesse: https://www.sige.cassioviller.tech/servicos
- Verifique se p√°gina carrega sem erro
- Teste cria√ß√£o/edi√ß√£o de servi√ßos

## üîç MONITORAMENTO P√ìS-CORRE√á√ÉO

### **Logs a Monitorar:**
```bash
# Logs do container
docker logs <container_name> -f

# Logs espec√≠ficos do PostgreSQL
docker exec <container_name> tail -f /var/log/postgresql/postgresql.log
```

### **Queries de Monitoramento:**
```sql
-- Verificar integridade dos dados
SELECT 
    COUNT(*) as total_servicos,
    COUNT(DISTINCT admin_id) as admins_distintos,
    MIN(created_at) as primeiro_servico,
    MAX(updated_at) as ultima_atualizacao
FROM servico;

-- Verificar foreign keys
SELECT 
    s.id, s.nome, s.admin_id, u.nome as admin_nome
FROM servico s
LEFT JOIN usuario u ON s.admin_id = u.id
WHERE u.id IS NULL; -- Deve retornar 0 registros
```

## üö® CRIT√âRIOS DE SUCESSO

### **Corre√ß√£o Bem-Sucedida Quando:**
1. ‚úÖ URL `/servicos` carrega sem erro 500
2. ‚úÖ Query `SELECT * FROM servico` executa sem erro
3. ‚úÖ Coluna `admin_id` existe e tem dados v√°lidos
4. ‚úÖ Foreign key constraint funciona corretamente
5. ‚úÖ Sistema permite criar/editar servi√ßos

### **Rollback Necess√°rio Se:**
1. ‚ùå Aplica√ß√£o n√£o inicia ap√≥s corre√ß√£o
2. ‚ùå Dados corrompidos ou perdidos
3. ‚ùå Performance degradada significativamente
4. ‚ùå Outros m√≥dulos param de funcionar

## üìû ENTREG√ÅVEIS ESPERADOS

1. **Relat√≥rio de Execu√ß√£o** com cada passo documentado
2. **Screenshots** da URL funcionando
3. **Logs de Sucesso** do hotfix
4. **Backup** do estado anterior (se poss√≠vel)
5. **Plano de Preven√ß√£o** para evitar recorr√™ncia

---

**‚ö†Ô∏è ATEN√á√ÉO CR√çTICA**: Este √© um sistema em produ√ß√£o. Execute cada passo com cuidado, documente tudo e tenha plano de rollback pronto. O objetivo √© restaurar o funcionamento com m√≠nimo downtime e m√°xima seguran√ßa dos dados.



## üìã ATUALIZA√á√ÉO CR√çTICA - An√°lise do Script Atual

### **SCRIPT ENTRYPOINT ATUAL ANALISADO**

O arquivo `docker-entrypoint-production-fix.sh` j√° possui implementa√ß√£o de hotfix, mas apresenta problemas:

#### **‚úÖ PONTOS POSITIVOS:**
- Timeout configurado para PostgreSQL (20s)
- Verifica√ß√£o condicional de coluna existente
- M√©todo fallback implementado
- Logs informativos com emojis
- Estrutura DO $$ correta

#### **‚ùå PROBLEMAS IDENTIFICADOS:**

1. **Erro na Cria√ß√£o de Usu√°rio:**
```sql
INSERT INTO usuario (id, username, email, nome, password_hash, tipo_usuario, ativo) 
VALUES (10, 'admin_producao', 'admin@producao.com', 'Admin Produ√ß√£o', 
        'scrypt:32768:8:1$password_hash', 'tipo_usuario', TRUE);
```
**PROBLEMA**: Campo `username` pode n√£o existir na tabela `usuario`
**PROBLEMA**: Campo `tipo_usuario` pode n√£o existir
**PROBLEMA**: Hash de senha inv√°lido

2. **Inconsist√™ncia de Campos:**
- Script usa `username` mas modelo pode usar `email` como login
- Campo `tipo_usuario` pode n√£o existir no modelo atual
- Estrutura da tabela `usuario` n√£o verificada

3. **Falta de Verifica√ß√£o de Schema:**
- N√£o verifica estrutura real da tabela `usuario`
- Assume campos que podem n√£o existir

### **CORRE√á√ÉO URGENTE DO SCRIPT**

Substitua o bloco de cria√ß√£o de usu√°rio por:

```sql
-- 2. Verificar/criar usu√°rio admin padr√£o (CORRIGIDO)
SELECT EXISTS (SELECT id FROM usuario WHERE id = 10) INTO user_exists;
IF NOT user_exists THEN
    RAISE NOTICE '2Ô∏è‚É£ Criando usu√°rio admin padr√£o...';
    
    -- Verificar estrutura real da tabela usuario
    IF EXISTS (SELECT column_name FROM information_schema.columns 
               WHERE table_name = 'usuario' AND column_name = 'username') THEN
        -- Tabela tem campo username
        INSERT INTO usuario (id, username, email, nome, senha_hash, ativo, admin_id, created_at, updated_at) 
        VALUES (10, 'admin_sistema', 'admin@sistema.local', 'Admin Sistema', 
                'pbkdf2:sha256:260000$salt$hash', TRUE, 10, NOW(), NOW());
    ELSE
        -- Tabela usa apenas email (mais comum em Flask)
        INSERT INTO usuario (id, email, nome, senha_hash, ativo, admin_id, created_at, updated_at) 
        VALUES (10, 'admin@sistema.local', 'Admin Sistema', 
                'pbkdf2:sha256:260000$salt$hash', TRUE, 10, NOW(), NOW());
    END IF;
ELSE
    RAISE NOTICE '2Ô∏è‚É£ Usu√°rio admin_id=10 j√° existe';
END IF;
```

### **SCRIPT CORRIGIDO COMPLETO**

```bash
#!/bin/bash
# DOCKER ENTRYPOINT PRODUCTION FIX - SIGE v8.0 CORRIGIDO
set -e

echo "üöÄ SIGE v8.0 - Iniciando (Production Fix v2.1 - CORRIGIDO)"

# Aguardar PostgreSQL
echo "‚è≥ Verificando PostgreSQL..."
DB_HOST="${DATABASE_HOST:-viajey_sige}"
DB_PORT="${DATABASE_PORT:-5432}"
DB_USER="${DATABASE_USER:-sige}"

TIMEOUT=30
COUNTER=0

until pg_isready -h "${DB_HOST}" -p "${DB_PORT}" -U "${DB_USER}" >/dev/null 2>&1; do
    if [[ ${COUNTER} -eq ${TIMEOUT} ]]; then
        echo "‚ùå Timeout PostgreSQL (${TIMEOUT}s)"
        exit 1
    fi
    sleep 1
    COUNTER=$((COUNTER + 1))
done

echo "‚úÖ PostgreSQL conectado!"

# HOTFIX CR√çTICO CORRIGIDO
if [ -n "$DATABASE_URL" ]; then
    echo "üö® EXECUTANDO HOTFIX CORRIGIDO..."
    
    psql "$DATABASE_URL" -v ON_ERROR_STOP=1 << 'EOSQL'
DO $$
DECLARE
    column_exists boolean := false;
    user_exists boolean := false;
    has_username boolean := false;
    has_tipo_usuario boolean := false;
BEGIN
    -- Verificar se coluna admin_id existe
    SELECT EXISTS (
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'servico' AND column_name = 'admin_id'
    ) INTO column_exists;
    
    -- Verificar estrutura da tabela usuario
    SELECT EXISTS (
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'usuario' AND column_name = 'username'
    ) INTO has_username;
    
    SELECT EXISTS (
        SELECT column_name FROM information_schema.columns 
        WHERE table_name = 'usuario' AND column_name = 'tipo_usuario'
    ) INTO has_tipo_usuario;
    
    IF NOT column_exists THEN
        RAISE NOTICE 'üö® APLICANDO HOTFIX CORRIGIDO...';
        
        -- 1. Verificar/criar usu√°rio admin PRIMEIRO
        SELECT EXISTS (SELECT id FROM usuario WHERE id = 10) INTO user_exists;
        IF NOT user_exists THEN
            RAISE NOTICE '1Ô∏è‚É£ Criando usu√°rio admin (estrutura verificada)...';
            
            IF has_username AND has_tipo_usuario THEN
                INSERT INTO usuario (id, username, email, nome, senha_hash, tipo_usuario, ativo, admin_id, created_at, updated_at) 
                VALUES (10, 'admin_sistema', 'admin@sistema.local', 'Admin Sistema', 
                        'pbkdf2:sha256:260000$salt$hash', 'admin', TRUE, 10, NOW(), NOW());
            ELSIF has_username THEN
                INSERT INTO usuario (id, username, email, nome, senha_hash, ativo, admin_id, created_at, updated_at) 
                VALUES (10, 'admin_sistema', 'admin@sistema.local', 'Admin Sistema', 
                        'pbkdf2:sha256:260000$salt$hash', TRUE, 10, NOW(), NOW());
            ELSE
                INSERT INTO usuario (id, email, nome, senha_hash, ativo, admin_id, created_at, updated_at) 
                VALUES (10, 'admin@sistema.local', 'Admin Sistema', 
                        'pbkdf2:sha256:260000$salt$hash', TRUE, 10, NOW(), NOW());
            END IF;
        END IF;
        
        -- 2. Adicionar coluna admin_id
        RAISE NOTICE '2Ô∏è‚É£ Adicionando coluna admin_id...';
        ALTER TABLE servico ADD COLUMN admin_id INTEGER;
        
        -- 3. Popular dados
        RAISE NOTICE '3Ô∏è‚É£ Populando dados...';
        UPDATE servico SET admin_id = 10;
        
        -- 4. Adicionar constraints
        RAISE NOTICE '4Ô∏è‚É£ Adicionando constraints...';
        ALTER TABLE servico ALTER COLUMN admin_id SET NOT NULL;
        ALTER TABLE servico ADD CONSTRAINT fk_servico_admin 
        FOREIGN KEY (admin_id) REFERENCES usuario(id);
        
        RAISE NOTICE '‚úÖ HOTFIX CORRIGIDO APLICADO COM SUCESSO!';
    ELSE
        RAISE NOTICE '‚úÖ admin_id j√° existe - sistema OK';
    END IF;
END
$$;
EOSQL

    if [ $? -eq 0 ]; then
        echo "‚úÖ HOTFIX CORRIGIDO EXECUTADO!"
    else
        echo "‚ùå HOTFIX FALHOU - Verificar logs acima"
        exit 1
    fi
fi

echo "üéØ Iniciando aplica√ß√£o..."
exec "$@"
```

### **VERIFICA√á√ÉO OBRIGAT√ìRIA ANTES DO DEPLOY**

Execute estas queries para verificar a estrutura real:

```sql
-- 1. Verificar estrutura da tabela usuario
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'usuario' 
ORDER BY ordinal_position;

-- 2. Verificar se usu√°rio admin existe
SELECT id, email, nome FROM usuario WHERE id = 10;

-- 3. Verificar estrutura da tabela servico
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'servico' 
ORDER BY ordinal_position;
```

### **PLANO DE DEPLOY CORRIGIDO**

1. **Backup do Script Atual:**
```bash
cp docker-entrypoint-production-fix.sh docker-entrypoint-backup.sh
```

2. **Aplicar Script Corrigido:**
- Substitua o script atual pelo corrigido
- Verifique permiss√µes de execu√ß√£o

3. **Deploy no EasyPanel:**
- Fa√ßa redeploy completo
- Monitore logs em tempo real

4. **Valida√ß√£o Imediata:**
- Teste URL: `/servicos`
- Verifique logs de sucesso
- Confirme funcionamento

### **LOGS ESPERADOS DE SUCESSO:**

```
üöÄ SIGE v8.0 - Iniciando (Production Fix v2.1 - CORRIGIDO)
‚è≥ Verificando PostgreSQL...
‚úÖ PostgreSQL conectado!
üö® EXECUTANDO HOTFIX CORRIGIDO...
NOTICE: üö® APLICANDO HOTFIX CORRIGIDO...
NOTICE: 1Ô∏è‚É£ Criando usu√°rio admin (estrutura verificada)...
NOTICE: 2Ô∏è‚É£ Adicionando coluna admin_id...
NOTICE: 3Ô∏è‚É£ Populando dados...
NOTICE: 4Ô∏è‚É£ Adicionando constraints...
NOTICE: ‚úÖ HOTFIX CORRIGIDO APLICADO COM SUCESSO!
‚úÖ HOTFIX CORRIGIDO EXECUTADO!
üéØ Iniciando aplica√ß√£o...
```

---

**üö® A√á√ÉO IMEDIATA NECESS√ÅRIA**: O script atual tem bugs que impedem o funcionamento. Use a vers√£o corrigida acima para resolver definitivamente o problema.

