# üéØ PROMPT: CORRE√á√ÉO DSR NO RELAT√ìRIO DE EXPORTA√á√ÉO

## üìã **PROBLEMA IDENTIFICADO**
O relat√≥rio de exporta√ß√£o est√° separando corretamente "Faltas Injustificadas" e "DSR Perdido", mas o c√°lculo do DSR est√° incorreto:

**‚ùå SITUA√á√ÉO ATUAL:**
- Faltas Injustificadas: 1 dia = R$ 163,64 ‚úÖ
- DSR Perdido: 0 semana(s) = R$ 0,00 ‚ùå (deveria ser 1 semana)

**‚úÖ SITUA√á√ÉO ESPERADA:**
- Faltas Injustificadas: 1 dia = R$ 163,64
- DSR Perdido: 1 semana(s) = R$ 163,64

---

## üîß **ETAPA 1: LOCALIZAR FUN√á√ÉO DE EXPORTA√á√ÉO**

```python
# 1. Encontrar e analisar fun√ß√£o de exporta√ß√£o atual
def analisar_funcao_exportacao():
    """Analisa fun√ß√£o atual de exporta√ß√£o de relat√≥rios"""
    
    print("üîç ANALISANDO FUN√á√ÉO DE EXPORTA√á√ÉO...")
    
    # Procurar por arquivos relacionados a exporta√ß√£o/relat√≥rios
    import os
    import re
    
    arquivos_relatorio = []
    
    # Buscar arquivos que podem conter a fun√ß√£o
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if any(termo in content.lower() for termo in ['export', 'relatorio', 'dsr', 'falta']):
                            arquivos_relatorio.append(filepath)
                except:
                    pass
    
    print("üìä ARQUIVOS RELACIONADOS A RELAT√ìRIOS:")
    for arquivo in arquivos_relatorio:
        print(f"   - {arquivo}")
    
    # Procurar fun√ß√£o espec√≠fica de c√°lculo de DSR
    for arquivo in arquivos_relatorio:
        print(f"\nüîç ANALISANDO: {arquivo}")
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for i, line in enumerate(lines, 1):
                    if 'dsr' in line.lower() and ('def ' in line or 'class ' in line):
                        print(f"   Linha {i}: {line.strip()}")
        except:
            print(f"   ‚ùå Erro ao ler arquivo")
    
    return arquivos_relatorio

# EXECUTAR AN√ÅLISE
arquivos_encontrados = analisar_funcao_exportacao()
```

---

## üîß **ETAPA 2: CORRIGIR C√ÅLCULO DE DSR**

```python
# 2. Fun√ß√£o corrigida para c√°lculo de DSR no relat√≥rio
def calcular_indicadores_financeiros_corrigido(funcionario_id, data_inicio, data_fim):
    """
    Calcula indicadores financeiros com DSR correto para exporta√ß√£o
    """
    from app import app, db
    from models import Funcionario, RegistroPonto
    from datetime import datetime, timedelta
    
    with app.app_context():
        funcionario = Funcionario.query.get(funcionario_id)
        
        # Buscar faltas injustificadas
        faltas_injustificadas = RegistroPonto.query.filter(
            RegistroPonto.funcionario_id == funcionario_id,
            RegistroPonto.data.between(data_inicio, data_fim),
            RegistroPonto.tipo_registro == 'falta'
        ).all()
        
        # Buscar faltas justificadas
        faltas_justificadas = RegistroPonto.query.filter(
            RegistroPonto.funcionario_id == funcionario_id,
            RegistroPonto.data.between(data_inicio, data_fim),
            RegistroPonto.tipo_registro == 'falta_justificada'
        ).all()
        
        # Calcular DSR perdido usando l√≥gica estrita
        dsr_info = calcular_dsr_estrito(funcionario_id, data_inicio, data_fim)
        
        # Valores financeiros
        valor_dia = funcionario.salario / 30
        
        # Horas extras (manter c√°lculo existente)
        horas_extras = calcular_horas_extras_periodo(funcionario_id, data_inicio, data_fim)
        
        # Montar indicadores corrigidos
        indicadores = {
            'horas_extras': {
                'quantidade': f"{horas_extras['total_horas']:.1f}h",
                'valor_unitario': horas_extras['valor_hora_extra'],
                'valor_total': horas_extras['custo_total']
            },
            'faltas_injustificadas': {
                'quantidade': f"{len(faltas_injustificadas)} dia(s)",
                'valor_unitario': valor_dia,
                'valor_total': len(faltas_injustificadas) * valor_dia
            },
            'faltas_justificadas': {
                'quantidade': f"{len(faltas_justificadas)} dia(s)",
                'valor_unitario': valor_dia,
                'valor_total': 0.0  # Faltas justificadas n√£o descontam
            },
            'dsr_perdido': {
                'quantidade': f"{dsr_info['dsrs_perdidos']} semana(s)",
                'valor_unitario': valor_dia,
                'valor_total': dsr_info['dsrs_perdidos'] * valor_dia
            }
        }
        
        print(f"üìä INDICADORES CORRIGIDOS - {funcionario.nome}:")
        print(f"   - Faltas injustificadas: {len(faltas_injustificadas)} dia(s) = R$ {indicadores['faltas_injustificadas']['valor_total']:.2f}")
        print(f"   - Faltas justificadas: {len(faltas_justificadas)} dia(s) = R$ {indicadores['faltas_justificadas']['valor_total']:.2f}")
        print(f"   - DSR perdido: {dsr_info['dsrs_perdidos']} semana(s) = R$ {indicadores['dsr_perdido']['valor_total']:.2f}")
        print(f"   - Horas extras: {horas_extras['total_horas']:.1f}h = R$ {indicadores['horas_extras']['valor_total']:.2f}")
        
        return indicadores

# Testar fun√ß√£o corrigida
def testar_indicadores_corrigidos():
    """Testa fun√ß√£o corrigida de indicadores"""
    from datetime import date
    
    # Buscar Carlos
    carlos = Funcionario.query.filter_by(
        nome="Carlos Alberto Rigolin Junior"
    ).first()
    
    if not carlos:
        print("‚ùå Carlos n√£o encontrado")
        return
    
    # Testar com per√≠odo de julho
    indicadores = calcular_indicadores_financeiros_corrigido(
        carlos.id,
        date(2025, 7, 1),
        date(2025, 7, 31)
    )
    
    return indicadores

# EXECUTAR TESTE
indicadores_teste = testar_indicadores_corrigidos()
```

---

## üîß **ETAPA 3: ATUALIZAR TEMPLATE DE EXPORTA√á√ÉO**

```python
# 3. Template HTML corrigido para exporta√ß√£o
def gerar_template_exportacao_corrigido():
    """Gera template HTML corrigido para exporta√ß√£o"""
    
    template_corrigido = '''
<!-- Template corrigido para relat√≥rio de exporta√ß√£o -->
<div class="relatorio-exportacao">
    <h3>Indicadores Financeiros Detalhados:</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Item</th>
                <th>Quantidade</th>
                <th>Valor Unit.</th>
                <th>Valor Total</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Horas Extras</td>
                <td>{{ indicadores.horas_extras.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.horas_extras.valor_unitario) }}</td>
                <td class="text-success">R$ {{ "%.2f"|format(indicadores.horas_extras.valor_total) }}</td>
            </tr>
            <tr class="table-danger">
                <td>Faltas Injustificadas</td>
                <td>{{ indicadores.faltas_injustificadas.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_injustificadas.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_injustificadas.valor_total) }}</td>
            </tr>
            <tr>
                <td>Faltas Justificadas</td>
                <td>{{ indicadores.faltas_justificadas.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_justificadas.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_justificadas.valor_total) }}</td>
            </tr>
            <tr class="table-danger">
                <td>DSR Perdido (Lei 605/49)</td>
                <td>{{ indicadores.dsr_perdido.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.dsr_perdido.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.dsr_perdido.valor_total) }}</td>
            </tr>
        </tbody>
    </table>
    
    <h3>Resumo Financeiro:</h3>
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Item</th>
                <th>Quantidade</th>
                <th>Valor Unit.</th>
                <th>Valor Total</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Horas Extras</td>
                <td>{{ indicadores.horas_extras.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.horas_extras.valor_unitario) }}</td>
                <td class="text-success">R$ {{ "%.2f"|format(indicadores.horas_extras.valor_total) }}</td>
            </tr>
            <tr class="table-danger">
                <td>Faltas Injustificadas</td>
                <td>{{ indicadores.faltas_injustificadas.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_injustificadas.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_injustificadas.valor_total) }}</td>
            </tr>
            <tr>
                <td>Faltas Justificadas</td>
                <td>{{ indicadores.faltas_justificadas.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_justificadas.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.faltas_justificadas.valor_total) }}</td>
            </tr>
            <tr class="table-danger">
                <td>DSR Perdido (Lei 605/49)</td>
                <td>{{ indicadores.dsr_perdido.quantidade }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.dsr_perdido.valor_unitario) }}</td>
                <td>R$ {{ "%.2f"|format(indicadores.dsr_perdido.valor_total) }}</td>
            </tr>
        </tbody>
    </table>
</div>
'''
    
    print("‚úÖ TEMPLATE CORRIGIDO GERADO")
    return template_corrigido

# EXECUTAR GERA√á√ÉO
template_novo = gerar_template_exportacao_corrigido()
```

---

## üîß **ETAPA 4: ATUALIZAR ROTA DE EXPORTA√á√ÉO**

```python
# 4. Rota corrigida para exporta√ß√£o
def atualizar_rota_exportacao():
    """Atualiza rota de exporta√ß√£o com c√°lculo correto"""
    
    codigo_rota_corrigida = '''
@app.route('/funcionarios/<int:funcionario_id>/relatorio/exportar')
def exportar_relatorio_funcionario(funcionario_id):
    """Exporta relat√≥rio do funcion√°rio com c√°lculos corretos"""
    
    # Obter par√¢metros de data
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')
    
    if not data_inicio or not data_fim:
        flash('Per√≠odo obrigat√≥rio para exporta√ß√£o', 'error')
        return redirect(url_for('funcionarios.perfil', funcionario_id=funcionario_id))
    
    # Converter datas
    data_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
    data_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
    
    # Buscar funcion√°rio
    funcionario = Funcionario.query.get_or_404(funcionario_id)
    
    # Calcular indicadores corrigidos
    indicadores = calcular_indicadores_financeiros_corrigido(
        funcionario_id, 
        data_inicio, 
        data_fim
    )
    
    # Calcular totais
    total_descontos = (
        indicadores['faltas_injustificadas']['valor_total'] + 
        indicadores['dsr_perdido']['valor_total']
    )
    
    total_acrescimos = indicadores['horas_extras']['valor_total']
    
    saldo_final = total_acrescimos - total_descontos
    
    # Dados para template
    dados_relatorio = {
        'funcionario': funcionario,
        'periodo': {
            'inicio': data_inicio.strftime('%d/%m/%Y'),
            'fim': data_fim.strftime('%d/%m/%Y')
        },
        'indicadores': indicadores,
        'totais': {
            'descontos': total_descontos,
            'acrescimos': total_acrescimos,
            'saldo': saldo_final
        }
    }
    
    return render_template('relatorios/funcionario_exportacao.html', **dados_relatorio)
'''
    
    print("‚úÖ C√ìDIGO ROTA CORRIGIDA GERADO")
    return codigo_rota_corrigida

# EXECUTAR ATUALIZA√á√ÉO
codigo_rota_nova = atualizar_rota_exportacao()
```

---

## üß™ **ETAPA 5: TESTAR CEN√ÅRIO COMPLETO**

```python
# 5. Testar cen√°rio completo com dados reais
def testar_cenario_completo_exportacao():
    """Testa cen√°rio completo de exporta√ß√£o com DSR correto"""
    from datetime import date
    
    print("üß™ TESTANDO CEN√ÅRIO COMPLETO DE EXPORTA√á√ÉO:")
    
    # Buscar Carlos
    carlos = Funcionario.query.filter_by(
        nome="Carlos Alberto Rigolin Junior"
    ).first()
    
    if not carlos:
        print("‚ùå Carlos n√£o encontrado")
        return
    
    # Simular dados para teste
    print(f"\nüìä DADOS SIMULADOS:")
    print(f"   - Funcion√°rio: {carlos.nome}")
    print(f"   - Sal√°rio: R$ {carlos.salario:,.2f}")
    print(f"   - Valor/dia: R$ {carlos.salario / 30:.2f}")
    
    # Cen√°rio: 1 falta injustificada
    faltas_injustificadas = 1
    dsrs_perdidos = 1  # 1 falta = 1 semana afetada = 1 DSR
    valor_dia = carlos.salario / 30
    
    print(f"\nüìã CEN√ÅRIO DE TESTE:")
    print(f"   - Faltas injustificadas: {faltas_injustificadas} dia")
    print(f"   - DSRs perdidos: {dsrs_perdidos} semana")
    print(f"   - Horas extras: 34.0h")
    
    # Calcular valores
    desconto_faltas = faltas_injustificadas * valor_dia
    desconto_dsr = dsrs_perdidos * valor_dia
    custo_horas_extras = 34.0 * 30.68  # Valor da imagem
    
    print(f"\nüí∞ VALORES CALCULADOS:")
    print(f"   - Desconto faltas: R$ {desconto_faltas:.2f}")
    print(f"   - Desconto DSR: R$ {desconto_dsr:.2f}")
    print(f"   - Custo horas extras: R$ {custo_horas_extras:.2f}")
    print(f"   - Total descontos: R$ {desconto_faltas + desconto_dsr:.2f}")
    
    # Resultado esperado no relat√≥rio
    print(f"\nüìä RESULTADO ESPERADO NO RELAT√ìRIO:")
    print(f"   - Faltas Injustificadas: {faltas_injustificadas} dia(s) = R$ {desconto_faltas:.2f}")
    print(f"   - DSR Perdido: {dsrs_perdidos} semana(s) = R$ {desconto_dsr:.2f}")
    print(f"   - Horas Extras: 34.0h = R$ {custo_horas_extras:.2f}")
    
    # Comparar com imagem atual
    print(f"\nüîç COMPARA√á√ÉO COM IMAGEM ATUAL:")
    print(f"   ATUAL: DSR Perdido: 0 semana(s) = R$ 0,00 ‚ùå")
    print(f"   CORRETO: DSR Perdido: {dsrs_perdidos} semana(s) = R$ {desconto_dsr:.2f} ‚úÖ")
    
    return {
        'faltas_injustificadas': {'quantidade': faltas_injustificadas, 'valor': desconto_faltas},
        'dsr_perdido': {'quantidade': dsrs_perdidos, 'valor': desconto_dsr},
        'horas_extras': {'quantidade': 34.0, 'valor': custo_horas_extras}
    }

# EXECUTAR TESTE COMPLETO
resultado_completo = testar_cenario_completo_exportacao()
```

---

## üìã **ETAPA 6: CHECKLIST DE CORRE√á√ÉO**

```python
# 6. Checklist para implementa√ß√£o
def gerar_checklist_correcao():
    """Gera checklist para corre√ß√£o do DSR"""
    
    checklist = '''
üìã CHECKLIST DE CORRE√á√ÉO DSR NO RELAT√ìRIO:

‚ñ° 1. LOCALIZAR FUN√á√ÉO DE EXPORTA√á√ÉO
   - Encontrar arquivo que gera o relat√≥rio
   - Identificar fun√ß√£o de c√°lculo de DSR
   - Verificar l√≥gica atual

‚ñ° 2. CORRIGIR C√ÅLCULO DE DSR
   - Implementar fun√ß√£o calcular_dsr_estrito()
   - Usar l√≥gica: 1 falta injustificada = 1 semana afetada = 1 DSR
   - Testar com dados reais

‚ñ° 3. ATUALIZAR TEMPLATE
   - Modificar template HTML de exporta√ß√£o
   - Garantir que DSR apare√ßa separado das faltas
   - Manter formata√ß√£o atual

‚ñ° 4. ATUALIZAR ROTA
   - Modificar rota de exporta√ß√£o
   - Usar fun√ß√£o corrigida de c√°lculo
   - Testar endpoint

‚ñ° 5. VALIDAR RESULTADO
   - Testar com 1 falta injustificada
   - Verificar se DSR mostra "1 semana(s)"
   - Confirmar valor R$ 163,64 (ou equivalente)

‚ñ° 6. TESTAR CEN√ÅRIOS
   - 0 faltas = 0 DSR
   - 1 falta = 1 DSR
   - 2 faltas mesma semana = 1 DSR
   - 2 faltas semanas diferentes = 2 DSRs
'''
    
    print(checklist)
    return checklist

# EXECUTAR CHECKLIST
checklist_final = gerar_checklist_correcao()
```

---

## üéØ **RESULTADO ESPERADO**

**ANTES (atual):**
```
Faltas Injustificadas    | 1 dias     | R$ 163,64 | R$ 163,64
DSR Perdido (Lei 605/49) | 0 semana(s)| R$ 163,64 | R$ 0,00   ‚ùå
```

**DEPOIS (corrigido):**
```
Faltas Injustificadas    | 1 dias     | R$ 163,64 | R$ 163,64
DSR Perdido (Lei 605/49) | 1 semana(s)| R$ 163,64 | R$ 163,64 ‚úÖ
```

---

## üéØ **INSTRU√á√ïES DE EXECU√á√ÉO**

**Execute na ordem:**

```python
# 1. Analisar fun√ß√£o atual
analisar_funcao_exportacao()

# 2. Implementar c√°lculo corrigido
calcular_indicadores_financeiros_corrigido()

# 3. Testar fun√ß√£o
testar_indicadores_corrigidos()

# 4. Atualizar template
gerar_template_exportacao_corrigido()

# 5. Atualizar rota
atualizar_rota_exportacao()

# 6. Teste completo
testar_cenario_completo_exportacao()
```

**RESULTADO ESPERADO:** Relat√≥rio de exporta√ß√£o mostrando DSR perdido correto: "1 semana(s) = R$ 163,64" quando h√° 1 falta injustificada.

