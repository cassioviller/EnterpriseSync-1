# üîç PROMPT: Diagnosticar Custos de Ve√≠culos Zerados no Dashboard

## CONTEXTO DO PROBLEMA

**AMBIENTE:** Produ√ß√£o (Docker/Easypanel + PostgreSQL)  
**STATUS:** ‚ö†Ô∏è INVESTIGA√á√ÉO - Custos de transporte mostram R$ 0.00  

**COMPORTAMENTO ATUAL:**
- Dashboard mostra: **Transporte: R$ 0.00**
- Logs mostram: `DEBUG Custos ve√≠culo: R$ 0.00`

**C√ìDIGO EST√Å CORRETO:**
```python
# views.py linha 943-950
def calcular_custos_veiculo():
    from models import VehicleExpense
    custos_veiculo = VehicleExpense.query.filter(
        VehicleExpense.admin_id == admin_id,  # ‚úÖ Filtra por admin
        VehicleExpense.data_custo >= data_inicio,  # ‚úÖ Filtra por per√≠odo
        VehicleExpense.data_custo <= data_fim
    ).all()
    return sum(c.valor or 0 for c in custos_veiculo)
```

**MODELO EST√Å CORRETO:**
```python
# models.py linha 3439-3467
class VehicleExpense(db.Model):
    __tablename__ = 'frota_despesa'
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)  # ‚úÖ
    data_custo = db.Column(db.Date, nullable=False)  # ‚úÖ
    valor = db.Column(db.Numeric(10, 2), nullable=False)  # ‚úÖ
```

---

## OBJETIVO

Criar um **script de diagn√≥stico** para investigar POR QUE os custos de ve√≠culos est√£o zerados.

---

## TAREFA

### Criar arquivo: `diagnostico_custos_veiculo.py`

```python
"""
Script de Diagn√≥stico: Custos de Ve√≠culos Zerados no Dashboard
Investigar por que VehicleExpense retorna R$ 0.00
"""

from app import app, db
from models import VehicleExpense, Usuario, Veiculo
from datetime import date
from sqlalchemy import func

def diagnosticar_custos_veiculo():
    with app.app_context():
        print("=" * 80)
        print("üîç DIAGN√ìSTICO: Custos de Ve√≠culos")
        print("=" * 80)
        
        # 1. Verificar se tabela existe
        print("\n1Ô∏è‚É£ Verificando se tabela 'frota_despesa' existe...")
        try:
            total_registros = db.session.query(func.count(VehicleExpense.id)).scalar()
            print(f"   ‚úÖ Tabela existe: {total_registros} registros totais")
        except Exception as e:
            print(f"   ‚ùå Erro ao acessar tabela: {e}")
            return
        
        # 2. Verificar registros por admin_id
        print("\n2Ô∏è‚É£ Verificando registros por empresa (admin_id)...")
        registros_por_admin = db.session.query(
            VehicleExpense.admin_id,
            func.count(VehicleExpense.id).label('total'),
            func.sum(VehicleExpense.valor).label('valor_total')
        ).group_by(VehicleExpense.admin_id).all()
        
        if registros_por_admin:
            for admin_id, total, valor_total in registros_por_admin:
                admin = Usuario.query.get(admin_id)
                nome_admin = admin.username if admin else "Desconhecido"
                print(f"   Admin ID {admin_id} ({nome_admin}): {total} registros, R$ {valor_total or 0:.2f}")
        else:
            print("   ‚ö†Ô∏è Nenhum registro encontrado em nenhuma empresa")
        
        # 3. Verificar per√≠odo dos dados
        print("\n3Ô∏è‚É£ Verificando per√≠odo dos dados...")
        periodo = db.session.query(
            func.min(VehicleExpense.data_custo).label('data_min'),
            func.max(VehicleExpense.data_custo).label('data_max')
        ).first()
        
        if periodo.data_min and periodo.data_max:
            print(f"   üìÖ Per√≠odo dos dados: {periodo.data_min} a {periodo.data_max}")
        else:
            print("   ‚ö†Ô∏è Nenhum registro com data")
        
        # 4. Verificar registros no per√≠odo do dashboard
        print("\n4Ô∏è‚É£ Verificando registros no per√≠odo do dashboard...")
        data_inicio = date(2025, 7, 1)
        data_fim = date(2025, 10, 17)
        print(f"   Per√≠odo dashboard: {data_inicio} a {data_fim}")
        
        registros_periodo = VehicleExpense.query.filter(
            VehicleExpense.data_custo >= data_inicio,
            VehicleExpense.data_custo <= data_fim
        ).all()
        
        if registros_periodo:
            print(f"   ‚úÖ {len(registros_periodo)} registros encontrados no per√≠odo")
            total_valor = sum(r.valor or 0 for r in registros_periodo)
            print(f"   üí∞ Valor total: R$ {total_valor:.2f}")
            
            # Mostrar alguns exemplos
            print("\n   üìã Exemplos de registros:")
            for r in registros_periodo[:5]:
                print(f"      - {r.data_custo}: R$ {r.valor:.2f} ({r.tipo_custo}) - Admin ID: {r.admin_id}")
        else:
            print("   ‚ùå NENHUM registro encontrado no per√≠odo do dashboard!")
        
        # 5. Verificar registros por admin_id E per√≠odo
        print("\n5Ô∏è‚É£ Verificando registros por admin_id E per√≠odo...")
        
        # Buscar todos os admin_ids que t√™m ve√≠culos
        admins_com_veiculos = db.session.query(
            VehicleExpense.admin_id.distinct()
        ).all()
        
        if admins_com_veiculos:
            for (admin_id,) in admins_com_veiculos:
                admin = Usuario.query.get(admin_id)
                nome_admin = admin.username if admin else "Desconhecido"
                
                registros_admin_periodo = VehicleExpense.query.filter(
                    VehicleExpense.admin_id == admin_id,
                    VehicleExpense.data_custo >= data_inicio,
                    VehicleExpense.data_custo <= data_fim
                ).all()
                
                total_admin = sum(r.valor or 0 for r in registros_admin_periodo)
                print(f"   Admin ID {admin_id} ({nome_admin}): {len(registros_admin_periodo)} registros, R$ {total_admin:.2f}")
        else:
            print("   ‚ö†Ô∏è Nenhum admin_id tem despesas de ve√≠culos")
        
        # 6. Verificar se h√° valores NULL ou zero
        print("\n6Ô∏è‚É£ Verificando valores NULL ou zero...")
        registros_null = VehicleExpense.query.filter(
            VehicleExpense.valor == None
        ).count()
        registros_zero = VehicleExpense.query.filter(
            VehicleExpense.valor == 0
        ).count()
        registros_positivos = VehicleExpense.query.filter(
            VehicleExpense.valor > 0
        ).count()
        
        print(f"   NULL: {registros_null}")
        print(f"   Zero: {registros_zero}")
        print(f"   Positivos: {registros_positivos}")
        
        # 7. Verificar tipos de custo
        print("\n7Ô∏è‚É£ Verificando tipos de custo...")
        tipos = db.session.query(
            VehicleExpense.tipo_custo,
            func.count(VehicleExpense.id).label('total'),
            func.sum(VehicleExpense.valor).label('valor_total')
        ).group_by(VehicleExpense.tipo_custo).all()
        
        if tipos:
            for tipo, total, valor_total in tipos:
                print(f"   {tipo}: {total} registros, R$ {valor_total or 0:.2f}")
        else:
            print("   ‚ö†Ô∏è Nenhum tipo de custo encontrado")
        
        print("\n" + "=" * 80)
        print("üéØ DIAGN√ìSTICO CONCLU√çDO")
        print("=" * 80)
        
        # CONCLUS√ÉO
        print("\nüìä RESUMO:")
        if total_registros == 0:
            print("   ‚ùå PROBLEMA: Tabela est√° vazia - nenhum custo de ve√≠culo cadastrado")
            print("   üí° SOLU√á√ÉO: Cadastrar despesas de ve√≠culos no sistema")
        elif not registros_periodo:
            print("   ‚ùå PROBLEMA: Existem dados, mas n√£o no per√≠odo do dashboard")
            print(f"   üí° SOLU√á√ÉO: Ajustar per√≠odo do dashboard ou cadastrar dados em {data_inicio} a {data_fim}")
        elif total_valor == 0:
            print("   ‚ùå PROBLEMA: Registros existem mas todos t√™m valor zero ou NULL")
            print("   üí° SOLU√á√ÉO: Corrigir valores dos registros no banco de dados")
        else:
            print("   ‚úÖ Dados existem e est√£o corretos!")
            print("   ‚ö†Ô∏è Problema pode ser no c√≥digo do dashboard ou filtro de admin_id")

if __name__ == '__main__':
    diagnosticar_custos_veiculo()
```

---

## COMO EXECUTAR

### No Replit (Desenvolvimento):

```bash
python3.11 diagnostico_custos_veiculo.py
```

### No Easypanel (Produ√ß√£o):

```bash
# Acessar container
docker exec -it <container_name> bash

# Executar script
python3.11 diagnostico_custos_veiculo.py
```

---

## RESULTADOS ESPERADOS

### Cen√°rio 1: Tabela Vazia
```
‚ùå PROBLEMA: Tabela est√° vazia - nenhum custo de ve√≠culo cadastrado
üí° SOLU√á√ÉO: Cadastrar despesas de ve√≠culos no sistema
```

### Cen√°rio 2: Dados Fora do Per√≠odo
```
‚ùå PROBLEMA: Existem dados, mas n√£o no per√≠odo do dashboard
üí° SOLU√á√ÉO: Ajustar per√≠odo do dashboard ou cadastrar dados
```

### Cen√°rio 3: Valores Zerados
```
‚ùå PROBLEMA: Registros existem mas todos t√™m valor zero ou NULL
üí° SOLU√á√ÉO: Corrigir valores dos registros no banco
```

### Cen√°rio 4: Dados Corretos
```
‚úÖ Dados existem e est√£o corretos!
‚ö†Ô∏è Problema pode ser no c√≥digo do dashboard ou filtro de admin_id
```

---

## A√á√ïES BASEADAS NO RESULTADO

### Se Tabela Vazia:
- Cadastrar despesas de ve√≠culos no m√≥dulo de Frota
- Ou importar dados hist√≥ricos

### Se Dados Fora do Per√≠odo:
- Op√ß√£o 1: Cadastrar dados no per√≠odo Jul-Out/2025
- Op√ß√£o 2: Ajustar per√≠odo padr√£o do dashboard

### Se Valores Zerados:
- Verificar formul√°rio de cadastro
- Corrigir valores no banco manualmente

### Se Dados Corretos:
- Verificar se `admin_id` do usu√°rio logado est√° correto
- Adicionar mais logs no c√≥digo do dashboard

---

## CHECKLIST

- [ ] Criar arquivo `diagnostico_custos_veiculo.py`
- [ ] Executar em desenvolvimento
- [ ] Anotar resultados
- [ ] Executar em produ√ß√£o
- [ ] Comparar resultados dev vs prod
- [ ] Identificar causa raiz
- [ ] Aplicar solu√ß√£o apropriada

---

## PRIORIDADE

üü° **M√âDIA** - KPI zerada mas n√£o bloqueia sistema

**Tempo Estimado:** 30 minutos (criar script + executar + analisar)

---

## OBSERVA√á√ÉO

Este diagn√≥stico vai revelar **exatamente** por que os custos de ve√≠culos est√£o zerados:
- Falta de dados?
- Dados no per√≠odo errado?
- Problema de admin_id?
- Valores NULL/zero?

Com essa informa√ß√£o, podemos aplicar a corre√ß√£o precisa! üéØ

