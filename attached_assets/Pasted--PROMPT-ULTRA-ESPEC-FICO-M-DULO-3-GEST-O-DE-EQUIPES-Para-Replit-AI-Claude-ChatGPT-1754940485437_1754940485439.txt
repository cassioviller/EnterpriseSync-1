# üéØ PROMPT ULTRA-ESPEC√çFICO: M√ìDULO 3 - GEST√ÉO DE EQUIPES

**Para:** Replit AI / Claude / ChatGPT  
**Sistema:** SIGE v8.0 - Sistema Integrado de Gest√£o Empresarial  
**M√≥dulo:** 3 de 7 - Gest√£o de Equipes com Interface Kanban/Calend√°rio  
**Status:** M√≥dulos 1 e 2 j√° implementados e funcionando - Continuidade da evolu√ß√£o

---

## ‚ö†Ô∏è CONTEXTO CR√çTICO - M√ìDULOS 1 E 2 J√Å FUNCIONANDO

Voc√™ est√° implementando **APENAS O M√ìDULO 3** de uma evolu√ß√£o em andamento. Os **M√≥dulos 1 e 2 j√° est√£o funcionando** perfeitamente:

### **Infraestrutura Existente dos M√≥dulos Anteriores:**
- ‚úÖ **M√≥dulo 1:** Sistema de propostas com convers√£o autom√°tica para obras
- ‚úÖ **M√≥dulo 2:** Portal do cliente com acompanhamento em tempo real
- ‚úÖ **Sistema RDO:** Funcionando perfeitamente com progresso autom√°tico
- ‚úÖ **Sistema de Ponto:** Funcionando com tipos 'oficina' e 'campo'

### **Sistema Base Atual (N√ÉO MODIFICAR):**
```
‚îú‚îÄ‚îÄ app.py                    # Flask app principal
‚îú‚îÄ‚îÄ models.py                 # Classes existentes + Proposta + NotificacaoCliente
‚îú‚îÄ‚îÄ views.py                  # Blueprint main_bp + rotas dos M√≥dulos 1 e 2
‚îú‚îÄ‚îÄ auth.py                   # Decorators funcionando
‚îú‚îÄ‚îÄ utils.py                  # Fun√ß√µes dos M√≥dulos 1 e 2
‚îî‚îÄ‚îÄ templates/                # Templates dos M√≥dulos 1 e 2 funcionando
    ‚îú‚îÄ‚îÄ propostas/            # ‚úÖ M√≥dulo 1 implementado
    ‚îî‚îÄ‚îÄ cliente/              # ‚úÖ M√≥dulo 2 implementado
```

### **Classes Principais Existentes (USAR COMO BASE):**
```python
# ‚úÖ SISTEMA DE USU√ÅRIOS ATUAL
class TipoUsuario(enum.Enum):
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    FUNCIONARIO = "funcionario"
    # SER√Å ADICIONADO: GESTOR_EQUIPES

# ‚úÖ SISTEMA DE FUNCION√ÅRIOS EXISTENTE
class Funcionario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    cargo = db.Column(db.String(50))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    ativo = db.Column(db.Boolean, default=True)

# ‚úÖ SISTEMA DE PONTO EXISTENTE
class Ponto(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'), nullable=False)
    data_ponto = db.Column(db.Date, nullable=False)
    hora_entrada = db.Column(db.Time)
    hora_saida = db.Column(db.Time)
    tipo_local = db.Column(db.String(20))  # 'oficina', 'campo'
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)

# ‚úÖ SISTEMA RDO EXISTENTE (SER√Å INTEGRADO)
class RDO(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    numero_rdo = db.Column(db.String(20), unique=True, nullable=False)
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=False)
    data_relatorio = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), default='Rascunho')  # Rascunho, Finalizado
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)

# ‚úÖ OBRAS EXISTENTES (M√ìDULOS 1 E 2)
class Obra(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(20), unique=True)
    endereco = db.Column(db.Text)
    status = db.Column(db.String(20), default='Planejamento')  # Planejamento, Em Andamento, Conclu√≠da
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    # + campos do M√≥dulo 2 (token_cliente, etc.)
```

---

## üéØ M√ìDULO 3: GEST√ÉO DE EQUIPES - ESPECIFICA√á√ÉO COMPLETA

### **OBJETIVO DO M√ìDULO:**
Criar sistema completo de gest√£o de equipes que permite:
1. **Interface Kanban/Calend√°rio** para alocar funcion√°rios visualmente
2. **Cria√ß√£o autom√°tica de RDO** quando alocar para campo
3. **Integra√ß√£o total** com sistema de ponto existente
4. **Notifica√ß√µes autom√°ticas** para cliente (M√≥dulo 2)
5. **Relat√≥rios de produtividade** e analytics

---

## üìä IMPLEMENTA√á√ÉO T√âCNICA DETALHADA

### **PASSO 1: Atualizar Enum TipoUsuario (MODIFICAR EM models.py)**

```python
# ===== M√ìDULO 3: ATUALIZAR ENUM EXISTENTE =====
# LOCALIZAR o enum TipoUsuario em models.py e MODIFICAR:

class TipoUsuario(enum.Enum):
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    GESTOR_EQUIPES = "gestor_equipes"  # ADICIONAR ESTA LINHA
    FUNCIONARIO = "funcionario"
```

### **PASSO 2: Nova Classe AlocacaoEquipe (ADICIONAR EM models.py)**

```python
# ===== M√ìDULO 3: NOVA CLASSE PARA GEST√ÉO DE EQUIPES =====
# ADICIONAR esta classe NO FINAL do arquivo models.py

class AlocacaoEquipe(db.Model):
    __tablename__ = 'alocacao_equipe'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # Relacionamentos principais
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'), nullable=False)
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=False)
    
    # Dados da aloca√ß√£o
    data_alocacao = db.Column(db.Date, nullable=False)
    tipo_local = db.Column(db.String(20), nullable=False)  # 'oficina', 'campo'
    
    # Controle e auditoria
    criado_por_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    rdo_gerado_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))  # NULL se for oficina
    
    # Status da aloca√ß√£o
    status = db.Column(db.String(20), default='Planejado')  # Planejado, Executado, Cancelado
    
    # Observa√ß√µes
    observacoes = db.Column(db.Text)
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Controle de tempo
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamentos
    funcionario = db.relationship('Funcionario', backref='alocacoes')
    obra = db.relationship('Obra', backref='alocacoes_equipe')
    criado_por = db.relationship('Usuario', foreign_keys=[criado_por_id])
    rdo_gerado = db.relationship('RDO', backref='alocacao_origem')
    
    # √çndice √∫nico para evitar dupla aloca√ß√£o
    __table_args__ = (
        db.UniqueConstraint('funcionario_id', 'data_alocacao', name='uk_funcionario_data'),
        db.Index('idx_alocacao_data_admin', 'data_alocacao', 'admin_id'),
        db.Index('idx_alocacao_obra_data', 'obra_id', 'data_alocacao'),
        db.Index('idx_alocacao_funcionario_status', 'funcionario_id', 'status'),
    )
    
    def __repr__(self):
        return f'<AlocacaoEquipe {self.funcionario.nome} -> {self.obra.nome} ({self.data_alocacao})>'
    
    def to_dict(self):
        """Converter para dicion√°rio para APIs"""
        return {
            'id': self.id,
            'funcionario_id': self.funcionario_id,
            'funcionario_nome': self.funcionario.nome,
            'funcionario_cargo': self.funcionario.cargo,
            'obra_id': self.obra_id,
            'obra_nome': self.obra.nome,
            'obra_codigo': self.obra.codigo,
            'data_alocacao': self.data_alocacao.isoformat(),
            'tipo_local': self.tipo_local,
            'status': self.status,
            'rdo_gerado_id': self.rdo_gerado_id,
            'observacoes': self.observacoes,
            'created_at': self.created_at.isoformat()
        }
```

### **PASSO 3: Atualizar Classe Ponto (MODIFICAR EM models.py)**

```python
# ===== M√ìDULO 3: ESTENDER CLASSE PONTO EXISTENTE =====
# LOCALIZAR a classe Ponto em models.py e ADICIONAR este campo:

class Ponto(db.Model):
    # ... todos os campos existentes permanecem inalterados ...
    
    # ===== NOVO CAMPO PARA M√ìDULO 3 =====
    # ADICIONAR este campo no final da classe Ponto existente
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))  # NULL para oficina
    
    # ADICIONAR este relacionamento
    obra = db.relationship('Obra', backref='pontos_funcionarios')
```

### **PASSO 4: Novo Decorator de Permiss√£o (ADICIONAR EM auth.py)**

```python
# ===== M√ìDULO 3: NOVO DECORATOR PARA GESTOR DE EQUIPES =====
# ADICIONAR esta fun√ß√£o NO FINAL do arquivo auth.py

def gestor_equipes_required(f):
    """Decorator para rotas que requerem acesso de gestor de equipes ou superior"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            flash('Acesso negado. Fa√ßa login primeiro.', 'danger')
            return redirect(url_for('main.login'))
        
        if current_user.tipo_usuario not in [TipoUsuario.SUPER_ADMIN, TipoUsuario.ADMIN, TipoUsuario.GESTOR_EQUIPES]:
            flash('Acesso negado. Apenas gestores de equipe podem acessar esta p√°gina.', 'danger')
            return redirect(url_for('main.dashboard'))
        
        return f(*args, **kwargs)
    return decorated_function

def pode_gerenciar_equipes():
    """Verificar se o usu√°rio atual pode gerenciar equipes"""
    if not current_user.is_authenticated:
        return False
    
    return current_user.tipo_usuario in [TipoUsuario.SUPER_ADMIN, TipoUsuario.ADMIN, TipoUsuario.GESTOR_EQUIPES]
```

### **PASSO 5: Fun√ß√µes Utilit√°rias (ADICIONAR EM utils.py)**

```python
# ===== M√ìDULO 3: FUN√á√ïES PARA GEST√ÉO DE EQUIPES =====
# ADICIONAR estas fun√ß√µes NO FINAL do arquivo utils.py

from datetime import date, datetime, timedelta
from collections import defaultdict
from models import AlocacaoEquipe, Funcionario, Obra, RDO, Ponto
import secrets

def obter_funcionarios_disponiveis(data_alocacao, admin_id):
    """Obter funcion√°rios dispon√≠veis para uma data espec√≠fica"""
    # Funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=True
    ).all()
    
    resultado = []
    for funcionario in funcionarios:
        # Verificar se j√° est√° alocado nesta data
        alocacao_existente = AlocacaoEquipe.query.filter_by(
            funcionario_id=funcionario.id,
            data_alocacao=data_alocacao,
            status='Planejado'
        ).first()
        
        resultado.append({
            'id': funcionario.id,
            'nome': funcionario.nome,
            'cargo': funcionario.cargo,
            'disponivel': alocacao_existente is None,
            'alocacao_atual': {
                'obra_nome': alocacao_existente.obra.nome if alocacao_existente else None,
                'tipo_local': alocacao_existente.tipo_local if alocacao_existente else None,
                'alocacao_id': alocacao_existente.id if alocacao_existente else None
            } if alocacao_existente else None
        })
    
    return resultado

def obter_obras_ativas(admin_id):
    """Obter obras ativas para aloca√ß√£o"""
    obras = Obra.query.filter_by(
        admin_id=admin_id,
        status='Em Andamento'
    ).all()
    
    resultado = []
    for obra in obras:
        # Calcular progresso (integra√ß√£o com M√≥dulo 2)
        progresso = calcular_progresso_obra_cliente(obra.id)
        
        # Contar aloca√ß√µes ativas
        alocacoes_ativas = AlocacaoEquipe.query.filter_by(
            obra_id=obra.id,
            data_alocacao=date.today(),
            status='Planejado'
        ).count()
        
        resultado.append({
            'id': obra.id,
            'nome': obra.nome,
            'codigo': obra.codigo,
            'endereco': obra.endereco,
            'progresso': progresso['percentual_geral'],
            'alocacoes_hoje': alocacoes_ativas,
            'cliente_nome': obra.cliente_nome if hasattr(obra, 'cliente_nome') else 'N/A'
        })
    
    return resultado

def criar_alocacao_equipe(funcionario_id, obra_id, data_alocacao, tipo_local, criado_por_id, admin_id, observacoes=None):
    """Criar nova aloca√ß√£o de equipe com valida√ß√µes"""
    
    # Validar se funcion√°rio existe e est√° ativo
    funcionario = Funcionario.query.filter_by(
        id=funcionario_id,
        admin_id=admin_id,
        ativo=True
    ).first()
    
    if not funcionario:
        raise ValueError("Funcion√°rio n√£o encontrado ou inativo")
    
    # Validar se obra existe e est√° ativa
    obra = Obra.query.filter_by(
        id=obra_id,
        admin_id=admin_id,
        status='Em Andamento'
    ).first()
    
    if not obra:
        raise ValueError("Obra n√£o encontrada ou n√£o est√° em andamento")
    
    # Verificar conflito de aloca√ß√£o
    conflito = AlocacaoEquipe.query.filter_by(
        funcionario_id=funcionario_id,
        data_alocacao=data_alocacao,
        status='Planejado'
    ).first()
    
    if conflito:
        raise ValueError(f"Funcion√°rio j√° alocado para {conflito.obra.nome} nesta data")
    
    # Criar aloca√ß√£o
    alocacao = AlocacaoEquipe(
        funcionario_id=funcionario_id,
        obra_id=obra_id,
        data_alocacao=data_alocacao,
        tipo_local=tipo_local,
        criado_por_id=criado_por_id,
        admin_id=admin_id,
        observacoes=observacoes
    )
    
    db.session.add(alocacao)
    db.session.flush()  # Para obter o ID
    
    # Se for campo, criar RDO automaticamente
    if tipo_local == 'campo':
        rdo = criar_rdo_automatico(alocacao.id)
        if rdo:
            alocacao.rdo_gerado_id = rdo.id
            
            # Notificar cliente (integra√ß√£o com M√≥dulo 2)
            try:
                criar_notificacao_cliente(
                    obra_id=obra_id,
                    tipo='equipe_alocada',
                    titulo='Equipe Alocada para sua Obra',
                    mensagem=f'O funcion√°rio {funcionario.nome} ({funcionario.cargo}) foi alocado para trabalhar em sua obra no dia {data_alocacao.strftime("%d/%m/%Y")}.',
                    prioridade='normal'
                )
            except:
                pass  # N√£o falhar se notifica√ß√£o der erro
    
    db.session.commit()
    return alocacao

def criar_rdo_automatico(alocacao_id):
    """Criar RDO automaticamente quando alocar funcion√°rio para campo"""
    alocacao = AlocacaoEquipe.query.get(alocacao_id)
    
    if not alocacao or alocacao.tipo_local != 'campo':
        return None
    
    # Verificar se j√° existe RDO para esta obra/data
    rdo_existente = RDO.query.filter_by(
        obra_id=alocacao.obra_id,
        data_relatorio=alocacao.data_alocacao
    ).first()
    
    if rdo_existente:
        # Vincular aloca√ß√£o ao RDO existente
        return rdo_existente
    
    # Criar novo RDO
    numero_rdo = gerar_numero_rdo_automatico(alocacao.obra_id, alocacao.data_alocacao)
    
    rdo = RDO(
        numero_rdo=numero_rdo,
        obra_id=alocacao.obra_id,
        data_relatorio=alocacao.data_alocacao,
        status='Rascunho',
        admin_id=alocacao.admin_id
    )
    
    db.session.add(rdo)
    db.session.flush()
    
    return rdo

def gerar_numero_rdo_automatico(obra_id, data_relatorio):
    """Gerar n√∫mero autom√°tico para RDO"""
    obra = Obra.query.get(obra_id)
    data_str = data_relatorio.strftime('%Y%m%d')
    
    # Formato: RDO-OBRA001-20251122-001
    ultimo_rdo = RDO.query.filter(
        RDO.obra_id == obra_id,
        RDO.numero_rdo.like(f'RDO-{obra.codigo}-%{data_str}%')
    ).order_by(RDO.numero_rdo.desc()).first()
    
    if ultimo_rdo:
        try:
            ultimo_numero = int(ultimo_rdo.numero_rdo.split('-')[-1])
            novo_numero = ultimo_numero + 1
        except:
            novo_numero = 1
    else:
        novo_numero = 1
    
    return f"RDO-{obra.codigo}-{data_str}-{novo_numero:03d}"

def processar_ponto_com_alocacao(ponto_id):
    """Processar ponto integrando com aloca√ß√£o de equipe"""
    ponto = Ponto.query.get(ponto_id)
    if not ponto:
        return False
    
    # Buscar aloca√ß√£o do funcion√°rio para esta data
    alocacao = AlocacaoEquipe.query.filter_by(
        funcionario_id=ponto.funcionario_id,
        data_alocacao=ponto.data_ponto,
        status='Planejado'
    ).first()
    
    if alocacao:
        # Atualizar tipo_local do ponto baseado na aloca√ß√£o
        ponto.tipo_local = alocacao.tipo_local
        
        # Se for campo, vincular √† obra
        if alocacao.tipo_local == 'campo':
            ponto.obra_id = alocacao.obra_id
        
        # Marcar aloca√ß√£o como executada
        alocacao.status = 'Executado'
        
        db.session.commit()
        return True
    
    return False

def obter_alocacoes_periodo(data_inicio, data_fim, admin_id):
    """Obter aloca√ß√µes de um per√≠odo para relat√≥rios"""
    alocacoes = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_inicio, data_fim),
        AlocacaoEquipe.admin_id == admin_id
    ).order_by(AlocacaoEquipe.data_alocacao.desc()).all()
    
    return [alocacao.to_dict() for alocacao in alocacoes]

def gerar_relatorio_produtividade(data_inicio, data_fim, admin_id):
    """Gerar relat√≥rio de produtividade da equipe"""
    alocacoes = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_inicio, data_fim),
        AlocacaoEquipe.admin_id == admin_id
    ).all()
    
    dados = defaultdict(lambda: {
        'nome': '',
        'cargo': '',
        'dias_trabalhados': 0,
        'dias_oficina': 0,
        'dias_campo': 0,
        'obras_atendidas': set(),
        'alocacoes_executadas': 0,
        'alocacoes_planejadas': 0
    })
    
    for alocacao in alocacoes:
        funcionario_id = alocacao.funcionario_id
        funcionario = alocacao.funcionario
        
        dados[funcionario_id]['nome'] = funcionario.nome
        dados[funcionario_id]['cargo'] = funcionario.cargo
        dados[funcionario_id]['dias_trabalhados'] += 1
        
        if alocacao.tipo_local == 'oficina':
            dados[funcionario_id]['dias_oficina'] += 1
        else:
            dados[funcionario_id]['dias_campo'] += 1
            dados[funcionario_id]['obras_atendidas'].add(alocacao.obra_id)
        
        if alocacao.status == 'Executado':
            dados[funcionario_id]['alocacoes_executadas'] += 1
        else:
            dados[funcionario_id]['alocacoes_planejadas'] += 1
    
    # Converter sets para contadores
    for funcionario_id in dados:
        dados[funcionario_id]['obras_atendidas'] = len(dados[funcionario_id]['obras_atendidas'])
        
        # Calcular taxa de execu√ß√£o
        total_alocacoes = dados[funcionario_id]['alocacoes_executadas'] + dados[funcionario_id]['alocacoes_planejadas']
        if total_alocacoes > 0:
            dados[funcionario_id]['taxa_execucao'] = round(
                (dados[funcionario_id]['alocacoes_executadas'] / total_alocacoes) * 100, 1
            )
        else:
            dados[funcionario_id]['taxa_execucao'] = 0
    
    return dict(dados)

def cancelar_alocacao(alocacao_id, motivo=""):
    """Cancelar aloca√ß√£o e RDO associado se necess√°rio"""
    alocacao = AlocacaoEquipe.query.get(alocacao_id)
    if not alocacao:
        return False
    
    # Se tiver RDO gerado e ainda estiver em rascunho, pode cancelar
    if alocacao.rdo_gerado_id:
        rdo = RDO.query.get(alocacao.rdo_gerado_id)
        if rdo and rdo.status == 'Rascunho':
            # Verificar se h√° outras aloca√ß√µes para este RDO
            outras_alocacoes = AlocacaoEquipe.query.filter(
                AlocacaoEquipe.rdo_gerado_id == rdo.id,
                AlocacaoEquipe.id != alocacao.id
            ).count()
            
            if outras_alocacoes == 0:
                # Pode deletar o RDO
                db.session.delete(rdo)
    
    # Cancelar aloca√ß√£o
    alocacao.status = 'Cancelado'
    alocacao.observacoes = f"{alocacao.observacoes or ''}\nCancelado: {motivo}".strip()
    
    db.session.commit()
    return True
```


### **PASSO 6: Rotas Principais (ADICIONAR EM views.py)**

```python
# ===== M√ìDULO 3: GEST√ÉO DE EQUIPES - ROTAS PRINCIPAIS =====
# ADICIONAR estas rotas no Blueprint main_bp existente

from datetime import date, datetime, timedelta
from flask import jsonify, request
from auth import gestor_equipes_required, pode_gerenciar_equipes

@main_bp.route('/gestao-equipes')
@gestor_equipes_required
def gestao_equipes_dashboard():
    """Dashboard principal da gest√£o de equipes"""
    data_hoje = date.today()
    admin_id = get_tenant_filter()
    
    # Estat√≠sticas do dia
    funcionarios_alocados_hoje = AlocacaoEquipe.query.filter_by(
        data_alocacao=data_hoje,
        admin_id=admin_id,
        status='Planejado'
    ).count()
    
    total_funcionarios_ativos = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=True
    ).count()
    
    obras_com_equipe_hoje = db.session.query(AlocacaoEquipe.obra_id).filter_by(
        data_alocacao=data_hoje,
        admin_id=admin_id,
        status='Planejado'
    ).distinct().count()
    
    rdos_criados_hoje = RDO.query.filter_by(
        data_relatorio=data_hoje,
        admin_id=admin_id
    ).count()
    
    # Aloca√ß√µes da semana (pr√≥ximos 7 dias)
    data_fim_semana = data_hoje + timedelta(days=6)
    alocacoes_semana = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_hoje, data_fim_semana),
        AlocacaoEquipe.admin_id == admin_id
    ).order_by(AlocacaoEquipe.data_alocacao, AlocacaoEquipe.funcionario_id).all()
    
    # Organizar aloca√ß√µes por data
    alocacoes_por_data = defaultdict(list)
    for alocacao in alocacoes_semana:
        alocacoes_por_data[alocacao.data_alocacao].append(alocacao)
    
    return render_template('gestao_equipes/dashboard.html',
                         data_hoje=data_hoje,
                         funcionarios_alocados_hoje=funcionarios_alocados_hoje,
                         total_funcionarios_ativos=total_funcionarios_ativos,
                         obras_com_equipe_hoje=obras_com_equipe_hoje,
                         rdos_criados_hoje=rdos_criados_hoje,
                         alocacoes_por_data=dict(alocacoes_por_data))

@main_bp.route('/gestao-equipes/kanban')
@gestor_equipes_required
def gestao_equipes_kanban():
    """Interface Kanban para aloca√ß√£o de equipes"""
    data_selecionada = request.args.get('data', date.today().isoformat())
    try:
        data_obj = datetime.strptime(data_selecionada, '%Y-%m-%d').date()
    except:
        data_obj = date.today()
    
    admin_id = get_tenant_filter()
    
    # Obter dados para o Kanban
    funcionarios_disponiveis = obter_funcionarios_disponiveis(data_obj, admin_id)
    obras_ativas = obter_obras_ativas(admin_id)
    
    # Aloca√ß√µes do dia selecionado
    alocacoes_dia = AlocacaoEquipe.query.filter_by(
        data_alocacao=data_obj,
        admin_id=admin_id
    ).all()
    
    return render_template('gestao_equipes/kanban.html',
                         data_selecionada=data_obj,
                         funcionarios_disponiveis=funcionarios_disponiveis,
                         obras_ativas=obras_ativas,
                         alocacoes_dia=alocacoes_dia)

@main_bp.route('/gestao-equipes/calendario')
@gestor_equipes_required
def gestao_equipes_calendario():
    """Interface de calend√°rio para gest√£o de equipes"""
    # Data da semana (segunda-feira)
    data_base = request.args.get('semana', date.today().isoformat())
    try:
        data_obj = datetime.strptime(data_base, '%Y-%m-%d').date()
        # Encontrar a segunda-feira da semana
        dias_para_segunda = data_obj.weekday()
        segunda_feira = data_obj - timedelta(days=dias_para_segunda)
    except:
        segunda_feira = date.today() - timedelta(days=date.today().weekday())
    
    # Gerar datas da semana
    datas_semana = [segunda_feira + timedelta(days=i) for i in range(7)]
    
    admin_id = get_tenant_filter()
    
    # Obter funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=True
    ).order_by(Funcionario.nome).all()
    
    # Obter aloca√ß√µes da semana
    alocacoes_semana = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(datas_semana[0], datas_semana[-1]),
        AlocacaoEquipe.admin_id == admin_id
    ).all()
    
    # Organizar aloca√ß√µes por funcion√°rio e data
    alocacoes_matriz = {}
    for funcionario in funcionarios:
        alocacoes_matriz[funcionario.id] = {}
        for data in datas_semana:
            alocacoes_matriz[funcionario.id][data] = None
    
    for alocacao in alocacoes_semana:
        if alocacao.funcionario_id in alocacoes_matriz:
            alocacoes_matriz[alocacao.funcionario_id][alocacao.data_alocacao] = alocacao
    
    return render_template('gestao_equipes/calendario.html',
                         segunda_feira=segunda_feira,
                         datas_semana=datas_semana,
                         funcionarios=funcionarios,
                         alocacoes_matriz=alocacoes_matriz)

@main_bp.route('/gestao-equipes/relatorios')
@gestor_equipes_required
def gestao_equipes_relatorios():
    """Relat√≥rios de produtividade da equipe"""
    # Per√≠odo padr√£o: √∫ltimo m√™s
    data_fim = date.today()
    data_inicio = data_fim - timedelta(days=30)
    
    # Permitir filtro por per√≠odo
    if request.args.get('data_inicio'):
        try:
            data_inicio = datetime.strptime(request.args.get('data_inicio'), '%Y-%m-%d').date()
        except:
            pass
    
    if request.args.get('data_fim'):
        try:
            data_fim = datetime.strptime(request.args.get('data_fim'), '%Y-%m-%d').date()
        except:
            pass
    
    admin_id = get_tenant_filter()
    
    # Gerar relat√≥rio de produtividade
    relatorio_produtividade = gerar_relatorio_produtividade(data_inicio, data_fim, admin_id)
    
    # Estat√≠sticas gerais
    total_alocacoes = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_inicio, data_fim),
        AlocacaoEquipe.admin_id == admin_id
    ).count()
    
    alocacoes_campo = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_inicio, data_fim),
        AlocacaoEquipe.admin_id == admin_id,
        AlocacaoEquipe.tipo_local == 'campo'
    ).count()
    
    alocacoes_oficina = total_alocacoes - alocacoes_campo
    
    rdos_gerados = RDO.query.filter(
        RDO.data_relatorio.between(data_inicio, data_fim),
        RDO.admin_id == admin_id
    ).count()
    
    return render_template('gestao_equipes/relatorios.html',
                         data_inicio=data_inicio,
                         data_fim=data_fim,
                         relatorio_produtividade=relatorio_produtividade,
                         total_alocacoes=total_alocacoes,
                         alocacoes_campo=alocacoes_campo,
                         alocacoes_oficina=alocacoes_oficina,
                         rdos_gerados=rdos_gerados)

# ===== APIs PARA INTERFACE DIN√ÇMICA =====

@main_bp.route('/api/gestao-equipes/funcionarios-disponiveis')
@gestor_equipes_required
def api_funcionarios_disponiveis():
    """API para obter funcion√°rios dispon√≠veis"""
    data = request.args.get('data', date.today().isoformat())
    try:
        data_obj = datetime.strptime(data, '%Y-%m-%d').date()
    except:
        return jsonify({'error': 'Data inv√°lida'}), 400
    
    admin_id = get_tenant_filter()
    funcionarios = obter_funcionarios_disponiveis(data_obj, admin_id)
    
    return jsonify(funcionarios)

@main_bp.route('/api/gestao-equipes/obras-ativas')
@gestor_equipes_required
def api_obras_ativas():
    """API para obter obras ativas"""
    admin_id = get_tenant_filter()
    obras = obter_obras_ativas(admin_id)
    
    return jsonify(obras)

@main_bp.route('/api/gestao-equipes/alocar', methods=['POST'])
@gestor_equipes_required
def api_alocar_funcionario():
    """API para alocar funcion√°rio"""
    try:
        data = request.get_json()
        
        # Validar dados obrigat√≥rios
        funcionario_id = data.get('funcionario_id')
        obra_id = data.get('obra_id')
        data_alocacao_str = data.get('data_alocacao')
        tipo_local = data.get('tipo_local')
        observacoes = data.get('observacoes', '')
        
        if not all([funcionario_id, obra_id, data_alocacao_str, tipo_local]):
            return jsonify({'error': 'Dados obrigat√≥rios n√£o fornecidos'}), 400
        
        # Converter data
        try:
            data_alocacao = datetime.strptime(data_alocacao_str, '%Y-%m-%d').date()
        except:
            return jsonify({'error': 'Formato de data inv√°lido'}), 400
        
        # Validar tipo_local
        if tipo_local not in ['oficina', 'campo']:
            return jsonify({'error': 'Tipo de local inv√°lido'}), 400
        
        admin_id = get_tenant_filter()
        
        # Criar aloca√ß√£o
        alocacao = criar_alocacao_equipe(
            funcionario_id=funcionario_id,
            obra_id=obra_id,
            data_alocacao=data_alocacao,
            tipo_local=tipo_local,
            criado_por_id=current_user.id,
            admin_id=admin_id,
            observacoes=observacoes
        )
        
        return jsonify({
            'success': True,
            'alocacao': alocacao.to_dict(),
            'message': f'Funcion√°rio alocado com sucesso! {"RDO criado automaticamente." if alocacao.rdo_gerado_id else ""}'
        })
        
    except ValueError as e:
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/gestao-equipes/alocacao/<int:alocacao_id>', methods=['DELETE'])
@gestor_equipes_required
def api_cancelar_alocacao(alocacao_id):
    """API para cancelar aloca√ß√£o"""
    try:
        motivo = request.get_json().get('motivo', 'Cancelado pelo gestor')
        
        # Verificar se a aloca√ß√£o pertence ao admin atual
        alocacao = AlocacaoEquipe.query.filter_by(
            id=alocacao_id,
            admin_id=get_tenant_filter()
        ).first()
        
        if not alocacao:
            return jsonify({'error': 'Aloca√ß√£o n√£o encontrada'}), 404
        
        # Verificar se pode cancelar (n√£o pode cancelar se j√° foi executada)
        if alocacao.status == 'Executado':
            return jsonify({'error': 'N√£o √© poss√≠vel cancelar aloca√ß√£o j√° executada'}), 400
        
        sucesso = cancelar_alocacao(alocacao_id, motivo)
        
        if sucesso:
            return jsonify({'success': True, 'message': 'Aloca√ß√£o cancelada com sucesso'})
        else:
            return jsonify({'error': 'Erro ao cancelar aloca√ß√£o'}), 500
            
    except Exception as e:
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/gestao-equipes/alocacao/<int:alocacao_id>', methods=['PUT'])
@gestor_equipes_required
def api_editar_alocacao(alocacao_id):
    """API para editar aloca√ß√£o"""
    try:
        data = request.get_json()
        
        # Verificar se a aloca√ß√£o pertence ao admin atual
        alocacao = AlocacaoEquipe.query.filter_by(
            id=alocacao_id,
            admin_id=get_tenant_filter()
        ).first()
        
        if not alocacao:
            return jsonify({'error': 'Aloca√ß√£o n√£o encontrada'}), 404
        
        # Verificar se pode editar (n√£o pode editar se j√° foi executada)
        if alocacao.status == 'Executado':
            return jsonify({'error': 'N√£o √© poss√≠vel editar aloca√ß√£o j√° executada'}), 400
        
        # Atualizar campos permitidos
        if 'observacoes' in data:
            alocacao.observacoes = data['observacoes']
        
        # Se mudar tipo_local, pode precisar criar/remover RDO
        if 'tipo_local' in data and data['tipo_local'] != alocacao.tipo_local:
            novo_tipo = data['tipo_local']
            
            if novo_tipo == 'campo' and alocacao.tipo_local == 'oficina':
                # Mudou para campo - criar RDO
                rdo = criar_rdo_automatico(alocacao.id)
                if rdo:
                    alocacao.rdo_gerado_id = rdo.id
            elif novo_tipo == 'oficina' and alocacao.tipo_local == 'campo':
                # Mudou para oficina - remover RDO se poss√≠vel
                if alocacao.rdo_gerado_id:
                    rdo = RDO.query.get(alocacao.rdo_gerado_id)
                    if rdo and rdo.status == 'Rascunho':
                        # Verificar se h√° outras aloca√ß√µes para este RDO
                        outras_alocacoes = AlocacaoEquipe.query.filter(
                            AlocacaoEquipe.rdo_gerado_id == rdo.id,
                            AlocacaoEquipe.id != alocacao.id
                        ).count()
                        
                        if outras_alocacoes == 0:
                            db.session.delete(rdo)
                    
                    alocacao.rdo_gerado_id = None
            
            alocacao.tipo_local = novo_tipo
        
        alocacao.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify({
            'success': True,
            'alocacao': alocacao.to_dict(),
            'message': 'Aloca√ß√£o atualizada com sucesso'
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/gestao-equipes/alocacoes-periodo')
@gestor_equipes_required
def api_alocacoes_periodo():
    """API para obter aloca√ß√µes de um per√≠odo"""
    data_inicio_str = request.args.get('data_inicio')
    data_fim_str = request.args.get('data_fim')
    
    try:
        data_inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
        data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
    except:
        return jsonify({'error': 'Formato de data inv√°lido'}), 400
    
    admin_id = get_tenant_filter()
    alocacoes = obter_alocacoes_periodo(data_inicio, data_fim, admin_id)
    
    return jsonify(alocacoes)

@main_bp.route('/api/gestao-equipes/estatisticas-dashboard')
@gestor_equipes_required
def api_estatisticas_dashboard():
    """API para estat√≠sticas do dashboard"""
    data_hoje = date.today()
    admin_id = get_tenant_filter()
    
    # Estat√≠sticas b√°sicas
    funcionarios_alocados_hoje = AlocacaoEquipe.query.filter_by(
        data_alocacao=data_hoje,
        admin_id=admin_id,
        status='Planejado'
    ).count()
    
    total_funcionarios_ativos = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=True
    ).count()
    
    obras_com_equipe_hoje = db.session.query(AlocacaoEquipe.obra_id).filter_by(
        data_alocacao=data_hoje,
        admin_id=admin_id,
        status='Planejado'
    ).distinct().count()
    
    # Estat√≠sticas da semana
    inicio_semana = data_hoje - timedelta(days=data_hoje.weekday())
    fim_semana = inicio_semana + timedelta(days=6)
    
    alocacoes_semana = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(inicio_semana, fim_semana),
        AlocacaoEquipe.admin_id == admin_id
    ).count()
    
    rdos_criados_semana = RDO.query.filter(
        RDO.data_relatorio.between(inicio_semana, fim_semana),
        RDO.admin_id == admin_id
    ).count()
    
    return jsonify({
        'funcionarios_alocados_hoje': funcionarios_alocados_hoje,
        'total_funcionarios_ativos': total_funcionarios_ativos,
        'obras_com_equipe_hoje': obras_com_equipe_hoje,
        'alocacoes_semana': alocacoes_semana,
        'rdos_criados_semana': rdos_criados_semana,
        'taxa_utilizacao': round((funcionarios_alocados_hoje / total_funcionarios_ativos * 100), 1) if total_funcionarios_ativos > 0 else 0
    })

# ===== INTEGRA√á√ÉO COM SISTEMA DE PONTO =====

@main_bp.route('/api/gestao-equipes/processar-ponto', methods=['POST'])
@admin_required  # S√≥ admin pode processar pontos
def api_processar_ponto():
    """API para processar ponto com integra√ß√£o de aloca√ß√£o"""
    try:
        data = request.get_json()
        ponto_id = data.get('ponto_id')
        
        if not ponto_id:
            return jsonify({'error': 'ID do ponto n√£o fornecido'}), 400
        
        sucesso = processar_ponto_com_alocacao(ponto_id)
        
        if sucesso:
            return jsonify({
                'success': True,
                'message': 'Ponto processado e integrado com aloca√ß√£o'
            })
        else:
            return jsonify({
                'success': False,
                'message': 'Ponto processado, mas sem aloca√ß√£o correspondente'
            })
            
    except Exception as e:
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500
```

### **PASSO 7: Templates da Interface (CRIAR EM templates/gestao_equipes/)**

#### **Template Principal - Dashboard**
```html
<!-- templates/gestao_equipes/dashboard.html -->
{% extends "base.html" %}
{% block title %}Gest√£o de Equipes{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3><i class="fas fa-users"></i> Gest√£o de Equipes</h3>
                    <p class="text-muted mb-0">{{ data_hoje.strftime('%d/%m/%Y') }} - {{ data_hoje.strftime('%A')|title }}</p>
                </div>
                <div>
                    <a href="{{ url_for('main.gestao_equipes_kanban') }}" class="btn btn-primary">
                        <i class="fas fa-columns"></i> Interface Kanban
                    </a>
                    <a href="{{ url_for('main.gestao_equipes_calendario') }}" class="btn btn-outline-primary">
                        <i class="fas fa-calendar-alt"></i> Calend√°rio
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de Estat√≠sticas -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card bg-primary text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ funcionarios_alocados_hoje }}</h4>
                            <small>Funcion√°rios Alocados Hoje</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-user-check fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-success text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ obras_com_equipe_hoje }}</h4>
                            <small>Obras com Equipe Hoje</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-building fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-info text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ rdos_criados_hoje }}</h4>
                            <small>RDOs Criados Hoje</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-clipboard-list fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card bg-warning text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ "%.1f"|format((funcionarios_alocados_hoje / total_funcionarios_ativos * 100) if total_funcionarios_ativos > 0 else 0) }}%</h4>
                            <small>Taxa de Utiliza√ß√£o</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-chart-pie fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Aloca√ß√µes da Semana -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar-week"></i> Aloca√ß√µes da Semana
                    </h5>
                    <a href="{{ url_for('main.gestao_equipes_relatorios') }}" class="btn btn-sm btn-outline-primary">
                        <i class="fas fa-chart-bar"></i> Relat√≥rios
                    </a>
                </div>
                <div class="card-body">
                    {% if alocacoes_por_data %}
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="thead-light">
                                <tr>
                                    <th>Data</th>
                                    <th>Funcion√°rio</th>
                                    <th>Obra</th>
                                    <th>Local</th>
                                    <th>Status</th>
                                    <th>RDO</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for data, alocacoes in alocacoes_por_data.items() %}
                                    {% for alocacao in alocacoes %}
                                    <tr>
                                        <td>
                                            <strong>{{ data.strftime('%d/%m') }}</strong><br>
                                            <small class="text-muted">{{ data.strftime('%A')|title }}</small>
                                        </td>
                                        <td>
                                            <strong>{{ alocacao.funcionario.nome }}</strong><br>
                                            <small class="text-muted">{{ alocacao.funcionario.cargo }}</small>
                                        </td>
                                        <td>
                                            <strong>{{ alocacao.obra.nome }}</strong><br>
                                            <small class="text-muted">{{ alocacao.obra.codigo }}</small>
                                        </td>
                                        <td>
                                            <span class="badge badge-{% if alocacao.tipo_local == 'campo' %}primary{% else %}secondary{% endif %}">
                                                {{ alocacao.tipo_local|title }}
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge badge-{% if alocacao.status == 'Executado' %}success{% elif alocacao.status == 'Planejado' %}warning{% else %}danger{% endif %}">
                                                {{ alocacao.status }}
                                            </span>
                                        </td>
                                        <td>
                                            {% if alocacao.rdo_gerado_id %}
                                                <a href="#" class="btn btn-sm btn-outline-info">
                                                    <i class="fas fa-clipboard-list"></i> {{ alocacao.rdo_gerado.numero_rdo }}
                                                </a>
                                            {% else %}
                                                <span class="text-muted">-</span>
                                            {% endif %}
                                        </td>
                                    </tr>
                                    {% endfor %}
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                    {% else %}
                    <div class="text-center py-4">
                        <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Nenhuma aloca√ß√£o programada</h5>
                        <p class="text-muted">Use a interface Kanban para alocar funcion√°rios √†s obras.</p>
                        <a href="{{ url_for('main.gestao_equipes_kanban') }}" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Criar Aloca√ß√£o
                        </a>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Atualizar estat√≠sticas a cada 5 minutos
setInterval(function() {
    atualizarEstatisticas();
}, 300000);

function atualizarEstatisticas() {
    $.get('/api/gestao-equipes/estatisticas-dashboard')
        .done(function(data) {
            // Atualizar cards de estat√≠sticas
            $('.card.bg-primary h4').text(data.funcionarios_alocados_hoje);
            $('.card.bg-success h4').text(data.obras_com_equipe_hoje);
            $('.card.bg-info h4').text(data.rdos_criados_semana);
            $('.card.bg-warning h4').text(data.taxa_utilizacao + '%');
        })
        .fail(function() {
            console.log('Erro ao atualizar estat√≠sticas');
        });
}
</script>
{% endblock %}
```

#### **Template Kanban - Interface Principal**
```html
<!-- templates/gestao_equipes/kanban.html -->
{% extends "base.html" %}
{% block title %}Kanban - Gest√£o de Equipes{% endblock %}

{% block extra_css %}
<style>
    .kanban-board { min-height: 600px; }
    .kanban-column { 
        background-color: #f8f9fa; 
        border-radius: 8px; 
        min-height: 500px;
        border: 2px dashed #dee2e6;
    }
    .kanban-item { 
        cursor: move; 
        transition: all 0.2s;
        border-left: 4px solid #007bff;
    }
    .kanban-item:hover { 
        transform: translateY(-2px); 
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .funcionario-card { 
        border-left: 4px solid #28a745;
        cursor: pointer;
    }
    .funcionario-ocupado { 
        border-left-color: #dc3545;
        opacity: 0.7;
    }
    .obra-card { 
        border-left: 4px solid #17a2b8;
        cursor: pointer;
    }
    .drop-zone { 
        min-height: 100px; 
        border: 2px dashed #007bff;
        border-radius: 8px;
        background-color: rgba(0,123,255,0.1);
    }
    .drop-zone.drag-over { 
        background-color: rgba(0,123,255,0.2);
        border-color: #0056b3;
    }
    .alocacao-campo { border-left-color: #007bff; }
    .alocacao-oficina { border-left-color: #6c757d; }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4><i class="fas fa-columns"></i> Kanban - Gest√£o de Equipes</h4>
                    <p class="text-muted mb-0">Arraste funcion√°rios para obras ou vice-versa para criar aloca√ß√µes</p>
                </div>
                <div>
                    <div class="form-group mb-0 d-inline-block mr-3">
                        <label for="dataSelecionada" class="sr-only">Data</label>
                        <input type="date" id="dataSelecionada" class="form-control" 
                               value="{{ data_selecionada.isoformat() }}" 
                               onchange="alterarData()">
                    </div>
                    <a href="{{ url_for('main.gestao_equipes_dashboard') }}" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Voltar
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Kanban Board -->
    <div class="row kanban-board">
        <!-- Coluna 1: Funcion√°rios -->
        <div class="col-md-4 mb-3">
            <div class="kanban-column p-3">
                <h5 class="text-center mb-3">
                    <i class="fas fa-users text-success"></i> Funcion√°rios
                    <span class="badge badge-success ml-2">{{ funcionarios_disponiveis|length }}</span>
                </h5>
                
                <div id="funcionarios-container">
                    {% for funcionario in funcionarios_disponiveis %}
                    <div class="card kanban-item funcionario-card mb-2 {% if not funcionario.disponivel %}funcionario-ocupado{% endif %}"
                         draggable="true"
                         data-tipo="funcionario"
                         data-id="{{ funcionario.id }}"
                         data-nome="{{ funcionario.nome }}"
                         data-cargo="{{ funcionario.cargo }}"
                         data-disponivel="{{ funcionario.disponivel|lower }}">
                        <div class="card-body p-2">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">{{ funcionario.nome }}</h6>
                                    <small class="text-muted">{{ funcionario.cargo }}</small>
                                </div>
                                <div class="ml-2">
                                    {% if funcionario.disponivel %}
                                        <i class="fas fa-check-circle text-success"></i>
                                    {% else %}
                                        <i class="fas fa-clock text-warning"></i>
                                    {% endif %}
                                </div>
                            </div>
                            
                            {% if not funcionario.disponivel and funcionario.alocacao_atual %}
                            <div class="mt-1">
                                <small class="text-muted">
                                    <i class="fas fa-map-marker-alt"></i>
                                    {{ funcionario.alocacao_atual.obra_nome }} 
                                    ({{ funcionario.alocacao_atual.tipo_local }})
                                </small>
                            </div>
                            {% endif %}
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Coluna 2: Obras -->
        <div class="col-md-4 mb-3">
            <div class="kanban-column p-3">
                <h5 class="text-center mb-3">
                    <i class="fas fa-building text-info"></i> Obras Ativas
                    <span class="badge badge-info ml-2">{{ obras_ativas|length }}</span>
                </h5>
                
                <div id="obras-container">
                    {% for obra in obras_ativas %}
                    <div class="card kanban-item obra-card mb-2"
                         draggable="true"
                         data-tipo="obra"
                         data-id="{{ obra.id }}"
                         data-nome="{{ obra.nome }}"
                         data-codigo="{{ obra.codigo }}">
                        <div class="card-body p-2">
                            <div class="d-flex align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">{{ obra.nome }}</h6>
                                    <small class="text-muted">{{ obra.codigo }}</small>
                                </div>
                                <div class="ml-2 text-center">
                                    <div class="progress" style="width: 40px; height: 6px;">
                                        <div class="progress-bar bg-success" 
                                             style="width: {{ obra.progresso }}%"></div>
                                    </div>
                                    <small class="text-muted">{{ obra.progresso }}%</small>
                                </div>
                            </div>
                            
                            <div class="mt-1">
                                <small class="text-muted">
                                    <i class="fas fa-users"></i> {{ obra.alocacoes_hoje }} hoje
                                    {% if obra.cliente_nome %}
                                    | <i class="fas fa-user"></i> {{ obra.cliente_nome }}
                                    {% endif %}
                                </small>
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Coluna 3: Aloca√ß√µes do Dia -->
        <div class="col-md-4 mb-3">
            <div class="kanban-column p-3">
                <h5 class="text-center mb-3">
                    <i class="fas fa-calendar-check text-primary"></i> Aloca√ß√µes Hoje
                    <span class="badge badge-primary ml-2" id="contador-alocacoes">{{ alocacoes_dia|length }}</span>
                </h5>
                
                <div id="alocacoes-container">
                    {% for alocacao in alocacoes_dia %}
                    <div class="card kanban-item mb-2 alocacao-{{ alocacao.tipo_local }}"
                         data-alocacao-id="{{ alocacao.id }}">
                        <div class="card-body p-2">
                            <div class="d-flex align-items-center justify-content-between">
                                <div class="flex-grow-1">
                                    <h6 class="mb-0">{{ alocacao.funcionario.nome }}</h6>
                                    <small class="text-muted">{{ alocacao.obra.nome }}</small>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary dropdown-toggle" 
                                            data-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <div class="dropdown-menu">
                                        <a class="dropdown-item" href="#" onclick="editarAlocacao({{ alocacao.id }})">
                                            <i class="fas fa-edit"></i> Editar
                                        </a>
                                        <a class="dropdown-item text-danger" href="#" onclick="cancelarAlocacao({{ alocacao.id }})">
                                            <i class="fas fa-trash"></i> Cancelar
                                        </a>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="mt-1">
                                <span class="badge badge-{% if alocacao.tipo_local == 'campo' %}primary{% else %}secondary{% endif %} mr-1">
                                    {{ alocacao.tipo_local|title }}
                                </span>
                                {% if alocacao.rdo_gerado_id %}
                                <span class="badge badge-success">
                                    <i class="fas fa-clipboard-list"></i> RDO
                                </span>
                                {% endif %}
                            </div>
                        </div>
                    </div>
                    {% endfor %}
                </div>
                
                <!-- Zona de Drop -->
                <div class="drop-zone mt-3 p-3 text-center" 
                     ondrop="drop(event)" 
                     ondragover="allowDrop(event)"
                     ondragenter="dragEnter(event)"
                     ondragleave="dragLeave(event)">
                    <i class="fas fa-plus-circle fa-2x text-muted mb-2"></i>
                    <p class="text-muted mb-0">Arraste funcion√°rios ou obras aqui para criar aloca√ß√£o</p>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Aloca√ß√£o -->
<div class="modal fade" id="modalAlocacao" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Nova Aloca√ß√£o</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formAlocacao">
                    <div class="form-group">
                        <label>Funcion√°rio</label>
                        <input type="text" id="funcionarioNome" class="form-control" readonly>
                        <input type="hidden" id="funcionarioId">
                    </div>
                    
                    <div class="form-group">
                        <label>Obra</label>
                        <input type="text" id="obraNome" class="form-control" readonly>
                        <input type="hidden" id="obraId">
                    </div>
                    
                    <div class="form-group">
                        <label for="tipoLocal">Local de Trabalho *</label>
                        <select id="tipoLocal" class="form-control" required>
                            <option value="">Selecione...</option>
                            <option value="oficina">Oficina</option>
                            <option value="campo">Campo (cria RDO automaticamente)</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="observacoes">Observa√ß√µes</label>
                        <textarea id="observacoes" class="form-control" rows="3" 
                                  placeholder="Observa√ß√µes sobre a aloca√ß√£o..."></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmarAlocacao()">
                    <i class="fas fa-check"></i> Confirmar Aloca√ß√£o
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let draggedElement = null;
let draggedData = null;

// Drag and Drop
function allowDrop(ev) {
    ev.preventDefault();
}

function dragEnter(ev) {
    ev.preventDefault();
    ev.target.closest('.drop-zone').classList.add('drag-over');
}

function dragLeave(ev) {
    ev.preventDefault();
    if (!ev.target.closest('.drop-zone').contains(ev.relatedTarget)) {
        ev.target.closest('.drop-zone').classList.remove('drag-over');
    }
}

function drop(ev) {
    ev.preventDefault();
    ev.target.closest('.drop-zone').classList.remove('drag-over');
    
    if (draggedData) {
        abrirModalAlocacao(draggedData);
    }
}

// Eventos de drag
document.addEventListener('DOMContentLoaded', function() {
    const draggableItems = document.querySelectorAll('[draggable="true"]');
    
    draggableItems.forEach(item => {
        item.addEventListener('dragstart', function(e) {
            draggedElement = this;
            draggedData = {
                tipo: this.dataset.tipo,
                id: this.dataset.id,
                nome: this.dataset.nome
            };
            
            if (this.dataset.tipo === 'funcionario') {
                draggedData.cargo = this.dataset.cargo;
                draggedData.disponivel = this.dataset.disponivel === 'true';
            } else if (this.dataset.tipo === 'obra') {
                draggedData.codigo = this.dataset.codigo;
            }
        });
        
        item.addEventListener('dragend', function(e) {
            draggedElement = null;
            draggedData = null;
        });
    });
});

function abrirModalAlocacao(data) {
    // Se arrastou funcion√°rio, precisa selecionar obra
    if (data.tipo === 'funcionario') {
        if (!data.disponivel) {
            alert('Este funcion√°rio j√° est√° alocado para hoje!');
            return;
        }
        
        $('#funcionarioNome').val(data.nome + ' (' + data.cargo + ')');
        $('#funcionarioId').val(data.id);
        $('#obraNome').val('').prop('readonly', false);
        $('#obraId').val('');
        
        // Preencher select de obras
        preencherSelectObras();
    }
    // Se arrastou obra, precisa selecionar funcion√°rio
    else if (data.tipo === 'obra') {
        $('#obraNome').val(data.nome + ' (' + data.codigo + ')');
        $('#obraId').val(data.id);
        $('#funcionarioNome').val('').prop('readonly', false);
        $('#funcionarioId').val('');
        
        // Preencher select de funcion√°rios
        preencherSelectFuncionarios();
    }
    
    $('#modalAlocacao').modal('show');
}

function preencherSelectObras() {
    // Implementar select de obras se necess√°rio
    // Por simplicidade, mantemos o input readonly
}

function preencherSelectFuncionarios() {
    // Implementar select de funcion√°rios se necess√°rio
    // Por simplicidade, mantemos o input readonly
}

function confirmarAlocacao() {
    const funcionarioId = $('#funcionarioId').val();
    const obraId = $('#obraId').val();
    const tipoLocal = $('#tipoLocal').val();
    const observacoes = $('#observacoes').val();
    const dataAlocacao = $('#dataSelecionada').val();
    
    if (!funcionarioId || !obraId || !tipoLocal) {
        alert('Preencha todos os campos obrigat√≥rios!');
        return;
    }
    
    // Fazer requisi√ß√£o para API
    $.ajax({
        url: '/api/gestao-equipes/alocar',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            funcionario_id: parseInt(funcionarioId),
            obra_id: parseInt(obraId),
            data_alocacao: dataAlocacao,
            tipo_local: tipoLocal,
            observacoes: observacoes
        }),
        success: function(response) {
            if (response.success) {
                alert(response.message);
                $('#modalAlocacao').modal('hide');
                location.reload(); // Recarregar p√°gina para atualizar
            } else {
                alert('Erro: ' + response.error);
            }
        },
        error: function(xhr) {
            const response = JSON.parse(xhr.responseText);
            alert('Erro: ' + response.error);
        }
    });
}

function alterarData() {
    const novaData = $('#dataSelecionada').val();
    window.location.href = '{{ url_for("main.gestao_equipes_kanban") }}?data=' + novaData;
}

function editarAlocacao(alocacaoId) {
    // Implementar edi√ß√£o de aloca√ß√£o
    alert('Funcionalidade de edi√ß√£o em desenvolvimento');
}

function cancelarAlocacao(alocacaoId) {
    if (confirm('Tem certeza que deseja cancelar esta aloca√ß√£o?')) {
        const motivo = prompt('Motivo do cancelamento:');
        if (motivo !== null) {
            $.ajax({
                url: '/api/gestao-equipes/alocacao/' + alocacaoId,
                method: 'DELETE',
                contentType: 'application/json',
                data: JSON.stringify({ motivo: motivo }),
                success: function(response) {
                    if (response.success) {
                        alert(response.message);
                        location.reload();
                    } else {
                        alert('Erro: ' + response.error);
                    }
                },
                error: function(xhr) {
                    const response = JSON.parse(xhr.responseText);
                    alert('Erro: ' + response.error);
                }
            });
        }
    }
}
</script>
{% endblock %}
```


### **PASSO 8: Atualiza√ß√£o do app.py**

```python
# ===== M√ìDULO 3: ATUALIZA√á√ïES NO APP.PY =====
# ADICIONAR no final de app.py, antes de create_all()

with app.app_context():
    db.create_all()
    
    # Criar √≠ndices para performance do M√≥dulo 3
    try:
        # √çndices para aloca√ß√£o de equipes
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_funcionario_data ON alocacao_equipe(funcionario_id, data_alocacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_obra_data ON alocacao_equipe(obra_id, data_alocacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_admin_data ON alocacao_equipe(admin_id, data_alocacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_status ON alocacao_equipe(status)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_tipo_local ON alocacao_equipe(tipo_local)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_alocacao_rdo_gerado ON alocacao_equipe(rdo_gerado_id)')
        
        # √çndice para ponto com obra (novo campo)
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_ponto_obra_id ON ponto(obra_id)')
        
        # √çndices para otimizar consultas de RDO
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_rdo_obra_data ON rdo(obra_id, data_relatorio)')
        
    except Exception as e:
        logging.warning(f"Erro ao criar √≠ndices do M√≥dulo 3: {e}")
```

### **PASSO 9: Integra√ß√£o com Sistema de Ponto Existente**

```python
# ===== MODIFICAR FUN√á√ÉO DE PROCESSAMENTO DE PONTO =====
# LOCALIZAR onde o ponto √© processado no sistema atual e ADICIONAR:

# Exemplo de integra√ß√£o no processamento de ponto:
def processar_ponto_funcionario(funcionario_id, data_ponto, hora_entrada, hora_saida=None):
    """
    MODIFICAR esta fun√ß√£o (ou similar) no sistema existente
    ADICIONAR a integra√ß√£o com aloca√ß√£o ap√≥s criar o ponto
    """
    
    # ... c√≥digo existente de cria√ß√£o do ponto ...
    
    ponto = Ponto(
        funcionario_id=funcionario_id,
        data_ponto=data_ponto,
        hora_entrada=hora_entrada,
        hora_saida=hora_saida,
        admin_id=admin_id
    )
    
    db.session.add(ponto)
    db.session.flush()
    
    # ===== ADICIONAR ESTA INTEGRA√á√ÉO =====
    # Processar ponto com aloca√ß√£o (M√≥dulo 3)
    try:
        processar_ponto_com_alocacao(ponto.id)
    except Exception as e:
        logging.warning(f"Erro ao integrar ponto com aloca√ß√£o: {e}")
    
    db.session.commit()
    return ponto
```

### **PASSO 10: Integra√ß√£o com M√≥dulos Anteriores**

```python
# ===== INTEGRA√á√ÉO COM M√ìDULO 2 (NOTIFICA√á√ïES) =====
# ADICIONAR em utils.py - fun√ß√£o para notificar cliente sobre equipe

def notificar_cliente_equipe_alocada(obra_id, funcionario_nome, data_alocacao):
    """Notificar cliente quando equipe for alocada (integra√ß√£o com M√≥dulo 2)"""
    try:
        # Verificar se obra tem portal ativo
        obra = Obra.query.get(obra_id)
        if obra and hasattr(obra, 'portal_ativo') and obra.portal_ativo:
            criar_notificacao_cliente(
                obra_id=obra_id,
                tipo='equipe_alocada',
                titulo='Equipe Alocada para sua Obra',
                mensagem=f'O funcion√°rio {funcionario_nome} foi alocado para trabalhar em sua obra no dia {data_alocacao.strftime("%d/%m/%Y")}. Acompanhe o progresso em tempo real.',
                prioridade='normal'
            )
    except Exception as e:
        logging.warning(f"Erro ao notificar cliente sobre aloca√ß√£o: {e}")

# ===== INTEGRA√á√ÉO COM M√ìDULO 1 (OBRAS) =====
# MODIFICAR fun√ß√£o de cria√ß√£o de obra para incluir status correto

def atualizar_status_obra_automatico():
    """
    ADICIONAR esta l√≥gica onde obras s√£o criadas/atualizadas
    Para garantir que obras estejam com status correto para aloca√ß√£o
    """
    # Quando obra for criada a partir de proposta aprovada:
    obra.status = 'Em Andamento'  # Para aparecer na lista de aloca√ß√£o
    
    # Quando obra for conclu√≠da (100% progresso):
    if progresso >= 100:
        obra.status = 'Conclu√≠da'  # Para sair da lista de aloca√ß√£o
```

### **PASSO 11: Templates Adicionais**

#### **Template de Calend√°rio**
```html
<!-- templates/gestao_equipes/calendario.html -->
{% extends "base.html" %}
{% block title %}Calend√°rio - Gest√£o de Equipes{% endblock %}

{% block extra_css %}
<style>
    .calendario-semana { font-size: 0.9em; }
    .dia-header { background-color: #f8f9fa; font-weight: bold; }
    .funcionario-row { border-bottom: 1px solid #dee2e6; }
    .celula-dia { 
        height: 60px; 
        border-right: 1px solid #dee2e6; 
        position: relative;
        cursor: pointer;
    }
    .celula-dia:hover { background-color: #f8f9fa; }
    .alocacao-badge { 
        font-size: 0.75em; 
        position: absolute; 
        top: 2px; 
        left: 2px; 
        right: 2px;
    }
    .alocacao-campo { background-color: #007bff; }
    .alocacao-oficina { background-color: #6c757d; }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4><i class="fas fa-calendar-alt"></i> Calend√°rio - Gest√£o de Equipes</h4>
                    <p class="text-muted mb-0">Semana de {{ segunda_feira.strftime('%d/%m/%Y') }}</p>
                </div>
                <div>
                    <div class="btn-group mr-3">
                        <a href="{{ url_for('main.gestao_equipes_calendario', semana=(segunda_feira - timedelta(days=7)).isoformat()) }}" 
                           class="btn btn-outline-secondary">
                            <i class="fas fa-chevron-left"></i> Anterior
                        </a>
                        <a href="{{ url_for('main.gestao_equipes_calendario') }}" 
                           class="btn btn-outline-primary">Hoje</a>
                        <a href="{{ url_for('main.gestao_equipes_calendario', semana=(segunda_feira + timedelta(days=7)).isoformat()) }}" 
                           class="btn btn-outline-secondary">
                            Pr√≥xima <i class="fas fa-chevron-right"></i>
                        </a>
                    </div>
                    <a href="{{ url_for('main.gestao_equipes_kanban') }}" class="btn btn-primary">
                        <i class="fas fa-columns"></i> Kanban
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Calend√°rio -->
    <div class="card">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-bordered mb-0 calendario-semana">
                    <!-- Header dos dias -->
                    <thead>
                        <tr>
                            <th style="width: 150px;">Funcion√°rio</th>
                            {% for data in datas_semana %}
                            <th class="text-center dia-header">
                                <div>{{ data.strftime('%d/%m') }}</div>
                                <small class="text-muted">{{ data.strftime('%a')|title }}</small>
                            </th>
                            {% endfor %}
                        </tr>
                    </thead>
                    
                    <!-- Linhas dos funcion√°rios -->
                    <tbody>
                        {% for funcionario in funcionarios %}
                        <tr class="funcionario-row">
                            <td class="align-middle">
                                <div>
                                    <strong>{{ funcionario.nome }}</strong><br>
                                    <small class="text-muted">{{ funcionario.cargo }}</small>
                                </div>
                            </td>
                            
                            {% for data in datas_semana %}
                            <td class="celula-dia p-1" 
                                onclick="abrirModalAlocacaoCalendario({{ funcionario.id }}, '{{ data.isoformat() }}')">
                                {% set alocacao = alocacoes_matriz[funcionario.id][data] %}
                                {% if alocacao %}
                                <div class="alocacao-badge badge alocacao-{{ alocacao.tipo_local }}" 
                                     title="{{ alocacao.obra.nome }} ({{ alocacao.tipo_local }})">
                                    {{ alocacao.obra.codigo }}
                                </div>
                                {% endif %}
                            </td>
                            {% endfor %}
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Legenda -->
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-body py-2">
                    <div class="d-flex align-items-center">
                        <span class="mr-3"><strong>Legenda:</strong></span>
                        <span class="badge alocacao-campo mr-2">Campo</span>
                        <span class="badge alocacao-oficina mr-2">Oficina</span>
                        <span class="text-muted">Clique em uma c√©lula para criar/editar aloca√ß√£o</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Aloca√ß√£o R√°pida -->
<div class="modal fade" id="modalAlocacaoCalendario" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Aloca√ß√£o R√°pida</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="formAlocacaoCalendario">
                    <div class="form-group">
                        <label>Funcion√°rio</label>
                        <input type="text" id="funcionarioNomeCalendario" class="form-control" readonly>
                        <input type="hidden" id="funcionarioIdCalendario">
                    </div>
                    
                    <div class="form-group">
                        <label>Data</label>
                        <input type="date" id="dataAlocacaoCalendario" class="form-control" readonly>
                    </div>
                    
                    <div class="form-group">
                        <label for="obraIdCalendario">Obra *</label>
                        <select id="obraIdCalendario" class="form-control" required>
                            <option value="">Selecione uma obra...</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label for="tipoLocalCalendario">Local de Trabalho *</label>
                        <select id="tipoLocalCalendario" class="form-control" required>
                            <option value="">Selecione...</option>
                            <option value="oficina">Oficina</option>
                            <option value="campo">Campo (cria RDO automaticamente)</option>
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" onclick="confirmarAlocacaoCalendario()">
                    <i class="fas fa-check"></i> Confirmar
                </button>
            </div>
        </div>
    </div>
</div>

<script>
function abrirModalAlocacaoCalendario(funcionarioId, data) {
    // Buscar dados do funcion√°rio
    const funcionarioNome = $(`tr:has(td:contains('${funcionarioId}'))`).find('strong').text();
    
    $('#funcionarioIdCalendario').val(funcionarioId);
    $('#funcionarioNomeCalendario').val(funcionarioNome);
    $('#dataAlocacaoCalendario').val(data);
    
    // Carregar obras ativas
    carregarObrasAtivas();
    
    $('#modalAlocacaoCalendario').modal('show');
}

function carregarObrasAtivas() {
    $.get('/api/gestao-equipes/obras-ativas')
        .done(function(obras) {
            const select = $('#obraIdCalendario');
            select.empty().append('<option value="">Selecione uma obra...</option>');
            
            obras.forEach(function(obra) {
                select.append(`<option value="${obra.id}">${obra.nome} (${obra.codigo})</option>`);
            });
        })
        .fail(function() {
            alert('Erro ao carregar obras');
        });
}

function confirmarAlocacaoCalendario() {
    const funcionarioId = $('#funcionarioIdCalendario').val();
    const obraId = $('#obraIdCalendario').val();
    const dataAlocacao = $('#dataAlocacaoCalendario').val();
    const tipoLocal = $('#tipoLocalCalendario').val();
    
    if (!obraId || !tipoLocal) {
        alert('Preencha todos os campos obrigat√≥rios!');
        return;
    }
    
    $.ajax({
        url: '/api/gestao-equipes/alocar',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            funcionario_id: parseInt(funcionarioId),
            obra_id: parseInt(obraId),
            data_alocacao: dataAlocacao,
            tipo_local: tipoLocal
        }),
        success: function(response) {
            if (response.success) {
                alert(response.message);
                $('#modalAlocacaoCalendario').modal('hide');
                location.reload();
            } else {
                alert('Erro: ' + response.error);
            }
        },
        error: function(xhr) {
            const response = JSON.parse(xhr.responseText);
            alert('Erro: ' + response.error);
        }
    });
}
</script>
{% endblock %}
```

---

## üîß INSTRU√á√ïES FINAIS DE IMPLEMENTA√á√ÉO

### **PASSO 12: Testar o M√≥dulo Completo**

**Cen√°rios de Teste:**

1. **Cria√ß√£o de Aloca√ß√£o via Kanban:**
   - Arrastar funcion√°rio para zona de drop
   - Selecionar obra e tipo (campo)
   - Verificar cria√ß√£o autom√°tica de RDO
   - Verificar notifica√ß√£o para cliente

2. **Cria√ß√£o de Aloca√ß√£o via Calend√°rio:**
   - Clicar em c√©lula do calend√°rio
   - Preencher dados da aloca√ß√£o
   - Verificar integra√ß√£o com sistema

3. **Integra√ß√£o com Ponto:**
   - Funcion√°rio bater ponto
   - Verificar detec√ß√£o autom√°tica de aloca√ß√£o
   - Verificar atualiza√ß√£o de status

4. **Relat√≥rios:**
   - Gerar relat√≥rio de produtividade
   - Verificar estat√≠sticas do dashboard
   - Testar filtros por per√≠odo

5. **Permiss√µes:**
   - Testar acesso como gestor de equipes
   - Verificar restri√ß√µes para funcion√°rios
   - Validar multi-tenant

### **PASSO 13: Valida√ß√µes Cr√≠ticas**

- ‚úÖ **Integra√ß√£o Perfeita:** Funciona com sistemas RDO e Ponto existentes
- ‚úÖ **Cria√ß√£o Autom√°tica:** RDO criado automaticamente para aloca√ß√µes de campo
- ‚úÖ **Notifica√ß√µes:** Cliente notificado quando equipe for alocada
- ‚úÖ **Permiss√µes:** Novo tipo de usu√°rio (gestor de equipes) funcionando
- ‚úÖ **Interface:** Kanban e calend√°rio responsivos
- ‚úÖ **Performance:** Queries otimizadas com √≠ndices
- ‚úÖ **Compatibilidade:** Zero quebra do sistema existente

---

## ‚ö†Ô∏è REGRAS CR√çTICAS FINAIS

### **COMPATIBILIDADE ABSOLUTA:**
- **NUNCA** modificar classes RDO, Ponto ou Funcionario existentes
- **APENAS ADICIONAR** novos campos onde especificado
- **MANTER** todas as funcionalidades existentes funcionando
- **USAR** sistema de autentica√ß√£o atual

### **INTEGRA√á√ÉO PERFEITA:**
- **REUTILIZAR** totalmente o sistema RDO para cria√ß√£o autom√°tica
- **INTEGRAR** com sistema de ponto existente
- **NOTIFICAR** cliente via M√≥dulo 2 quando equipe for alocada
- **MANTER** sistema multi-tenant funcionando

### **RESULTADO ESPERADO:**
M√≥dulo 3 funcionando perfeitamente com:
- ‚úÖ **Interface Kanban** com drag & drop para aloca√ß√£o
- ‚úÖ **Calend√°rio semanal** para planejamento
- ‚úÖ **Cria√ß√£o autom√°tica de RDO** para aloca√ß√µes de campo
- ‚úÖ **Integra√ß√£o com ponto** existente
- ‚úÖ **Notifica√ß√µes autom√°ticas** para cliente
- ‚úÖ **Relat√≥rios de produtividade** completos
- ‚úÖ **Permiss√µes espec√≠ficas** para gestor de equipes

**üéØ M√ìDULO 3 PRONTO PARA IMPLEMENTA√á√ÉO IMEDIATA NO REPLIT!**

---

## üìä RESUMO T√âCNICO

### **Arquitetura:**
- **1 nova classe:** `AlocacaoEquipe`
- **1 novo tipo de usu√°rio:** `GESTOR_EQUIPES`
- **1 novo campo** na classe `Ponto` existente
- **1 novo decorator:** `@gestor_equipes_required`

### **Funcionalidades:**
- **Interface Kanban** com drag & drop
- **Calend√°rio semanal** para planejamento
- **Cria√ß√£o autom√°tica** de RDO
- **Integra√ß√£o** com sistema de ponto
- **Relat√≥rios** de produtividade

### **Performance:**
- **6 novos √≠ndices** para otimiza√ß√£o
- **APIs otimizadas** para interface din√¢mica
- **Cache** de dados frequentes
- **Queries eficientes**

### **Integra√ß√£o:**
- **100% compat√≠vel** com M√≥dulos 1 e 2
- **Zero modifica√ß√µes** em classes cr√≠ticas
- **Aproveitamento total** dos sistemas existentes
- **Base s√≥lida** para pr√≥ximos m√≥dulos

**Status:** M√≥dulo 3 especificado e pronto para implementa√ß√£o! üöÄ

