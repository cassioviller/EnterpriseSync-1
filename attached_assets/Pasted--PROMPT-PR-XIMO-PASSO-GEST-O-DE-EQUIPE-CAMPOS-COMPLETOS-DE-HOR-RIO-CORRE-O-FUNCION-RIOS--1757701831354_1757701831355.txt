# üéØ PROMPT - PR√ìXIMO PASSO GEST√ÉO DE EQUIPE
**CAMPOS COMPLETOS DE HOR√ÅRIO + CORRE√á√ÉO FUNCION√ÅRIOS NOS CARDS**

## üìä SITUA√á√ÉO ATUAL ANALISADA

### ‚úÖ O QUE EST√Å FUNCIONANDO:
- **Modal abre corretamente** - Clique nos bot√µes üë• funciona
- **Funcion√°rios s√£o adicionados** - API salva no banco
- **Persist√™ncia b√°sica** - Dados ficam salvos ap√≥s F5
- **Layout campo/oficina** - Separa√ß√£o visual implementada

### ‚ùå PROBLEMAS IDENTIFICADOS:

1. **FUNCION√ÅRIOS N√ÉO APARECEM NOS CARDS**
   - Modal salva funcion√°rios no banco
   - Mas cards continuam mostrando "Erro ao carregar"
   - API de listagem n√£o est√° retornando funcion√°rios

2. **CAMPOS DE HOR√ÅRIO INCOMPLETOS**
   - Modal s√≥ tem: In√≠cio, Fim, Papel/Fun√ß√£o
   - Faltam: In√≠cio Almo√ßo, Fim Almo√ßo, % Extras, Tipo de Lan√ßamento
   - N√£o puxa hor√°rios cadastrados do funcion√°rio automaticamente

3. **TIPO DE LAN√áAMENTO N√ÉO AUTOM√ÅTICO**
   - Deveria preencher automaticamente baseado no dia da semana
   - Seg-Sex: trabalho_normal
   - S√°b: sabado_trabalhado  
   - Dom: domingo_trabalhado

## üéØ PR√ìXIMO PASSO - IMPLEMENTA√á√ÉO

### **FASE 1: CORRIGIR FUNCION√ÅRIOS NOS CARDS**

#### 1.1 Corrigir API de Listagem
```python
# equipe_views.py - Linha ~200
@equipe_bp.route('/api/allocations/week/<data_inicio>')
@login_required
def api_get_week_allocations(data_inicio):
    """API que retorna aloca√ß√µes da semana COM FUNCION√ÅRIOS"""
    try:
        admin_id = get_admin_id()
        start_date = datetime.strptime(data_inicio, '%Y-%m-%d').date()
        
        # Buscar aloca√ß√µes da semana
        allocations = Allocation.query.filter(
            Allocation.admin_id == admin_id,
            Allocation.data_alocacao >= start_date,
            Allocation.data_alocacao < start_date + timedelta(days=7)
        ).all()
        
        result = []
        for allocation in allocations:
            # BUSCAR FUNCION√ÅRIOS DA ALOCA√á√ÉO
            funcionarios = []
            for emp in allocation.employees:  # Relacionamento j√° existe
                funcionarios.append({
                    'id': emp.funcionario.id,
                    'nome': emp.funcionario.nome,
                    'nome_curto': ' '.join(emp.funcionario.nome.split()[:2]),  # Primeiro e segundo nome
                    'papel': emp.papel or 'Sem fun√ß√£o',
                    'turno_inicio': emp.turno_inicio.strftime('%H:%M') if emp.turno_inicio else '08:00',
                    'turno_fim': emp.turno_fim.strftime('%H:%M') if emp.turno_fim else '17:00'
                })
            
            result.append({
                'id': allocation.id,
                'obra_id': allocation.obra_id,
                'obra_nome': allocation.obra.nome,
                'data_alocacao': allocation.data_alocacao.strftime('%Y-%m-%d'),
                'local': allocation.local,
                'funcionarios': funcionarios,  # INCLUIR FUNCION√ÅRIOS
                'funcionarios_count': len(funcionarios)
            })
        
        return jsonify({
            'success': True,
            'data': result
        })
        
    except Exception as e:
        logging.error(f"Erro ao buscar aloca√ß√µes da semana: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
```

#### 1.2 Atualizar JavaScript para Mostrar Funcion√°rios
```javascript
// templates/equipe/alocacao_simples.html - Fun√ß√£o updateCardContent
function updateCardContent(card, allocation) {
    const cardBody = card.querySelector('.card-body');
    
    // T√çTULO DA OBRA
    const obraTitle = `<h6 class="card-title mb-2">${allocation.obra_nome}</h6>`;
    
    // LISTA DE FUNCION√ÅRIOS
    let funcionariosHtml = '';
    if (allocation.funcionarios && allocation.funcionarios.length > 0) {
        funcionariosHtml = '<div class="funcionarios-list">';
        allocation.funcionarios.forEach(func => {
            funcionariosHtml += `
                <div class="funcionario-item">
                    <span class="funcionario-nome">${func.nome_curto}</span>
                    <small class="funcionario-papel text-muted">${func.papel}</small>
                </div>
            `;
        });
        funcionariosHtml += '</div>';
    } else {
        funcionariosHtml = '<small class="text-muted">Nenhum funcion√°rio alocado</small>';
    }
    
    // BOT√ïES DE A√á√ÉO (PEQUENOS)
    const botoesHtml = `
        <div class="card-actions">
            <button class="btn btn-sm btn-outline-primary btn-funcionarios" 
                    data-allocation-id="${allocation.id}" 
                    data-obra-nome="${allocation.obra_nome}"
                    title="Gerenciar funcion√°rios">
                üë•
            </button>
            <button class="btn btn-sm btn-outline-danger btn-remover" 
                    data-allocation-id="${allocation.id}"
                    title="Remover obra">
                ‚úï
            </button>
        </div>
    `;
    
    cardBody.innerHTML = obraTitle + funcionariosHtml + botoesHtml;
}
```

### **FASE 2: CAMPOS COMPLETOS DE HOR√ÅRIO**

#### 2.1 Atualizar Modal com Todos os Campos
```html
<!-- Modal Adicionar Funcion√°rio - CAMPOS COMPLETOS -->
<div class="row mb-3">
    <div class="col-md-12">
        <label class="form-label">Funcion√°rio</label>
        <select id="funcionario-select" class="form-select" required>
            <option value="">Selecione um funcion√°rio</option>
        </select>
    </div>
</div>

<!-- HOR√ÅRIOS DE TRABALHO -->
<div class="row mb-3">
    <div class="col-md-3">
        <label class="form-label">Entrada</label>
        <input type="time" id="turno-inicio" class="form-control" value="08:00" required>
    </div>
    <div class="col-md-3">
        <label class="form-label">In√≠cio Almo√ßo</label>
        <input type="time" id="inicio-almoco" class="form-control" value="12:00">
    </div>
    <div class="col-md-3">
        <label class="form-label">Fim Almo√ßo</label>
        <input type="time" id="fim-almoco" class="form-control" value="13:00">
    </div>
    <div class="col-md-3">
        <label class="form-label">Sa√≠da</label>
        <input type="time" id="turno-fim" class="form-control" value="17:00" required>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-6">
        <label class="form-label">% Extras</label>
        <input type="number" id="percentual-extras" class="form-control" value="0" min="0" max="100" step="0.1">
    </div>
    <div class="col-md-6">
        <label class="form-label">Tipo de Lan√ßamento *</label>
        <select id="tipo-lancamento" class="form-select" required>
            <option value="trabalho_normal">Trabalho Normal</option>
            <option value="sabado_trabalhado">S√°bado Trabalhado</option>
            <option value="domingo_trabalhado">Domingo Trabalhado</option>
            <option value="falta">Falta</option>
            <option value="sabado_folga">S√°bado Folga</option>
            <option value="domingo_folga">Domingo Folga</option>
            <option value="feriado_folga">Feriado Folga</option>
        </select>
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-12">
        <label class="form-label">Papel/Fun√ß√£o</label>
        <input type="text" id="funcionario-papel" class="form-control" placeholder="Ex: L√≠der, Ajudante">
    </div>
</div>
```

#### 2.2 JavaScript para Preenchimento Autom√°tico
```javascript
// Fun√ß√£o para preencher hor√°rios automaticamente
function preencherHorariosAutomaticos(funcionarioId, dataAlocacao) {
    // 1. BUSCAR HOR√ÅRIO CADASTRADO DO FUNCION√ÅRIO
    fetch(`/funcionarios/api/${funcionarioId}/horario`)
        .then(response => response.json())
        .then(data => {
            if (data.success && data.horario) {
                // Preencher campos com hor√°rio cadastrado
                document.getElementById('turno-inicio').value = data.horario.entrada || '08:00';
                document.getElementById('inicio-almoco').value = data.horario.inicio_almoco || '12:00';
                document.getElementById('fim-almoco').value = data.horario.fim_almoco || '13:00';
                document.getElementById('turno-fim').value = data.horario.saida || '17:00';
            }
        })
        .catch(error => console.error('Erro ao buscar hor√°rio:', error));
    
    // 2. DEFINIR TIPO DE LAN√áAMENTO BASEADO NO DIA DA SEMANA
    const data = new Date(dataAlocacao);
    const diaSemana = data.getDay(); // 0=Domingo, 1=Segunda, ..., 6=S√°bado
    
    let tipoLancamento = 'trabalho_normal';
    if (diaSemana === 6) {
        tipoLancamento = 'sabado_trabalhado';
    } else if (diaSemana === 0) {
        tipoLancamento = 'domingo_trabalhado';
    }
    
    document.getElementById('tipo-lancamento').value = tipoLancamento;
}

// Chamar quando funcion√°rio for selecionado
document.getElementById('funcionario-select').addEventListener('change', function() {
    const funcionarioId = this.value;
    const dataAlocacao = document.getElementById('modal-data-alocacao').value;
    
    if (funcionarioId && dataAlocacao) {
        preencherHorariosAutomaticos(funcionarioId, dataAlocacao);
    }
});
```

#### 2.3 Atualizar API para Salvar Campos Completos
```python
# equipe_views.py - API de adicionar funcion√°rio
@equipe_bp.route('/api/allocations/<int:allocation_id>/employees', methods=['POST'])
@login_required
def api_add_employee_to_allocation(allocation_id):
    """Adicionar funcion√°rio com campos completos"""
    try:
        data = request.get_json()
        
        # Validar dados obrigat√≥rios
        required_fields = ['funcionario_id', 'turno_inicio', 'turno_fim', 'tipo_lancamento']
        for field in required_fields:
            if field not in data:
                return jsonify({'success': False, 'error': f'Campo {field} √© obrigat√≥rio'}), 400
        
        # Verificar se funcion√°rio j√° est√° alocado
        existing = AllocationEmployee.query.filter_by(
            allocation_id=allocation_id,
            funcionario_id=data['funcionario_id']
        ).first()
        
        if existing:
            return jsonify({'success': False, 'error': 'Funcion√°rio j√° est√° alocado nesta obra/dia'}), 400
        
        # Criar nova aloca√ß√£o de funcion√°rio
        employee_allocation = AllocationEmployee(
            allocation_id=allocation_id,
            funcionario_id=data['funcionario_id'],
            turno_inicio=datetime.strptime(data['turno_inicio'], '%H:%M').time(),
            turno_fim=datetime.strptime(data['turno_fim'], '%H:%M').time(),
            inicio_almoco=datetime.strptime(data.get('inicio_almoco', '12:00'), '%H:%M').time(),
            fim_almoco=datetime.strptime(data.get('fim_almoco', '13:00'), '%H:%M').time(),
            percentual_extras=float(data.get('percentual_extras', 0)),
            tipo_lancamento=data['tipo_lancamento'],
            papel=data.get('papel', ''),
            observacao=data.get('observacao', '')
        )
        
        db.session.add(employee_allocation)
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Funcion√°rio adicionado com sucesso',
            'employee': {
                'id': employee_allocation.id,
                'funcionario_nome': employee_allocation.funcionario.nome,
                'turno_inicio': employee_allocation.turno_inicio.strftime('%H:%M'),
                'turno_fim': employee_allocation.turno_fim.strftime('%H:%M'),
                'tipo_lancamento': employee_allocation.tipo_lancamento
            }
        })
        
    except Exception as e:
        db.session.rollback()
        logging.error(f"Erro ao adicionar funcion√°rio: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500
```

### **FASE 3: API PARA BUSCAR HOR√ÅRIO DO FUNCION√ÅRIO**

```python
# equipe_views.py - Nova API
@equipe_bp.route('/funcionarios/api/<int:funcionario_id>/horario')
@login_required
def api_get_funcionario_horario(funcionario_id):
    """Buscar hor√°rio cadastrado do funcion√°rio"""
    try:
        funcionario = Funcionario.query.get_or_404(funcionario_id)
        
        # Buscar hor√°rio de trabalho
        horario = None
        if hasattr(funcionario, 'horario_trabalho') and funcionario.horario_trabalho:
            horario = {
                'entrada': funcionario.horario_trabalho.entrada.strftime('%H:%M'),
                'inicio_almoco': funcionario.horario_trabalho.inicio_almoco.strftime('%H:%M'),
                'fim_almoco': funcionario.horario_trabalho.fim_almoco.strftime('%H:%M'),
                'saida': funcionario.horario_trabalho.saida.strftime('%H:%M')
            }
        
        return jsonify({
            'success': True,
            'horario': horario,
            'funcionario': {
                'id': funcionario.id,
                'nome': funcionario.nome
            }
        })
        
    except Exception as e:
        logging.error(f"Erro ao buscar hor√°rio do funcion√°rio: {e}")
        return jsonify({'success': False, 'error': str(e)}), 500
```

## üéØ CSS PARA LAYOUT OTIMIZADO DOS CARDS

```css
/* Cards com funcion√°rios otimizados */
.funcionarios-list {
    margin: 8px 0;
    max-height: 80px;
    overflow-y: auto;
}

.funcionario-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 2px 0;
    border-bottom: 1px solid #f0f0f0;
}

.funcionario-item:last-child {
    border-bottom: none;
}

.funcionario-nome {
    font-size: 0.85rem;
    font-weight: 500;
}

.funcionario-papel {
    font-size: 0.75rem;
    font-style: italic;
}

.card-actions {
    position: absolute;
    top: 8px;
    right: 8px;
    display: flex;
    gap: 4px;
}

.card-actions .btn {
    padding: 2px 6px;
    font-size: 0.75rem;
    line-height: 1;
}
```

## ‚úÖ CHECKLIST DE IMPLEMENTA√á√ÉO

### **FASE 1 - Funcion√°rios nos Cards:**
- [ ] Corrigir API `/api/allocations/week/<data>` para incluir funcion√°rios
- [ ] Atualizar JavaScript `updateCardContent()` para mostrar funcion√°rios
- [ ] Testar se funcion√°rios aparecem nos cards ap√≥s adicionar

### **FASE 2 - Campos Completos:**
- [ ] Adicionar campos de hor√°rio completo no modal
- [ ] Implementar preenchimento autom√°tico baseado no funcion√°rio
- [ ] Implementar tipo de lan√ßamento autom√°tico baseado no dia
- [ ] Atualizar API para salvar todos os campos

### **FASE 3 - API de Hor√°rio:**
- [ ] Criar API para buscar hor√°rio do funcion√°rio
- [ ] Integrar com preenchimento autom√°tico
- [ ] Testar funcionamento completo

## üöÄ RESULTADO ESPERADO

Ap√≥s implementa√ß√£o:
1. **Cards mostram funcion√°rios** - Nome curto + fun√ß√£o
2. **Modal completo** - Todos os campos de hor√°rio
3. **Preenchimento autom√°tico** - Hor√°rios do funcion√°rio + tipo baseado no dia
4. **Edit√°vel** - Usu√°rio pode alterar qualquer campo se necess√°rio
5. **Persist√™ncia total** - Dados salvos e carregados corretamente

**PRIORIDADE:** Implementar na ordem das fases para garantir funcionalidade b√°sica primeiro, depois melhorias.
