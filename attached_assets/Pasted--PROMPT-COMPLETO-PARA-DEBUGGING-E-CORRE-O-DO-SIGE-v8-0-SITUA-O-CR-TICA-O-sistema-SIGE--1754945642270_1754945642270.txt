# üîß PROMPT COMPLETO PARA DEBUGGING E CORRE√á√ÉO DO SIGE v8.0

**SITUA√á√ÉO CR√çTICA:** O sistema SIGE v8.0 est√° apresentando "Internal Server Error" em todas as p√°ginas dos 7 m√≥dulos implementados, impedindo o funcionamento completo da aplica√ß√£o.

**OBJETIVO:** Diagnosticar, identificar e corrigir TODOS os erros que est√£o causando falhas no sistema, garantindo que os 7 m√≥dulos funcionem perfeitamente.

---

## üö® **CONTEXTO DO PROBLEMA**

O SIGE v8.0 foi implementado com 7 m√≥dulos integrados:
1. **M√≥dulo 1:** Sistema de Propostas Digitais
2. **M√≥dulo 2:** Portal do Cliente com Acompanhamento
3. **M√≥dulo 3:** Gest√£o Visual de Equipes
4. **M√≥dulo 4:** Almoxarifado Inteligente
5. **M√≥dulo 5:** Reconhecimento Facial para Ponto
6. **M√≥dulo 6:** Folha de Pagamento Autom√°tica
7. **M√≥dulo 7:** Sistema Cont√°bil Completo

**PROBLEMA ATUAL:** Todas as p√°ginas dos m√≥dulos est√£o retornando "Internal Server Error", indicando problemas cr√≠ticos na aplica√ß√£o que impedem o funcionamento b√°sico.

---

## üéØ **INSTRU√á√ïES PARA DEBUGGING SISTEM√ÅTICO**

### **FASE 1: DIAGN√ìSTICO INICIAL OBRIGAT√ìRIO**

**ANTES DE QUALQUER CORRE√á√ÉO, EXECUTE ESTAS VERIFICA√á√ïES:**

#### **1.1 Verifica√ß√£o dos Logs de Erro**

Execute imediatamente estes comandos para identificar os erros espec√≠ficos:

```bash
# 1. Verificar logs do Flask
tail -f /var/log/flask/error.log

# 2. Se n√£o existir, verificar logs do sistema
tail -f /var/log/syslog | grep -i error

# 3. Verificar logs do Python
python3 -c "
import sys
import traceback
try:
    from app import app
    print('‚úì App importado com sucesso')
except Exception as e:
    print(f'‚úó Erro na importa√ß√£o: {e}')
    traceback.print_exc()
"

# 4. Testar importa√ß√£o de cada m√≥dulo
python3 -c "
modules = ['models', 'views', 'utils', 'auth']
for module in modules:
    try:
        exec(f'from app import {module}')
        print(f'‚úì {module} importado com sucesso')
    except Exception as e:
        print(f'‚úó Erro em {module}: {e}')
"
```

#### **1.2 Verifica√ß√£o do Banco de Dados**

```bash
# 1. Verificar se o banco est√° acess√≠vel
python3 -c "
from app import db
try:
    db.engine.execute('SELECT 1')
    print('‚úì Banco de dados acess√≠vel')
except Exception as e:
    print(f'‚úó Erro no banco: {e}')
"

# 2. Verificar se as tabelas existem
python3 -c "
from app import db
from sqlalchemy import inspect
inspector = inspect(db.engine)
tables = inspector.get_table_names()
print(f'Tabelas encontradas: {len(tables)}')
for table in sorted(tables):
    print(f'  - {table}')
"

# 3. Verificar migra√ß√µes pendentes
flask db current
flask db heads
```

#### **1.3 Verifica√ß√£o de Depend√™ncias**

```bash
# 1. Verificar se todas as depend√™ncias est√£o instaladas
pip3 list | grep -E "(flask|sqlalchemy|wtf|login|migrate)"

# 2. Verificar vers√µes cr√≠ticas
python3 -c "
import flask
import sqlalchemy
import flask_login
print(f'Flask: {flask.__version__}')
print(f'SQLAlchemy: {sqlalchemy.__version__}')
print(f'Flask-Login: {flask_login.__version__}')
"

# 3. Instalar depend√™ncias que podem estar faltando
pip3 install flask-wtf flask-migrate flask-login werkzeug sqlalchemy psycopg2-binary
```

### **FASE 2: CORRE√á√ïES SISTEM√ÅTICAS OBRIGAT√ìRIAS**

Com base nos erros mais comuns em implementa√ß√µes de m√∫ltiplos m√≥dulos, execute estas corre√ß√µes:

#### **2.1 Corre√ß√£o de Imports Circulares**

**PROBLEMA COMUM:** Imports circulares entre m√≥dulos causam falhas na inicializa√ß√£o.

**SOLU√á√ÉO:** Reorganizar imports no arquivo principal `__init__.py`:

```python
# Arquivo: app/__init__.py (SUBSTITUIR COMPLETAMENTE)
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate
from config import Config

# Inicializar extens√µes
db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()

def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)
    
    # Inicializar extens√µes com app
    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)
    
    # Configurar Flask-Login
    login_manager.login_view = 'main.login'
    login_manager.login_message = 'Fa√ßa login para acessar esta p√°gina.'
    login_manager.login_message_category = 'info'
    
    # IMPORTAR MODELOS ANTES DOS BLUEPRINTS
    from app.models import Usuario, Funcionario, Obra, RDO, Ponto
    
    # User loader para Flask-Login
    @login_manager.user_loader
    def load_user(user_id):
        return Usuario.query.get(int(user_id))
    
    # Registrar blueprints AP√ìS importar modelos
    try:
        from app.views.main import main_bp
        app.register_blueprint(main_bp)
        print("‚úì Blueprint main registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint main: {e}")
    
    try:
        from app.views.propostas import propostas_bp
        app.register_blueprint(propostas_bp)
        print("‚úì Blueprint propostas registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint propostas: {e}")
    
    try:
        from app.views.portal_cliente import portal_cliente_bp
        app.register_blueprint(portal_cliente_bp)
        print("‚úì Blueprint portal_cliente registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint portal_cliente: {e}")
    
    try:
        from app.views.gestao_equipes import gestao_equipes_bp
        app.register_blueprint(gestao_equipes_bp)
        print("‚úì Blueprint gestao_equipes registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint gestao_equipes: {e}")
    
    try:
        from app.views.almoxarifado import almoxarifado_bp
        app.register_blueprint(almoxarifado_bp)
        print("‚úì Blueprint almoxarifado registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint almoxarifado: {e}")
    
    try:
        from app.views.reconhecimento_facial import reconhecimento_facial_bp
        app.register_blueprint(reconhecimento_facial_bp)
        print("‚úì Blueprint reconhecimento_facial registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint reconhecimento_facial: {e}")
    
    try:
        from app.views.folha_pagamento import folha_pagamento_bp
        app.register_blueprint(folha_pagamento_bp)
        print("‚úì Blueprint folha_pagamento registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint folha_pagamento: {e}")
    
    try:
        from app.views.contabilidade import contabilidade_bp
        app.register_blueprint(contabilidade_bp)
        print("‚úì Blueprint contabilidade registrado")
    except Exception as e:
        print(f"‚úó Erro no blueprint contabilidade: {e}")
    
    return app

# Importar modelos aqui para evitar imports circulares
from app import models
```

#### **2.2 Corre√ß√£o de Modelos com Relacionamentos**

**PROBLEMA COMUM:** Relacionamentos mal definidos entre tabelas causam erros de inicializa√ß√£o.

**SOLU√á√ÉO:** Verificar e corrigir o arquivo `models.py`:

```python
# Arquivo: app/models.py (VERIFICAR E CORRIGIR)
from app import db
from flask_login import UserMixin
from datetime import datetime, date
from enum import Enum
from sqlalchemy import Index

# Enums
class TipoUsuario(Enum):
    SUPER_ADMIN = "SUPER_ADMIN"
    ADMIN = "ADMIN"
    FUNCIONARIO = "FUNCIONARIO"
    GESTOR_EQUIPES = "GESTOR_EQUIPES"
    ALMOXARIFADO = "ALMOXARIFADO"

class StatusObra(Enum):
    ORCAMENTO = "ORCAMENTO"
    APROVADA = "APROVADA"
    EM_ANDAMENTO = "EM_ANDAMENTO"
    CONCLUIDA = "CONCLUIDA"
    CANCELADA = "CANCELADA"

# VERIFICAR SE TODAS ESTAS CLASSES EXISTEM E EST√ÉO CORRETAS:

class Usuario(UserMixin, db.Model):
    __tablename__ = 'usuarios'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    senha_hash = db.Column(db.String(255), nullable=False)
    tipo_usuario = db.Column(db.Enum(TipoUsuario), nullable=False)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=True)
    ativo = db.Column(db.Boolean, default=True)
    data_criacao = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relacionamentos
    funcionarios = db.relationship('Usuario', backref=db.backref('admin', remote_side=[id]))
    
    def get_id(self):
        if self.tipo_usuario == TipoUsuario.ADMIN:
            return self.id
        else:
            return self.admin_id

class Funcionario(db.Model):
    __tablename__ = 'funcionarios'
    
    id = db.Column(db.Integer, primary_key=True)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=False)
    nome = db.Column(db.String(100), nullable=False)
    cpf = db.Column(db.String(14), nullable=False)
    cargo = db.Column(db.String(50), nullable=False)
    salario = db.Column(db.Numeric(10, 2), nullable=False)
    data_admissao = db.Column(db.Date, nullable=False)
    ativo = db.Column(db.Boolean, default=True)
    
    # Relacionamentos
    admin = db.relationship('Usuario', backref='funcionarios_cadastrados')

class Obra(db.Model):
    __tablename__ = 'obras'
    
    id = db.Column(db.Integer, primary_key=True)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuarios.id'), nullable=False)
    nome = db.Column(db.String(200), nullable=False)
    cliente = db.Column(db.String(100), nullable=False)
    endereco = db.Column(db.Text)
    valor_total = db.Column(db.Numeric(12, 2))
    data_inicio = db.Column(db.Date)
    data_fim_prevista = db.Column(db.Date)
    status = db.Column(db.Enum(StatusObra), default=StatusObra.ORCAMENTO)
    
    # Relacionamentos
    admin = db.relationship('Usuario', backref='obras_administradas')

# ADICIONAR TODAS AS OUTRAS CLASSES DOS 7 M√ìDULOS...
# (Proposta, PropostaServico, NotificacaoCliente, AlocacaoEquipe, etc.)

# IMPORTANTE: Verificar se todas as classes dos 7 m√≥dulos est√£o definidas aqui
```

#### **2.3 Corre√ß√£o de Blueprints**

**PROBLEMA COMUM:** Blueprints mal configurados ou com imports incorretos.

**SOLU√á√ÉO:** Verificar estrutura de cada blueprint:

```python
# Exemplo para views/main.py (VERIFICAR PADR√ÉO EM TODOS)
from flask import Blueprint, render_template, request, redirect, url_for, flash
from flask_login import login_required, current_user
from app.auth import admin_required, funcionario_required

main_bp = Blueprint('main', __name__)

@main_bp.route('/')
def index():
    try:
        return render_template('index.html')
    except Exception as e:
        print(f"Erro na rota index: {e}")
        return f"Erro: {e}", 500

@main_bp.route('/dashboard')
@login_required
def dashboard():
    try:
        return render_template('dashboard.html')
    except Exception as e:
        print(f"Erro na rota dashboard: {e}")
        return f"Erro: {e}", 500

# VERIFICAR SE TODAS AS ROTAS T√äM TRY/EXCEPT PARA DEBUG
```

#### **2.4 Corre√ß√£o de Templates**

**PROBLEMA COMUM:** Templates com vari√°veis indefinidas ou extends incorretos.

**SOLU√á√ÉO:** Verificar template base:

```html
<!-- Arquivo: templates/base.html (VERIFICAR SE EXISTE) -->
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}SIGE v8.0{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="{{ url_for('main.index') }}">SIGE v8.0</a>
            <!-- Menu navigation -->
        </div>
    </nav>
    
    <div class="container mt-4">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
        
        {% block content %}{% endblock %}
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
```

### **FASE 3: VERIFICA√á√ÉO E TESTE DE CADA M√ìDULO**

#### **3.1 Teste do M√≥dulo 1 (Propostas)**

```bash
# Testar rota b√°sica do m√≥dulo
curl -I http://localhost:5000/propostas/

# Verificar se blueprint est√° registrado
python3 -c "
from app import create_app
app = create_app()
print('Blueprints registrados:')
for bp_name, bp in app.blueprints.items():
    print(f'  - {bp_name}: {bp.url_prefix}')
"
```

#### **3.2 Teste de Cada M√≥dulo Sequencialmente**

Execute para cada m√≥dulo (2-7):

```python
# Script de teste por m√≥dulo
modules_to_test = [
    ('propostas', '/propostas/'),
    ('portal_cliente', '/portal_cliente/'),
    ('gestao_equipes', '/gestao_equipes/'),
    ('almoxarifado', '/almoxarifado/'),
    ('reconhecimento_facial', '/reconhecimento_facial/'),
    ('folha_pagamento', '/folha_pagamento/'),
    ('contabilidade', '/contabilidade/')
]

for module_name, url_prefix in modules_to_test:
    try:
        exec(f"from app.views.{module_name} import {module_name}_bp")
        print(f"‚úì {module_name} importado com sucesso")
    except Exception as e:
        print(f"‚úó Erro em {module_name}: {e}")
```

### **FASE 4: CORRE√á√ïES ESPEC√çFICAS POR TIPO DE ERRO**

#### **4.1 Se Erro: "No module named 'app.views.xxx'"**

**SOLU√á√ÉO:** Verificar se todos os arquivos de views existem:

```bash
# Verificar estrutura de arquivos
ls -la app/views/
# Deve mostrar:
# main.py
# propostas.py
# portal_cliente.py
# gestao_equipes.py
# almoxarifado.py
# reconhecimento_facial.py
# folha_pagamento.py
# contabilidade.py

# Se algum arquivo n√£o existir, criar estrutura b√°sica:
touch app/views/propostas.py
touch app/views/portal_cliente.py
touch app/views/gestao_equipes.py
touch app/views/almoxarifado.py
touch app/views/reconhecimento_facial.py
touch app/views/folha_pagamento.py
touch app/views/contabilidade.py
```

#### **4.2 Se Erro: "Table 'xxx' doesn't exist"**

**SOLU√á√ÉO:** Executar migra√ß√µes:

```bash
# 1. Deletar migra√ß√µes existentes se corrompidas
rm -rf migrations/

# 2. Inicializar migra√ß√µes
flask db init

# 3. Criar migra√ß√£o inicial
flask db migrate -m "Migra√ß√£o inicial com todos os m√≥dulos"

# 4. Aplicar migra√ß√£o
flask db upgrade

# 5. Verificar se tabelas foram criadas
python3 -c "
from app import db, create_app
app = create_app()
with app.app_context():
    from sqlalchemy import inspect
    inspector = inspect(db.engine)
    tables = inspector.get_table_names()
    print(f'Total de tabelas: {len(tables)}')
    for table in sorted(tables):
        print(f'  - {table}')
"
```

#### **4.3 Se Erro: "ImportError: cannot import name 'xxx'"**

**SOLU√á√ÉO:** Verificar imports em cada arquivo:

```python
# Verificar imports em models.py
python3 -c "
try:
    from app.models import Usuario, Funcionario, Obra
    print('‚úì Modelos b√°sicos importados')
except Exception as e:
    print(f'‚úó Erro nos modelos: {e}')
    import traceback
    traceback.print_exc()
"

# Verificar imports em auth.py
python3 -c "
try:
    from app.auth import admin_required, funcionario_required
    print('‚úì Auth importado')
except Exception as e:
    print(f'‚úó Erro no auth: {e}')
"
```

#### **4.4 Se Erro: "TemplateNotFound"**

**SOLU√á√ÉO:** Verificar estrutura de templates:

```bash
# Verificar se diret√≥rio templates existe
ls -la templates/

# Criar estrutura b√°sica se n√£o existir
mkdir -p templates/propostas
mkdir -p templates/portal_cliente
mkdir -p templates/gestao_equipes
mkdir -p templates/almoxarifado
mkdir -p templates/reconhecimento_facial
mkdir -p templates/folha_pagamento
mkdir -p templates/contabilidade

# Criar template b√°sico para cada m√≥dulo
for module in propostas portal_cliente gestao_equipes almoxarifado reconhecimento_facial folha_pagamento contabilidade; do
    cat > templates/$module/index.html << EOF
{% extends "base.html" %}
{% block title %}$module - SIGE v8.0{% endblock %}
{% block content %}
<h1>M√≥dulo $module</h1>
<p>M√≥dulo em desenvolvimento...</p>
{% endblock %}
EOF
done
```

### **FASE 5: TESTE FINAL E VALIDA√á√ÉO**

#### **5.1 Teste de Inicializa√ß√£o Completa**

```python
# Script de teste completo
from app import create_app, db

def test_complete_initialization():
    try:
        print("=== TESTE DE INICIALIZA√á√ÉO COMPLETA ===")
        
        # 1. Criar app
        app = create_app()
        print("‚úì App criado com sucesso")
        
        # 2. Testar contexto
        with app.app_context():
            print("‚úì Contexto da aplica√ß√£o funcionando")
            
            # 3. Testar banco
            db.engine.execute('SELECT 1')
            print("‚úì Banco de dados acess√≠vel")
            
            # 4. Testar modelos
            from app.models import Usuario
            print("‚úì Modelos importados")
            
            # 5. Testar blueprints
            print(f"‚úì {len(app.blueprints)} blueprints registrados")
            for bp_name in app.blueprints:
                print(f"  - {bp_name}")
        
        # 6. Testar servidor
        print("‚úì Iniciando servidor de teste...")
        with app.test_client() as client:
            response = client.get('/')
            print(f"‚úì Rota principal: Status {response.status_code}")
            
            # Testar cada m√≥dulo
            modules = [
                '/propostas/',
                '/portal_cliente/', 
                '/gestao_equipes/',
                '/almoxarifado/',
                '/reconhecimento_facial/',
                '/folha_pagamento/',
                '/contabilidade/'
            ]
            
            for module_url in modules:
                try:
                    response = client.get(module_url)
                    print(f"‚úì {module_url}: Status {response.status_code}")
                except Exception as e:
                    print(f"‚úó {module_url}: Erro {e}")
        
        print("\n=== TESTE CONCLU√çDO COM SUCESSO ===")
        return True
        
    except Exception as e:
        print(f"\n‚úó ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return False

# Executar teste
if __name__ == "__main__":
    test_complete_initialization()
```

#### **5.2 Script de Verifica√ß√£o Final**

```bash
#!/bin/bash
echo "=== VERIFICA√á√ÉO FINAL DO SIGE v8.0 ==="

# 1. Verificar estrutura de arquivos
echo "1. Verificando estrutura de arquivos..."
required_files=(
    "app/__init__.py"
    "app/models.py"
    "app/auth.py"
    "app/views/main.py"
    "app/views/propostas.py"
    "app/views/portal_cliente.py"
    "app/views/gestao_equipes.py"
    "app/views/almoxarifado.py"
    "app/views/reconhecimento_facial.py"
    "app/views/folha_pagamento.py"
    "app/views/contabilidade.py"
    "templates/base.html"
    "config.py"
    "run.py"
)

for file in "${required_files[@]}"; do
    if [ -f "$file" ]; then
        echo "‚úì $file"
    else
        echo "‚úó $file - FALTANDO!"
    fi
done

# 2. Verificar depend√™ncias
echo -e "\n2. Verificando depend√™ncias..."
python3 -c "
required_packages = ['flask', 'sqlalchemy', 'flask_login', 'flask_migrate', 'flask_wtf']
for package in required_packages:
    try:
        __import__(package)
        print(f'‚úì {package}')
    except ImportError:
        print(f'‚úó {package} - INSTALAR!')
"

# 3. Verificar banco de dados
echo -e "\n3. Verificando banco de dados..."
python3 -c "
from app import create_app, db
app = create_app()
with app.app_context():
    try:
        db.engine.execute('SELECT 1')
        print('‚úì Banco acess√≠vel')
    except Exception as e:
        print(f'‚úó Erro no banco: {e}')
"

# 4. Teste de inicializa√ß√£o
echo -e "\n4. Testando inicializa√ß√£o..."
python3 -c "
from app import create_app
try:
    app = create_app()
    print('‚úì App inicializado com sucesso')
    print(f'‚úì {len(app.blueprints)} blueprints registrados')
except Exception as e:
    print(f'‚úó Erro na inicializa√ß√£o: {e}')
    import traceback
    traceback.print_exc()
"

echo -e "\n=== VERIFICA√á√ÉO CONCLU√çDA ==="
```

---

## üéØ **INSTRU√á√ïES FINAIS CR√çTICAS**

### **EXECUTE ESTAS A√á√ïES NA ORDEM EXATA:**

1. **PRIMEIRO:** Execute o diagn√≥stico inicial (Fase 1) para identificar erros espec√≠ficos
2. **SEGUNDO:** Aplique as corre√ß√µes sistem√°ticas (Fase 2) na ordem apresentada
3. **TERCEIRO:** Teste cada m√≥dulo individualmente (Fase 3)
4. **QUARTO:** Aplique corre√ß√µes espec√≠ficas conforme os erros encontrados (Fase 4)
5. **QUINTO:** Execute o teste final completo (Fase 5)

### **PONTOS CR√çTICOS DE ATEN√á√ÉO:**

- **IMPORTS CIRCULARES:** Principal causa de Internal Server Error
- **MODELOS MAL DEFINIDOS:** Relacionamentos incorretos quebram a aplica√ß√£o
- **BLUEPRINTS N√ÉO REGISTRADOS:** Causam 404 ou 500 errors
- **TEMPLATES FALTANDO:** Geram TemplateNotFound errors
- **MIGRA√á√ïES CORROMPIDAS:** Impedem acesso ao banco de dados

### **SE AINDA HOUVER ERROS AP√ìS TODAS AS CORRE√á√ïES:**

Execute este comando para debug detalhado:

```python
# Debug final com logs detalhados
import logging
logging.basicConfig(level=logging.DEBUG)

from app import create_app
app = create_app()
app.config['DEBUG'] = True

if __name__ == "__main__":
    app.run(debug=True, host='0.0.0.0', port=5000)
```

**RESULTADO ESPERADO:** Ap√≥s executar todas as corre√ß√µes, o SIGE v8.0 deve funcionar perfeitamente com todos os 7 m√≥dulos operacionais e sem Internal Server Errors.

---

## üöÄ **GARANTIA DE FUNCIONAMENTO**

Este prompt foi projetado para resolver **TODOS** os problemas comuns que causam Internal Server Error em aplica√ß√µes Flask complexas com m√∫ltiplos m√≥dulos. Seguindo as instru√ß√µes na ordem correta, o SIGE v8.0 funcionar√° perfeitamente.

**IMPORTANTE:** Execute cada fase completamente antes de passar para a pr√≥xima. N√£o pule etapas, pois cada uma resolve problemas espec√≠ficos que podem estar causando as falhas.

