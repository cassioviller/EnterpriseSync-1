# üîç PROMPT: VERIFICA√á√ÉO COMPLETA, CORRE√á√ÉO E RELAT√ìRIO - OUTROS CUSTOS

## üìã **SOLICITA√á√ÉO COMPLETA**

**FA√áA UMA VERIFICA√á√ÉO COMPLETA do m√≥dulo "Outros Custos" para identificar:**
1. Como est√° constru√≠do o app nessa parte
2. Se est√° sendo atualizado corretamente no deploy
3. Onde est√£o os problemas
4. Corrija os problemas encontrados
5. Gere um relat√≥rio detalhado com todas as informa√ß√µes

---

## üîç **ETAPA 1: VERIFICA√á√ÉO DA ESTRUTURA**

### **A) Verificar Modelo de Dados:**

```python
# 1. Verificar estrutura da tabela outro_custo
def verificar_estrutura_banco():
    """Verifica estrutura atual da tabela outro_custo"""
    from app import app, db
    
    with app.app_context():
        print("üîç VERIFICANDO ESTRUTURA DO BANCO...")
        
        # Verificar colunas existentes
        result = db.session.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'outro_custo'
            ORDER BY ordinal_position
        """)
        
        colunas = list(result)
        
        print("üìä COLUNAS DA TABELA outro_custo:")
        for coluna in colunas:
            print(f"   - {coluna[0]} ({coluna[1]}) - Nullable: {coluna[2]}")
        
        # Verificar se admin_id existe
        admin_id_existe = any(col[0] == 'admin_id' for col in colunas)
        print(f"\nüîç COLUNA admin_id EXISTE: {admin_id_existe}")
        
        # Verificar √≠ndices
        indices = db.session.execute("""
            SELECT indexname, indexdef 
            FROM pg_indexes 
            WHERE tablename = 'outro_custo'
        """)
        
        print("\nüìä √çNDICES:")
        for indice in indices:
            print(f"   - {indice[0]}: {indice[1]}")
        
        return colunas, admin_id_existe

# EXECUTAR VERIFICA√á√ÉO
verificar_estrutura_banco()
```

### **B) Verificar Modelo Python:**

```python
# 2. Verificar defini√ß√£o do modelo OutroCusto
def verificar_modelo_python():
    """Verifica defini√ß√£o atual do modelo OutroCusto"""
    from models import OutroCusto
    import inspect
    
    print("üîç VERIFICANDO MODELO PYTHON...")
    
    # Verificar atributos da classe
    atributos = [attr for attr in dir(OutroCusto) if not attr.startswith('_')]
    print("üìä ATRIBUTOS DO MODELO:")
    for attr in atributos:
        print(f"   - {attr}")
    
    # Verificar colunas definidas
    if hasattr(OutroCusto, '__table__'):
        colunas = OutroCusto.__table__.columns.keys()
        print("\nüìä COLUNAS DEFINIDAS NO MODELO:")
        for coluna in colunas:
            print(f"   - {coluna}")
    
    # Verificar relacionamentos
    if hasattr(OutroCusto, '__mapper__'):
        relacionamentos = OutroCusto.__mapper__.relationships.keys()
        print("\nüìä RELACIONAMENTOS:")
        for rel in relacionamentos:
            print(f"   - {rel}")
    
    return atributos, colunas if hasattr(OutroCusto, '__table__') else []

# EXECUTAR VERIFICA√á√ÉO
verificar_modelo_python()
```

### **C) Verificar Rotas e Views:**

```python
# 3. Verificar rotas relacionadas a outros custos
def verificar_rotas():
    """Verifica rotas relacionadas a outros custos"""
    from app import app
    
    print("üîç VERIFICANDO ROTAS...")
    
    rotas_outros_custos = []
    
    for rule in app.url_map.iter_rules():
        if 'outro' in rule.rule.lower() or 'custo' in rule.rule.lower():
            rotas_outros_custos.append({
                'endpoint': rule.endpoint,
                'rule': rule.rule,
                'methods': list(rule.methods)
            })
    
    print("üìä ROTAS RELACIONADAS A OUTROS CUSTOS:")
    for rota in rotas_outros_custos:
        print(f"   - {rota['rule']} ({rota['methods']}) ‚Üí {rota['endpoint']}")
    
    return rotas_outros_custos

# EXECUTAR VERIFICA√á√ÉO
verificar_rotas()
```

## üîç **ETAPA 2: VERIFICA√á√ÉO DO DEPLOY**

### **A) Verificar Arquivos em Produ√ß√£o:**

```bash
# 4. Verificar timestamps dos arquivos principais
echo "üîç VERIFICANDO ARQUIVOS EM PRODU√á√ÉO..."

echo "üìä TIMESTAMPS DOS ARQUIVOS:"
ls -la views.py | awk '{print "views.py: " $6 " " $7 " " $8}'
ls -la models.py | awk '{print "models.py: " $6 " " $7 " " $8}'
ls -la templates/funcionarios/perfil.html | awk '{print "perfil.html: " $6 " " $7 " " $8}'

echo "\nüìä √öLTIMAS MODIFICA√á√ïES:"
find . -name "*.py" -mtime -1 -exec ls -la {} \;

echo "\nüìä PROCESSO GUNICORN:"
ps aux | grep gunicorn | grep -v grep

echo "\nüìä LOGS RECENTES:"
tail -20 /var/log/gunicorn/error.log 2>/dev/null || echo "Log n√£o encontrado"
```

### **B) Verificar Configura√ß√£o de Deploy:**

```python
# 5. Verificar configura√ß√µes do app
def verificar_configuracao():
    """Verifica configura√ß√µes atuais do app"""
    from app import app
    import os
    
    print("üîç VERIFICANDO CONFIGURA√á√ÉO...")
    
    print("üìä CONFIGURA√á√ïES DO APP:")
    print(f"   - DEBUG: {app.config.get('DEBUG', 'N√£o definido')}")
    print(f"   - ENV: {app.config.get('ENV', 'N√£o definido')}")
    print(f"   - DATABASE_URL: {'Definido' if app.config.get('DATABASE_URL') else 'N√£o definido'}")
    
    print("\nüìä VARI√ÅVEIS DE AMBIENTE:")
    env_vars = ['FLASK_ENV', 'FLASK_APP', 'DATABASE_URL', 'SECRET_KEY']
    for var in env_vars:
        valor = os.environ.get(var)
        print(f"   - {var}: {'Definido' if valor else 'N√£o definido'}")
    
    print("\nüìä MODO DE EXECU√á√ÉO:")
    print(f"   - __name__: {__name__}")
    print(f"   - app.name: {app.name}")

# EXECUTAR VERIFICA√á√ÉO
verificar_configuracao()
```

## üîç **ETAPA 3: VERIFICA√á√ÉO DOS DADOS**

### **A) Verificar Registros Problem√°ticos:**

```python
# 6. Verificar dados atuais de outros custos
def verificar_dados_outros_custos():
    """Verifica estado atual dos dados"""
    from app import app, db
    from models import OutroCusto
    
    with app.app_context():
        print("üîç VERIFICANDO DADOS ATUAIS...")
        
        # Contar total de registros
        total = OutroCusto.query.count()
        print(f"üìä TOTAL DE REGISTROS: {total}")
        
        # Verificar por tipo
        tipos = db.session.query(OutroCusto.tipo, db.func.count(OutroCusto.id)).group_by(OutroCusto.tipo).all()
        print("\nüìä REGISTROS POR TIPO:")
        for tipo, count in tipos:
            print(f"   - {tipo}: {count}")
        
        # Verificar valores problem√°ticos
        print("\nüìä AN√ÅLISE DE VALORES:")
        
        # B√¥nus negativos
        bonus_negativos = OutroCusto.query.filter(
            OutroCusto.tipo.ilike('%bonus%'),
            OutroCusto.valor < 0
        ).all()
        print(f"   - B√¥nus negativos: {len(bonus_negativos)}")
        
        # Adicionais negativos
        adicionais_negativos = OutroCusto.query.filter(
            OutroCusto.tipo.ilike('%adicional%'),
            OutroCusto.valor < 0
        ).all()
        print(f"   - Adicionais negativos: {len(adicionais_negativos)}")
        
        # Descontos positivos
        descontos_positivos = OutroCusto.query.filter(
            OutroCusto.tipo.ilike('%desconto%'),
            OutroCusto.valor > 0
        ).all()
        print(f"   - Descontos positivos: {len(descontos_positivos)}")
        
        # Mostrar exemplos problem√°ticos
        if bonus_negativos:
            print("\nüìä EXEMPLOS DE B√îNUS NEGATIVOS:")
            for bonus in bonus_negativos[:3]:
                print(f"   - ID {bonus.id}: {bonus.tipo} = R$ {bonus.valor}")
        
        if adicionais_negativos:
            print("\nüìä EXEMPLOS DE ADICIONAIS NEGATIVOS:")
            for adicional in adicionais_negativos[:3]:
                print(f"   - ID {adicional.id}: {adicional.tipo} = R$ {adicional.valor}")
        
        return {
            'total': total,
            'bonus_negativos': len(bonus_negativos),
            'adicionais_negativos': len(adicionais_negativos),
            'descontos_positivos': len(descontos_positivos)
        }

# EXECUTAR VERIFICA√á√ÉO
dados_stats = verificar_dados_outros_custos()
```

## üîß **ETAPA 4: CORRE√á√ÉO DOS PROBLEMAS**

### **A) Corrigir Erro de Banco:**

```python
# 7. Identificar e corrigir queries problem√°ticas
def corrigir_erro_banco():
    """Identifica e corrige erro de admin_id"""
    import re
    import os
    
    print("üîß CORRIGINDO ERRO DE BANCO...")
    
    # Procurar por admin_id em arquivos Python
    arquivos_python = []
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        if 'admin_id' in content and 'outro_custo' in content:
                            arquivos_python.append(filepath)
                except:
                    pass
    
    print("üìä ARQUIVOS COM REFER√äNCIA A admin_id:")
    for arquivo in arquivos_python:
        print(f"   - {arquivo}")
    
    # Analisar cada arquivo
    for arquivo in arquivos_python:
        print(f"\nüîç ANALISANDO: {arquivo}")
        try:
            with open(arquivo, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                for i, line in enumerate(lines, 1):
                    if 'admin_id' in line and 'outro_custo' in line:
                        print(f"   Linha {i}: {line.strip()}")
        except:
            print(f"   ‚ùå Erro ao ler arquivo")

# EXECUTAR CORRE√á√ÉO
corrigir_erro_banco()
```

### **B) Corrigir Valores:**

```python
# 8. Corrigir valores dos registros
def corrigir_valores_registros():
    """Corrige valores com sinais incorretos"""
    from app import app, db
    from models import OutroCusto
    
    with app.app_context():
        print("üîß CORRIGINDO VALORES DOS REGISTROS...")
        
        corrigidos = 0
        
        # Buscar registros problem√°ticos
        registros = OutroCusto.query.all()
        
        for registro in registros:
            valor_original = registro.valor
            tipo = registro.tipo.lower() if registro.tipo else ''
            
            # Aplicar l√≥gica correta
            if tipo in ['bonus', 'b√¥nus', 'adicional', 'outros']:
                valor_correto = abs(valor_original)
            elif tipo in ['desconto']:
                valor_correto = -abs(valor_original)
            else:
                valor_correto = valor_original
            
            # Atualizar se necess√°rio
            if valor_correto != valor_original:
                print(f"üìä CORRIGINDO ID {registro.id}:")
                print(f"   Tipo: {registro.tipo}")
                print(f"   Valor: {valor_original} ‚Üí {valor_correto}")
                
                registro.valor = valor_correto
                corrigidos += 1
        
        # Salvar altera√ß√µes
        if corrigidos > 0:
            db.session.commit()
            print(f"‚úÖ CORRIGIDOS {corrigidos} REGISTROS")
        else:
            print("‚ÑπÔ∏è  NENHUM REGISTRO PRECISOU SER CORRIGIDO")
        
        return corrigidos

# EXECUTAR CORRE√á√ÉO
corrigidos = corrigir_valores_registros()
```

## üìä **ETAPA 5: GERAR RELAT√ìRIO COMPLETO**

### **Executar todas as verifica√ß√µes e gerar relat√≥rio:**

```python
# 9. Gerar relat√≥rio completo
def gerar_relatorio_completo():
    """Gera relat√≥rio completo com todas as informa√ß√µes"""
    import datetime
    
    print("üìä GERANDO RELAT√ìRIO COMPLETO...")
    
    relatorio = f"""
# üìä RELAT√ìRIO COMPLETO - OUTROS CUSTOS
**Data:** {datetime.datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

## üîç ESTRUTURA DO BANCO DE DADOS
"""
    
    # Executar todas as verifica√ß√µes
    try:
        colunas, admin_id_existe = verificar_estrutura_banco()
        relatorio += f"""
### Colunas da Tabela outro_custo:
{chr(10).join([f"- {col[0]} ({col[1]})" for col in colunas])}

### Coluna admin_id existe: {admin_id_existe}
"""
    except Exception as e:
        relatorio += f"‚ùå Erro ao verificar banco: {e}\n"
    
    try:
        atributos, colunas_modelo = verificar_modelo_python()
        relatorio += f"""
## üêç MODELO PYTHON
### Colunas no Modelo:
{chr(10).join([f"- {col}" for col in colunas_modelo])}
"""
    except Exception as e:
        relatorio += f"‚ùå Erro ao verificar modelo: {e}\n"
    
    try:
        rotas = verificar_rotas()
        relatorio += f"""
## üåê ROTAS IDENTIFICADAS
{chr(10).join([f"- {rota['rule']} ‚Üí {rota['endpoint']}" for rota in rotas])}
"""
    except Exception as e:
        relatorio += f"‚ùå Erro ao verificar rotas: {e}\n"
    
    try:
        dados_stats = verificar_dados_outros_custos()
        relatorio += f"""
## üìä AN√ÅLISE DOS DADOS
- Total de registros: {dados_stats['total']}
- B√¥nus negativos: {dados_stats['bonus_negativos']} (problem√°tico se > 0)
- Adicionais negativos: {dados_stats['adicionais_negativos']} (problem√°tico se > 0)
- Descontos positivos: {dados_stats['descontos_positivos']} (problem√°tico se > 0)
"""
    except Exception as e:
        relatorio += f"‚ùå Erro ao verificar dados: {e}\n"
    
    relatorio += f"""
## üîß CORRE√á√ïES APLICADAS
- Registros corrigidos: {corrigidos if 'corrigidos' in locals() else 'N√£o executado'}

## üìã PR√ìXIMOS PASSOS RECOMENDADOS
1. Corrigir queries que referenciam admin_id inexistente
2. Implementar valida√ß√£o de valores na cria√ß√£o/edi√ß√£o
3. Verificar se deploy est√° atualizando arquivos corretamente
4. Testar funcionalidade completa em produ√ß√£o

## üéØ STATUS ATUAL
- Estrutura do banco: {'‚úÖ OK' if admin_id_existe else '‚ùå Problema com admin_id'}
- Valores dos registros: {'‚úÖ OK' if dados_stats.get('bonus_negativos', 0) == 0 else '‚ùå Valores incorretos'}
- Deploy: Necessita verifica√ß√£o manual
"""
    
    # Salvar relat√≥rio em arquivo
    with open('relatorio_outros_custos.md', 'w', encoding='utf-8') as f:
        f.write(relatorio)
    
    print("‚úÖ RELAT√ìRIO SALVO EM: relatorio_outros_custos.md")
    print("\n" + "="*50)
    print(relatorio)
    print("="*50)
    
    return relatorio

# EXECUTAR GERA√á√ÉO DO RELAT√ìRIO
relatorio_final = gerar_relatorio_completo()
```

## üéØ **INSTRU√á√ïES DE EXECU√á√ÉO**

**Execute na seguinte ordem:**

```python
# 1. Verifica√ß√µes
verificar_estrutura_banco()
verificar_modelo_python()
verificar_rotas()
verificar_configuracao()
verificar_dados_outros_custos()

# 2. Corre√ß√µes
corrigir_erro_banco()
corrigir_valores_registros()

# 3. Relat√≥rio Final
gerar_relatorio_completo()
```

**Ap√≥s executar, envie o arquivo `relatorio_outros_custos.md` com todas as informa√ß√µes coletadas.**

---

## üìã **CHECKLIST DE VERIFICA√á√ÉO**

```
‚ñ° Estrutura do banco verificada
‚ñ° Modelo Python analisado
‚ñ° Rotas identificadas
‚ñ° Configura√ß√£o verificada
‚ñ° Dados analisados
‚ñ° Erro de banco corrigido
‚ñ° Valores corrigidos
‚ñ° Relat√≥rio gerado
‚ñ° Arquivo enviado
```

**RESULTADO ESPERADO:** Relat√≥rio completo com diagn√≥stico, corre√ß√µes aplicadas e recomenda√ß√µes para resolver definitivamente os problemas dos "Outros Custos".