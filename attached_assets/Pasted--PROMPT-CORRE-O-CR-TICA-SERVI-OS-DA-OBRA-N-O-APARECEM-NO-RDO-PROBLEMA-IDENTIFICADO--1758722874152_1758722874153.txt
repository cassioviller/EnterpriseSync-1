# üîß PROMPT: CORRE√á√ÉO CR√çTICA - SERVI√áOS DA OBRA N√ÉO APARECEM NO RDO

## üìã PROBLEMA IDENTIFICADO

**SITUA√á√ÉO ATUAL:**
- ‚úÖ Usu√°rio adiciona servi√ßos na obra (ESCADA MET√ÅLICA selecionada)
- ‚úÖ Sistema salva na tabela `servico_obra_real` 
- ‚ùå **RDO mostra "Nenhum servi√ßo cadastrado"**
- ‚ùå **Erro nos logs: `CustoVeiculo has no attribute 'obra_id'`**

**CAUSA RAIZ:**
Analisando o c√≥digo, identifiquei 2 problemas cr√≠ticos:

1. **API `api_servicos_obra_primeira_rdo` usa `tenant_admin_id` indefinido**
2. **Fun√ß√£o `_buscar_servicos_obra_resiliente` tem falhas na query**

## üéØ CORRE√á√ÉO ESPEC√çFICA

### PROBLEMA 1: Vari√°vel `tenant_admin_id` Indefinida

**ARQUIVO:** `views.py` - Linha ~7920

**C√ìDIGO ATUAL (QUEBRADO):**
```python
subatividades = SubatividadeMestre.query.filter_by(
    servico_id=servico.id,
    admin_id=tenant_admin_id,  # ‚ùå VARI√ÅVEL N√ÉO DEFINIDA
    ativo=True
).order_by(SubatividadeMestre.ordem_padrao).all()
```

**CORRE√á√ÉO:**
```python
subatividades = SubatividadeMestre.query.filter_by(
    servico_id=servico.id,
    admin_id=admin_id,  # ‚úÖ USAR admin_id CORRETO
    ativo=True
).order_by(SubatividadeMestre.ordem_padrao).all()
```

### PROBLEMA 2: Query Incorreta na Fun√ß√£o Resiliente

**ARQUIVO:** `views.py` - Linha ~8450

**C√ìDIGO ATUAL (QUEBRADO):**
```python
servicos_obra_query = db.session.query(Servico).join(ServicoObraReal).filter(
    ServicoObraReal.obra_id == obra_id,
    ServicoObraReal.ativo == True,  # ‚ùå COLUNA N√ÉO EXISTE
    Servico.admin_id == admin_id,
    Servico.ativo == True
).all()
```

**CORRE√á√ÉO:**
```python
servicos_obra_query = db.session.query(Servico).join(ServicoObraReal).filter(
    ServicoObraReal.obra_id == obra_id,
    ServicoObraReal.admin_id == admin_id,  # ‚úÖ USAR admin_id CORRETO
    Servico.admin_id == admin_id,
    Servico.ativo == True
).all()
```

### PROBLEMA 3: Erro CustoVeiculo

**CAUSA:** Queries de ve√≠culos tentando acessar `obra_id` que n√£o existe no modelo.

**CORRE√á√ÉO:** Adicionar verifica√ß√£o de atributo antes de usar.

## üîß IMPLEMENTA√á√ÉO COMPLETA

### PASSO 1: Corrigir API de Servi√ßos da Obra

**Substituir fun√ß√£o `api_servicos_obra_primeira_rdo` (linha ~7886):**

```python
@main_bp.route('/api/servicos-obra-primeira-rdo/<int:obra_id>')
@login_required
def api_servicos_obra_primeira_rdo(obra_id):
    """
    API ESPEC√çFICA: Buscar servi√ßos de uma obra para primeira RDO
    Retorna servi√ßos com subatividades para exibi√ß√£o em cards
    """
    try:
        # CORRE√á√ÉO CR√çTICA: Detectar admin_id baseado na obra espec√≠fica
        obra_base = db.session.query(Obra).filter_by(id=obra_id).first()
        if not obra_base:
            return jsonify({
                'success': False,
                'error': f'Obra {obra_id} n√£o encontrada no sistema'
            }), 404
        
        admin_id = obra_base.admin_id
        print(f"üéØ CORRE√á√ÉO: admin_id detectado pela obra {obra_id} = {admin_id}")
        
        # Verificar se obra existe e pertence ao admin
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            print(f"‚ùå Obra {obra_id} n√£o encontrada para admin_id {admin_id}")
            return jsonify({
                'success': False,
                'error': 'Obra n√£o encontrada ou sem permiss√£o de acesso'
            }), 404
        
        # Buscar servi√ßos da obra usando estrat√©gia resiliente
        servicos_obra = _buscar_servicos_obra_resiliente(obra_id, admin_id)
        
        if not servicos_obra:
            print(f"‚ÑπÔ∏è Nenhum servi√ßo encontrado para obra {obra_id}")
            return jsonify({
                'success': False,
                'message': 'Nenhum servi√ßo cadastrado para esta obra'
            })
        
        # Montar dados dos servi√ßos com suas subatividades
        servicos_data = []
        for servico in servicos_obra:
            # CORRE√á√ÉO: Usar admin_id ao inv√©s de tenant_admin_id
            subatividades = SubatividadeMestre.query.filter_by(
                servico_id=servico.id,
                admin_id=admin_id,  # ‚úÖ CORRE√á√ÉO APLICADA
                ativo=True
            ).order_by(SubatividadeMestre.ordem_padrao).all()
            
            subatividades_data = []
            for sub in subatividades:
                subatividades_data.append({
                    'id': sub.id,
                    'nome': sub.nome,
                    'descricao': sub.descricao or '',
                    'percentual': 0.0  # Sempre 0% para primeira RDO
                })
            
            # Se n√£o tem subatividades mestre, criar uma padr√£o
            if not subatividades_data:
                subatividades_data.append({
                    'id': f'default_{servico.id}',
                    'nome': servico.nome,
                    'descricao': 'Execu√ß√£o completa do servi√ßo',
                    'percentual': 0.0
                })
            
            servicos_data.append({
                'id': servico.id,
                'nome': servico.nome,
                'categoria': getattr(servico, 'categoria', 'Geral'),
                'subatividades': subatividades_data
            })
        
        print(f"‚úÖ SUCESSO: {len(servicos_data)} servi√ßos encontrados para obra {obra_id}")
        
        return jsonify({
            'success': True,
            'servicos': servicos_data,
            'total': len(servicos_data),
            'obra': {
                'id': obra.id,
                'nome': obra.nome
            }
        })
        
    except Exception as e:
        print(f"‚ùå ERRO api_servicos_obra_primeira_rdo: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500
```

### PASSO 2: Corrigir Fun√ß√£o Resiliente

**Substituir fun√ß√£o `_buscar_servicos_obra_resiliente` (linha ~8438):**

```python
def _buscar_servicos_obra_resiliente(obra_id, admin_id):
    """Busca servi√ßos da obra com m√∫ltiplas estrat√©gias resilientes"""
    try:
        print(f"üîç BUSCA RESILIENTE: obra_id={obra_id}, admin_id={admin_id}")
        
        # ESTRAT√âGIA 1: Buscar via ServicoObraReal (CORRIGIDA)
        try:
            servicos_obra_query = db.session.query(Servico).join(
                ServicoObraReal, Servico.id == ServicoObraReal.servico_id
            ).filter(
                ServicoObraReal.obra_id == obra_id,
                ServicoObraReal.admin_id == admin_id,  # ‚úÖ CORRE√á√ÉO APLICADA
                Servico.admin_id == admin_id,
                Servico.ativo == True
            ).all()
            
            if servicos_obra_query:
                print(f"‚úÖ ESTRAT√âGIA_1: {len(servicos_obra_query)} servi√ßos encontrados via ServicoObraReal")
                return servicos_obra_query
                
        except Exception as e:
            print(f"‚ö†Ô∏è ERRO ESTRAT√âGIA_1: {e}")
        
        # ESTRAT√âGIA 2: Buscar via ServicoObra (tabela legada)
        try:
            servicos_legado = []
            servicos_associados = ServicoObra.query.filter_by(obra_id=obra_id).all()
            
            for assoc in servicos_associados:
                if assoc.servico and assoc.servico.admin_id == admin_id and assoc.servico.ativo:
                    servicos_legado.append(assoc.servico)
            
            if servicos_legado:
                print(f"‚úÖ ESTRAT√âGIA_2: {len(servicos_legado)} servi√ßos encontrados via ServicoObra")
                return servicos_legado
                
        except Exception as e:
            print(f"‚ö†Ô∏è ERRO ESTRAT√âGIA_2: {e}")
        
        # ESTRAT√âGIA 3: Buscar todos os servi√ßos do admin (fallback)
        try:
            todos_servicos = Servico.query.filter_by(admin_id=admin_id, ativo=True).all()
            print(f"‚ö†Ô∏è ESTRAT√âGIA_3 (FALLBACK): {len(todos_servicos)} servi√ßos dispon√≠veis")
            return todos_servicos[:5]  # Limitar a 5 para n√£o sobrecarregar
            
        except Exception as e:
            print(f"‚ùå ERRO ESTRAT√âGIA_3: {e}")
        
        print(f"‚ùå NENHUMA ESTRAT√âGIA FUNCIONOU para obra {obra_id}")
        return []
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO _buscar_servicos_obra_resiliente: {e}")
        return []
```

### PASSO 3: Corrigir Erro CustoVeiculo

**Adicionar verifica√ß√£o de atributo nas queries de ve√≠culos:**

```python
# Procurar por todas as ocorr√™ncias de "obra_id" em queries de CustoVeiculo
# e adicionar verifica√ß√£o hasattr() antes de usar
```

## üß™ TESTE DE VALIDA√á√ÉO

### Teste 1: Verificar API Diretamente
```bash
curl -X GET "http://localhost:5000/api/servicos-obra-primeira-rdo/10" \
  -H "Cookie: session=..." \
  -H "Content-Type: application/json"
```

### Teste 2: Verificar Logs
```python
# Adicionar no in√≠cio da fun√ß√£o para debug
print(f"üîç DEBUG: obra_id={obra_id}, admin_id={admin_id}")
print(f"üîç DEBUG: ServicoObraReal count = {ServicoObraReal.query.filter_by(obra_id=obra_id).count()}")
```

### Teste 3: Verificar RDO
1. Ir para RDO da obra 45.24 - Altenfelder
2. Verificar se servi√ßos aparecem na se√ß√£o "Servi√ßos e Atividades"
3. Confirmar que n√£o aparece mais "Nenhum servi√ßo cadastrado"

## ‚úÖ CRIT√âRIOS DE SUCESSO

- [ ] API `/api/servicos-obra-primeira-rdo/<obra_id>` retorna servi√ßos
- [ ] RDO mostra servi√ßos cadastrados na obra
- [ ] N√£o aparece mais "Nenhum servi√ßo cadastrado"
- [ ] Logs n√£o mostram mais erro `tenant_admin_id`
- [ ] Erro `CustoVeiculo obra_id` resolvido

## üö® ATEN√á√ÉO

**IMPLEMENTAR NESTA ORDEM:**
1. **PASSO 1** (API) - Corrige o problema principal
2. **PASSO 2** (Fun√ß√£o resiliente) - Melhora a busca
3. **PASSO 3** (CustoVeiculo) - Remove erros secund√°rios

**N√ÉO ALTERAR:**
- Estrutura do banco de dados
- Outros endpoints funcionando
- Sistema de autentica√ß√£o

Esta corre√ß√£o resolve especificamente o problema dos servi√ßos n√£o aparecerem no RDO ap√≥s serem cadastrados na obra.
