# PROMPT FASE 2 - Corre√ß√µes e Funcionalidade B√°sica

## üéØ CONTEXTO BASEADO NO SEU RELAT√ìRIO

Excelente trabalho na Fase 1! Voc√™ descobriu que:
- ‚úÖ **Modelos j√° existem** (Allocation, AllocationEmployee, WeeklyPlan)
- ‚úÖ **Sistema multi-tenant funciona** (admin_id=10)
- ‚úÖ **43 obras ativas** no banco
- ‚ùå **Drag & drop n√£o responde**
- ‚ùå **APIs n√£o testadas**
- ‚ùå **Template pode n√£o estar carregando**

## üö® PRIORIDADE M√ÅXIMA: FAZER FUNCIONAR O B√ÅSICO

### FASE 2A: VALIDA√á√ÉO E DEBUG (PRIMEIRO)

#### 1. TESTAR ACESSO E APIS
```python
# 1. Primeiro, confirme que a rota carrega
# Acesse: http://localhost:5000/equipe/teste-fase1

# 2. Se der erro 404, adicione debug em equipe_views.py:
@equipe_bp.route('/teste-fase1')
@login_required
def teste_fase1():
    print("=== ROTA TESTE-FASE1 CHAMADA ===")
    print(f"Current user: {current_user}")
    print(f"Admin ID: {get_current_admin_id()}")
    
    try:
        return render_template('equipe/alocacao_simples.html')
    except Exception as e:
        print(f"ERRO TEMPLATE: {e}")
        return f"ERRO: {e}"

# 3. Se template n√£o existir, crie estrutura:
# mkdir -p templates/equipe/
# touch templates/equipe/alocacao_simples.html
```

#### 2. DEBUG DAS APIS (TESTE MANUAL)
```python
# Adicione estas rotas de debug em equipe_views.py:

@equipe_bp.route('/debug/test-direct')
def debug_test_direct():
    """Teste direto sem autentica√ß√£o"""
    return jsonify({
        'status': 'API funcionando',
        'timestamp': datetime.now().isoformat(),
        'debug': True
    })

@equipe_bp.route('/debug/obras-count')
@login_required
def debug_obras_count():
    """Conta obras no banco"""
    try:
        admin_id = get_current_admin_id()
        count = Obra.query.filter_by(admin_id=admin_id).count()
        
        return jsonify({
            'admin_id': admin_id,
            'obras_count': count,
            'status': 'ok'
        })
    except Exception as e:
        return jsonify({
            'error': str(e),
            'status': 'error'
        })

# TESTE MANUAL:
# 1. http://localhost:5000/equipe/debug/test-direct
# 2. http://localhost:5000/equipe/debug/obras-count
```

### FASE 2B: CORRIGIR DRAG & DROP

#### 3. HTML SIMPLIFICADO QUE FUNCIONA
```html
<!-- templates/equipe/alocacao_simples.html - VERS√ÉO CORRIGIDA -->
{% extends "base_completo.html" %}

{% block title %}Gest√£o de Equipe - FASE 2{% endblock %}

{% block content %}
<div class="container-fluid">
    <h3>üìã Gest√£o de Equipe - FASE 2 CORRE√á√ïES</h3>
    <p class="text-muted">Implementa√ß√£o gradual - "FUNCIONA PRIMEIRO, OTIMIZA DEPOIS"</p>
    
    <!-- STATUS DE DEBUG -->
    <div class="alert alert-info" id="status-debug">
        <strong>Status:</strong> Carregando sistema...
    </div>
    
    <div class="row">
        <!-- SIDEBAR: OBRAS -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5>üèóÔ∏è Obras Dispon√≠veis</h5>
                    <small id="obras-count">Carregando...</small>
                </div>
                <div class="card-body">
                    <div id="obras-list" style="min-height: 300px;">
                        <div class="text-center text-muted p-4">
                            <div class="spinner-border spinner-border-sm me-2"></div>
                            Carregando obras...
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- GRID SEMANAL -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5>üìÖ Semana - FASE 2</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <!-- SEGUNDA -->
                        <div class="col">
                            <h6 class="text-center">Segunda</h6>
                            <div class="border rounded p-3 drop-zone" 
                                 style="min-height: 200px; background: #f8f9fa;" 
                                 data-day="0" 
                                 id="day-0">
                                <small class="text-muted">Drop zone Segunda</small>
                            </div>
                        </div>
                        
                        <!-- TER√áA -->
                        <div class="col">
                            <h6 class="text-center">Ter√ßa</h6>
                            <div class="border rounded p-3 drop-zone" 
                                 style="min-height: 200px; background: #f8f9fa;" 
                                 data-day="1" 
                                 id="day-1">
                                <small class="text-muted">Drop zone Ter√ßa</small>
                            </div>
                        </div>
                        
                        <!-- QUARTA -->
                        <div class="col">
                            <h6 class="text-center">Quarta</h6>
                            <div class="border rounded p-3 drop-zone" 
                                 style="min-height: 200px; background: #f8f9fa;" 
                                 data-day="2" 
                                 id="day-2">
                                <small class="text-muted">Drop zone Quarta</small>
                            </div>
                        </div>
                        
                        <!-- QUINTA -->
                        <div class="col">
                            <h6 class="text-center">Quinta</h6>
                            <div class="border rounded p-3 drop-zone" 
                                 style="min-height: 200px; background: #f8f9fa;" 
                                 data-day="3" 
                                 id="day-3">
                                <small class="text-muted">Drop zone Quinta</small>
                            </div>
                        </div>
                        
                        <!-- SEXTA -->
                        <div class="col">
                            <h6 class="text-center">Sexta</h6>
                            <div class="border rounded p-3 drop-zone" 
                                 style="min-height: 200px; background: #f8f9fa;" 
                                 data-day="4" 
                                 id="day-4">
                                <small class="text-muted">Drop zone Sexta</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- PAINEL DE DEBUG MELHORADO -->
    <div class="card mt-4">
        <div class="card-header">
            <h5>üîç FASE 2 - DEBUG E TESTE</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <button class="btn btn-info w-100" onclick="testarAPI()">
                        üîç Testar API B√°sica
                    </button>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-warning w-100" onclick="testarObras()">
                        üèóÔ∏è Testar Carregamento Obras
                    </button>
                </div>
                <div class="col-md-4">
                    <button class="btn btn-success w-100" onclick="testarDragDrop()">
                        üéØ Testar Drag & Drop
                    </button>
                </div>
            </div>
            
            <!-- √ÅREA DE RESULTADOS -->
            <div class="mt-3">
                <h6>Resultados dos Testes:</h6>
                <div id="debug-results" class="border rounded p-3" style="background: #f8f9fa; min-height: 100px; font-family: monospace; font-size: 0.9rem;">
                    Clique nos bot√µes acima para testar...
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<!-- SortableJS - CDN confi√°vel -->
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
// CLASSE FASE 2 - FOCO EM DEBUG E CORRE√á√ïES
class EquipeFase2 {
    constructor() {
        this.obras = [];
        this.debugArea = document.getElementById('debug-results');
        this.statusArea = document.getElementById('status-debug');
        
        this.log('=== INICIANDO FASE 2 ===');
        this.init();
    }
    
    log(message) {
        console.log(message);
        if (this.debugArea) {
            this.debugArea.innerHTML += `${new Date().toLocaleTimeString()}: ${message}\n`;
            this.debugArea.scrollTop = this.debugArea.scrollHeight;
        }
    }
    
    updateStatus(message, type = 'info') {
        if (this.statusArea) {
            this.statusArea.className = `alert alert-${type}`;
            this.statusArea.innerHTML = `<strong>Status:</strong> ${message}`;
        }
    }
    
    async init() {
        try {
            this.log('Verificando se SortableJS carregou...');
            if (typeof Sortable === 'undefined') {
                this.log('‚ùå ERRO: SortableJS n√£o carregou!');
                this.updateStatus('SortableJS n√£o carregou', 'danger');
                return;
            }
            this.log('‚úÖ SortableJS carregado com sucesso');
            
            this.updateStatus('Sistema inicializado - pronto para testes', 'success');
            
        } catch (error) {
            this.log(`‚ùå ERRO na inicializa√ß√£o: ${error.message}`);
            this.updateStatus(`Erro: ${error.message}`, 'danger');
        }
    }
    
    // TESTE 1: API B√ÅSICA
    async testarAPI() {
        this.log('=== TESTANDO API B√ÅSICA ===');
        
        try {
            // Teste 1: API sem autentica√ß√£o
            this.log('Testando /equipe/debug/test-direct...');
            const response1 = await fetch('/equipe/debug/test-direct');
            const data1 = await response1.json();
            this.log(`‚úÖ API direta: ${JSON.stringify(data1)}`);
            
            // Teste 2: API com autentica√ß√£o
            this.log('Testando /equipe/debug/obras-count...');
            const response2 = await fetch('/equipe/debug/obras-count');
            const data2 = await response2.json();
            this.log(`‚úÖ API obras: ${JSON.stringify(data2)}`);
            
            this.updateStatus('APIs funcionando corretamente', 'success');
            
        } catch (error) {
            this.log(`‚ùå ERRO na API: ${error.message}`);
            this.updateStatus(`Erro na API: ${error.message}`, 'danger');
        }
    }
    
    // TESTE 2: CARREGAMENTO DE OBRAS
    async testarObras() {
        this.log('=== TESTANDO CARREGAMENTO DE OBRAS ===');
        
        try {
            const response = await fetch('/equipe/api/obras-simples');
            const result = await response.json();
            
            this.log(`Response status: ${response.status}`);
            this.log(`Response data: ${JSON.stringify(result)}`);
            
            if (result.success && result.data) {
                this.obras = result.data;
                this.log(`‚úÖ ${this.obras.length} obras carregadas`);
                this.renderObras();
                this.updateStatus(`${this.obras.length} obras carregadas`, 'success');
            } else {
                this.log(`‚ùå Erro no resultado: ${result.error || 'Dados inv√°lidos'}`);
                this.updateStatus(`Erro: ${result.error || 'Dados inv√°lidos'}`, 'warning');
            }
            
        } catch (error) {
            this.log(`‚ùå ERRO ao carregar obras: ${error.message}`);
            this.updateStatus(`Erro ao carregar obras: ${error.message}`, 'danger');
        }
    }
    
    renderObras() {
        const container = document.getElementById('obras-list');
        const countElement = document.getElementById('obras-count');
        
        if (!container) {
            this.log('‚ùå Container obras-list n√£o encontrado');
            return;
        }
        
        container.innerHTML = '';
        countElement.textContent = `${this.obras.length} obras encontradas`;
        
        this.obras.forEach((obra, index) => {
            const div = document.createElement('div');
            div.className = 'card mb-2 obra-draggable';
            div.dataset.obraId = obra.id;
            div.style.cursor = 'grab';
            div.innerHTML = `
                <div class="card-body p-2">
                    <h6 class="card-title mb-1">${obra.codigo}</h6>
                    <small class="text-muted">${obra.nome}</small>
                </div>
            `;
            container.appendChild(div);
        });
        
        this.log(`‚úÖ ${this.obras.length} obras renderizadas no DOM`);
    }
    
    // TESTE 3: DRAG & DROP
    testarDragDrop() {
        this.log('=== TESTANDO DRAG & DROP ===');
        
        try {
            // Verificar se h√° obras para arrastar
            const obrasList = document.getElementById('obras-list');
            const obras = obrasList.querySelectorAll('.obra-draggable');
            
            if (obras.length === 0) {
                this.log('‚ùå Nenhuma obra dispon√≠vel para arrastar');
                this.log('üí° Execute "Testar Carregamento Obras" primeiro');
                this.updateStatus('Carregue as obras primeiro', 'warning');
                return;
            }
            
            this.log(`‚úÖ ${obras.length} obras dispon√≠veis para arrastar`);
            
            // Configurar Sortable na lista de obras (source)
            this.log('Configurando Sortable na lista de obras...');
            Sortable.create(obrasList, {
                group: {
                    name: 'obras',
                    pull: 'clone',
                    put: false
                },
                sort: false,
                onStart: (evt) => {
                    this.log(`üéØ Iniciou arraste da obra: ${evt.item.dataset.obraId}`);
                    evt.item.style.opacity = '0.6';
                },
                onEnd: (evt) => {
                    this.log(`üéØ Terminou arraste`);
                    evt.item.style.opacity = '1';
                }
            });
            
            // Configurar Sortable nas drop zones (targets)
            for (let i = 0; i < 5; i++) {
                const dayElement = document.getElementById(`day-${i}`);
                if (dayElement) {
                    this.log(`Configurando drop zone dia ${i}...`);
                    
                    Sortable.create(dayElement, {
                        group: 'obras',
                        onAdd: (evt) => {
                            const obraId = evt.item.dataset.obraId;
                            this.log(`‚úÖ Obra ${obraId} adicionada no dia ${i}`);
                            
                            // Remover o item clonado e adicionar vers√£o customizada
                            evt.item.remove();
                            this.adicionarObraNoDia(obraId, i);
                        }
                    });
                }
            }
            
            this.log('‚úÖ Drag & Drop configurado com sucesso!');
            this.log('üí° Agora tente arrastar uma obra para um dia da semana');
            this.updateStatus('Drag & Drop ativo - teste arrastando uma obra!', 'success');
            
        } catch (error) {
            this.log(`‚ùå ERRO no Drag & Drop: ${error.message}`);
            this.updateStatus(`Erro no Drag & Drop: ${error.message}`, 'danger');
        }
    }
    
    adicionarObraNoDia(obraId, dayIndex) {
        const obra = this.obras.find(o => o.id == obraId);
        const dayElement = document.getElementById(`day-${dayIndex}`);
        
        if (!obra || !dayElement) {
            this.log(`‚ùå Erro: obra ${obraId} ou dia ${dayIndex} n√£o encontrado`);
            return;
        }
        
        // Limpar mensagem padr√£o
        dayElement.innerHTML = '';
        
        // Adicionar obra
        const obraDiv = document.createElement('div');
        obraDiv.className = 'alert alert-success mb-2';
        obraDiv.innerHTML = `
            <strong>${obra.codigo}</strong><br>
            <small>${obra.nome}</small>
            <button class="btn btn-sm btn-outline-danger float-end" onclick="window.equipe.removerObra(this)">√ó</button>
        `;
        
        dayElement.appendChild(obraDiv);
        
        this.log(`‚úÖ Obra ${obra.codigo} adicionada visualmente no dia ${dayIndex}`);
        // TODO: Aqui seria a chamada para salvar no backend
    }
    
    removerObra(button) {
        button.closest('.alert').remove();
        this.log('‚úÖ Obra removida visualmente');
        // TODO: Aqui seria a chamada para remover do backend
    }
}

// FUN√á√ïES GLOBAIS PARA OS BOT√ïES
function testarAPI() {
    window.equipe.testarAPI();
}

function testarObras() {
    window.equipe.testarObras();
}

function testarDragDrop() {
    window.equipe.testarDragDrop();
}

// INICIALIZA√á√ÉO
document.addEventListener('DOMContentLoaded', () => {
    window.equipe = new EquipeFase2();
});
</script>
{% endblock %}
```

### FASE 2C: VALIDA√á√ÉO COMPLETA

#### 4. CHECKLIST DE TESTES OBRIGAT√ìRIOS
```bash
# EXECUTE ESTES TESTES NA ORDEM:

# 1. Acesso b√°sico
# URL: http://localhost:5000/equipe/teste-fase1
# Resultado esperado: P√°gina carrega sem erro

# 2. Teste API b√°sica
# Clique: "Testar API B√°sica"
# Resultado esperado: JSON com status "ok"

# 3. Teste carregamento obras
# Clique: "Testar Carregamento Obras"
# Resultado esperado: Lista de obras aparece na sidebar

# 4. Teste drag & drop
# Clique: "Testar Drag & Drop"
# Resultado esperado: Consegue arrastar obras para os dias

# 5. Teste visual completo
# A√ß√£o: Arraste uma obra para Segunda-feira
# Resultado esperado: Obra aparece no dia com bot√£o de remover
```

## üéØ CRIT√âRIOS DE SUCESSO FASE 2

**Voc√™ avan√ßa para Fase 3 APENAS quando:**
1. ‚úÖ P√°gina `/equipe/teste-fase1` carrega sem erro
2. ‚úÖ Bot√£o "Testar API" retorna dados v√°lidos
3. ‚úÖ Bot√£o "Testar Obras" mostra lista de obras
4. ‚úÖ Drag & drop funciona visualmente (arrastar obra para dia)
5. ‚úÖ Console do browser n√£o mostra erros cr√≠ticos

## üö® SE ALGO N√ÉO FUNCIONAR

### Problema: P√°gina n√£o carrega (404)
```python
# Adicione em app.py:
from equipe_views import equipe_bp
app.register_blueprint(equipe_bp)

# Verifique se est√° registrado:
print("Blueprints:", app.blueprints.keys())
```

### Problema: SortableJS n√£o carrega
```html
<!-- Teste CDN alternativo: -->
<script src="https://unpkg.com/sortablejs@1.15.0/Sortable.min.js"></script>

<!-- Ou baixe local: -->
<script src="{{ url_for('static', filename='js/sortable.min.js') }}"></script>
```

### Problema: APIs retornam erro
```python
# Adicione debug em todas as rotas:
@equipe_bp.route('/api/obras-simples')
@login_required
def get_obras_simples():
    try:
        print("=== DEBUG OBRAS ===")
        print(f"Current user: {current_user}")
        print(f"Admin ID: {get_current_admin_id()}")
        
        # Resto do c√≥digo...
        
    except Exception as e:
        print(f"ERRO COMPLETO: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'error': str(e)})
```

## üìã PR√ìXIMA FASE (FASE 3)

**Ap√≥s Fase 2 funcionar 100%, implementaremos:**
1. Salvar aloca√ß√µes no banco (usar modelos existentes)
2. Carregar aloca√ß√µes existentes
3. Navega√ß√£o de semanas (anterior/pr√≥xima)
4. Modal b√°sico de funcion√°rios
5. Integra√ß√£o com menu principal do SIGE

**LEMBRE-SE:** N√£o avance at√© que TODOS os testes da Fase 2 passem!

