# üîó PROMPT PARA INTEGRA√á√ÉO TOTAL ENTRE M√ìDULOS DO SIGE

## üéØ OBJETIVO

Implementar a **integra√ß√£o autom√°tica completa** entre todos os m√≥dulos do SIGE, garantindo que os dados fluam automaticamente e os lan√ßamentos sejam gerados sem interven√ß√£o manual, criando um sistema verdadeiramente integrado.

---

## üìä AN√ÅLISE DA SITUA√á√ÉO ATUAL

### **‚úÖ M√ìDULOS IDENTIFICADOS E ATIVOS:**
1. **Core:** `main_bp` (Dashboard, Funcion√°rios, Obras)
2. **RDO:** `production_bp` (Relat√≥rios Di√°rios de Obra)
3. **Frota:** `frota_bp` (Gest√£o de Ve√≠culos)
4. **Almoxarifado:** `almoxarifado_bp` (Materiais, Ferramentas, EPIs)
5. **Ponto:** `ponto_bp` (Controle de Hor√°rio)
6. **Propostas:** `propostas_bp` (Propostas Comerciais)
7. **Alimenta√ß√£o:** `alimentacao_bp` (Controle de Refei√ß√µes)
8. **Folha:** `folha_bp` (Folha de Pagamento)
9. **Financeiro:** `financeiro_bp` (M√≥dulo Financeiro B√°sico)
10. **Contabilidade:** `contabilidade_bp` (Lan√ßamentos Cont√°beis)

### **‚ö†Ô∏è PROBLEMAS IDENTIFICADOS:**
- **Integra√ß√µes existem** (`integracoes_automaticas.py`, `fluxo_dados_automatico.py`) mas **N√ÉO est√£o sendo chamadas** pelos m√≥dulos
- **Cada m√≥dulo opera isoladamente** sem disparar eventos para outros
- **Dados n√£o fluem automaticamente** entre m√≥dulos
- **Lan√ßamentos manuais** em vez de autom√°ticos

---

## üîß PLANO DE INTEGRA√á√ÉO TOTAL

### **FASE 1: ATIVA√á√ÉO DO SISTEMA DE EVENTOS**

```python
# 1. Criar Event Manager Central
class EventManager:
    """Gerenciador central de eventos entre m√≥dulos"""
    
    @staticmethod
    def emit(event_name, data, admin_id):
        """Emitir evento para outros m√≥dulos"""
        try:
            # Log do evento
            logger.info(f"üîî EVENTO: {event_name} | Admin: {admin_id}")
            
            # Chamar handlers espec√≠ficos
            handlers = EVENT_HANDLERS.get(event_name, [])
            for handler in handlers:
                try:
                    handler(data, admin_id)
                    logger.info(f"‚úÖ Handler {handler.__name__} executado")
                except Exception as e:
                    logger.error(f"‚ùå Erro no handler {handler.__name__}: {e}")
                    
        except Exception as e:
            logger.error(f"‚ùå Erro ao emitir evento {event_name}: {e}")

# 2. Definir Eventos e Handlers
EVENT_HANDLERS = {
    'funcionario_criado': [
        atualizar_dashboard_kpis,
        criar_configuracao_ponto,
    ],
    'obra_criada': [
        atualizar_dashboard_kpis,
        criar_centro_custo,
        configurar_almoxarifado_obra,
    ],
    'ponto_registrado': [
        calcular_horas_trabalhadas,
        atualizar_kpis_presenca,
        gerar_dados_folha,
    ],
    'material_movimentado': [
        atualizar_estoque,
        lancar_custo_obra,
        verificar_estoque_minimo,
    ],
    'veiculo_usado': [
        atualizar_km_veiculo,
        lancar_custo_combustivel,
        calcular_custo_obra,
    ],
    'rdo_aprovado': [
        lancar_custo_terceiros,
        atualizar_progresso_obra,
        notificar_cliente,
    ],
    'proposta_aprovada': [
        criar_obra_automatica,
        gerar_cronograma_recebimento,
        ativar_portal_cliente,
    ],
    'folha_fechada': [
        gerar_lancamentos_contabeis,
        calcular_provisoes,
        atualizar_custos_obra,
    ],
}
```

### **FASE 2: INTEGRA√á√ÉO POR M√ìDULO**

#### **2.1 M√ìDULO FUNCION√ÅRIOS ‚Üí OUTROS**

```python
# Em funcionario_views.py ou views.py
@main_bp.route('/funcionarios', methods=['POST'])
@login_required
def criar_funcionario():
    # ... c√≥digo existente de cria√ß√£o ...
    
    if funcionario_criado:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('funcionario_criado', {
            'funcionario_id': funcionario.id,
            'nome': funcionario.nome,
            'departamento_id': funcionario.departamento_id,
            'funcao_id': funcionario.funcao_id,
        }, current_user.id)
    
    return redirect(url_for('main.funcionarios'))

# Handlers de integra√ß√£o
def criar_configuracao_ponto(data, admin_id):
    """Criar configura√ß√£o padr√£o de ponto para novo funcion√°rio"""
    from ponto_service import PontoService
    PontoService.criar_configuracao_padrao(data['funcionario_id'], admin_id)

def atualizar_dashboard_kpis(data, admin_id):
    """Atualizar KPIs do dashboard"""
    from kpis_engine import recalcular_kpis_funcionarios
    recalcular_kpis_funcionarios(admin_id)
```

#### **2.2 M√ìDULO PONTO ‚Üí FOLHA + CUSTOS**

```python
# Em ponto_views.py
@ponto_bp.route('/bater-ponto', methods=['POST'])
@login_required
def bater_ponto():
    # ... c√≥digo existente ...
    
    if registro_criado:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('ponto_registrado', {
            'registro_id': registro.id,
            'funcionario_id': registro.funcionario_id,
            'obra_id': registro.obra_id,
            'data': registro.data.isoformat(),
            'horas_trabalhadas': registro.horas_trabalhadas,
            'horas_extras': registro.horas_extras,
        }, current_user.id)
    
    return jsonify({'success': True})

# Handlers de integra√ß√£o
def gerar_dados_folha(data, admin_id):
    """Gerar dados para folha de pagamento"""
    from folha_pagamento_utils import processar_ponto_para_folha
    processar_ponto_para_folha(data['registro_id'], admin_id)

def calcular_custo_obra(data, admin_id):
    """Calcular custo de m√£o de obra por obra"""
    from contabilidade_utils import lancar_custo_mao_obra
    lancar_custo_mao_obra(data['obra_id'], data['funcionario_id'], 
                         data['horas_trabalhadas'], data['horas_extras'], admin_id)
```

#### **2.3 M√ìDULO ALMOXARIFADO ‚Üí CUSTOS + ESTOQUE**

```python
# Em almoxarifado_views.py
@almoxarifado_bp.route('/saida', methods=['POST'])
@login_required
def registrar_saida():
    # ... c√≥digo existente ...
    
    if movimento_criado:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('material_movimentado', {
            'movimento_id': movimento.id,
            'tipo': 'SAIDA',
            'item_id': movimento.item_id,
            'obra_id': movimento.obra_id,
            'funcionario_id': movimento.funcionario_id,
            'quantidade': float(movimento.quantidade),
            'valor_unitario': float(movimento.valor_unitario),
            'valor_total': float(movimento.quantidade * movimento.valor_unitario),
        }, current_user.id)
    
    return redirect(url_for('almoxarifado.dashboard'))

# Handlers de integra√ß√£o
def lancar_custo_obra(data, admin_id):
    """Lan√ßar custo de material na obra"""
    from contabilidade_utils import criar_lancamento_automatico
    criar_lancamento_automatico(
        tipo='CUSTO_MATERIAL',
        obra_id=data['obra_id'],
        valor=data['valor_total'],
        descricao=f"Material usado - Item ID {data['item_id']}",
        admin_id=admin_id
    )

def verificar_estoque_minimo(data, admin_id):
    """Verificar se estoque atingiu m√≠nimo"""
    from almoxarifado_utils import verificar_alerta_estoque
    verificar_alerta_estoque(data['item_id'], admin_id)
```

#### **2.4 M√ìDULO FROTA ‚Üí CUSTOS + OBRAS**

```python
# Em frota_views.py
@frota_bp.route('/uso', methods=['POST'])
@login_required
def registrar_uso():
    # ... c√≥digo existente ...
    
    if uso_criado:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('veiculo_usado', {
            'uso_id': uso.id,
            'veiculo_id': uso.veiculo_id,
            'obra_id': uso.obra_id,
            'funcionario_id': uso.funcionario_id,
            'km_percorrido': uso.km_percorrido,
            'data_uso': uso.data_uso.isoformat(),
        }, current_user.id)
    
    return redirect(url_for('frota.dashboard'))

# Handler de integra√ß√£o
def calcular_custo_combustivel_obra(data, admin_id):
    """Calcular custo de combust√≠vel por obra"""
    from contabilidade_utils import lancar_custo_veiculo
    lancar_custo_veiculo(data['uso_id'], admin_id)
```

#### **2.5 M√ìDULO RDO ‚Üí CUSTOS + PROGRESSO**

```python
# Em production_routes.py
@production_bp.route('/rdo/aprovar', methods=['POST'])
@login_required
def aprovar_rdo():
    # ... c√≥digo existente ...
    
    if rdo_aprovado:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('rdo_aprovado', {
            'rdo_id': rdo.id,
            'obra_id': rdo.obra_id,
            'data': rdo.data.isoformat(),
            'servicos': [s.to_dict() for s in rdo.servicos],
            'valor_total': rdo.valor_total,
        }, current_user.id)
    
    return jsonify({'success': True})

# Handler de integra√ß√£o
def lancar_custo_terceiros(data, admin_id):
    """Lan√ßar custos de terceiros aprovados no RDO"""
    from contabilidade_utils import processar_rdo_contabil
    processar_rdo_contabil(data['rdo_id'], admin_id)
```

#### **2.6 M√ìDULO PROPOSTAS ‚Üí OBRAS + FINANCEIRO**

```python
# Em propostas_consolidated.py
@propostas_bp.route('/aprovar', methods=['POST'])
@login_required
def aprovar_proposta():
    # ... c√≥digo existente ...
    
    if proposta_aprovada:
        # INTEGRA√á√ÉO AUTOM√ÅTICA
        EventManager.emit('proposta_aprovada', {
            'proposta_id': proposta.id,
            'cliente_id': proposta.cliente_id,
            'valor_total': float(proposta.valor_total),
            'prazo_dias': proposta.prazo_dias,
            'itens': [item.to_dict() for item in proposta.itens],
        }, current_user.id)
    
    return redirect(url_for('propostas.dashboard'))

# Handlers de integra√ß√£o
def criar_obra_automatica(data, admin_id):
    """Criar obra automaticamente a partir da proposta"""
    from models import Obra
    obra = Obra(
        nome=f"Obra - Proposta {data['proposta_id']}",
        cliente_id=data['cliente_id'],
        proposta_origem_id=data['proposta_id'],
        admin_id=admin_id
    )
    db.session.add(obra)
    db.session.commit()

def gerar_cronograma_recebimento(data, admin_id):
    """Gerar contas a receber baseado na proposta"""
    from financeiro_service import criar_contas_receber_proposta
    criar_contas_receber_proposta(data['proposta_id'], admin_id)
```

### **FASE 3: IMPLEMENTA√á√ÉO DO EVENT MANAGER**

```python
# Criar arquivo: event_manager.py
import logging
from datetime import datetime
from models import db

logger = logging.getLogger(__name__)

class EventManager:
    """Gerenciador central de eventos entre m√≥dulos"""
    
    # Registry de handlers por evento
    handlers = {}
    
    @classmethod
    def register_handler(cls, event_name, handler_func):
        """Registrar handler para um evento"""
        if event_name not in cls.handlers:
            cls.handlers[event_name] = []
        cls.handlers[event_name].append(handler_func)
        logger.info(f"üìù Handler {handler_func.__name__} registrado para evento {event_name}")
    
    @classmethod
    def emit(cls, event_name, data, admin_id):
        """Emitir evento para todos os handlers registrados"""
        try:
            logger.info(f"üîî EVENTO EMITIDO: {event_name} | Admin: {admin_id} | Data: {data}")
            
            # Executar todos os handlers
            handlers = cls.handlers.get(event_name, [])
            success_count = 0
            
            for handler in handlers:
                try:
                    handler(data, admin_id)
                    success_count += 1
                    logger.info(f"‚úÖ Handler {handler.__name__} executado com sucesso")
                except Exception as e:
                    logger.error(f"‚ùå Erro no handler {handler.__name__}: {e}")
            
            logger.info(f"üìä Evento {event_name}: {success_count}/{len(handlers)} handlers executados")
            return success_count == len(handlers)
            
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico ao emitir evento {event_name}: {e}")
            return False
    
    @classmethod
    def list_events(cls):
        """Listar todos os eventos registrados"""
        return {event: len(handlers) for event, handlers in cls.handlers.items()}

# Decorador para facilitar registro de handlers
def event_handler(event_name):
    """Decorador para registrar handlers de eventos"""
    def decorator(func):
        EventManager.register_handler(event_name, func)
        return func
    return decorator
```

### **FASE 4: REGISTRO AUTOM√ÅTICO DE HANDLERS**

```python
# Criar arquivo: integration_handlers.py
from event_manager import event_handler
from models import db
import logging

logger = logging.getLogger(__name__)

# ===== HANDLERS PARA FUNCION√ÅRIOS =====
@event_handler('funcionario_criado')
def criar_configuracao_ponto_padrao(data, admin_id):
    """Criar configura√ß√£o padr√£o de ponto para novo funcion√°rio"""
    try:
        from ponto_service import PontoService
        PontoService.criar_configuracao_padrao(data['funcionario_id'], admin_id)
        logger.info(f"‚úÖ Configura√ß√£o de ponto criada para funcion√°rio {data['funcionario_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar configura√ß√£o de ponto: {e}")

@event_handler('funcionario_criado')
def atualizar_kpis_dashboard(data, admin_id):
    """Atualizar KPIs do dashboard"""
    try:
        from kpis_engine import recalcular_kpis_funcionarios
        recalcular_kpis_funcionarios(admin_id)
        logger.info(f"‚úÖ KPIs atualizados para admin {admin_id}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar KPIs: {e}")

# ===== HANDLERS PARA PONTO =====
@event_handler('ponto_registrado')
def processar_ponto_folha(data, admin_id):
    """Processar registro de ponto para folha de pagamento"""
    try:
        from folha_pagamento_utils import processar_registro_ponto
        processar_registro_ponto(data['registro_id'], admin_id)
        logger.info(f"‚úÖ Ponto processado para folha: registro {data['registro_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao processar ponto para folha: {e}")

@event_handler('ponto_registrado')
def lancar_custo_mao_obra(data, admin_id):
    """Lan√ßar custo de m√£o de obra na obra"""
    try:
        from contabilidade_utils import criar_lancamento_mao_obra
        criar_lancamento_mao_obra(
            obra_id=data['obra_id'],
            funcionario_id=data['funcionario_id'],
            horas_trabalhadas=data['horas_trabalhadas'],
            horas_extras=data.get('horas_extras', 0),
            admin_id=admin_id
        )
        logger.info(f"‚úÖ Custo de m√£o de obra lan√ßado: obra {data['obra_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao lan√ßar custo de m√£o de obra: {e}")

# ===== HANDLERS PARA ALMOXARIFADO =====
@event_handler('material_movimentado')
def lancar_custo_material_obra(data, admin_id):
    """Lan√ßar custo de material na obra"""
    if data['tipo'] == 'SAIDA' and data.get('obra_id'):
        try:
            from contabilidade_utils import criar_lancamento_material
            criar_lancamento_material(
                obra_id=data['obra_id'],
                item_id=data['item_id'],
                quantidade=data['quantidade'],
                valor_unitario=data['valor_unitario'],
                valor_total=data['valor_total'],
                admin_id=admin_id
            )
            logger.info(f"‚úÖ Custo de material lan√ßado: obra {data['obra_id']}, valor R$ {data['valor_total']}")
        except Exception as e:
            logger.error(f"‚ùå Erro ao lan√ßar custo de material: {e}")

@event_handler('material_movimentado')
def verificar_estoque_minimo(data, admin_id):
    """Verificar alerta de estoque m√≠nimo"""
    try:
        from almoxarifado_utils import verificar_alerta_estoque
        alertas = verificar_alerta_estoque(data['item_id'], admin_id)
        if alertas:
            logger.warning(f"‚ö†Ô∏è Alerta de estoque m√≠nimo: item {data['item_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao verificar estoque m√≠nimo: {e}")

# ===== HANDLERS PARA FROTA =====
@event_handler('veiculo_usado')
def calcular_custo_combustivel(data, admin_id):
    """Calcular e lan√ßar custo de combust√≠vel"""
    try:
        from contabilidade_utils import criar_lancamento_combustivel
        criar_lancamento_combustivel(
            uso_id=data['uso_id'],
            obra_id=data['obra_id'],
            km_percorrido=data['km_percorrido'],
            admin_id=admin_id
        )
        logger.info(f"‚úÖ Custo de combust√≠vel calculado: uso {data['uso_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao calcular custo de combust√≠vel: {e}")

# ===== HANDLERS PARA RDO =====
@event_handler('rdo_aprovado')
def lancar_custos_terceiros(data, admin_id):
    """Lan√ßar custos de terceiros do RDO"""
    try:
        from contabilidade_utils import processar_rdo_contabil
        processar_rdo_contabil(data['rdo_id'], admin_id)
        logger.info(f"‚úÖ Custos de terceiros lan√ßados: RDO {data['rdo_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao lan√ßar custos de terceiros: {e}")

# ===== HANDLERS PARA PROPOSTAS =====
@event_handler('proposta_aprovada')
def criar_obra_automatica(data, admin_id):
    """Criar obra automaticamente a partir da proposta"""
    try:
        from models import Obra, Proposta
        proposta = Proposta.query.get(data['proposta_id'])
        
        obra = Obra(
            nome=f"Obra - {proposta.titulo}",
            endereco=proposta.endereco if hasattr(proposta, 'endereco') else '',
            proposta_origem_id=data['proposta_id'],
            admin_id=admin_id
        )
        db.session.add(obra)
        db.session.commit()
        
        logger.info(f"‚úÖ Obra criada automaticamente: ID {obra.id} da proposta {data['proposta_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar obra autom√°tica: {e}")

@event_handler('proposta_aprovada')
def gerar_contas_receber(data, admin_id):
    """Gerar contas a receber baseado na proposta"""
    try:
        from financeiro_service import criar_contas_receber_proposta
        criar_contas_receber_proposta(data['proposta_id'], admin_id)
        logger.info(f"‚úÖ Contas a receber geradas: proposta {data['proposta_id']}")
    except Exception as e:
        logger.error(f"‚ùå Erro ao gerar contas a receber: {e}")
```

---

## üìã CHECKLIST DE IMPLEMENTA√á√ÉO

### **PR√â-IMPLEMENTA√á√ÉO**
- [ ] ‚úÖ Backup completo do sistema
- [ ] ‚úÖ Testar em ambiente de desenvolvimento
- [ ] ‚úÖ Documentar integra√ß√µes atuais

### **IMPLEMENTA√á√ÉO FASE 1: EVENT MANAGER**
- [ ] üîß Criar `event_manager.py`
- [ ] üîß Criar `integration_handlers.py`
- [ ] üîß Importar no `app.py`
- [ ] ‚úÖ Testar emiss√£o de eventos

### **IMPLEMENTA√á√ÉO FASE 2: INTEGRA√á√ÉO DOS M√ìDULOS**
- [ ] üîó Integrar m√≥dulo Funcion√°rios
- [ ] üîó Integrar m√≥dulo Ponto
- [ ] üîó Integrar m√≥dulo Almoxarifado
- [ ] üîó Integrar m√≥dulo Frota
- [ ] üîó Integrar m√≥dulo RDO
- [ ] üîó Integrar m√≥dulo Propostas
- [ ] üîó Integrar m√≥dulo Folha
- [ ] üîó Integrar m√≥dulo Financeiro

### **IMPLEMENTA√á√ÉO FASE 3: TESTES DE INTEGRA√á√ÉO**
- [ ] üß™ Testar fluxo: Funcion√°rio ‚Üí Ponto ‚Üí Folha
- [ ] üß™ Testar fluxo: Almoxarifado ‚Üí Custos ‚Üí Obra
- [ ] üß™ Testar fluxo: Frota ‚Üí Combust√≠vel ‚Üí Obra
- [ ] üß™ Testar fluxo: RDO ‚Üí Terceiros ‚Üí Contabilidade
- [ ] üß™ Testar fluxo: Proposta ‚Üí Obra ‚Üí Financeiro
- [ ] üìä Validar lan√ßamentos autom√°ticos

### **IMPLEMENTA√á√ÉO FASE 4: MONITORAMENTO**
- [ ] üìä Dashboard de eventos em tempo real
- [ ] üìù Logs detalhados de integra√ß√µes
- [ ] ‚ö†Ô∏è Alertas para falhas de integra√ß√£o
- [ ] üìà M√©tricas de performance

---

## üéØ RESULTADO ESPERADO

### **INTEGRA√á√ÉO TOTAL FUNCIONANDO:**
- ‚úÖ **Funcion√°rio criado** ‚Üí Configura√ß√£o de ponto autom√°tica
- ‚úÖ **Ponto registrado** ‚Üí Dados para folha + Custo na obra
- ‚úÖ **Material usado** ‚Üí Custo lan√ßado na obra + Alerta estoque
- ‚úÖ **Ve√≠culo usado** ‚Üí Custo combust√≠vel na obra
- ‚úÖ **RDO aprovado** ‚Üí Custos terceiros lan√ßados
- ‚úÖ **Proposta aprovada** ‚Üí Obra criada + Contas a receber

### **FLUXO DE DADOS AUTOM√ÅTICO:**
- ‚úÖ **Zero interven√ß√£o manual** para lan√ßamentos
- ‚úÖ **Dados em tempo real** entre m√≥dulos
- ‚úÖ **Custos precisos** por obra automaticamente
- ‚úÖ **KPIs atualizados** instantaneamente

### **SISTEMA VERDADEIRAMENTE INTEGRADO:**
- ‚úÖ **Cada a√ß√£o** gera eventos autom√°ticos
- ‚úÖ **M√≥dulos conversam** entre si
- ‚úÖ **Dados consistentes** em todo sistema
- ‚úÖ **Base s√≥lida** para m√≥dulo financeiro

---

## üöÄ IMPLEMENTA√á√ÉO NO REPLIT

**Use este prompt:**

```
Atue como um especialista em arquitetura de sistemas integrados. Implemente a integra√ß√£o autom√°tica completa entre todos os m√≥dulos do SIGE seguindo EXATAMENTE o plano detalhado acima.

CR√çTICO:
1. Criar Event Manager central para comunica√ß√£o entre m√≥dulos
2. Implementar handlers autom√°ticos para cada tipo de evento
3. Integrar TODOS os m√≥dulos para emitir eventos nas a√ß√µes principais
4. Testar fluxo completo de dados autom√°tico
5. Garantir que lan√ßamentos sejam gerados automaticamente

OBJETIVO: Sistema totalmente integrado onde cada a√ß√£o em um m√≥dulo automaticamente impacta outros m√≥dulos relacionados.

Execute as 4 fases na ordem, reportando o progresso de cada integra√ß√£o implementada.
```

**Esta integra√ß√£o transformar√° o SIGE em um sistema verdadeiramente integrado, onde os dados fluem automaticamente entre todos os m√≥dulos!** üîó‚ú®
