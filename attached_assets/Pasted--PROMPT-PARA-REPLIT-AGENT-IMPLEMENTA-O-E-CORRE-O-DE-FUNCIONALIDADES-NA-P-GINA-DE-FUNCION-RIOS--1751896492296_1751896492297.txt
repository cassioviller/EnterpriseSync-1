# PROMPT PARA REPLIT AGENT: IMPLEMENTAÇÃO E CORREÇÃO DE FUNCIONALIDADES NA PÁGINA DE FUNCIONÁRIOS - SIGE v3.0

## Contexto do Projeto

Este projeto refere-se ao **Sistema Integrado de Gestão Empresarial (SIGE) v3.0**, uma aplicação web desenvolvida em **Flask (Python)** com **SQLAlchemy** e **PostgreSQL** no backend, e **Bootstrap 5**, **JavaScript (jQuery, Chart.js, DataTables.js)** no frontend. O sistema é voltado para a gestão de empresas de construção civil, abrangendo funcionários, obras, veículos, controle de ponto e alimentação. A versão atual é a v3.0, com atualizações recentes até 07 de Julho de 2025. A linguagem principal do sistema é o **Português Brasileiro**.

## Objetivo

Com base no "RELATÓRIO TÉCNICO: PÁGINA DE FUNCIONÁRIOS - SIGE v3.0" (cujo conteúdo foi fornecido), o objetivo é corrigir os problemas críticos identificados e implementar as funcionalidades pendentes na página de gestão de funcionários e no perfil individual do funcionário.

## Problemas Críticos e Requisitos de Correção

### 1. Correção da Rota de Criação de Funcionário (`/funcionarios/novo`)

**Problema:** A rota `/funcionarios/novo` em `views.py` está **incompleta/truncada**, impedindo o cadastro de novos funcionários. O botão "Novo Funcionário" redireciona para esta rota, mas a implementação está cortada.

**Requisitos de Correção:**
-   **Completar a Rota POST e GET:** Implementar a lógica completa para a rota `novo_funcionario` em `views.py`, conforme a "Solução Proposta" detalhada no relatório.
-   **Popular SelectFields:** Garantir que os `SelectField` para Departamento, Função e Horário de Trabalho sejam populados corretamente com dados do banco de dados.
-   **Processar Upload de Foto:** Integrar a funcionalidade de upload de foto, chamando uma função utilitária (`salvar_foto_funcionario`) para salvar o arquivo e atualizar o campo `foto` do modelo `Funcionario`.
-   **Gerar Código Único:** Implementar a geração de um código único para o funcionário (`gerar_codigo_funcionario`).
-   **Persistência no Banco de Dados:** Assegurar que o objeto `Funcionario` seja adicionado à sessão do banco de dados e persistido (`db.session.add(funcionario)`, `db.session.commit()`).
-   **Mensagens Flash e Redirecionamento:** Adicionar mensagens de sucesso/erro e redirecionar para a página de funcionários após o cadastro.

### 2. Correção da Rota de Edição de Funcionário (`/funcionarios/<int:id>/editar`)

**Problema:** A rota `/funcionarios/<int:id>/editar` em `views.py` está **incompleta/truncada**, impedindo a edição de dados de funcionários existentes.

**Requisitos de Correção:**
-   **Completar a Rota POST e GET:** Implementar a lógica completa para a rota `editar_funcionario` em `views.py`, permitindo carregar os dados do funcionário para edição e salvar as alterações.
-   **Processar Upload de Foto na Edição:** A funcionalidade de atualização de foto durante a edição **não está funcionando**. A correção deve garantir que a nova foto seja salva e o campo `foto` do funcionário seja atualizado corretamente. Isso envolve a mesma lógica de `salvar_foto_funcionario` e a atualização do modelo.

### 3. Implementação de Funções Utilitárias Ausentes

**Problema:** Funções essenciais como `gerar_codigo_funcionario()`, `salvar_foto_funcionario(foto, codigo)` e `validar_cpf(cpf)` estão faltando em `utils.py`.

**Requisitos de Implementação:**
-   **`gerar_codigo_funcionario()`:** Criar esta função em `utils.py` para gerar códigos únicos para novos funcionários (ex: F0001, F0002).
-   **`salvar_foto_funcionario(foto, codigo)`:** Criar esta função em `utils.py` para lidar com o salvamento de arquivos de imagem, conforme a "Recomendação Técnica" no relatório, utilizando `secure_filename` e `os.path.join`.
-   **`validar_cpf(cpf)`:** Criar esta função em `utils.py` para validação de CPF.

## Funcionalidades Pendentes e Requisitos de Implementação

### 1. Conexão do Modal de Funcionário no Template Principal

**Pendência:** O modal HTML em `templates/funcionarios.html` existe, mas **não está conectado às rotas backend** de criação e edição.

**Requisitos de Implementação:**
-   **Integração com Rotas:** Conectar o modal às rotas `novo_funcionario` e `editar_funcionario` para que as submissões do formulário sejam enviadas para o backend e as respostas sejam tratadas adequadamente.
-   **Validação Frontend Aprimorada:** Adicionar validações JavaScript mais robustas no modal para campos como CPF (formato e unicidade), e-mail, telefone, garantindo feedback imediato ao usuário.
-   **Preview de Foto:** Implementar a funcionalidade de preview da foto selecionada antes do upload no modal de criação/edição.
-   **Máscara de CPF:** Adicionar máscara de input para o campo CPF para melhorar a usabilidade.

### 2. Exportação de Dados da Lista de Funcionários

**Pendência:** A funcionalidade de exportação de dados da lista de funcionários (CSV, PDF, Excel) está **ausente**.

**Requisitos de Implementação:**
-   **Botões de Exportação:** Adicionar botões para exportação (CSV, PDF, Excel) na página de listagem de funcionários (`templates/funcionarios.html`).
-   **Lógica de Exportação no Backend:** Implementar as rotas de backend em `views.py` que gerem os arquivos de exportação (CSV, Excel usando `openpyxl`, PDF usando `ReportLab` ou similar) com base nos dados da tabela de funcionários, respeitando os filtros aplicados.

### 3. Filtros e Busca Avançada na Tabela de Funcionários

**Pendência:** A funcionalidade de filtros e busca é **limitada**.

**Requisitos de Implementação:**
-   **Filtros por Nome, Departamento, Status:** Adicionar campos de filtro específicos para nome, departamento e status (ativo/inativo) na página de funcionários.
-   **Persistência de Filtros:** Implementar a persistência dos filtros selecionados entre as sessões do usuário ou ao navegar para outras páginas e retornar (ex: usando `localStorage` ou sessão do servidor).

## Informações Críticas para o Replit Agent

-   **Versão do Sistema:** SIGE v3.0 (com as atualizações v3.1, v3.2, v3.3 de 07/07/2025 já aplicadas).
-   **Tecnologias:** Flask, SQLAlchemy, PostgreSQL, Bootstrap 5, JavaScript (jQuery, Chart.js, DataTables.js).
-   **Contexto:** Sistema de gestão para construção civil, com foco em RH, obras, veículos, ponto e alimentação.
-   **Linguagem:** Português Brasileiro para toda a interface e documentação.
-   **Modelos de Dados:** O modelo `Funcionario` em `models.py` é central. O Replit Agent deve considerar as tabelas `Departamento`, `Funcao`, `HorarioTrabalho` e `Ocorrencia` para as implementações.
-   **Arquivos Relevantes:**
    -   `views.py`: Contém as rotas e a lógica de backend para funcionários.
    -   `forms.py`: Define os formulários relacionados a funcionários.
    -   `models.py`: Define os modelos de banco de dados.
    -   `utils.py`: Onde as funções utilitárias devem ser implementadas.
    -   `templates/funcionarios.html`: Página principal de listagem e criação/edição de funcionários.
    -   `templates/funcionario_perfil.html`: Página de perfil individual do funcionário.
    -   `static/js/app.js`: Contém lógica JavaScript global, incluindo upload de arquivos e validações.

## Exemplo de Abordagem (para o Replit Agent)

Para cada problema ou funcionalidade, o Replit Agent deve:
1.  **Analisar:** Revisar o código existente nos arquivos relevantes (`.py`, `.html`, `.js`) para entender a causa raiz do problema ou o ponto de inserção da nova funcionalidade.
2.  **Planejar:** Propor um plano de implementação detalhado, incluindo alterações no modelo de dados (se necessário), rotas, lógica de negócio e interface de usuário.
3.  **Implementar:** Realizar as modificações no código, adicionando novas funcionalidades ou aprimorando as existentes.
4.  **Testar:** Garantir que a funcionalidade implementada esteja correta e não introduza regressões. Realizar testes de unidade e integração.
5.  **Documentar:** Atualizar a documentação relevante (se aplicável) e fornecer um resumo das alterações realizadas.

--- 

**FIM DO PROMPT**

