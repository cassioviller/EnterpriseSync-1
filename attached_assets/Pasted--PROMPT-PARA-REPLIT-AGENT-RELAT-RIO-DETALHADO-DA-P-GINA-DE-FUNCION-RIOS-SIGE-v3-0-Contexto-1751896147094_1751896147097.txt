# PROMPT PARA REPLIT AGENT: RELATÓRIO DETALHADO DA PÁGINA DE FUNCIONÁRIOS - SIGE v3.0

## Contexto do Projeto

Este projeto refere-se ao **Sistema Integrado de Gestão Empresarial (SIGE) v3.0**, uma aplicação web desenvolvida em **Flask (Python)** com **SQLAlchemy** e **PostgreSQL** no backend, e **Bootstrap 5**, **JavaScript (jQuery, Chart.js, DataTables.js)** no frontend. O sistema é voltado para a gestão de empresas de construção civil, abrangendo funcionários, obras, veículos, controle de ponto e alimentação. A versão atual é a v3.0, com atualizações recentes até 07 de Julho de 2025. A linguagem principal do sistema é o **Português Brasileiro**.

## Objetivo

Gerar um relatório técnico abrangente sobre a **Página de Funcionários** do sistema SIGE v3.0. Este relatório deve detalhar o estado atual das funcionalidades, identificar pendências, e analisar problemas específicos relacionados à gestão de funcionários, incluindo o cadastro e a edição.

## Estrutura do Relatório Solicitado

O relatório deve ser estruturado nas seguintes seções:

### 1. Visão Geral da Página de Funcionários
-   **Propósito:** Descrever a função principal da página.
-   **Informações Exibidas:** Listar os dados apresentados na tabela de funcionários (nome, CPF, cargo, departamento, status, etc.).
-   **Elementos Interativos:** Detalhar os botões e filtros disponíveis (ex: 


botão 'Novo Funcionário', botões de edição/exclusão, filtros de busca).

### 2. Análise de Funcionalidades Existentes
-   **Cadastro de Funcionários:** Descrever o fluxo atual de criação de novos funcionários, incluindo campos e validações.
-   **Edição de Funcionários:** Detalhar o fluxo de edição de funcionários existentes, incluindo campos e validações.
-   **Perfil do Funcionário:** Descrever as seções do perfil (cabeçalho, filtros, KPIs, controle de ponto, alimentação, ocorrências).
-   **KPIs de Funcionários:** Explicar como os KPIs são exibidos e calculados na página de perfil.
-   **Controle de Ponto e Ocorrências:** Descrever a integração e exibição desses dados no perfil do funcionário.

### 3. Problemas e Pendências Identificadas

#### 3.1. Problemas Críticos
-   **Criação de Funcionário (Módulo de Criar Funcionário):** O módulo de criação de novos funcionários **não está funcionando corretamente**. O Replit Agent deve investigar o `views.py` (rota de criação), `forms.py` (formulário de funcionário) e o template `templates/funcionarios.html` (modal de criação) para identificar a causa raiz do problema e propor uma solução.
-   **Upload de Foto na Edição de Funcionário:** A funcionalidade de adicionar/atualizar a foto do funcionário **não está ocorrendo corretamente na hora de editar** um funcionário existente. O Replit Agent deve analisar o `views.py` (rota de edição), `forms.py` (campo de foto) e o template `templates/funcionarios.html` (modal de edição) para diagnosticar e corrigir o problema, garantindo que a foto seja salva e exibida corretamente.

#### 3.2. Pendências Gerais na Página de Funcionários
-   **Modal de Ocorrências em Funcionário:** O modal de ocorrências no perfil do funcionário (`templates/funcionario_perfil.html`) está **incompleto**. Detalhar o que falta para sua completa funcionalidade (integração com backend, salvamento de dados, exibição de ocorrências).
-   **Modal de Edição de Funcionário:** Embora funcional, o modal de edição de funcionário (`templates/funcionarios.html`) pode necessitar de **melhorias de UX/validações adicionais**. Analisar e sugerir aprimoramentos.
-   **Filtros e Busca:** Avaliar a eficácia dos filtros e da busca na tabela de funcionários. Sugerir melhorias para busca avançada ou persistência de filtros, se aplicável.
-   **Exportação de Dados:** Verificar se há funcionalidade de exportação de dados da lista de funcionários (ex: CSV, PDF, Excel) e, caso não haja, indicar como uma pendência.

### 4. Recomendações e Próximos Passos
-   **Priorização:** Sugerir uma ordem de prioridade para a resolução dos problemas e implementação das pendências.
-   **Impacto:** Descrever o impacto da resolução de cada problema/pendência na usabilidade e funcionalidade do sistema.
-   **Recomendações Técnicas:** Propor abordagens técnicas para as correções e implementações (ex: uso de AJAX, validações de formulário, manipulação de arquivos).

## Informações Críticas para o Replit Agent

-   **Versão do Sistema:** SIGE v3.0 (com as atualizações v3.1, v3.2, v3.3 de 07/07/2025 já aplicadas).
-   **Tecnologias:** Flask, SQLAlchemy, PostgreSQL, Bootstrap 5, JavaScript (jQuery, Chart.js, DataTables.js).
-   **Contexto:** Sistema de gestão para construção civil, com foco em RH, obras, veículos, ponto e alimentação.
-   **Linguagem:** Português Brasileiro para toda a interface e documentação.
-   **Modelos de Dados:** O modelo `Funcionario` em `models.py` é central. O Replit Agent deve considerar as tabelas `Departamento`, `Funcao`, `HorarioTrabalho` e `Ocorrencia` para a análise.
-   **Arquivos Relevantes:**
    -   `views.py`: Contém as rotas e a lógica de backend para funcionários.
    -   `forms.py`: Define os formulários relacionados a funcionários.
    -   `templates/funcionarios.html`: Página principal de listagem e criação/edição de funcionários.
    -   `templates/funcionario_perfil.html`: Página de perfil individual do funcionário.
    -   `static/js/app.js`: Contém lógica JavaScript global, incluindo upload de arquivos e validações.

## Exemplo de Abordagem (para o Replit Agent)

O Replit Agent deve realizar uma análise de código e funcionalidade, simulando o comportamento do usuário e verificando a integridade dos dados. Para cada problema ou pendência, deve:
1.  **Diagnosticar:** Identificar a linha de código ou a lógica que causa o problema.
2.  **Propor Solução:** Descrever a correção ou a implementação necessária.
3.  **Impacto:** Avaliar o impacto da solução no sistema.

--- 

**FIM DO PROMPT**

