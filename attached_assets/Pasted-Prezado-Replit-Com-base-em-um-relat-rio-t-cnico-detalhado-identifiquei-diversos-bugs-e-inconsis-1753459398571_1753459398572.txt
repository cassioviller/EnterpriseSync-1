Prezado Replit,

Com base em um relat√≥rio t√©cnico detalhado, identifiquei diversos bugs e inconsist√™ncias no sistema de registro de ponto do SIGE v8.0. √â crucial que essas corre√ß√µes sejam implementadas para garantir a precis√£o dos c√°lculos de horas, horas extras, atrasos e a correta funcionalidade do CRUD.

Por favor, revise os arquivos `models.py`, `views.py`, `kpis_engine.py`, `templates/funcionario_perfil.html` e os arquivos JavaScript em `static/js/` para aplicar as corre√ß√µes detalhadas abaixo. O objetivo √© alinhar o sistema com as regras de neg√≥cio e garantir a integridade dos dados.

---

### **Vis√£o Geral dos Problemas e Solu√ß√µes**

O sistema de registro de ponto, embora funcional em sua base, apresenta falhas cr√≠ticas que afetam a precis√£o dos c√°lculos e a usabilidade. Os problemas foram categorizados e as solu√ß√µes propostas visam corrigir a l√≥gica de neg√≥cio e a intera√ß√£o entre frontend e backend.

---

### **1. Problemas Identificados e Corre√ß√µes Necess√°rias**

#### **üî¥ PROBLEMA 1: S√°bado sem Hor√°rio de Almo√ßo**
*   **Sintoma**: Registros de s√°bado n√£o salvam `hora_almoco_saida`/`retorno`.
*   **Causa**: JavaScript ou backend n√£o processa o hor√°rio de almo√ßo para tipos de registro especiais (`SABADO_HORAS_EXTRAS`, `DOMINGO_HORAS_EXTRAS`, `FERIADO_TRABALHADO`).
*   **Impacto**: C√°lculo incorreto de horas trabalhadas.
*   **Corre√ß√£o**: Modificar a l√≥gica no frontend (JavaScript do modal de edi√ß√£o) e no backend (`views.py`) para permitir que os campos de hor√°rio de almo√ßo sejam opcionais para esses tipos de registro, mas que, se preenchidos, sejam salvos e considerados no c√°lculo.

#### **üî¥ PROBLEMA 2: C√°lculo de Horas Inconsistente**
*   **Sintoma**: Horas extras n√£o seguem a regra "TODAS as horas em s√°bado/domingo/feriado s√£o extras".
*   **Causa**: A l√≥gica de c√°lculo em `kpis_engine.py` n√£o diferencia corretamente os tipos de registro especiais dos normais para o c√°lculo de horas extras.
*   **Impacto**: Pagamento incorreto de horas extras.
*   **Corre√ß√£o**: Ajustar a fun√ß√£o `_calcular_horas_extras` e `calcular_e_atualizar_ponto` em `kpis_engine.py` para aplicar a regra correta:
    ```python
    # L√ìGICA CORRETA para horas extras
    if registro.tipo_registro in ["sabado_horas_extras", "domingo_horas_extras", "feriado_trabalhado"]:
        registro.horas_extras = registro.horas_trabalhadas  # TODAS as horas s√£o extras
    else:
        registro.horas_extras = max(0, registro.horas_trabalhadas - 8.0)  # Apenas acima de 8h para trabalho normal
    ```

#### **üî¥ PROBLEMA 3: CRUD com Erros de Campo**
*   **Sintoma**: `AttributeError: 'entrada' object has no attribute` ao tentar editar registros.
*   **Causa**: Inconsist√™ncia entre os nomes dos campos no modelo (`models.py`) e o c√≥digo que tenta acess√°-los (`views.py`). O modelo usa `hora_entrada`, `hora_saida`, etc., mas o c√≥digo tenta acessar `entrada`, `saida`.
*   **Impacto**: Funcionalidade de edi√ß√£o de registro quebrada.
*   **Corre√ß√£o**: Em `views.py`, substituir as refer√™ncias incorretas pelos nomes de campo corretos do modelo `RegistroPonto`:
    ```python
    # ‚ùå ERRO ATUAL
    # 'entrada': registro.entrada.strftime('%H:%M')

    # ‚úÖ CORRE√á√ÉO
    'hora_entrada': registro.hora_entrada.strftime('%H:%M') if registro.hora_entrada else None,
    'hora_saida': registro.hora_saida.strftime('%H:%M') if registro.hora_saida else None,
    'hora_almoco_saida': registro.hora_almoco_saida.strftime('%H:%M') if registro.hora_almoco_saida else None,
    'hora_almoco_retorno': registro.hora_almoco_retorno.strftime('%H:%M') if registro.hora_almoco_retorno else None,
    ```
    Aplicar essa corre√ß√£o em todas as partes do CRUD onde os campos de hor√°rio s√£o acessados.

#### **üî¥ PROBLEMA 4: Valida√ß√£o de Tipos Especiais (Atrasos)**
*   **Sintoma**: O sistema permite o c√°lculo de atrasos para registros de s√°bado/domingo/feriado.
*   **Causa**: A l√≥gica de c√°lculo de atrasos em `kpis_engine.py` n√£o exclui corretamente os tipos de registro especiais.
*   **Impacto**: KPIs de atraso incorretos.
*   **Corre√ß√£o**: Ajustar a fun√ß√£o `_calcular_atrasos_horas` e `calcular_e_atualizar_ponto` em `kpis_engine.py` para zerar os atrasos para esses tipos de registro:
    ```python
    # L√ìGICA CORRETA para atrasos
    if registro.tipo_registro not in ["sabado_horas_extras", "domingo_horas_extras", "feriado_trabalhado"]:
        # S√≥ calcula atraso para trabalho com hor√°rio fixo
        # ... (l√≥gica existente de c√°lculo de atrasos)
    else:
        # Tipos especiais: zero atraso sempre
        registro.minutos_atraso_entrada = 0
        registro.minutos_atraso_saida = 0
        registro.total_atraso_minutos = 0
        registro.total_atraso_horas = 0
    ```

---

### **2. Regras Cr√≠ticas de Implementa√ß√£o (Reafirma√ß√£o)**

Para garantir a consist√™ncia, reafirmo as regras cr√≠ticas que devem ser seguidas na implementa√ß√£o:

*   **Hor√°rios de Almo√ßo**: OBRIGAT√ìRIO para `TRABALHO_NORMAL` (desconta 1h padr√£o); OPCIONAL para `SABADO_HORAS_EXTRAS`, `DOMINGO_HORAS_EXTRAS`, `FERIADO_TRABALHADO` (pode trabalhar sem parar); N√ÉO SE APLICA para `FALTA`/`FALTA_JUSTIFICADA`.
*   **C√°lculo de Horas Extras**: Conforme a corre√ß√£o do PROBLEMA 2.
*   **Atrasos**: Conforme a corre√ß√£o do PROBLEMA 4.
*   **Percentuais**: `TRABALHO_NORMAL`: 50% apenas para horas acima de 8h; `S√ÅBADO`: 50% sobre TODAS as horas; `DOMINGO`/`FERIADO`: 100% sobre TODAS as horas.

---

### **3. Arquivos Principais Envolvidos**

As altera√ß√µes devem ser focadas nos seguintes arquivos:

*   `models.py`: Verifica√ß√£o da estrutura do modelo `RegistroPonto`.
*   `views.py`: APIs REST para CRUD do ponto (principalmente na edi√ß√£o e cria√ß√£o).
*   `kpis_engine.py`: Motor de c√°lculos e KPIs (onde a l√≥gica de horas extras e atrasos reside).
*   `templates/funcionario_perfil.html`: Interface de controle (pode precisar de ajustes para campos de almo√ßo opcionais).
*   `static/js/`: Arquivos JavaScript relacionados ao modal de edi√ß√£o/cria√ß√£o de ponto (para lidar com a opcionalidade do almo√ßo).

---

### **4. Comandos de Teste e Valida√ß√£o**

Ap√≥s a implementa√ß√£o das corre√ß√µes, por favor, execute os seguintes testes para validar a funcionalidade:

*   **Testar c√°lculos de um registro espec√≠fico:**
    ```bash
    python -c "from kpis_engine import KPIsEngine; engine = KPIsEngine(); engine.calcular_e_atualizar_ponto(ID_DO_REGISTRO)"
    ```
    (Substitua `ID_DO_REGISTRO` por um ID real de teste).

*   **Verificar inconsist√™ncias (se houver um script de debug):**
    ```bash
    python debug_calculos_ponto.py
    ```

*   **Testar o CRUD completo (cria√ß√£o, leitura, atualiza√ß√£o, exclus√£o) de registros de ponto para todos os tipos (`TRABALHO_NORMAL`, `SABADO_HORAS_EXTRAS`, `DOMINGO_HORAS_EXTRAS`, `FERIADO_TRABALHADO`, `FALTA`, `FALTA_JUSTIFICADA`).**

---

**Resultado Esperado:**

Com a aplica√ß√£o dessas corre√ß√µes, o sistema de registro de ponto do SIGE v8.0 deve:

*   ‚úÖ Calcular horas trabalhadas e horas extras de forma precisa para todos os tipos de registro.
*   ‚úÖ Processar corretamente os hor√°rios de almo√ßo, respeitando a opcionalidade para tipos especiais.
*   ‚úÖ Permitir a edi√ß√£o de registros sem erros de `AttributeError`.
*   ‚úÖ Calcular atrasos apenas para os tipos de registro aplic√°veis, zerando-os para os tipos especiais.
*   ‚úÖ Fornecer KPIs de produtividade e absente√≠smo mais confi√°veis.

Por favor, implemente essas corre√ß√µes e me informe o resultado. Se precisar de mais informa√ß√µes ou encontrar qualquer dificuldade, estou √† disposi√ß√£o.

