# üìã PROMPT PARA AUDITORIA COMPLETA DE DEPLOY - Sistema SIGE v8.0

## üéØ OBJETIVO

Preciso fazer uma auditoria completa do processo de deploy para identificar **TODAS** as diferen√ßas entre ambiente de desenvolvimento e produ√ß√£o que est√£o causando falhas no sistema SIGE v8.0.

## üö® SITUA√á√ÉO ATUAL

O sistema funciona perfeitamente em desenvolvimento mas falha em produ√ß√£o com erros de:
- Migra√ß√£o de banco de dados
- Estrutura de tabelas inconsistente
- Problemas de enum e foreign keys
- Falhas no processo de inicializa√ß√£o

## üìÅ DOCUMENTOS NECESS√ÅRIOS PARA DIAGN√ìSTICO

### **1. ARQUIVOS DE CONFIGURA√á√ÉO DE DEPLOY**

#### **1.1 Dockerfile e Configura√ß√µes**
```
üìÑ Dockerfile (vers√£o atual completa)
üìÑ docker-compose.yml (se existir)
üìÑ .dockerignore
üìÑ docker-entrypoint.sh (script atual de inicializa√ß√£o)
üìÑ docker-entrypoint-production-fix.sh (vers√£o corrigida)
üìÑ docker-entrypoint-unified.sh (vers√£o backup)
```

#### **1.2 Configura√ß√µes do EasyPanel**
```
üìÑ Configura√ß√µes de ambiente do EasyPanel (screenshot ou export)
üìÑ Vari√°veis de ambiente definidas no EasyPanel
üìÑ Configura√ß√µes de rede e portas
üìÑ Configura√ß√µes de volume/storage
üìÑ Logs de deploy do EasyPanel (√∫ltimas tentativas)
```

### **2. ARQUIVOS DE CONFIGURA√á√ÉO DA APLICA√á√ÉO**

#### **2.1 Configura√ß√µes Python**
```
üìÑ pyproject.toml (depend√™ncias completas)
üìÑ requirements.txt (se existir)
üìÑ setup.py (se existir)
üìÑ app.py ou main.py (arquivo principal)
üìÑ config.py ou settings.py (configura√ß√µes da aplica√ß√£o)
```

#### **2.2 Configura√ß√µes Flask**
```
üìÑ __init__.py (inicializa√ß√£o da aplica√ß√£o)
üìÑ wsgi.py ou gunicorn.conf.py (configura√ß√£o do servidor)
üìÑ .env ou .env.example (vari√°veis de ambiente)
üìÑ .flaskenv (configura√ß√µes Flask espec√≠ficas)
```

### **3. ESTRUTURA DE BANCO DE DADOS**

#### **3.1 Modelos e Migra√ß√µes**
```
üìÑ models.py (modelos completos)
üìÑ migrations/ (pasta completa de migra√ß√µes)
   ‚îú‚îÄ‚îÄ alembic.ini
   ‚îú‚îÄ‚îÄ env.py
   ‚îú‚îÄ‚îÄ script.py.mako
   ‚îî‚îÄ‚îÄ versions/ (todos os arquivos de migra√ß√£o)
üìÑ migrations.py (sistema de migra√ß√£o customizado)
üìÑ database.py ou db.py (configura√ß√µes de banco)
```

#### **3.2 Scripts de Inicializa√ß√£o**
```
üìÑ init_db.py (se existir)
üìÑ seed.py ou fixtures.py (dados iniciais)
üìÑ create_tables.py (se existir)
üìÑ backup_restore.py (se existir)
```

### **4. LOGS E DIAGN√ìSTICOS**

#### **4.1 Logs de Produ√ß√£o**
```
üìÑ Logs completos do √∫ltimo deploy falhado
üìÑ Logs de inicializa√ß√£o da aplica√ß√£o
üìÑ Logs de erro do PostgreSQL
üìÑ Logs do container Docker
üìÑ Logs do EasyPanel (deploy e runtime)
```

#### **4.2 Logs de Desenvolvimento**
```
üìÑ Logs de funcionamento em desenvolvimento
üìÑ Output do comando flask db current
üìÑ Output do comando flask db history
üìÑ Resultado de testes locais
```

### **5. ESTRUTURA DO PROJETO**

#### **5.1 Arquivos de Estrutura**
```
üìÑ Estrutura completa de diret√≥rios (tree ou ls -la recursivo)
üìÑ .gitignore
üìÑ README.md (se cont√©m instru√ß√µes de deploy)
üìÑ CHANGELOG.md (se existir)
```

#### **5.2 Scripts de Automa√ß√£o**
```
üìÑ deploy.sh (se existir)
üìÑ build.sh (se existir)
üìÑ start.sh (se existir)
üìÑ Makefile (se existir)
```

### **6. CONFIGURA√á√ïES DE AMBIENTE**

#### **6.1 Desenvolvimento**
```
üìÑ Configura√ß√µes locais de banco (DATABASE_URL local)
üìÑ Vers√µes de depend√™ncias instaladas (pip freeze)
üìÑ Vers√£o do Python (python --version)
üìÑ Vers√£o do PostgreSQL local
üìÑ Sistema operacional de desenvolvimento
```

#### **6.2 Produ√ß√£o**
```
üìÑ Configura√ß√µes de banco em produ√ß√£o
üìÑ Vers√µes instaladas no container
üìÑ Vari√°veis de ambiente do container
üìÑ Configura√ß√µes de rede do EasyPanel
üìÑ Recursos alocados (CPU, RAM, storage)
```

### **7. TESTES E VALIDA√á√ÉO**

#### **7.1 Scripts de Teste**
```
üìÑ test_database.py (se existir)
üìÑ test_migrations.py (se existir)
üìÑ health_check.py (se existir)
üìÑ Resultados de testes unit√°rios
```

#### **7.2 Valida√ß√£o Manual**
```
üìÑ Checklist de deploy (se existir)
üìÑ Procedimentos de rollback
üìÑ Comandos de verifica√ß√£o p√≥s-deploy
```

## üîç COMANDOS DE DIAGN√ìSTICO NECESS√ÅRIOS

### **Execute estes comandos e forne√ßa os resultados:**

#### **No Ambiente de Desenvolvimento:**
```bash
# Estrutura do projeto
find . -type f -name "*.py" | head -20
find . -type f -name "*.sh" | head -10
find . -type f -name "*.yml" -o -name "*.yaml" | head -10

# Configura√ß√µes Flask
flask db current
flask db history
flask db show

# Depend√™ncias
pip freeze > requirements_dev.txt
python --version
psql --version

# Estrutura do banco local
psql $DATABASE_URL -c "\dt"
psql $DATABASE_URL -c "\d usuario"
psql $DATABASE_URL -c "\d servico"
```

#### **No Ambiente de Produ√ß√£o (via container):**
```bash
# Informa√ß√µes do container
docker ps
docker logs <container_name> --tail 100
docker exec <container_name> env | grep -E "(DATABASE|FLASK|PYTHON)"

# Estrutura do banco em produ√ß√£o
docker exec <container_name> psql $DATABASE_URL -c "\dt"
docker exec <container_name> psql $DATABASE_URL -c "\d usuario"
docker exec <container_name> psql $DATABASE_URL -c "\d servico"

# Arquivos no container
docker exec <container_name> ls -la /app/
docker exec <container_name> find /app -name "*.py" | head -10
```

## üìä COMPARA√á√ÉO NECESS√ÅRIA

### **Crie uma tabela comparativa:**

| Aspecto | Desenvolvimento | Produ√ß√£o | Diferen√ßa |
|---------|----------------|----------|-----------|
| Python Version | ? | ? | ? |
| PostgreSQL Version | ? | ? | ? |
| DATABASE_URL | ? | ? | ? |
| Flask Version | ? | ? | ? |
| SQLAlchemy Version | ? | ? | ? |
| Migra√ß√µes Aplicadas | ? | ? | ? |
| Estrutura Tabela Usuario | ? | ? | ? |
| Estrutura Tabela Servico | ? | ? | ? |
| Enum TipoUsuario | ? | ? | ? |
| Vari√°veis de Ambiente | ? | ? | ? |

## üéØ RESULTADO ESPERADO

Com todos esses documentos, poderei:

1. **Identificar Diferen√ßas Exatas** entre dev e prod
2. **Criar Script de Deploy Robusto** que funcione em ambos
3. **Corrigir Inconsist√™ncias** de configura√ß√£o
4. **Estabelecer Processo Confi√°vel** de deploy
5. **Prevenir Problemas Futuros** com checklist validado

## üìã PRIORIDADE DE ENTREGA

### **CR√çTICO (enviar primeiro):**
- Dockerfile atual
- Logs de erro completos
- Estrutura das tabelas em prod vs dev
- Vari√°veis de ambiente do EasyPanel

### **IMPORTANTE (enviar em seguida):**
- models.py completo
- migrations/ completa
- pyproject.toml
- Scripts de entrypoint

### **COMPLEMENTAR (enviar por √∫ltimo):**
- Logs hist√≥ricos
- Documenta√ß√£o
- Scripts auxiliares

---

**üö® IMPORTANTE**: Quanto mais documentos voc√™ fornecer, mais preciso ser√° o diagn√≥stico e mais robusta ser√° a solu√ß√£o final. N√£o hesite em incluir arquivos que pare√ßam irrelevantes - eles podem conter a chave para resolver o problema!
