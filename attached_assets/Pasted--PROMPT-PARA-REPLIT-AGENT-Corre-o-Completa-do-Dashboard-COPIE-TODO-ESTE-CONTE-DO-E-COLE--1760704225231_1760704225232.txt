# üéØ PROMPT PARA REPLIT AGENT - Corre√ß√£o Completa do Dashboard

**COPIE TODO ESTE CONTE√öDO E COLE NO REPLIT AGENT**

---

## üìã CONTEXTO

Baseado no **Relat√≥rio T√©cnico de Diagn√≥stico** gerado anteriormente, foram identificados 14 problemas no dashboard, todos com causa raiz mapeada.

**Problema Principal:**
- Dashboard usa per√≠odo **Outubro/2025** (sem dados)
- Dados reais est√£o em **Julho/2024**
- Bloco `except` reseta vari√°veis j√° calculadas corretamente

---

## üéØ OBJETIVO

Implementar **TODAS as 14 corre√ß√µes** identificadas no relat√≥rio, priorizadas em 3 fases.

---

## ‚úÖ FASE 1 - CR√çTICO (1 hora) - 4 Corre√ß√µes

### CORRE√á√ÉO 1: Per√≠odo de Data Padr√£o (MAIS CR√çTICA)

**Problema:** Dashboard usa m√™s atual (Out/2025) sem dados, deveria usar Jul/2024

**Arquivo:** `views.py`  
**Linhas:** 423-430

**ANTES (INCORRETO):**
```python
if data_inicio_param:
    data_inicio = datetime.strptime(data_inicio_param, '%Y-%m-%d').date()
else:
    hoje = date.today()
    data_inicio = date(hoje.year, hoje.month, 1)  # ‚ùå M√™s atual (Out/2025)
    
if data_fim_param:
    data_fim = datetime.strptime(data_fim_param, '%Y-%m-%d').date()
else:
    data_fim = date.today()  # ‚ùå Hoje (Out/2025)
```

**DEPOIS (CORRETO):**
```python
if data_inicio_param:
    data_inicio = datetime.strptime(data_inicio_param, '%Y-%m-%d').date()
else:
    # ‚úÖ Buscar dinamicamente o per√≠odo com mais dados
    # Op√ß√£o 1: Usar per√≠odo fixo com dados conhecidos
    data_inicio = date(2024, 7, 1)  # Julho/2024 (onde est√£o os dados)
    
    # Op√ß√£o 2 (RECOMENDADA): Buscar dinamicamente
    # ultimo_registro = RegistroPonto.query.filter(
    #     RegistroPonto.funcionario.has(admin_id=admin_id)
    # ).order_by(RegistroPonto.data.desc()).first()
    # if ultimo_registro:
    #     data_inicio = date(ultimo_registro.data.year, ultimo_registro.data.month, 1)
    # else:
    #     data_inicio = date(2024, 7, 1)  # Fallback
    
if data_fim_param:
    data_fim = datetime.strptime(data_fim_param, '%Y-%m-%d').date()
else:
    # ‚úÖ Final do m√™s com dados
    data_fim = date(2024, 7, 31)
    
    # Op√ß√£o 2 (RECOMENDADA): Buscar dinamicamente
    # if ultimo_registro:
    #     import calendar
    #     ultimo_dia = calendar.monthrange(data_inicio.year, data_inicio.month)[1]
    #     data_fim = date(data_inicio.year, data_inicio.month, ultimo_dia)
    # else:
    #     data_fim = date(2024, 7, 31)  # Fallback
```

**Impacto:** Resolve 6 KPIs (Custos, M√£o de Obra, Alimenta√ß√£o, Transporte, Outros, Faltas)

---

### CORRE√á√ÉO 2: Adicionar Fallback de Custos

**Problema:** Quando n√£o h√° registros de ponto, custo fica R$ 0.00 (deveria estimar pelo sal√°rio)

**Arquivo:** `views.py`  
**Localiza√ß√£o:** Ap√≥s linha 796 (dentro do loop de funcion√°rios)

**ADICIONAR:**
```python
        # Ap√≥s o bloco que calcula custos com registros de ponto (linha ~796)
        
        # ‚úÖ FALLBACK: Se n√£o h√° registros, estimar custo baseado no sal√°rio
        if len(registros) == 0 and func.salario:
            import calendar
            
            # Calcular dias √∫teis do per√≠odo
            mes = data_inicio.month
            ano = data_inicio.year
            dias_uteis = sum(
                1 for dia in range(1, calendar.monthrange(ano, mes)[1] + 1) 
                if date(ano, mes, dia).weekday() < 5
            )
            
            # Estimar horas baseado na jornada
            horas_por_dia = (func.jornada_semanal / 5) if func.jornada_semanal else 8
            horas_estimadas = dias_uteis * horas_por_dia
            
            # Calcular valor/hora correto
            from utils import calcular_valor_hora_periodo
            valor_hora = calcular_valor_hora_periodo(func, data_inicio, data_fim)
            
            # Adicionar aos totais
            total_custo_real += func.salario  # Custo = sal√°rio mensal
            total_horas_real += horas_estimadas
            
            print(f"  ‚ö†Ô∏è  FALLBACK: {func.nome} - Sem registros, estimado R$ {func.salario:.2f}")
```

**Impacto:** Garante que custos sejam calculados mesmo sem registros de ponto

---

### CORRE√á√ÉO 3: N√£o Resetar Vari√°veis no Except

**Problema:** Bloco `except` reseta TODAS as vari√°veis para 0, perdendo valores j√° calculados

**Arquivo:** `views.py`  
**Linhas:** 639-646

**ANTES (INCORRETO):**
```python
except Exception as e:
    print(f"ERRO NO DASHBOARD: {str(e)}")
    import traceback
    traceback.print_exc()
    
    # ‚ùå RESETA TUDO PARA 0!
    total_funcionarios = 0
    total_obras = 0
    total_veiculos = 5
    funcionarios_recentes = []
    obras_ativas = []
```

**DEPOIS (CORRETO):**
```python
except Exception as e:
    print(f"ERRO NO DASHBOARD: {str(e)}")
    import traceback
    traceback.print_exc()
    
    # ‚úÖ S√≥ inicializar se vari√°vel n√£o existir
    if 'total_funcionarios' not in locals():
        total_funcionarios = 0
    if 'total_obras' not in locals():
        total_obras = 0
    if 'total_veiculos' not in locals():
        total_veiculos = 0
    if 'funcionarios_recentes' not in locals():
        funcionarios_recentes = []
    if 'obras_ativas' not in locals():
        obras_ativas = []
```

**Impacto:** Resolve 5 KPIs (Funcion√°rios Ativos, Obras Ativas, Funcion√°rios Recentes, Obras Ativas lista)

---

### CORRE√á√ÉO 4: Mover C√°lculo de Ve√≠culos

**Problema:** Ve√≠culos calculados tarde demais (linha 914), ap√≥s custos que podem falhar

**Arquivo:** `views.py`  
**A√ß√£o:** MOVER de linha 914 para ap√≥s linha 505

**REMOVER das linhas 914-918:**
```python
# ‚ùå REMOVER DAQUI
try:
    from models import Veiculo
    total_veiculos = Veiculo.query.filter_by(admin_id=admin_id).count()
except Exception as e:
    total_veiculos = 5  # Fallback
```

**ADICIONAR ap√≥s linha 505 (junto com funcion√°rios e obras):**
```python
# Ap√≥s linha 505 (ap√≥s calcular total_obras)

# ‚úÖ Calcular ve√≠culos ANTES dos custos
try:
    from models import Veiculo
    total_veiculos = Veiculo.query.filter_by(
        admin_id=admin_id, 
        ativo=True  # ‚úÖ Adicionar filtro de ativo
    ).count()
    print(f"DEBUG VE√çCULOS: {total_veiculos} ativos para admin_id={admin_id}")
except Exception as e:
    print(f"Erro ao contar ve√≠culos: {e}")
    total_veiculos = 0
```

**Impacto:** Resolve 1 KPI (Ve√≠culos)

---

## ‚úÖ FASE 2 - ALTO (45 minutos) - 3 Corre√ß√µes

### CORRE√á√ÉO 5: Funcion√°rios por Departamento

**Problema:** Gr√°fico n√£o aparece - template pode estar usando vari√°vel incorreta

**Arquivo:** `views.py`  
**Linhas:** 1058-1060

**Verificar se ambas as vari√°veis est√£o sendo passadas:**
```python
# Linha ~1058 - render_template
return render_template(
    'dashboard.html',
    # ... outras vari√°veis ...
    funcionarios_por_departamento=funcionarios_por_departamento,  # dict
    funcionarios_dept=funcionarios_dept,  # list ‚úÖ Template deve usar esta
    # ... outras vari√°veis ...
)
```

**Se `funcionarios_dept` n√£o existir, criar:**
```python
# Antes do render_template (linha ~1028)

# ‚úÖ Converter dict para lista (formato esperado pelo template)
if isinstance(funcionarios_por_departamento, dict):
    funcionarios_dept = [
        {'nome': dept, 'total': count} 
        for dept, count in funcionarios_por_departamento.items()
    ]
else:
    funcionarios_dept = []

print(f"DEBUG FINAL - Funcion√°rios por dept (lista): {funcionarios_dept}")
```

**Impacto:** Resolve 1 KPI (Funcion√°rios por Departamento)

---

### CORRE√á√ÉO 6: Filtro de Per√≠odo em Propostas

**Problema:** Taxa de convers√£o e valor m√©dio calculados SEM filtro de per√≠odo

**Arquivo:** `views.py`  
**Linhas:** 512-573

**ANTES (INCORRETO):**
```python
# Linha ~514
propostas_aprovadas = Proposta.query.filter_by(
    admin_id=admin_id, 
    status='aprovada'
).count()  # ‚ùå Sem filtro de per√≠odo

propostas_enviadas = Proposta.query.filter_by(
    admin_id=admin_id, 
    status='enviada'
).count()  # ‚ùå Sem filtro de per√≠odo
```

**DEPOIS (CORRETO):**
```python
# ‚úÖ Adicionar filtro de per√≠odo
from models import PropostaComercial as Proposta

propostas_aprovadas = Proposta.query.filter(
    Proposta.admin_id == admin_id,
    Proposta.status == 'aprovada',
    Proposta.data_proposta >= data_inicio,  # ‚úÖ Filtro de per√≠odo
    Proposta.data_proposta <= data_fim
).count()

propostas_enviadas = Proposta.query.filter(
    Proposta.admin_id == admin_id,
    Proposta.status == 'enviada',
    Proposta.data_proposta >= data_inicio,  # ‚úÖ Filtro de per√≠odo
    Proposta.data_proposta <= data_fim
).count()
```

**Impacto:** Resolve 1 KPI (Taxa de Convers√£o)

---

### CORRE√á√ÉO 7: Valor M√©dio de Propostas

**Problema:** Propostas sem `valor_total` preenchido resultam em m√©dia R$ 0.00

**Arquivo:** `views.py`  
**Linhas:** 536-541

**ANTES (INCORRETO):**
```python
valor_medio_result = db.session.query(sql_func.avg(Proposta.valor_total)).filter_by(
    admin_id=admin_id, 
    status='aprovada'
).scalar()  # ‚ùå Inclui propostas com valor NULL ou 0
valor_medio = float(valor_medio_result or 0)
```

**DEPOIS (CORRETO):**
```python
# ‚úÖ Filtrar apenas propostas com valor v√°lido
valor_medio_result = db.session.query(sql_func.avg(Proposta.valor_total)).filter(
    Proposta.admin_id == admin_id,
    Proposta.status == 'aprovada',
    Proposta.valor_total.isnot(None),  # ‚úÖ Ignorar NULL
    Proposta.valor_total > 0,  # ‚úÖ Ignorar zero
    Proposta.data_proposta >= data_inicio,  # ‚úÖ Filtro de per√≠odo
    Proposta.data_proposta <= data_fim
).scalar()
valor_medio = float(valor_medio_result or 0)
```

**Impacto:** Resolve 1 KPI (Valor M√©dio de Propostas)

---

## ‚úÖ FASE 3 - M√âDIO (30 minutos) - 2 Corre√ß√µes

### CORRE√á√ÉO 8: Funcion√°rios Recentes e Obras Ativas (lista)

**Problema:** Mesma causa do KPI 1.1 - resetados no except

**J√° resolvido pela CORRE√á√ÉO 3** (n√£o resetar vari√°veis no except)

**Validar que as vari√°veis est√£o sendo calculadas:**
```python
# Linha ~595
funcionarios_recentes = Funcionario.query.filter_by(
    admin_id=admin_id, ativo=True
).order_by(Funcionario.created_at.desc()).limit(5).all()

# Linha ~602
obras_ativas = Obra.query.filter_by(
    admin_id=admin_id
).filter(
    Obra.status.in_(['ATIVO', 'andamento', 'Em andamento', 'ativa', 'planejamento'])
).order_by(Obra.created_at.desc()).limit(5).all()
```

**Impacto:** Resolve 2 KPIs (Funcion√°rios Recentes, Progresso de Obras)

---

## üìã CHECKLIST DE VALIDA√á√ÉO

Ap√≥s implementar TODAS as corre√ß√µes, validar:

### ‚úÖ Vis√£o Geral
- [ ] Funcion√°rios Ativos mostra **47** (n√£o 0)
- [ ] Obras Ativas mostra **39** (n√£o 0)
- [ ] Ve√≠culos mostra **1+** (n√£o 0)
- [ ] Custos do Per√≠odo mostra **R$ 60.925,64** (n√£o R$ 0.00)

### ‚úÖ Financeiro e Custos
- [ ] M√£o de Obra mostra **R$ 60.925,64** (n√£o R$ 0.00)
- [ ] Alimenta√ß√£o mostra valor correto (n√£o R$ 0.00)
- [ ] Transporte mostra valor correto (n√£o R$ 0.00)
- [ ] Outros mostra valor correto (n√£o R$ 0.00)
- [ ] Total est√° correto

### ‚úÖ Recursos Humanos
- [ ] Gr√°fico de Funcion√°rios por Departamento **aparece**
- [ ] Lista de Funcion√°rios Recentes **aparece** (5 itens)

### ‚úÖ Obras e RDO
- [ ] Progresso de Obras **aparece** (5 itens)

### ‚úÖ Propostas Comerciais
- [ ] Taxa de Convers√£o est√° correta
- [ ] Valor M√©dio est√° correto (n√£o R$ 0.00)

### ‚úÖ Funcionalidades Gerais
- [ ] Filtros de data funcionam corretamente
- [ ] Mudar per√≠odo atualiza todos os KPIs
- [ ] N√£o h√° erros no console do navegador
- [ ] Logs n√£o mostram `AttributeError` ou outros erros

---

## üß™ TESTES RECOMENDADOS

### Teste 1: Per√≠odo com Dados (Julho/2024)
```
Data In√≠cio: 01/07/2024
Data Fim: 31/07/2024

Resultado Esperado:
‚úÖ Todos os KPIs mostram valores reais
‚úÖ Custos: R$ 60.925,64
‚úÖ Funcion√°rios: 47
‚úÖ Obras: 39
```

### Teste 2: Per√≠odo sem Dados (Outubro/2025)
```
Data In√≠cio: 01/10/2025
Data Fim: 31/10/2025

Resultado Esperado:
‚úÖ Custos estimados via fallback (sal√°rios)
‚úÖ Funcion√°rios: 47 (independente de per√≠odo)
‚úÖ Obras: 39 (independente de per√≠odo)
‚ö†Ô∏è  Indicador visual de "dados estimados"
```

### Teste 3: Sem Filtro (padr√£o)
```
Sem selecionar per√≠odo

Resultado Esperado:
‚úÖ Usa Julho/2024 automaticamente
‚úÖ Todos os KPIs funcionam
```

---

## üìä RESUMO DAS CORRE√á√ïES

| # | Corre√ß√£o | Arquivo | Linhas | Esfor√ßo | Fase |
|---|----------|---------|--------|---------|------|
| 1 | Per√≠odo padr√£o Julho/2024 | views.py | 423-430 | 30min | 1 |
| 2 | Fallback de custos | views.py | ~796 | 15min | 1 |
| 3 | N√£o resetar no except | views.py | 639-646 | 15min | 1 |
| 4 | Mover c√°lculo ve√≠culos | views.py | 505, 914 | 10min | 1 |
| 5 | Funcion√°rios por dept | views.py | 1028, 1058 | 20min | 2 |
| 6 | Filtro per√≠odo propostas | views.py | 512-573 | 15min | 2 |
| 7 | Valor m√©dio propostas | views.py | 536-541 | 10min | 2 |
| 8 | Validar recentes/obras | views.py | 595, 602 | 0min | 3 |

**Total:** 8 corre√ß√µes, 2h 15min estimado

---

## üéØ PRIORIDADE DE IMPLEMENTA√á√ÉO

### IMEDIATO (HOJE):
1. ‚úÖ CORRE√á√ÉO 1 (Per√≠odo)
2. ‚úÖ CORRE√á√ÉO 2 (Fallback)
3. ‚úÖ CORRE√á√ÉO 3 (Except)
4. ‚úÖ CORRE√á√ÉO 4 (Ve√≠culos)

### CURTO PRAZO (ESTA SEMANA):
5. ‚úÖ CORRE√á√ÉO 5 (Departamentos)
6. ‚úÖ CORRE√á√ÉO 6 (Propostas per√≠odo)
7. ‚úÖ CORRE√á√ÉO 7 (Valor m√©dio)

### VALIDA√á√ÉO:
8. ‚úÖ CORRE√á√ÉO 8 (j√° resolvida pela 3)
9. ‚úÖ Testes completos

---

## ‚ö†Ô∏è OBSERVA√á√ïES IMPORTANTES

1. **Per√≠odo Din√¢mico (Recomendado):** Implementar busca autom√°tica do per√≠odo com mais dados ao inv√©s de hardcoded Julho/2024

2. **Indicador Visual:** Adicionar badge "Dados Estimados" quando usar fallback

3. **Logging:** Manter os prints de debug para facilitar troubleshooting

4. **Multi-Tenancy:** Todas as queries j√° est√£o corretas com `admin_id`, n√£o mexer

5. **Compatibilidade:** Testar em DEV antes de fazer deploy em produ√ß√£o

---

**FIM DO PROMPT - COPIE TUDO E COLE NO REPLIT AGENT**

