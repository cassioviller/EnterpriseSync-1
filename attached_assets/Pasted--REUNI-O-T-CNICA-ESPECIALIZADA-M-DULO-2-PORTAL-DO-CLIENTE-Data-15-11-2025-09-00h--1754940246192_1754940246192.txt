# üéØ REUNI√ÉO T√âCNICA ESPECIALIZADA - M√ìDULO 2: PORTAL DO CLIENTE

**Data:** 15/11/2025 - 09:00h  
**Dura√ß√£o:** 2,5 horas  
**Contexto:** Implementa√ß√£o do segundo m√≥dulo - M√≥dulo 1 (Propostas) j√° implementado  
**Status:** Continuidade da evolu√ß√£o SIGE v8.0

---

## üë• PARTICIPANTES DA REUNI√ÉO

**Marina Santos** - Product Manager (Moderadora)  
**Carlos Rodriguez** - Tech Lead  
**Ana Silva** - Backend Developer  
**Lucia Ferreira** - Frontend/UX  
**Rafael Costa** - AI/ML Engineer (novo participante)  
**Jo√£o Mendes** - DevOps Engineer  

---

## üìã AGENDA DA REUNI√ÉO

### **09:00 - Abertura e Status do M√≥dulo 1**

**Marina:** Bom dia, pessoal! Excelente trabalho no M√≥dulo 1. O sistema de propostas est√° funcionando perfeitamente. Agora vamos focar no M√≥dulo 2 - Portal do Cliente para acompanhamento de obras. Carlos, pode nos atualizar sobre a integra√ß√£o?

**Carlos:** Claro, Marina. O M√≥dulo 1 criou uma base s√≥lida. Agora temos:
- Propostas aprovadas convertendo automaticamente em `Obra`
- Sistema de tokens funcionando perfeitamente
- Cliente j√° tem acesso via token

O M√≥dulo 2 vai **REUTILIZAR** essa infraestrutura e **INTEGRAR** com o sistema RDO existente. O ponto crucial √© que j√° temos todas as classes necess√°rias: `RDO`, `RDOAtividade`, `RDOFoto`, `RDOMaoObra`.

### **09:10 - An√°lise Profunda do Sistema RDO Existente**

**Ana:** Analisei profundamente o sistema RDO atual. √â muito robusto:

```python
class RDO(db.Model):
    numero_rdo = db.Column(db.String(20))
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    data_relatorio = db.Column(db.Date)
    status = db.Column(db.String(20))  # Rascunho, Finalizado
    
class RDOAtividade(db.Model):
    rdo_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    descricao_atividade = db.Column(db.String(200))
    percentual_conclusao = db.Column(db.Float)  # 0-100
    
class RDOFoto(db.Model):
    rdo_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    caminho_foto = db.Column(db.String(255))
    descricao = db.Column(db.String(200))
```

**Carlos:** Perfeito! Isso significa que N√ÉO precisamos criar novas tabelas. Vamos apenas **ESTENDER** a classe `Obra` e criar **FUN√á√ïES** para calcular progresso baseado nos RDOs existentes.

### **09:20 - Especifica√ß√£o do Portal do Cliente**

**Marina:** Lucia, como voc√™ v√™ a experi√™ncia do cliente?

**Lucia:** Baseado no sucesso do portal de propostas, vou manter o mesmo padr√£o visual, mas com funcionalidades espec√≠ficas para acompanhamento:

**Dashboard Principal:**
- **Progresso geral** da obra (barra de progresso)
- **√öltimas fotos** (galeria com 6 fotos mais recentes)
- **Atividades recentes** (timeline das √∫ltimas atividades)
- **Informa√ß√µes da obra** (dados b√°sicos)

**P√°ginas Espec√≠ficas:**
- `/cliente/obra/<token>/progresso` - Progresso detalhado por atividade
- `/cliente/obra/<token>/fotos` - Galeria completa de fotos
- `/cliente/obra/<token>/timeline` - Timeline completa da obra

**Rafael:** Do ponto de vista de dados, posso implementar algoritmos para:
- Calcular progresso ponderado baseado nas atividades
- Detectar tend√™ncias de progresso
- Prever data de conclus√£o baseado no ritmo atual

### **09:35 - Integra√ß√£o com Sistema Existente**

**Ana:** A integra√ß√£o ser√° perfeita. Vou **ESTENDER** a classe `Obra` existente:

```python
# ADICIONAR estes campos na classe Obra existente
class Obra(db.Model):
    # ... campos existentes ...
    
    # NOVOS CAMPOS para portal do cliente
    token_cliente = db.Column(db.String(255), unique=True)
    cliente_nome = db.Column(db.String(100))
    cliente_email = db.Column(db.String(120))
    proposta_origem_id = db.Column(db.Integer, db.ForeignKey('proposta.id'))
    
    # Relacionamento com proposta
    proposta_origem = db.relationship('Proposta', backref='obra_gerada')
```

**Carlos:** Excelente! E quando a proposta for aprovada no M√≥dulo 1, vamos automaticamente gerar o token do cliente para a obra:

```python
# No M√≥dulo 1, quando aprovar proposta:
obra.token_cliente = secrets.token_urlsafe(32)
obra.cliente_nome = proposta.cliente_nome
obra.cliente_email = proposta.cliente_email
obra.proposta_origem_id = proposta.id
```

### **09:45 - C√°lculo de Progresso Inteligente**

**Rafael:** Vou criar um algoritmo sofisticado para calcular o progresso:

**M√©todo 1 - Progresso por Atividades:**
```python
def calcular_progresso_obra_cliente(obra_id):
    # Obter todas as atividades dos RDOs
    atividades = db.session.query(RDOAtividade, RDO).join(RDO).filter(
        RDO.obra_id == obra_id,
        RDO.status == 'Finalizado'  # S√≥ RDOs finalizados
    ).all()
    
    if not atividades:
        return {'percentual_geral': 0, 'atividades_concluidas': 0}
    
    # Calcular m√©dia ponderada
    total_percentual = sum(atividade.percentual_conclusao for atividade, rdo in atividades)
    percentual_geral = total_percentual / len(atividades)
    
    return {
        'percentual_geral': round(percentual_geral, 1),
        'atividades_concluidas': len([a for a, r in atividades if a.percentual_conclusao >= 100]),
        'atividades_total': len(atividades),
        'ultima_atualizacao': max(rdo.data_relatorio for atividade, rdo in atividades)
    }
```

**Ana:** Perfeito! E vou criar fun√ß√µes auxiliares para fotos e timeline:

```python
def obter_fotos_obra_recentes(obra_id, limite=6):
    fotos = db.session.query(RDOFoto, RDO).join(RDO).filter(
        RDO.obra_id == obra_id
    ).order_by(RDO.data_relatorio.desc()).limit(limite).all()
    
    return [{'foto': foto, 'rdo': rdo, 'data': rdo.data_relatorio} for foto, rdo in fotos]

def obter_timeline_obra(obra_id, limite=20):
    timeline = []
    
    # RDOs como marcos
    rdos = RDO.query.filter_by(obra_id=obra_id, status='Finalizado').order_by(RDO.data_relatorio.desc()).limit(limite).all()
    
    for rdo in rdos:
        timeline.append({
            'tipo': 'rdo',
            'data': rdo.data_relatorio,
            'titulo': f'Relat√≥rio {rdo.numero_rdo}',
            'descricao': f'{len(rdo.atividades)} atividades registradas',
            'icone': 'fas fa-clipboard-list'
        })
    
    return sorted(timeline, key=lambda x: x['data'], reverse=True)
```

### **10:00 - Interface e Experi√™ncia do Usu√°rio**

**Lucia:** Vou criar uma interface moderna e intuitiva:

**Dashboard Principal:**
- **Header com progresso** - Barra de progresso grande e vis√≠vel
- **Cards informativos** - Dados da obra organizados
- **Galeria de fotos** - Grid responsivo com lightbox
- **Timeline** - Lista cronol√≥gica das atividades

**Recursos Visuais:**
- **Gr√°fico de progresso** - Chart.js para visualiza√ß√£o
- **Mapa de calor** - Atividades por per√≠odo
- **Comparativo** - Progresso planejado vs real

**Jo√£o:** Para performance, vou implementar:
- **Cache Redis** para dados de progresso
- **CDN** para fotos dos RDOs
- **Lazy loading** para galeria de fotos
- **API endpoints** para atualiza√ß√µes em tempo real

### **10:15 - Seguran√ßa e Privacidade**

**Carlos:** Seguran√ßa √© cr√≠tica. Cada cliente s√≥ pode ver SUA obra:

```python
@main_bp.route('/cliente/obra/<token>')
def cliente_obra_dashboard(token):
    obra = Obra.query.filter_by(token_cliente=token).first_or_404()
    
    # Log de acesso
    log_acesso_cliente(obra.id, request.remote_addr)
    
    # Verificar se obra est√° ativa
    if obra.status == 'Cancelada':
        return render_template('cliente/obra_cancelada.html')
```

**Ana:** E vou implementar rate limiting espec√≠fico para o portal do cliente:

```python
from flask_limiter import Limiter

# 100 requests por hora por IP para portal do cliente
@limiter.limit("100 per hour")
@main_bp.route('/cliente/obra/<token>')
def cliente_obra_dashboard(token):
    # ...
```

### **10:30 - API em Tempo Real**

**Rafael:** Vou criar APIs para atualiza√ß√µes din√¢micas:

```python
@main_bp.route('/api/cliente/obra/<token>/progresso')
def api_cliente_progresso(token):
    obra = Obra.query.filter_by(token_cliente=token).first_or_404()
    progresso = calcular_progresso_obra_cliente(obra.id)
    
    return jsonify({
        'progresso_geral': progresso['percentual_geral'],
        'atividades_concluidas': progresso['atividades_concluidas'],
        'atividades_total': progresso['atividades_total'],
        'ultima_atualizacao': progresso['ultima_atualizacao'].isoformat()
    })

@main_bp.route('/api/cliente/obra/<token>/fotos-recentes')
def api_cliente_fotos_recentes(token):
    obra = Obra.query.filter_by(token_cliente=token).first_or_404()
    fotos = obter_fotos_obra_recentes(obra.id, 3)
    
    return jsonify([{
        'url': foto['foto'].caminho_foto,
        'descricao': foto['foto'].descricao,
        'data': foto['data'].isoformat()
    } for foto in fotos])
```

### **10:45 - Notifica√ß√µes e Comunica√ß√£o**

**Marina:** Como vamos notificar o cliente sobre atualiza√ß√µes?

**Jo√£o:** Vou implementar um sistema de notifica√ß√µes:

**Email Autom√°tico:**
- Novo RDO finalizado ‚Üí Email com resumo
- Marco importante atingido ‚Üí Email de celebra√ß√£o
- Atraso detectado ‚Üí Email explicativo

**Notifica√ß√µes no Portal:**
- Badge com n√∫mero de atualiza√ß√µes n√£o vistas
- Timeline destacando novidades
- Pop-up discreto para atualiza√ß√µes importantes

**Ana:** E vou criar uma tabela de notifica√ß√µes:

```python
class NotificacaoCliente(db.Model):
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    tipo = db.Column(db.String(30))  # 'novo_rdo', 'marco_atingido', 'atraso'
    titulo = db.Column(db.String(100))
    mensagem = db.Column(db.Text)
    visualizada = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
```

### **11:00 - An√°lise de Dados e Insights**

**Rafael:** Vou implementar analytics avan√ßados:

**M√©tricas de Progresso:**
- Velocidade m√©dia de conclus√£o
- Previs√£o de data de entrega
- Compara√ß√£o com obras similares
- Identifica√ß√£o de gargalos

**Visualiza√ß√µes:**
- Gr√°fico de Gantt simplificado
- Heatmap de atividades por semana
- Comparativo planejado vs executado

```python
def calcular_previsao_conclusao(obra_id):
    # An√°lise de tend√™ncia baseada nos √∫ltimos 30 dias
    progresso_historico = obter_progresso_historico(obra_id, 30)
    
    if len(progresso_historico) < 7:  # M√≠nimo 7 dias de dados
        return None
    
    # Regress√£o linear simples
    velocidade_media = calcular_velocidade_media(progresso_historico)
    progresso_atual = calcular_progresso_obra_cliente(obra_id)['percentual_geral']
    
    dias_restantes = (100 - progresso_atual) / velocidade_media
    data_previsao = date.today() + timedelta(days=dias_restantes)
    
    return {
        'data_previsao': data_previsao,
        'confianca': calcular_confianca_previsao(progresso_historico),
        'velocidade_media': velocidade_media
    }
```

### **11:15 - Integra√ß√£o com M√≥dulos Futuros**

**Carlos:** Como este m√≥dulo vai se integrar com os pr√≥ximos?

**Ana:** Excelente pergunta! O M√≥dulo 2 ser√° a **BASE** para os pr√≥ximos:

**M√≥dulo 3 (Gest√£o de Equipes):**
- Quando funcion√°rio for alocado ‚Üí Cliente v√™ equipe trabalhando
- RDO criado ‚Üí Progresso atualizado automaticamente

**M√≥dulo 4 (Almoxarifado):**
- Material usado ‚Üí Cliente v√™ consumo de materiais
- Integra√ß√£o com custos da obra

**M√≥dulo 5 (Biometria):**
- Ponto registrado ‚Üí Cliente v√™ funcion√°rios presentes
- Timeline com hor√°rios de trabalho

**Marina:** Perfeito! Isso garante que o cliente tenha visibilidade total da obra.

### **11:30 - Responsividade e Mobile**

**Lucia:** O portal ser√° **MOBILE FIRST**:

**Design Responsivo:**
- Cards empilh√°veis em mobile
- Galeria de fotos otimizada para touch
- Timeline vertical em mobile
- Gr√°ficos adapt√°veis

**Performance Mobile:**
- Imagens otimizadas (WebP)
- Lazy loading agressivo
- Cache local (localStorage)
- Offline b√°sico para dados j√° carregados

**PWA Features:**
- Instal√°vel como app
- Notifica√ß√µes push (futuro)
- √çcone na home screen

### **11:45 - Testes e Valida√ß√£o**

**Jo√£o:** Estrat√©gia de testes:

**Testes Automatizados:**
- C√°lculo de progresso com diferentes cen√°rios
- APIs de dados em tempo real
- Seguran√ßa de acesso por token

**Testes de Usu√°rio:**
- Cliente real testando o portal
- Feedback sobre usabilidade
- Teste em diferentes dispositivos

**Testes de Performance:**
- Load testing nas APIs
- Otimiza√ß√£o de queries
- Cache effectiveness

### **12:00 - Cronograma de Implementa√ß√£o**

**Marina:** Qual o cronograma para este m√≥dulo?

**Carlos:** Baseado na complexidade e reutiliza√ß√£o do sistema existente:

**Semana 1:**
- Estender classe `Obra` com novos campos
- Implementar fun√ß√µes de c√°lculo de progresso
- Criar rotas b√°sicas do portal

**Semana 2:**
- Desenvolver templates responsivos
- Implementar APIs em tempo real
- Sistema de notifica√ß√µes

**Semana 3:**
- Analytics e previs√µes
- Otimiza√ß√µes de performance
- Testes completos

**Ana:** Posso come√ßar hoje mesmo com a extens√£o da classe `Obra`!

### **12:10 - Considera√ß√µes T√©cnicas Finais**

**Rafael:** Algumas considera√ß√µes importantes:

**Cache Strategy:**
- Progresso da obra: Cache de 15 minutos
- Fotos recentes: Cache de 1 hora
- Timeline: Cache de 30 minutos

**Otimiza√ß√µes:**
- Queries otimizadas com JOINs eficientes
- √çndices espec√≠ficos para performance
- Pagina√ß√£o para listas grandes

**Monitoramento:**
- Logs de acesso do cliente
- M√©tricas de engagement
- Performance das APIs

**Jo√£o:** E vou configurar:
- CDN para assets est√°ticos
- Compress√£o gzip
- HTTP/2 para m√∫ltiplas requisi√ß√µes

### **12:15 - Pr√≥ximos Passos**

**Marina:** Resumindo as responsabilidades:

1. **Ana** - Extens√£o da classe `Obra` e fun√ß√µes de c√°lculo
2. **Lucia** - Templates responsivos e UX
3. **Rafael** - Analytics e APIs em tempo real
4. **Jo√£o** - Performance e infraestrutura
5. **Carlos** - Integra√ß√£o e revis√£o t√©cnica

**Pr√≥xima reuni√£o:** Sexta-feira para review do M√≥dulo 2 completo.

---

## üìù DECIS√ïES T√âCNICAS FINAIS

### **Arquitetura:**
- **Extens√£o** da classe `Obra` existente (n√£o criar nova tabela)
- **Reutiliza√ß√£o total** do sistema RDO atual
- **APIs RESTful** para dados em tempo real
- **Cache inteligente** para performance

### **Funcionalidades:**
- **Dashboard** com progresso visual
- **Galeria de fotos** dos RDOs
- **Timeline** de atividades
- **Previs√£o** de conclus√£o com IA
- **Notifica√ß√µes** autom√°ticas

### **Seguran√ßa:**
- **Token √∫nico** por obra
- **Rate limiting** espec√≠fico
- **Logs de acesso** completos
- **Valida√ß√£o** de permiss√µes

### **Performance:**
- **Cache Redis** para dados frequentes
- **CDN** para imagens
- **Lazy loading** para galeria
- **Queries otimizadas**

**Status:** M√≥dulo 2 especificado e pronto para implementa√ß√£o! üöÄ

