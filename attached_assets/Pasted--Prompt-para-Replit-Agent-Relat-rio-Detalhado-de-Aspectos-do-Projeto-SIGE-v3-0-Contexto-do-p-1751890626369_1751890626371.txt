## Prompt para Replit Agent: Relatório Detalhado de Aspectos do Projeto SIGE v3.0

**Contexto do projeto:**
O projeto SIGE v3.0 (Sistema Integrado de Gestão Empresarial) é uma aplicação web robusta desenvolvida com Flask (backend), SQLAlchemy (ORM), PostgreSQL (banco de dados), Bootstrap 5 (frontend), e utiliza Docker/EasyPanel para deploy. Abrange funcionalidades de gestão de ponto, obras, funcionários, veículos, horários, serviços, departamentos, alimentação, e oferece relatórios e dashboards analíticos. A estrutura inclui arquivos Python para lógica de backend (`app.py`, `auth.py`), templates HTML (`templates/`), e arquivos estáticos (`static/css`, `static/js`, `static/images`).

**Papel do Replit Agent:**
Como um engenheiro de software com foco em documentação e análise de sistemas, seu papel é compilar um relatório detalhado sobre aspectos específicos do projeto SIGE v3.0 para auxiliar futuros desenvolvimentos e manutenções.

**Tarefa específica:**
Crie um relatório detalhado que apresente as seguintes informações sobre o projeto SIGE v3.0. O objetivo é consolidar o conhecimento sobre esses pontos para uma compreensão aprofundada do sistema.

**Informações a serem detalhadas no relatório:**

1.  **Estrutura Completa do Banco de Dados:**
    *   Listagem de todas as tabelas existentes no banco de dados PostgreSQL.
    *   Para cada tabela, detalhe suas colunas, tipos de dados, chaves primárias e estrangeiras.
    *   Descreva os relacionamentos entre as tabelas (um-para-um, um-para-muitos, muitos-para-muitos).
    *   Inclua diagramas ER (Entidade-Relacionamento) se possível, ou uma representação textual clara dos relacionamentos.

2.  **Lógica de Negócio Central e Regras Específicas:**
    *   Descreva as regras de negócio mais importantes e complexas da aplicação (ex: como são calculadas as horas extras, regras para aprovação de ocorrências, lógica de status de obras).
    *   Identifique os módulos ou funções Python onde essas regras estão implementadas.

3.  **Endpoints da API (Internos e Externos):**
    *   Liste todos os endpoints da API Flask (rotas definidas em `app.py` e outros módulos de backend).
    *   Para cada endpoint, especifique o método HTTP (GET, POST, PUT, DELETE), os parâmetros de entrada esperados e o formato da resposta (JSON, HTML).
    *   Detalhe como a autenticação e autorização são tratadas para cada endpoint.
    *   Se houver integrações com APIs externas, descreva quais são, seus propósitos e como a comunicação é realizada.

4.  **Configurações de Ambiente e Deploy:**
    *   Liste todas as variáveis de ambiente essenciais para o funcionamento da aplicação (ex: `DATABASE_URL`, `SECRET_KEY`).
    *   Descreva o processo de deploy utilizando Docker e EasyPanel, incluindo comandos ou configurações relevantes (ex: `Dockerfile`, `docker-compose.yml` se existirem).
    *   Mencione quaisquer segredos ou configurações sensíveis e como são gerenciados.

5.  **Fluxos de Usuário Críticos (Passo a Passo):**
    *   Descreva detalhadamente, passo a passo, pelo menos dois fluxos de usuário complexos (ex: "Registro completo de uma nova obra desde o cadastro até a finalização", "Processo de registro e aprovação de ponto para um funcionário").
    *   Inclua as interações do usuário com a interface e as ações correspondentes no backend.

6.  **Gerenciamento de Dependências e Versões:**
    *   Liste todas as dependências Python (do `requirements.txt` ou equivalente) com suas versões.
    *   Liste as principais bibliotecas JavaScript (do `package.json` ou equivalente, ou diretamente incluídas no HTML) com suas versões.
    *   Descreva como essas dependências são instaladas e gerenciadas no ambiente de desenvolvimento e produção.

7.  **Estratégias de Teste (se existirem):**
    *   Descreva se o projeto possui testes automatizados (unitários, integração, end-to-end).
    *   Se sim, explique como os testes são executados e qual a cobertura de código.
    *   Mencione as ferramentas de teste utilizadas (ex: `pytest`, `unittest`).

**Critérios de aceitação:**
- O relatório deve ser um arquivo Markdown (`project_details_report.md`).
- O relatório deve ser claro, conciso e organizado por seções, conforme as "Informações a serem detalhadas no relatório" acima.
- Cada seção deve conter informações relevantes e detalhadas, sem repetições desnecessárias.
- O relatório deve ser gerado no diretório raiz do projeto.

**Exemplo de uso (no Replit CLI):**
```bash
replit agent run "Crie um relatório detalhado sobre a estrutura do banco de dados, lógica de negócio, APIs, configurações de ambiente, fluxos de usuário, dependências e testes do projeto SIGE v3.0." --output-file project_details_report.md
```

**Validação:**
Após a execução, verifique a existência do arquivo `project_details_report.md` no diretório raiz. Abra o arquivo e revise seu conteúdo para garantir que todas as seções solicitadas foram preenchidas com informações detalhadas e precisas. O relatório deve ser autoexplicativo e fornecer um entendimento aprofundado dos aspectos técnicos do projeto.