# Prompt Completo: KPIs Integrados com Hor√°rios de Trabalho
## Sistema SIGE v6.2 - Engine de KPIs v4.0

---

## üéØ **OBJETIVO**

Implementar sistema completo de KPIs que:
- ‚úÖ **Integra** com hor√°rios de trabalho cadastrados
- ‚úÖ **Calcula** custo real de m√£o de obra
- ‚úÖ **Quantifica** valor das faltas justificadas
- ‚úÖ **Gera** m√©tricas precisas e justas

---

## üìä **ESTRUTURA COMPLETA DOS KPIs**

### **Layout 4-4-4-3 (15 KPIs):**

#### **LINHA 1: KPIs B√°sicos (4)**
1. **Horas Trabalhadas** - Total de horas efetivamente trabalhadas
2. **Horas Extras** - Horas acima do hor√°rio padr√£o
3. **Faltas** - Faltas n√£o justificadas (penalizam)
4. **Atrasos** - Entrada atrasada + sa√≠da antecipada (em horas)

#### **LINHA 2: KPIs Anal√≠ticos (4)**
5. **Produtividade** - (Horas trabalhadas √∑ Horas esperadas) √ó 100
6. **Absente√≠smo** - (Faltas n√£o justificadas √∑ Dias programados) √ó 100
7. **M√©dia Di√°ria** - Horas trabalhadas √∑ Dias com lan√ßamento
8. **Faltas Justificadas** - Faltas que n√£o penalizam (informativo)

#### **LINHA 3: KPIs Financeiros (4)**
9. **Custo M√£o de Obra** - Valor total pago (sal√°rio + extras)
10. **Custo Alimenta√ß√£o** - Valor gasto com alimenta√ß√£o
11. **Custo Transporte** - Valor gasto com transporte
12. **Outros Custos** - Demais custos operacionais

#### **LINHA 4: KPIs Resumo (3)**
13. **Horas Perdidas** - (Faltas √ó Horas/dia) + Atrasos
14. **Efici√™ncia** - Produtividade ajustada por qualidade
15. **Valor Falta Justificada** - Impacto financeiro das faltas justificadas

---

## üîß **IMPLEMENTA√á√ÉO COMPLETA**

### **1. Fun√ß√£o Principal Atualizada:**

```python
def calcular_kpis_funcionario_v4(funcionario_id, data_inicio=None, data_fim=None):
    """
    Engine de KPIs v4.0 - INTEGRADO COM HOR√ÅRIOS DE TRABALHO
    
    Calcula todos os 15 KPIs baseados no hor√°rio espec√≠fico do funcion√°rio
    """
    try:
        from datetime import datetime, date, time
        from models import Funcionario, HorarioTrabalho, RegistroPonto
        
        # 1. BUSCAR FUNCION√ÅRIO E HOR√ÅRIO
        funcionario = Funcionario.query.get(funcionario_id)
        if not funcionario:
            return None
        
        # 2. OBTER HOR√ÅRIO DE TRABALHO ESPEC√çFICO
        horario_info = obter_horario_funcionario(funcionario)
        
        # 3. DEFINIR PER√çODO
        if not data_inicio:
            data_inicio = date.today().replace(day=1)
        if not data_fim:
            data_fim = date.today()
        
        # 4. BUSCAR REGISTROS DO PER√çODO
        registros = RegistroPonto.query.filter(
            RegistroPonto.funcionario_id == funcionario_id,
            RegistroPonto.data >= data_inicio,
            RegistroPonto.data <= data_fim
        ).all()
        
        # 5. PROCESSAR REGISTROS
        dados_processados = processar_registros_com_horario(registros, horario_info)
        
        # 6. CALCULAR KPIs B√ÅSICOS
        kpis_basicos = calcular_kpis_basicos(dados_processados, horario_info)
        
        # 7. CALCULAR KPIs ANAL√çTICOS
        kpis_analiticos = calcular_kpis_analiticos(dados_processados, horario_info)
        
        # 8. CALCULAR KPIs FINANCEIROS
        kpis_financeiros = calcular_kpis_financeiros(funcionario, dados_processados, horario_info)
        
        # 9. CALCULAR KPIs RESUMO
        kpis_resumo = calcular_kpis_resumo(funcionario, dados_processados, horario_info)
        
        # 10. CONSOLIDAR RESULTADO
        return {
            **kpis_basicos,
            **kpis_analiticos, 
            **kpis_financeiros,
            **kpis_resumo,
            'horario_info': horario_info,
            'periodo': f"{data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}"
        }
        
    except Exception as e:
        print(f"Erro ao calcular KPIs v4.0: {str(e)}")
        return None

def obter_horario_funcionario(funcionario):
    """
    Obt√©m informa√ß√µes do hor√°rio de trabalho do funcion√°rio
    """
    # Valores padr√£o
    horario_info = {
        'nome': 'Padr√£o',
        'entrada': time(8, 0),
        'saida': time(17, 0),
        'almoco_inicio': time(12, 0),
        'almoco_fim': time(13, 0),
        'horas_diarias': 8.0,
        'dias_semana': 'seg-sex',
        'valor_hora': 0.0
    }
    
    # Buscar hor√°rio espec√≠fico
    if hasattr(funcionario, 'horario_trabalho_id') and funcionario.horario_trabalho_id:
        horario = HorarioTrabalho.query.get(funcionario.horario_trabalho_id)
        if horario:
            # Calcular horas l√≠quidas
            total_horas = calcular_diferenca_horas(horario.entrada, horario.saida)
            almoco_horas = calcular_diferenca_horas(horario.saida_almoco, horario.retorno_almoco)
            horas_liquidas = total_horas - almoco_horas
            
            horario_info.update({
                'nome': horario.nome,
                'entrada': horario.entrada,
                'saida': horario.saida,
                'almoco_inicio': horario.saida_almoco,
                'almoco_fim': horario.retorno_almoco,
                'horas_diarias': horas_liquidas,
                'dias_semana': horario.dias_semana or 'seg-sex'
            })
    
    # Calcular valor/hora baseado no hor√°rio espec√≠fico
    if funcionario.salario and horario_info['horas_diarias'] > 0:
        # Considerar 22 dias √∫teis m√©dios por m√™s
        horas_mensais = horario_info['horas_diarias'] * 22
        horario_info['valor_hora'] = funcionario.salario / horas_mensais
    
    return horario_info

def calcular_diferenca_horas(hora_inicio, hora_fim):
    """
    Calcula diferen√ßa entre hor√°rios considerando virada de dia
    """
    inicio_decimal = hora_inicio.hour + hora_inicio.minute / 60
    fim_decimal = hora_fim.hour + hora_fim.minute / 60
    
    if fim_decimal < inicio_decimal:  # Virada de dia (ex: 22:00 - 06:00)
        return (24 - inicio_decimal) + fim_decimal
    else:
        return fim_decimal - inicio_decimal

def processar_registros_com_horario(registros, horario_info):
    """
    Processa registros considerando hor√°rio espec√≠fico
    """
    # Tipos que contam como dias programados
    tipos_programados = [
        'trabalho_normal', 'sabado_horas_extras', 'domingo_horas_extras',
        'feriado_trabalhado', 'meio_periodo', 'falta', 'falta_justificada',
        'atraso', 'saida_antecipada'
    ]
    
    dados = {
        'registros_programados': [],
        'horas_trabalhadas': 0.0,
        'horas_extras': 0.0,
        'faltas_nao_justificadas': 0,
        'faltas_justificadas': 0,
        'atrasos_total': 0.0,
        'dias_com_lancamento': 0
    }
    
    for registro in registros:
        # Contar apenas tipos programados
        if registro.tipo_registro in tipos_programados:
            dados['registros_programados'].append(registro)
            dados['dias_com_lancamento'] += 1
        
        # Somar horas trabalhadas
        if registro.horas_trabalhadas:
            dados['horas_trabalhadas'] += registro.horas_trabalhadas
        
        # Identificar horas extras
        if registro.horas_extras:
            dados['horas_extras'] += registro.horas_extras
        elif registro.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
            # Todas as horas destes tipos s√£o extras
            dados['horas_extras'] += registro.horas_trabalhadas or 0
        
        # Contar faltas
        if registro.tipo_registro == 'falta':
            dados['faltas_nao_justificadas'] += 1
        elif registro.tipo_registro == 'falta_justificada':
            dados['faltas_justificadas'] += 1
        
        # Calcular atrasos baseado no hor√°rio espec√≠fico
        if registro.hora_entrada and horario_info['entrada']:
            if registro.hora_entrada > horario_info['entrada']:
                atraso_minutos = (registro.hora_entrada - horario_info['entrada']).total_seconds() / 60
                dados['atrasos_total'] += atraso_minutos / 60
        
        if registro.hora_saida and horario_info['saida']:
            if registro.hora_saida < horario_info['saida']:
                saida_antecipada_minutos = (horario_info['saida'] - registro.hora_saida).total_seconds() / 60
                dados['atrasos_total'] += saida_antecipada_minutos / 60
    
    return dados

def calcular_kpis_basicos(dados, horario_info):
    """
    Calcula KPIs b√°sicos (linha 1)
    """
    return {
        'horas_trabalhadas': round(dados['horas_trabalhadas'], 1),
        'horas_extras': round(dados['horas_extras'], 1),
        'faltas': dados['faltas_nao_justificadas'],
        'atrasos': round(dados['atrasos_total'], 2)
    }

def calcular_kpis_analiticos(dados, horario_info):
    """
    Calcula KPIs anal√≠ticos (linha 2)
    """
    dias_programados = dados['dias_com_lancamento']
    horas_trabalhadas = dados['horas_trabalhadas']
    
    if dias_programados > 0:
        # Usar hor√°rio espec√≠fico para calcular horas esperadas
        horas_esperadas = dias_programados * horario_info['horas_diarias']
        produtividade = (horas_trabalhadas / horas_esperadas) * 100 if horas_esperadas > 0 else 0
        absenteismo = (dados['faltas_nao_justificadas'] / dias_programados) * 100
        media_diaria = horas_trabalhadas / dias_programados
    else:
        produtividade = 0
        absenteismo = 0
        media_diaria = 0
    
    return {
        'produtividade': round(produtividade, 1),
        'absenteismo': round(absenteismo, 1),
        'media_diaria': round(media_diaria, 1),
        'faltas_justificadas': dados['faltas_justificadas']
    }

def calcular_kpis_financeiros(funcionario, dados, horario_info):
    """
    Calcula KPIs financeiros (linha 3)
    """
    valor_hora = horario_info['valor_hora']
    horas_trabalhadas = dados['horas_trabalhadas']
    horas_extras = dados['horas_extras']
    
    # Custo m√£o de obra = sal√°rio base - desconto faltas + adicional extras
    custo_base = funcionario.salario or 0
    
    # Desconto por faltas n√£o justificadas
    desconto_faltas = dados['faltas_nao_justificadas'] * horario_info['horas_diarias'] * valor_hora
    
    # Adicional por horas extras (assumindo 50% de adicional)
    adicional_extras = horas_extras * valor_hora * 0.5
    
    custo_mao_obra = custo_base - desconto_faltas + adicional_extras
    
    return {
        'custo_mao_obra': round(custo_mao_obra, 2),
        'custo_alimentacao': 0.0,  # Implementar conforme necess√°rio
        'custo_transporte': 0.0,   # Implementar conforme necess√°rio
        'outros_custos': 0.0       # Implementar conforme necess√°rio
    }

def calcular_kpis_resumo(funcionario, dados, horario_info):
    """
    Calcula KPIs resumo (linha 4)
    """
    # Horas perdidas = faltas √ó horas/dia + atrasos
    horas_perdidas = (dados['faltas_nao_justificadas'] * horario_info['horas_diarias']) + dados['atrasos_total']
    
    # Efici√™ncia = produtividade (pode ser expandido com outros fatores)
    dias_programados = dados['dias_com_lancamento']
    if dias_programados > 0:
        horas_esperadas = dias_programados * horario_info['horas_diarias']
        eficiencia = (dados['horas_trabalhadas'] / horas_esperadas) * 100 if horas_esperadas > 0 else 0
    else:
        eficiencia = 0
    
    # Valor da falta justificada = faltas justificadas √ó horas/dia √ó valor/hora
    valor_falta_justificada = dados['faltas_justificadas'] * horario_info['horas_diarias'] * horario_info['valor_hora']
    
    return {
        'horas_perdidas': round(horas_perdidas, 1),
        'eficiencia': round(eficiencia, 1),
        'valor_falta_justificada': round(valor_falta_justificada, 2)
    }
```

---

## üß™ **SCRIPT DE TESTE COMPLETO**

```python
def testar_kpis_integrados():
    """
    Testa KPIs integrados com hor√°rios
    """
    from datetime import date
    from app import app
    from models import Funcionario
    
    with app.app_context():
        # Buscar C√°ssio
        cassio = Funcionario.query.filter_by(nome__icontains='C√°ssio').first()
        
        if cassio:
            print(f"=== TESTE KPIs v4.0 - {cassio.nome} ===")
            
            # Calcular KPIs
            kpis = calcular_kpis_funcionario_v4(
                cassio.id,
                date(2025, 6, 1),
                date(2025, 6, 30)
            )
            
            if kpis:
                horario = kpis['horario_info']
                
                print(f"\nüìã HOR√ÅRIO DE TRABALHO:")
                print(f"Nome: {horario['nome']}")
                print(f"Hor√°rio: {horario['entrada'].strftime('%H:%M')} √†s {horario['saida'].strftime('%H:%M')}")
                print(f"Almo√ßo: {horario['almoco_inicio'].strftime('%H:%M')} √†s {horario['almoco_fim'].strftime('%H:%M')}")
                print(f"Horas/dia: {horario['horas_diarias']}h")
                print(f"Valor/hora: R$ {horario['valor_hora']:.2f}")
                
                print(f"\nüìä KPIs B√ÅSICOS:")
                print(f"Horas Trabalhadas: {kpis['horas_trabalhadas']}h")
                print(f"Horas Extras: {kpis['horas_extras']}h")
                print(f"Faltas: {kpis['faltas']}")
                print(f"Atrasos: {kpis['atrasos']}h")
                
                print(f"\nüìà KPIs ANAL√çTICOS:")
                print(f"Produtividade: {kpis['produtividade']}%")
                print(f"Absente√≠smo: {kpis['absenteismo']}%")
                print(f"M√©dia Di√°ria: {kpis['media_diaria']}h")
                print(f"Faltas Justificadas: {kpis['faltas_justificadas']}")
                
                print(f"\nüí∞ KPIs FINANCEIROS:")
                print(f"Custo M√£o de Obra: R$ {kpis['custo_mao_obra']:.2f}")
                print(f"Custo Alimenta√ß√£o: R$ {kpis['custo_alimentacao']:.2f}")
                print(f"Custo Transporte: R$ {kpis['custo_transporte']:.2f}")
                print(f"Outros Custos: R$ {kpis['outros_custos']:.2f}")
                
                print(f"\nüéØ KPIs RESUMO:")
                print(f"Horas Perdidas: {kpis['horas_perdidas']}h")
                print(f"Efici√™ncia: {kpis['eficiencia']}%")
                print(f"Valor Falta Justificada: R$ {kpis['valor_falta_justificada']:.2f}")
                
                print(f"\n‚úÖ TESTE CONCLU√çDO COM SUCESSO!")
                return True
            else:
                print("‚ùå Erro ao calcular KPIs")
                return False
        else:
            print("‚ùå Funcion√°rio n√£o encontrado")
            return False

# Executar teste
testar_kpis_integrados()
```

---

## üìã **TEMPLATE HTML ATUALIZADO**

```html
<!-- KPIs Grid 4-4-4-3 -->
<div class="kpis-grid">
    <!-- Linha 1: KPIs B√°sicos -->
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.horas_trabalhadas }}h</div>
        <div class="kpi-label">Horas Trabalhadas</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.horas_extras }}h</div>
        <div class="kpi-label">Horas Extras</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.faltas }}</div>
        <div class="kpi-label">Faltas</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.atrasos }}h</div>
        <div class="kpi-label">Atrasos</div>
    </div>
    
    <!-- Linha 2: KPIs Anal√≠ticos -->
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.produtividade }}%</div>
        <div class="kpi-label">Produtividade</div>
        <div class="kpi-detail">Base: {{ kpis.horario_info.horas_diarias }}h/dia</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.absenteismo }}%</div>
        <div class="kpi-label">Absente√≠smo</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.media_diaria }}h</div>
        <div class="kpi-label">M√©dia Di√°ria</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.faltas_justificadas }}</div>
        <div class="kpi-label">Faltas Justificadas</div>
    </div>
    
    <!-- Linha 3: KPIs Financeiros -->
    <div class="kpi-card">
        <div class="kpi-value">R$ {{ "%.2f"|format(kpis.custo_mao_obra) }}</div>
        <div class="kpi-label">Custo M√£o de Obra</div>
        <div class="kpi-detail">R$ {{ "%.2f"|format(kpis.horario_info.valor_hora) }}/h</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">R$ {{ "%.2f"|format(kpis.custo_alimentacao) }}</div>
        <div class="kpi-label">Custo Alimenta√ß√£o</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">R$ {{ "%.2f"|format(kpis.custo_transporte) }}</div>
        <div class="kpi-label">Custo Transporte</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">R$ {{ "%.2f"|format(kpis.outros_custos) }}</div>
        <div class="kpi-label">Outros Custos</div>
    </div>
    
    <!-- Linha 4: KPIs Resumo -->
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.horas_perdidas }}h</div>
        <div class="kpi-label">Horas Perdidas</div>
    </div>
    <div class="kpi-card">
        <div class="kpi-value">{{ kpis.eficiencia }}%</div>
        <div class="kpi-label">Efici√™ncia</div>
    </div>
    <div class="kpi-card highlight">
        <div class="kpi-value">R$ {{ "%.2f"|format(kpis.valor_falta_justificada) }}</div>
        <div class="kpi-label">Valor Falta Justificada</div>
        <div class="kpi-detail">Perda de produtividade</div>
    </div>
</div>

<!-- Informa√ß√µes do Hor√°rio -->
<div class="horario-info">
    <h4>üìã Hor√°rio de Trabalho: {{ kpis.horario_info.nome }}</h4>
    <p>
        <strong>Hor√°rio:</strong> {{ kpis.horario_info.entrada.strftime('%H:%M') }} √†s {{ kpis.horario_info.saida.strftime('%H:%M') }} |
        <strong>Almo√ßo:</strong> {{ kpis.horario_info.almoco_inicio.strftime('%H:%M') }} √†s {{ kpis.horario_info.almoco_fim.strftime('%H:%M') }} |
        <strong>Horas/dia:</strong> {{ kpis.horario_info.horas_diarias }}h |
        <strong>Valor/hora:</strong> R$ {{ "%.2f"|format(kpis.horario_info.valor_hora) }}
    </p>
</div>
```

---

## üéØ **RESULTADOS ESPERADOS**

### **Para C√°ssio com hor√°rio "Obra" (7h-16h, 8h/dia):**
```
üìã HOR√ÅRIO: Obra - Segunda a S√°bado
‚è∞ 07:00 √†s 16:00 (8h/dia)
üí∞ Valor/hora: R$ 198,86 (R$ 35.000 √∑ 176h/m√™s)

üìä KPIs CALCULADOS:
- Produtividade: 92.9% (156h √∑ 168h esperadas)
- Custo M√£o de Obra: R$ 35.954,54
- Valor Falta Justificada: R$ 1.590,88 (1 √ó 8h √ó R$ 198,86)
- Horas Perdidas: 8.8h (1 falta √ó 8h + 0.8h atrasos)
```

### **Para C√°ssio com hor√°rio "Noturno" (22h-6h, 7h/dia):**
```
üìã HOR√ÅRIO: Noturno - Segunda a Sexta  
‚è∞ 22:00 √†s 06:00 (7h/dia)
üí∞ Valor/hora: R$ 227,27 (R$ 35.000 √∑ 154h/m√™s)

üìä KPIs CALCULADOS:
- Produtividade: 106.1% (156h √∑ 147h esperadas)
- Custo M√£o de Obra: R$ 35.954,54
- Valor Falta Justificada: R$ 1.590,89 (1 √ó 7h √ó R$ 227,27)
- Horas Perdidas: 7.8h (1 falta √ó 7h + 0.8h atrasos)
```

---

## üìã **CHECKLIST DE IMPLEMENTA√á√ÉO**

### **1. PREPARA√á√ÉO:**
- [ ] Verificar se tabela `horarios_trabalho` existe
- [ ] Verificar se funcion√°rios t√™m `horario_trabalho_id`
- [ ] Backup da fun√ß√£o atual de KPIs

### **2. IMPLEMENTA√á√ÉO:**
- [ ] Implementar fun√ß√£o `calcular_kpis_funcionario_v4`
- [ ] Implementar fun√ß√µes auxiliares
- [ ] Atualizar templates HTML
- [ ] Atualizar rotas Flask

### **3. TESTE:**
- [ ] Executar script de teste
- [ ] Verificar KPIs de C√°ssio
- [ ] Comparar com valores anteriores
- [ ] Validar c√°lculos financeiros

### **4. VALIDA√á√ÉO:**
- [ ] Produtividade baseada em hor√°rio espec√≠fico
- [ ] Valor/hora correto por hor√°rio
- [ ] Falta justificada quantificada
- [ ] Layout 4-4-4-3 funcionando

---

## üéØ **BENEF√çCIOS DA IMPLEMENTA√á√ÉO**

### **‚úÖ PRECIS√ÉO:**
- KPIs baseados em hor√°rios reais
- C√°lculos justos por tipo de jornada
- Valor/hora espec√≠fico por hor√°rio

### **‚úÖ TRANSPAR√äNCIA:**
- Valor das faltas justificadas quantificado
- Base de c√°lculo vis√≠vel
- M√©tricas compreens√≠veis

### **‚úÖ GEST√ÉO:**
- Compara√ß√£o justa entre funcion√°rios
- Custos reais de m√£o de obra
- Impacto financeiro das aus√™ncias

### **‚úÖ FLEXIBILIDADE:**
- Suporte a m√∫ltiplos hor√°rios
- Hor√°rios noturnos e especiais
- Escalas diferenciadas

**Execute a implementa√ß√£o para ter KPIs precisos e integrados com os hor√°rios cadastrados!**

