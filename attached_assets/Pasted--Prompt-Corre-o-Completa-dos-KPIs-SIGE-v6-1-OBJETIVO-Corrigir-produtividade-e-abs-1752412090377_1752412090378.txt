# Prompt: Corre√ß√£o Completa dos KPIs - SIGE v6.1

## üéØ OBJETIVO

Corrigir **produtividade** e **absente√≠smo** para usar **dias_com_lancamento** em vez de **dias_uteis**.

---

## üö® PROBLEMA ATUAL

### **Produtividade Incorreta:**
- **C√°ssio atual**: 51.9% (83h √∑ 160h - 20 dias √∫teis)
- **C√°ssio correto**: 74.1% (83h √∑ 112h - 14 dias com lan√ßamento)

### **Absente√≠smo Pode Estar Incorreto:**
- **L√≥gica atual**: Faltas √∑ dias √∫teis do m√™s
- **L√≥gica correta**: Faltas √∑ dias que deveria ter trabalhado

---

## üìä AN√ÅLISE: QUAIS TIPOS CONTAM COMO DIAS_COM_LANCAMENTO

### **TIPOS QUE CONTAM (Dias Programados para Trabalho):**
```python
tipos_dias_programados = [
    'trabalho_normal',          # Dia normal de trabalho
    'sabado_horas_extras',      # Programado para trabalhar s√°bado
    'domingo_horas_extras',     # Programado para trabalhar domingo
    'feriado_trabalhado',       # Programado para trabalhar feriado
    'meio_periodo',             # Programado para meio per√≠odo
    'falta',                    # Deveria trabalhar mas faltou
    'falta_justificada',        # Deveria trabalhar mas faltou (justificado)
    'atraso',                   # Trabalhou com atraso
    'saida_antecipada'          # Trabalhou mas saiu cedo
]
```

### **TIPOS QUE N√ÉO CONTAM (Dias N√£o Programados):**
```python
tipos_nao_programados = [
    'sabado_nao_trabalhado',    # N√£o estava programado para trabalhar
    'domingo_nao_trabalhado',   # N√£o estava programado para trabalhar
    'feriado_nao_trabalhado',   # N√£o estava programado para trabalhar
    'ferias',                   # Em f√©rias (n√£o dispon√≠vel)
    'licenca',                  # Em licen√ßa (n√£o dispon√≠vel)
    'afastamento'               # Afastado (n√£o dispon√≠vel)
]
```

---

## üîß IMPLEMENTA√á√ÉO COMPLETA

### **1. Fun√ß√£o Auxiliar para Contar Dias**

```python
def contar_dias_com_lancamento(registros):
    """
    Conta dias √∫nicos que representam tempo programado para trabalho
    """
    tipos_programados = [
        'trabalho_normal', 'sabado_horas_extras', 'domingo_horas_extras',
        'feriado_trabalhado', 'meio_periodo', 'falta', 'falta_justificada',
        'atraso', 'saida_antecipada'
    ]
    
    # Filtrar apenas registros de dias programados
    registros_programados = [
        r for r in registros 
        if r.tipo_registro in tipos_programados
    ]
    
    # Contar dias √∫nicos
    dias_unicos = set(r.data for r in registros_programados)
    
    return len(dias_unicos)

def contar_horas_trabalhadas(registros):
    """
    Conta horas efetivamente trabalhadas (exclui faltas)
    """
    tipos_com_horas = [
        'trabalho_normal', 'sabado_horas_extras', 'domingo_horas_extras',
        'feriado_trabalhado', 'meio_periodo', 'atraso', 'saida_antecipada'
    ]
    
    horas_total = 0
    for registro in registros:
        if registro.tipo_registro in tipos_com_horas:
            horas_total += registro.horas_trabalhadas or 0
    
    return horas_total

def contar_faltas(registros):
    """
    Conta faltas n√£o justificadas
    """
    faltas = [r for r in registros if r.tipo_registro == 'falta']
    return len(faltas)

def contar_faltas_justificadas(registros):
    """
    Conta faltas justificadas
    """
    faltas_just = [r for r in registros if r.tipo_registro == 'falta_justificada']
    return len(faltas_just)
```

### **2. Atualizar Fun√ß√£o Principal de KPIs**

```python
def calcular_kpis_funcionario_v3(funcionario_id, data_inicio=None, data_fim=None):
    """
    Engine de KPIs v3.1 - Produtividade e Absente√≠smo corrigidos
    """
    # Buscar todos os registros do per√≠odo
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario_id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim
    ).all()
    
    # NOVA L√ìGICA: Usar dias com lan√ßamento
    dias_com_lancamento = contar_dias_com_lancamento(registros)
    horas_trabalhadas = contar_horas_trabalhadas(registros)
    faltas_nao_justificadas = contar_faltas(registros)
    faltas_justificadas = contar_faltas_justificadas(registros)
    
    # Calcular outros KPIs (atrasos, horas extras, etc.)
    # ... c√≥digo existente para outros c√°lculos ...
    
    # PRODUTIVIDADE CORRIGIDA
    if dias_com_lancamento > 0:
        horas_esperadas = dias_com_lancamento * 8
        produtividade = (horas_trabalhadas / horas_esperadas) * 100
    else:
        produtividade = 0
    
    # ABSENTE√çSMO CORRIGIDO
    if dias_com_lancamento > 0:
        absenteismo = (faltas_nao_justificadas / dias_com_lancamento) * 100
    else:
        absenteismo = 0
    
    # M√âDIA DI√ÅRIA CORRIGIDA
    if dias_com_lancamento > 0:
        media_diaria = horas_trabalhadas / dias_com_lancamento
    else:
        media_diaria = 0
    
    # HORAS PERDIDAS
    horas_perdidas = (faltas_nao_justificadas * 8) + atrasos_em_horas
    
    return {
        # KPIs b√°sicos
        'horas_trabalhadas': round(horas_trabalhadas, 1),
        'horas_extras': horas_extras,
        'faltas': faltas_nao_justificadas,
        'atrasos': atrasos_em_horas,
        
        # KPIs anal√≠ticos - TODOS CORRIGIDOS
        'produtividade': round(produtividade, 1),
        'absenteismo': round(absenteismo, 1),
        'media_diaria': round(media_diaria, 1),
        'faltas_justificadas': faltas_justificadas,
        
        # KPIs financeiros
        'custo_mao_obra': custo_mao_obra,
        'custo_alimentacao': custo_alimentacao,
        'outros_custos': outros_custos,
        
        # KPIs resumo
        'custo_total': custo_total,
        'eficiencia': eficiencia,
        'horas_perdidas': round(horas_perdidas, 1),
        
        # Dados auxiliares
        'dias_com_lancamento': dias_com_lancamento,
        'horas_esperadas': horas_esperadas,
        'periodo': f"{data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}"
    }
```

---

## üìä COMPARA√á√ÉO: ANTES vs DEPOIS

### **Para C√°ssio (14 lan√ßamentos em junho):**

#### **ANTES (Incorreto):**
```
Produtividade: 51.9% (83h √∑ 160h - 20 dias √∫teis)
Absente√≠smo: 5.0% (1 falta √∑ 20 dias √∫teis)
M√©dia Di√°ria: 4.15h (83h √∑ 20 dias √∫teis)
```

#### **DEPOIS (Correto):**
```
Produtividade: 74.1% (83h √∑ 112h - 14 dias com lan√ßamento)
Absente√≠smo: 7.1% (1 falta √∑ 14 dias com lan√ßamento)
M√©dia Di√°ria: 5.9h (83h √∑ 14 dias com lan√ßamento)
```

---

## üß™ TESTE DE VALIDA√á√ÉO

### **Script de Teste Completo:**

```python
# Executar no console Python do Replit
from datetime import date
from app import app
from models import Funcionario
from kpis_engine_v3 import calcular_kpis_funcionario_v3

with app.app_context():
    # Buscar C√°ssio
    cassio = Funcionario.query.filter_by(codigo='F0101').first()
    print(f"Testando: {cassio.nome}")
    
    # Calcular KPIs corrigidos
    kpis = calcular_kpis_funcionario_v3(
        cassio.id, 
        date(2025, 6, 1), 
        date(2025, 6, 30)
    )
    
    print("\n=== RESULTADOS CORRIGIDOS ===")
    print(f"Dias com lan√ßamento: {kpis['dias_com_lancamento']}")
    print(f"Horas esperadas: {kpis['horas_esperadas']}h")
    print(f"Horas trabalhadas: {kpis['horas_trabalhadas']}h")
    print(f"Produtividade: {kpis['produtividade']}%")
    print(f"Absente√≠smo: {kpis['absenteismo']}%")
    print(f"M√©dia di√°ria: {kpis['media_diaria']}h")
    print(f"Faltas: {kpis['faltas']}")
    print(f"Faltas justificadas: {kpis['faltas_justificadas']}")
```

### **Resultado Esperado:**
```
Testando: C√°ssio Viller Silva de Azevedo

=== RESULTADOS CORRIGIDOS ===
Dias com lan√ßamento: 14
Horas esperadas: 112.0h
Horas trabalhadas: 83.0h
Produtividade: 74.1%
Absente√≠smo: 7.1%
M√©dia di√°ria: 5.9h
Faltas: 1
Faltas justificadas: 1
```

---

## üìã CHECKLIST DE IMPLEMENTA√á√ÉO

### **Passos Obrigat√≥rios:**

1. **[ ] Backup do sistema atual**
2. **[ ] Criar fun√ß√µes auxiliares de contagem**
3. **[ ] Atualizar fun√ß√£o `calcular_kpis_funcionario_v3`**
4. **[ ] Corrigir produtividade (dias_com_lancamento)**
5. **[ ] Corrigir absente√≠smo (dias_com_lancamento)**
6. **[ ] Corrigir m√©dia di√°ria (dias_com_lancamento)**
7. **[ ] Atualizar templates HTML**
8. **[ ] Testar com C√°ssio**
9. **[ ] Verificar resultados esperados**
10. **[ ] Testar com outros funcion√°rios**

### **Verifica√ß√µes Finais:**

- **[ ] Produtividade C√°ssio: 74.1% (era 51.9%)**
- **[ ] Absente√≠smo C√°ssio: 7.1% (era 5.0%)**
- **[ ] M√©dia di√°ria C√°ssio: 5.9h (era 4.15h)**
- **[ ] Interface mostra base correta**
- **[ ] N√£o h√° erros no sistema**

---

## üéØ RESUMO DAS MUDAN√áAS

### **KPIs QUE MUDAM (Usar dias_com_lancamento):**
- ‚úÖ **Produtividade**: Horas trabalhadas √∑ (dias_com_lancamento √ó 8)
- ‚úÖ **Absente√≠smo**: Faltas √∑ dias_com_lancamento
- ‚úÖ **M√©dia Di√°ria**: Horas trabalhadas √∑ dias_com_lancamento

### **KPIs QUE N√ÉO MUDAM:**
- ‚ùå **Horas Trabalhadas**: Soma das horas (mant√©m)
- ‚ùå **Faltas**: Contagem de faltas (mant√©m)
- ‚ùå **Custos**: C√°lculos financeiros (mant√©m)

### **TIPOS DE LAN√áAMENTO - REGRA CLARA:**

#### **CONTAM como dias_com_lancamento:**
- `trabalho_normal` ‚úÖ
- `sabado_horas_extras` ‚úÖ
- `domingo_horas_extras` ‚úÖ
- `feriado_trabalhado` ‚úÖ
- `meio_periodo` ‚úÖ
- `falta` ‚úÖ (deveria trabalhar)
- `falta_justificada` ‚úÖ (deveria trabalhar)

#### **N√ÉO CONTAM:**
- `sabado_nao_trabalhado` ‚ùå
- `domingo_nao_trabalhado` ‚ùå
- `ferias` ‚ùå
- `licenca` ‚ùå

---

## üèÜ RESULTADO FINAL

Ap√≥s implementa√ß√£o, o sistema ter√°:
- **Produtividade mais justa** (baseada em dias programados)
- **Absente√≠smo mais preciso** (baseado em dias que deveria trabalhar)
- **M√©tricas consistentes** entre si
- **C√°ssio com KPIs realistas**: 74.1% produtividade, 7.1% absente√≠smo