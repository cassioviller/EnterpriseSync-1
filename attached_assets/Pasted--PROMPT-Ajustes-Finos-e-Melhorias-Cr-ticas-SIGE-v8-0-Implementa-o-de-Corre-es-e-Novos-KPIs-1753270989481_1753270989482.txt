# PROMPT: Ajustes Finos e Melhorias Cr√≠ticas - SIGE v8.0
## Implementa√ß√£o de Corre√ß√µes e Novos KPIs

---

## üéØ OBJETIVO

Implementar ajustes finos cr√≠ticos no SIGE v8.0 baseados na an√°lise t√©cnica realizada, corrigindo discrep√¢ncias de c√°lculo, implementando novos KPIs estrat√©gicos e criando um dashboard executivo de classe mundial.

---

## üö® 1. CORRE√á√ïES CR√çTICAS URGENTES

### **1.1 Unifica√ß√£o de C√°lculos de Obra**

#### **Problema Identificado:**
- Discrep√¢ncia de R$ 10.477,26 (33,7%) entre c√°lculo manual e sistema
- M√∫ltiplas fontes de c√°lculo gerando inconsist√™ncias
- Falta de padroniza√ß√£o nos filtros de per√≠odo

#### **Solu√ß√£o: Classe Centralizada de C√°lculos**

```python
# models.py - Adicionar nova classe
class CalculadoraObra:
    """
    Classe centralizada para todos os c√°lculos relacionados √† obra
    Garante consist√™ncia e elimina discrep√¢ncias
    """
    
    def __init__(self, obra_id, data_inicio=None, data_fim=None):
        self.obra_id = obra_id
        self.obra = Obra.query.get(obra_id)
        self.data_inicio = data_inicio or self.obra.data_inicio
        self.data_fim = data_fim or datetime.now().date()
    
    def calcular_custo_mao_obra(self):
        """
        C√°lculo unificado de custo de m√£o de obra
        """
        # Buscar todos os registros de ponto no per√≠odo
        registros = db.session.query(
            RegistroPonto.funcionario_id,
            func.sum(RegistroPonto.horas_trabalhadas_calculadas).label('total_horas'),
            func.sum(RegistroPonto.horas_extras_calculadas).label('total_extras'),
            Funcionario.salario,
            HorarioTrabalho.horas_diarias
        ).join(Funcionario).join(HorarioTrabalho).filter(
            RegistroPonto.obra_id == self.obra_id,
            RegistroPonto.data.between(self.data_inicio, self.data_fim)
        ).group_by(
            RegistroPonto.funcionario_id,
            Funcionario.salario,
            HorarioTrabalho.horas_diarias
        ).all()
        
        custo_total = 0
        detalhamento = []
        
        for registro in registros:
            # Calcular valor/hora baseado no hor√°rio espec√≠fico do funcion√°rio
            horas_mensais = registro.horas_diarias * 22  # 22 dias √∫teis
            valor_hora_normal = registro.salario / horas_mensais
            
            # Custo horas normais
            custo_normal = registro.total_horas * valor_hora_normal
            
            # Custo horas extras (50% adicional seg-sex, 100% s√°b/dom)
            custo_extras = self.calcular_custo_horas_extras(
                registro.funcionario_id, 
                registro.total_extras, 
                valor_hora_normal
            )
            
            custo_funcionario = custo_normal + custo_extras
            custo_total += custo_funcionario
            
            detalhamento.append({
                'funcionario_id': registro.funcionario_id,
                'horas_normais': registro.total_horas,
                'horas_extras': registro.total_extras,
                'valor_hora': valor_hora_normal,
                'custo_normal': custo_normal,
                'custo_extras': custo_extras,
                'custo_total': custo_funcionario
            })
        
        return {
            'custo_total': custo_total,
            'detalhamento': detalhamento
        }
    
    def calcular_custo_horas_extras(self, funcionario_id, total_horas_extras, valor_hora_normal):
        """
        Calcula custo de horas extras considerando tipo de dia
        """
        # Buscar registros de horas extras por tipo de dia
        extras_por_tipo = db.session.query(
            RegistroPonto.tipo_registro,
            func.sum(RegistroPonto.horas_extras_calculadas).label('horas')
        ).filter(
            RegistroPonto.funcionario_id == funcionario_id,
            RegistroPonto.obra_id == self.obra_id,
            RegistroPonto.data.between(self.data_inicio, self.data_fim),
            RegistroPonto.horas_extras_calculadas > 0
        ).group_by(RegistroPonto.tipo_registro).all()
        
        custo_extras = 0
        
        for tipo_registro, horas in extras_por_tipo:
            if tipo_registro in ['trabalho_normal', 'meio_periodo']:
                # Horas extras em dias normais: 50% adicional
                custo_extras += horas * valor_hora_normal * 1.5
            elif tipo_registro == 'sabado_horas_extras':
                # S√°bado: 50% adicional
                custo_extras += horas * valor_hora_normal * 1.5
            elif tipo_registro in ['domingo_horas_extras', 'feriado_trabalhado']:
                # Domingo/Feriado: 100% adicional
                custo_extras += horas * valor_hora_normal * 2.0
        
        return custo_extras
    
    def calcular_custo_transporte(self):
        """
        C√°lculo unificado de custos de transporte
        """
        custos = db.session.query(
            func.sum(CustoVeiculo.valor).label('total')
        ).filter(
            CustoVeiculo.obra_id == self.obra_id,
            CustoVeiculo.data.between(self.data_inicio, self.data_fim)
        ).scalar() or 0
        
        return custos
    
    def calcular_custo_alimentacao(self):
        """
        C√°lculo unificado de custos de alimenta√ß√£o
        """
        custos = db.session.query(
            func.sum(RegistroAlimentacao.valor).label('total')
        ).filter(
            RegistroAlimentacao.obra_id == self.obra_id,
            RegistroAlimentacao.data.between(self.data_inicio, self.data_fim)
        ).scalar() or 0
        
        return custos
    
    def calcular_outros_custos(self):
        """
        C√°lculo unificado de outros custos
        """
        custos = db.session.query(
            func.sum(CustoObra.valor).label('total')
        ).filter(
            CustoObra.obra_id == self.obra_id,
            CustoObra.data.between(self.data_inicio, self.data_fim)
        ).scalar() or 0
        
        return custos
    
    def calcular_custo_total(self):
        """
        M√©todo principal - c√°lculo completo e unificado
        """
        mao_obra = self.calcular_custo_mao_obra()
        transporte = self.calcular_custo_transporte()
        alimentacao = self.calcular_custo_alimentacao()
        outros = self.calcular_outros_custos()
        
        total = mao_obra['custo_total'] + transporte + alimentacao + outros
        
        return {
            'mao_obra': mao_obra['custo_total'],
            'transporte': transporte,
            'alimentacao': alimentacao,
            'outros': outros,
            'total': total,
            'detalhamento_mao_obra': mao_obra['detalhamento']
        }
```

### **1.2 Corre√ß√£o do Sistema de Horas Extras**

#### **Problema Identificado:**
- Todos os funcion√°rios com exatamente 184h (suspeito)
- Falta de diferencia√ß√£o por hor√°rio de trabalho
- C√°lculo incorreto de horas extras

#### **Solu√ß√£o: Engine de C√°lculo de Horas Corrigido**

```python
# utils.py - Adicionar fun√ß√£o corrigida
def calcular_horas_trabalhadas_e_extras(registro_ponto):
    """
    Calcula horas trabalhadas e extras considerando hor√°rio espec√≠fico
    """
    funcionario = registro_ponto.funcionario
    horario_trabalho = funcionario.horario_trabalho
    
    # Calcular horas trabalhadas no dia
    if registro_ponto.hora_entrada and registro_ponto.hora_saida:
        entrada = datetime.combine(registro_ponto.data, registro_ponto.hora_entrada)
        saida = datetime.combine(registro_ponto.data, registro_ponto.hora_saida)
        
        # Subtrair intervalo de almo√ßo se houver
        if registro_ponto.hora_almoco_saida and registro_ponto.hora_almoco_retorno:
            almoco_saida = datetime.combine(registro_ponto.data, registro_ponto.hora_almoco_saida)
            almoco_retorno = datetime.combine(registro_ponto.data, registro_ponto.hora_almoco_retorno)
            intervalo_almoco = (almoco_retorno - almoco_saida).total_seconds() / 3600
        else:
            intervalo_almoco = 0
        
        horas_trabalhadas = (saida - entrada).total_seconds() / 3600 - intervalo_almoco
    else:
        horas_trabalhadas = 0
    
    # Calcular horas extras baseado no hor√°rio espec√≠fico do funcion√°rio
    if registro_ponto.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
        # Fins de semana e feriados: todas as horas s√£o extras
        horas_extras = horas_trabalhadas
        horas_normais = 0
    else:
        # Dias normais: extras = trabalhadas - padr√£o do hor√°rio
        horas_normais = min(horas_trabalhadas, horario_trabalho.horas_diarias)
        horas_extras = max(0, horas_trabalhadas - horario_trabalho.horas_diarias)
    
    return {
        'horas_trabalhadas': horas_trabalhadas,
        'horas_normais': horas_normais,
        'horas_extras': horas_extras
    }

# Trigger para recalcular automaticamente
@event.listens_for(RegistroPonto, 'before_insert')
@event.listens_for(RegistroPonto, 'before_update')
def recalcular_horas(mapper, connection, target):
    """
    Recalcula horas automaticamente antes de salvar
    """
    if target.hora_entrada and target.hora_saida:
        calculos = calcular_horas_trabalhadas_e_extras(target)
        target.horas_trabalhadas_calculadas = calculos['horas_trabalhadas']
        target.horas_extras_calculadas = calculos['horas_extras']
```

---

## üéØ 2. NOVOS KPIs ESTRAT√âGICOS

### **2.1 KPIs Financeiros Avan√ßados**

```python
# kpis_avancados.py - Novo arquivo
class KPIsFinanceiros:
    """
    KPIs financeiros avan√ßados para gest√£o estrat√©gica
    """
    
    @staticmethod
    def custo_por_m2(obra_id):
        """
        KPI: Custo por metro quadrado constru√≠do
        """
        calculadora = CalculadoraObra(obra_id)
        custo_total = calculadora.calcular_custo_total()['total']
        
        obra = Obra.query.get(obra_id)
        area_m2 = obra.area_total_m2 or 1  # Evitar divis√£o por zero
        
        return {
            'valor': custo_total / area_m2,
            'custo_total': custo_total,
            'area_m2': area_m2,
            'benchmark_mercado': 1200.00,  # R$/m¬≤ - configur√°vel
            'status': 'acima' if (custo_total / area_m2) > 1200 else 'dentro'
        }
    
    @staticmethod
    def margem_lucro_realizada(obra_id):
        """
        KPI: Margem de lucro realizada vs planejada
        """
        calculadora = CalculadoraObra(obra_id)
        custo_real = calculadora.calcular_custo_total()['total']
        
        obra = Obra.query.get(obra_id)
        valor_contrato = obra.valor_contrato or obra.orcamento_total
        
        margem_absoluta = valor_contrato - custo_real
        margem_percentual = (margem_absoluta / valor_contrato) * 100 if valor_contrato > 0 else 0
        
        return {
            'margem_absoluta': margem_absoluta,
            'margem_percentual': margem_percentual,
            'valor_contrato': valor_contrato,
            'custo_real': custo_real,
            'status': 'positiva' if margem_percentual > 0 else 'negativa'
        }
    
    @staticmethod
    def desvio_orcamentario(obra_id):
        """
        KPI: Desvio or√ßament√°rio com proje√ß√£o
        """
        calculadora = CalculadoraObra(obra_id)
        custo_atual = calculadora.calcular_custo_total()['total']
        
        obra = Obra.query.get(obra_id)
        orcamento_total = obra.orcamento_total
        
        # Calcular progresso f√≠sico para proje√ß√£o
        progresso_fisico = KPIsOperacionais.progresso_fisico_obra(obra_id)['percentual']
        
        # Projetar custo final baseado no progresso
        if progresso_fisico > 0:
            custo_projetado = custo_atual / (progresso_fisico / 100)
        else:
            custo_projetado = custo_atual
        
        desvio_atual = ((custo_atual - (orcamento_total * progresso_fisico / 100)) / orcamento_total) * 100
        desvio_projetado = ((custo_projetado - orcamento_total) / orcamento_total) * 100
        
        return {
            'desvio_atual': desvio_atual,
            'desvio_projetado': desvio_projetado,
            'custo_atual': custo_atual,
            'custo_projetado': custo_projetado,
            'orcamento_total': orcamento_total,
            'alerta': 'critico' if desvio_projetado > 20 else 'atencao' if desvio_projetado > 10 else 'normal'
        }
    
    @staticmethod
    def roi_projetado(obra_id):
        """
        KPI: ROI (Return on Investment) projetado
        """
        margem = KPIsFinanceiros.margem_lucro_realizada(obra_id)
        
        obra = Obra.query.get(obra_id)
        investimento_inicial = obra.investimento_inicial or (obra.orcamento_total * 0.3)  # 30% do or√ßamento
        
        roi = (margem['margem_absoluta'] / investimento_inicial) * 100 if investimento_inicial > 0 else 0
        
        return {
            'roi_percentual': roi,
            'margem_absoluta': margem['margem_absoluta'],
            'investimento_inicial': investimento_inicial,
            'classificacao': 'excelente' if roi > 30 else 'bom' if roi > 15 else 'regular' if roi > 5 else 'ruim'
        }
```

### **2.2 KPIs Operacionais Avan√ßados**

```python
class KPIsOperacionais:
    """
    KPIs operacionais para controle de produtividade
    """
    
    @staticmethod
    def progresso_fisico_obra(obra_id):
        """
        KPI: Progresso f√≠sico baseado em RDOs
        """
        # Buscar todos os servi√ßos da obra e seus progressos
        servicos_progresso = db.session.query(
            ServicoObra.id,
            ServicoObra.nome,
            ServicoObra.quantidade_total,
            func.coalesce(func.sum(RDOServico.quantidade_executada), 0).label('executado')
        ).outerjoin(RDOServico).filter(
            ServicoObra.obra_id == obra_id
        ).group_by(
            ServicoObra.id,
            ServicoObra.nome,
            ServicoObra.quantidade_total
        ).all()
        
        progresso_total = 0
        peso_total = 0
        detalhamento = []
        
        for servico in servicos_progresso:
            if servico.quantidade_total > 0:
                percentual_servico = min(100, (servico.executado / servico.quantidade_total) * 100)
                peso_servico = servico.quantidade_total  # Peso baseado na quantidade
                
                progresso_total += percentual_servico * peso_servico
                peso_total += peso_servico
                
                detalhamento.append({
                    'servico': servico.nome,
                    'percentual': percentual_servico,
                    'executado': servico.executado,
                    'total': servico.quantidade_total
                })
        
        percentual_geral = progresso_total / peso_total if peso_total > 0 else 0
        
        return {
            'percentual': percentual_geral,
            'detalhamento': detalhamento,
            'servicos_concluidos': len([d for d in detalhamento if d['percentual'] >= 100]),
            'total_servicos': len(detalhamento)
        }
    
    @staticmethod
    def indice_produtividade_obra(obra_id):
        """
        KPI: √çndice de produtividade (f√≠sico vs cronograma)
        """
        progresso_fisico = KPIsOperacionais.progresso_fisico_obra(obra_id)['percentual']
        
        obra = Obra.query.get(obra_id)
        
        # Calcular progresso cronol√≥gico
        if obra.data_inicio and obra.data_fim_prevista:
            total_dias = (obra.data_fim_prevista - obra.data_inicio).days
            dias_decorridos = (datetime.now().date() - obra.data_inicio).days
            progresso_cronologico = min(100, (dias_decorridos / total_dias) * 100) if total_dias > 0 else 0
        else:
            progresso_cronologico = 0
        
        # √çndice de produtividade
        if progresso_cronologico > 0:
            indice = progresso_fisico / progresso_cronologico
        else:
            indice = 0
        
        return {
            'indice': indice,
            'progresso_fisico': progresso_fisico,
            'progresso_cronologico': progresso_cronologico,
            'status': 'adiantada' if indice > 1.1 else 'no_prazo' if indice >= 0.9 else 'atrasada',
            'dias_diferenca': (progresso_fisico - progresso_cronologico) * total_dias / 100 if 'total_dias' in locals() else 0
        }
    
    @staticmethod
    def eficiencia_equipamentos(obra_id):
        """
        KPI: Efici√™ncia de uso de equipamentos
        """
        # Buscar registros de uso de equipamentos
        uso_equipamentos = db.session.query(
            Equipamento.id,
            Equipamento.nome,
            func.sum(RegistroUsoEquipamento.horas_utilizadas).label('horas_utilizadas'),
            func.count(RegistroUsoEquipamento.id).label('dias_uso')
        ).join(RegistroUsoEquipamento).filter(
            RegistroUsoEquipamento.obra_id == obra_id
        ).group_by(
            Equipamento.id,
            Equipamento.nome
        ).all()
        
        # Calcular dias √∫teis no per√≠odo
        calculadora = CalculadoraObra(obra_id)
        dias_uteis = calcular_dias_uteis(calculadora.data_inicio, calculadora.data_fim)
        
        eficiencia_total = 0
        equipamentos_analisados = 0
        detalhamento = []
        
        for equipamento in uso_equipamentos:
            horas_disponiveis = dias_uteis * 8  # 8h por dia √∫til
            eficiencia_equipamento = (equipamento.horas_utilizadas / horas_disponiveis) * 100 if horas_disponiveis > 0 else 0
            
            eficiencia_total += eficiencia_equipamento
            equipamentos_analisados += 1
            
            detalhamento.append({
                'equipamento': equipamento.nome,
                'eficiencia': eficiencia_equipamento,
                'horas_utilizadas': equipamento.horas_utilizadas,
                'horas_disponiveis': horas_disponiveis,
                'dias_uso': equipamento.dias_uso
            })
        
        eficiencia_media = eficiencia_total / equipamentos_analisados if equipamentos_analisados > 0 else 0
        
        return {
            'eficiencia_media': eficiencia_media,
            'detalhamento': detalhamento,
            'equipamentos_ativos': equipamentos_analisados,
            'status': 'otima' if eficiencia_media > 80 else 'boa' if eficiencia_media > 60 else 'regular' if eficiencia_media > 40 else 'baixa'
        }
```

### **2.3 KPIs de Recursos Humanos**

```python
class KPIsRecursosHumanos:
    """
    KPIs de RH para gest√£o de pessoas
    """
    
    @staticmethod
    def produtividade_por_funcao(obra_id):
        """
        KPI: Produtividade por fun√ß√£o/cargo
        """
        produtividade_funcoes = db.session.query(
            Funcao.nome,
            func.count(distinct(RegistroPonto.funcionario_id)).label('funcionarios'),
            func.sum(RegistroPonto.horas_trabalhadas_calculadas).label('total_horas'),
            func.avg(RegistroPonto.horas_trabalhadas_calculadas).label('media_horas_dia')
        ).join(Funcionario).join(RegistroPonto).filter(
            RegistroPonto.obra_id == obra_id
        ).group_by(Funcao.nome).all()
        
        # Calcular output por fun√ß√£o (baseado em RDOs)
        output_funcoes = db.session.query(
            Funcao.nome,
            func.sum(RDOServico.quantidade_executada).label('output_total')
        ).join(Funcionario).join(RDOFuncionario).join(RDO).join(RDOServico).filter(
            RDO.obra_id == obra_id
        ).group_by(Funcao.nome).all()
        
        resultado = []
        for prod in produtividade_funcoes:
            # Buscar output correspondente
            output = next((o.output_total for o in output_funcoes if o.nome == prod.nome), 0)
            
            produtividade = output / prod.total_horas if prod.total_horas > 0 else 0
            
            resultado.append({
                'funcao': prod.nome,
                'funcionarios': prod.funcionarios,
                'total_horas': prod.total_horas,
                'output_total': output,
                'produtividade': produtividade,
                'media_horas_dia': prod.media_horas_dia
            })
        
        return sorted(resultado, key=lambda x: x['produtividade'], reverse=True)
    
    @staticmethod
    def custo_absenteismo(obra_id):
        """
        KPI: Custo financeiro do absente√≠smo
        """
        # Buscar faltas n√£o justificadas
        faltas = db.session.query(
            RegistroPonto.funcionario_id,
            func.count(RegistroPonto.id).label('total_faltas'),
            Funcionario.salario,
            HorarioTrabalho.horas_diarias
        ).join(Funcionario).join(HorarioTrabalho).filter(
            RegistroPonto.obra_id == obra_id,
            RegistroPonto.tipo_registro == 'falta'
        ).group_by(
            RegistroPonto.funcionario_id,
            Funcionario.salario,
            HorarioTrabalho.horas_diarias
        ).all()
        
        custo_total_faltas = 0
        detalhamento = []
        
        for falta in faltas:
            # Calcular valor/hora
            horas_mensais = falta.horas_diarias * 22
            valor_hora = falta.salario / horas_mensais
            
            # Custo das faltas
            horas_perdidas = falta.total_faltas * falta.horas_diarias
            custo_faltas = horas_perdidas * valor_hora
            
            custo_total_faltas += custo_faltas
            
            detalhamento.append({
                'funcionario_id': falta.funcionario_id,
                'total_faltas': falta.total_faltas,
                'horas_perdidas': horas_perdidas,
                'custo_faltas': custo_faltas
            })
        
        return {
            'custo_total': custo_total_faltas,
            'detalhamento': detalhamento,
            'funcionarios_com_faltas': len(detalhamento),
            'impacto_percentual': (custo_total_faltas / CalculadoraObra(obra_id).calcular_custo_mao_obra()['custo_total']) * 100
        }
    
    @staticmethod
    def rotatividade_obra(obra_id, periodo_meses=3):
        """
        KPI: Taxa de rotatividade na obra
        """
        data_inicio_periodo = datetime.now().date() - timedelta(days=periodo_meses * 30)
        
        # Funcion√°rios que sa√≠ram no per√≠odo
        funcionarios_saidos = db.session.query(
            func.count(distinct(Funcionario.id))
        ).filter(
            Funcionario.data_demissao.between(data_inicio_periodo, datetime.now().date()),
            Funcionario.id.in_(
                db.session.query(distinct(RegistroPonto.funcionario_id)).filter(
                    RegistroPonto.obra_id == obra_id
                )
            )
        ).scalar() or 0
        
        # Funcion√°rios m√©dios no per√≠odo
        funcionarios_medio = db.session.query(
            func.count(distinct(RegistroPonto.funcionario_id))
        ).filter(
            RegistroPonto.obra_id == obra_id,
            RegistroPonto.data >= data_inicio_periodo
        ).scalar() or 1
        
        taxa_rotatividade = (funcionarios_saidos / funcionarios_medio) * 100
        
        return {
            'taxa_rotatividade': taxa_rotatividade,
            'funcionarios_saidos': funcionarios_saidos,
            'funcionarios_medio': funcionarios_medio,
            'periodo_meses': periodo_meses,
            'status': 'alta' if taxa_rotatividade > 15 else 'media' if taxa_rotatividade > 8 else 'baixa'
        }
```

---

## üìä 3. DASHBOARD EXECUTIVO AVAN√áADO

### **3.1 Nova Rota para Dashboard Executivo**

```python
# views.py - Adicionar nova rota
@app.route('/obras/<int:obra_id>/dashboard-executivo')
@admin_required
def dashboard_executivo_obra(obra_id):
    """
    Dashboard executivo com KPIs avan√ßados
    """
    obra = Obra.query.get_or_404(obra_id)
    
    # Calcular todos os KPIs
    kpis_financeiros = {
        'custo_por_m2': KPIsFinanceiros.custo_por_m2(obra_id),
        'margem_lucro': KPIsFinanceiros.margem_lucro_realizada(obra_id),
        'desvio_orcamentario': KPIsFinanceiros.desvio_orcamentario(obra_id),
        'roi_projetado': KPIsFinanceiros.roi_projetado(obra_id)
    }
    
    kpis_operacionais = {
        'progresso_fisico': KPIsOperacionais.progresso_fisico_obra(obra_id),
        'indice_produtividade': KPIsOperacionais.indice_produtividade_obra(obra_id),
        'eficiencia_equipamentos': KPIsOperacionais.eficiencia_equipamentos(obra_id)
    }
    
    kpis_rh = {
        'produtividade_funcoes': KPIsRecursosHumanos.produtividade_por_funcao(obra_id),
        'custo_absenteismo': KPIsRecursosHumanos.custo_absenteismo(obra_id),
        'rotatividade': KPIsRecursosHumanos.rotatividade_obra(obra_id)
    }
    
    # Dados para gr√°ficos
    dados_graficos = {
        'evolucao_custos': gerar_dados_evolucao_custos(obra_id),
        'produtividade_equipes': gerar_dados_produtividade_equipes(obra_id),
        'distribuicao_custos': gerar_dados_distribuicao_custos(obra_id)
    }
    
    return render_template('obras/dashboard_executivo.html',
                         obra=obra,
                         kpis_financeiros=kpis_financeiros,
                         kpis_operacionais=kpis_operacionais,
                         kpis_rh=kpis_rh,
                         dados_graficos=dados_graficos)

def gerar_dados_evolucao_custos(obra_id):
    """
    Gera dados para gr√°fico de evolu√ß√£o de custos
    """
    # Buscar custos acumulados por semana
    custos_semanais = db.session.query(
        func.date_trunc('week', RegistroPonto.data).label('semana'),
        func.sum(RegistroPonto.horas_trabalhadas_calculadas * 
                (Funcionario.salario / (HorarioTrabalho.horas_diarias * 22))).label('custo_acumulado')
    ).join(Funcionario).join(HorarioTrabalho).filter(
        RegistroPonto.obra_id == obra_id
    ).group_by('semana').order_by('semana').all()
    
    # Calcular or√ßamento planejado proporcional
    obra = Obra.query.get(obra_id)
    if obra.data_inicio and obra.data_fim_prevista:
        total_semanas = ((obra.data_fim_prevista - obra.data_inicio).days / 7)
        custo_semanal_planejado = obra.orcamento_total / total_semanas if total_semanas > 0 else 0
    else:
        custo_semanal_planejado = 0
    
    labels = []
    custos_reais = []
    custos_planejados = []
    custo_acumulado = 0
    
    for i, (semana, custo_semana) in enumerate(custos_semanais):
        labels.append(semana.strftime('%d/%m'))
        custo_acumulado += custo_semana
        custos_reais.append(custo_acumulado)
        custos_planejados.append((i + 1) * custo_semanal_planejado)
    
    return {
        'labels': labels,
        'custos_reais': custos_reais,
        'custos_planejados': custos_planejados
    }
```

### **3.2 Template do Dashboard Executivo**

```html
<!-- templates/obras/dashboard_executivo.html -->
{% extends "base.html" %}

{% block title %}Dashboard Executivo - {{ obra.nome }}{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h2><i class="fas fa-chart-line"></i> Dashboard Executivo</h2>
                    <p class="text-muted">{{ obra.nome }}</p>
                </div>
                <div>
                    <button class="btn btn-outline-primary" onclick="exportarDashboard()">
                        <i class="fas fa-download"></i> Exportar PDF
                    </button>
                    <button class="btn btn-primary" onclick="atualizarDados()">
                        <i class="fas fa-sync"></i> Atualizar
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- KPIs Financeiros -->
    <div class="row mb-4">
        <div class="col-12">
            <h4 class="mb-3">üìä KPIs Financeiros</h4>
        </div>
        
        <div class="col-md-3">
            <div class="card kpi-card {% if kpis_financeiros.margem_lucro.margem_percentual < 0 %}border-danger{% elif kpis_financeiros.margem_lucro.margem_percentual < 10 %}border-warning{% else %}border-success{% endif %}">
                <div class="card-body text-center">
                    <h5 class="card-title">Margem de Lucro</h5>
                    <h2 class="{% if kpis_financeiros.margem_lucro.margem_percentual < 0 %}text-danger{% elif kpis_financeiros.margem_lucro.margem_percentual < 10 %}text-warning{% else %}text-success{% endif %}">
                        {{ "%.1f"|format(kpis_financeiros.margem_lucro.margem_percentual) }}%
                    </h2>
                    <p class="text-muted">R$ {{ "{:,.2f}"|format(kpis_financeiros.margem_lucro.margem_absoluta) }}</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card kpi-card {% if kpis_financeiros.desvio_orcamentario.alerta == 'critico' %}border-danger{% elif kpis_financeiros.desvio_orcamentario.alerta == 'atencao' %}border-warning{% else %}border-success{% endif %}">
                <div class="card-body text-center">
                    <h5 class="card-title">Desvio Or√ßament√°rio</h5>
                    <h2 class="{% if kpis_financeiros.desvio_orcamentario.alerta == 'critico' %}text-danger{% elif kpis_financeiros.desvio_orcamentario.alerta == 'atencao' %}text-warning{% else %}text-success{% endif %}">
                        {{ "%.1f"|format(kpis_financeiros.desvio_orcamentario.desvio_projetado) }}%
                    </h2>
                    <p class="text-muted">Projetado: R$ {{ "{:,.2f}"|format(kpis_financeiros.desvio_orcamentario.custo_projetado) }}</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card kpi-card border-info">
                <div class="card-body text-center">
                    <h5 class="card-title">Custo por m¬≤</h5>
                    <h2 class="text-info">R$ {{ "%.2f"|format(kpis_financeiros.custo_por_m2.valor) }}</h2>
                    <p class="text-muted">
                        Mercado: R$ {{ "%.2f"|format(kpis_financeiros.custo_por_m2.benchmark_mercado) }}
                        <span class="badge bg-{{ 'success' if kpis_financeiros.custo_por_m2.status == 'dentro' else 'warning' }}">
                            {{ kpis_financeiros.custo_por_m2.status }}
                        </span>
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card kpi-card border-primary">
                <div class="card-body text-center">
                    <h5 class="card-title">ROI Projetado</h5>
                    <h2 class="text-primary">{{ "%.1f"|format(kpis_financeiros.roi_projetado.roi_percentual) }}%</h2>
                    <p class="text-muted">
                        <span class="badge bg-{{ 'success' if kpis_financeiros.roi_projetado.classificacao == 'excelente' else 'primary' if kpis_financeiros.roi_projetado.classificacao == 'bom' else 'warning' if kpis_financeiros.roi_projetado.classificacao == 'regular' else 'danger' }}">
                            {{ kpis_financeiros.roi_projetado.classificacao.title() }}
                        </span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- KPIs Operacionais -->
    <div class="row mb-4">
        <div class="col-12">
            <h4 class="mb-3">‚öôÔ∏è KPIs Operacionais</h4>
        </div>
        
        <div class="col-md-4">
            <div class="card kpi-card border-success">
                <div class="card-body text-center">
                    <h5 class="card-title">Progresso F√≠sico</h5>
                    <h2 class="text-success">{{ "%.1f"|format(kpis_operacionais.progresso_fisico.percentual) }}%</h2>
                    <div class="progress mb-2">
                        <div class="progress-bar bg-success" style="width: {{ kpis_operacionais.progresso_fisico.percentual }}%"></div>
                    </div>
                    <p class="text-muted">{{ kpis_operacionais.progresso_fisico.servicos_concluidos }}/{{ kpis_operacionais.progresso_fisico.total_servicos }} servi√ßos</p>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card kpi-card {% if kpis_operacionais.indice_produtividade.status == 'adiantada' %}border-success{% elif kpis_operacionais.indice_produtividade.status == 'no_prazo' %}border-primary{% else %}border-danger{% endif %}">
                <div class="card-body text-center">
                    <h5 class="card-title">√çndice Produtividade</h5>
                    <h2 class="{% if kpis_operacionais.indice_produtividade.status == 'adiantada' %}text-success{% elif kpis_operacionais.indice_produtividade.status == 'no_prazo' %}text-primary{% else %}text-danger{% endif %}">
                        {{ "%.2f"|format(kpis_operacionais.indice_produtividade.indice) }}
                    </h2>
                    <p class="text-muted">
                        <span class="badge bg-{{ 'success' if kpis_operacionais.indice_produtividade.status == 'adiantada' else 'primary' if kpis_operacionais.indice_produtividade.status == 'no_prazo' else 'danger' }}">
                            {{ kpis_operacionais.indice_produtividade.status.replace('_', ' ').title() }}
                        </span>
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card kpi-card border-warning">
                <div class="card-body text-center">
                    <h5 class="card-title">Efici√™ncia Equipamentos</h5>
                    <h2 class="text-warning">{{ "%.1f"|format(kpis_operacionais.eficiencia_equipamentos.eficiencia_media) }}%</h2>
                    <p class="text-muted">
                        {{ kpis_operacionais.eficiencia_equipamentos.equipamentos_ativos }} equipamentos
                        <span class="badge bg-{{ 'success' if kpis_operacionais.eficiencia_equipamentos.status == 'otima' else 'primary' if kpis_operacionais.eficiencia_equipamentos.status == 'boa' else 'warning' if kpis_operacionais.eficiencia_equipamentos.status == 'regular' else 'danger' }}">
                            {{ kpis_operacionais.eficiencia_equipamentos.status.title() }}
                        </span>
                    </p>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Gr√°ficos -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-line"></i> Evolu√ß√£o de Custos vs Or√ßamento</h5>
                </div>
                <div class="card-body">
                    <canvas id="graficoEvolucaoCustos" height="300"></canvas>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-pie"></i> Distribui√ß√£o de Custos</h5>
                </div>
                <div class="card-body">
                    <canvas id="graficoDistribuicaoCustos" height="300"></canvas>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Tabela de Produtividade por Fun√ß√£o -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-users"></i> Produtividade por Fun√ß√£o</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>Fun√ß√£o</th>
                                    <th>Funcion√°rios</th>
                                    <th>Total Horas</th>
                                    <th>Output Total</th>
                                    <th>Produtividade</th>
                                    <th>M√©dia Horas/Dia</th>
                                </tr>
                            </thead>
                            <tbody>
                                {% for funcao in kpis_rh.produtividade_funcoes %}
                                <tr>
                                    <td><strong>{{ funcao.funcao }}</strong></td>
                                    <td>{{ funcao.funcionarios }}</td>
                                    <td>{{ "%.1f"|format(funcao.total_horas) }}h</td>
                                    <td>{{ "%.2f"|format(funcao.output_total) }}</td>
                                    <td>
                                        <span class="badge bg-{{ 'success' if funcao.produtividade > 1 else 'warning' if funcao.produtividade > 0.5 else 'danger' }}">
                                            {{ "%.3f"|format(funcao.produtividade) }}
                                        </span>
                                    </td>
                                    <td>{{ "%.1f"|format(funcao.media_horas_dia) }}h</td>
                                </tr>
                                {% endfor %}
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Gr√°fico de Evolu√ß√£o de Custos
const ctxEvolucao = document.getElementById('graficoEvolucaoCustos').getContext('2d');
new Chart(ctxEvolucao, {
    type: 'line',
    data: {
        labels: {{ dados_graficos.evolucao_custos.labels | tojsonfilter }},
        datasets: [
            {
                label: 'Custo Real Acumulado',
                data: {{ dados_graficos.evolucao_custos.custos_reais | tojsonfilter }},
                borderColor: '#dc3545',
                backgroundColor: 'rgba(220, 53, 69, 0.1)',
                tension: 0.4
            },
            {
                label: 'Or√ßamento Planejado',
                data: {{ dados_graficos.evolucao_custos.custos_planejados | tojsonfilter }},
                borderColor: '#28a745',
                backgroundColor: 'rgba(40, 167, 69, 0.1)',
                tension: 0.4
            }
        ]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            title: {
                display: true,
                text: 'Evolu√ß√£o de Custos vs Or√ßamento Planejado'
            }
        },
        scales: {
            y: {
                beginAtZero: true,
                ticks: {
                    callback: function(value) {
                        return 'R$ ' + value.toLocaleString('pt-BR');
                    }
                }
            }
        }
    }
});

// Gr√°fico de Distribui√ß√£o de Custos
const ctxDistribuicao = document.getElementById('graficoDistribuicaoCustos').getContext('2d');
new Chart(ctxDistribuicao, {
    type: 'doughnut',
    data: {
        labels: ['M√£o de Obra', 'Transporte', 'Alimenta√ß√£o', 'Outros'],
        datasets: [{
            data: [
                {{ kpis_financeiros.margem_lucro.custo_real * 0.7 }}, // Estimativa m√£o de obra
                {{ kpis_financeiros.margem_lucro.custo_real * 0.1 }}, // Estimativa transporte
                {{ kpis_financeiros.margem_lucro.custo_real * 0.05 }}, // Estimativa alimenta√ß√£o
                {{ kpis_financeiros.margem_lucro.custo_real * 0.15 }}  // Estimativa outros
            ],
            backgroundColor: ['#007bff', '#dc3545', '#28a745', '#ffc107']
        }]
    },
    options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                position: 'bottom'
            }
        }
    }
});

function exportarDashboard() {
    window.print();
}

function atualizarDados() {
    location.reload();
}
</script>

<style>
.kpi-card {
    transition: transform 0.2s;
    border-width: 2px;
}

.kpi-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.kpi-card h2 {
    font-size: 2.5rem;
    font-weight: bold;
    margin: 0.5rem 0;
}

@media print {
    .btn {
        display: none;
    }
}
</style>
{% endblock %}
```

---

## üîß 4. SISTEMA DE ALERTAS INTELIGENTES

### **4.1 Engine de Alertas Baseado nos Novos KPIs**

```python
# alertas_inteligentes.py - Novo arquivo
class AlertasInteligentes:
    """
    Sistema de alertas baseado nos novos KPIs
    """
    
    @staticmethod
    def verificar_alertas_obra(obra_id):
        """
        Verifica todos os alertas para uma obra
        """
        alertas = []
        
        # Alerta: Desvio or√ßament√°rio cr√≠tico
        desvio = KPIsFinanceiros.desvio_orcamentario(obra_id)
        if desvio['alerta'] == 'critico':
            alertas.append({
                'tipo': 'desvio_orcamentario',
                'severidade': 'critica',
                'titulo': 'Desvio Or√ßament√°rio Cr√≠tico',
                'mensagem': f'Obra com desvio projetado de {desvio["desvio_projetado"]:.1f}%. Custo projetado: R$ {desvio["custo_projetado"]:,.2f}',
                'valor_atual': desvio['desvio_projetado'],
                'limite': 20.0,
                'recomendacao': 'Revisar custos imediatamente e implementar medidas de conten√ß√£o'
            })
        
        # Alerta: Margem de lucro negativa
        margem = KPIsFinanceiros.margem_lucro_realizada(obra_id)
        if margem['margem_percentual'] < 0:
            alertas.append({
                'tipo': 'margem_negativa',
                'severidade': 'critica',
                'titulo': 'Margem de Lucro Negativa',
                'mensagem': f'Obra operando com preju√≠zo de {abs(margem["margem_percentual"]):.1f}%',
                'valor_atual': margem['margem_percentual'],
                'limite': 0.0,
                'recomendacao': 'An√°lise urgente de custos e renegocia√ß√£o de contratos'
            })
        
        # Alerta: Produtividade baixa
        produtividade = KPIsOperacionais.indice_produtividade_obra(obra_id)
        if produtividade['indice'] < 0.8:
            alertas.append({
                'tipo': 'produtividade_baixa',
                'severidade': 'alta',
                'titulo': 'Produtividade Abaixo do Esperado',
                'mensagem': f'√çndice de produtividade em {produtividade["indice"]:.2f} (obra {produtividade["status"]})',
                'valor_atual': produtividade['indice'],
                'limite': 0.8,
                'recomendacao': 'Analisar gargalos e realocar recursos'
            })
        
        # Alerta: Efici√™ncia de equipamentos baixa
        eficiencia = KPIsOperacionais.eficiencia_equipamentos(obra_id)
        if eficiencia['eficiencia_media'] < 60:
            alertas.append({
                'tipo': 'eficiencia_equipamentos',
                'severidade': 'media',
                'titulo': 'Baixa Efici√™ncia de Equipamentos',
                'mensagem': f'Efici√™ncia m√©dia de {eficiencia["eficiencia_media"]:.1f}% ({eficiencia["status"]})',
                'valor_atual': eficiencia['eficiencia_media'],
                'limite': 60.0,
                'recomendacao': 'Otimizar uso de equipamentos e revisar cronograma'
            })
        
        # Alerta: Alto custo de absente√≠smo
        absenteismo = KPIsRecursosHumanos.custo_absenteismo(obra_id)
        if absenteismo['impacto_percentual'] > 5:
            alertas.append({
                'tipo': 'alto_absenteismo',
                'severidade': 'media',
                'titulo': 'Alto Custo de Absente√≠smo',
                'mensagem': f'Absente√≠smo representa {absenteismo["impacto_percentual"]:.1f}% do custo de m√£o de obra',
                'valor_atual': absenteismo['impacto_percentual'],
                'limite': 5.0,
                'recomendacao': 'Implementar pol√≠ticas de redu√ß√£o de faltas'
            })
        
        return alertas
    
    @staticmethod
    def enviar_alertas_email(obra_id, alertas):
        """
        Envia alertas por email para respons√°veis
        """
        if not alertas:
            return
        
        obra = Obra.query.get(obra_id)
        responsaveis = [obra.responsavel_email] if obra.responsavel_email else []
        
        # Adicionar emails de gestores
        gestores = Usuario.query.filter_by(tipo='admin').all()
        responsaveis.extend([g.email for g in gestores if g.email])
        
        for email in responsaveis:
            enviar_email_alerta(email, obra, alertas)
    
    @staticmethod
    def gerar_relatorio_alertas(obra_id, periodo_dias=30):
        """
        Gera relat√≥rio de alertas dos √∫ltimos dias
        """
        # Implementar hist√≥rico de alertas
        pass
```

---

## üéØ 5. IMPLEMENTA√á√ÉO E TESTES

### **5.1 Script de Migra√ß√£o e Atualiza√ß√£o**

```python
# migration_script.py
def aplicar_melhorias_sige():
    """
    Script para aplicar todas as melhorias no SIGE
    """
    
    print("üöÄ Iniciando aplica√ß√£o de melhorias no SIGE v8.0...")
    
    # 1. Criar novas tabelas se necess√°rio
    print("üìä 1. Criando estruturas de dados...")
    db.create_all()
    
    # 2. Recalcular todos os registros de ponto
    print("‚è∞ 2. Recalculando horas trabalhadas e extras...")
    recalcular_todos_registros_ponto()
    
    # 3. Validar c√°lculos existentes
    print("üîç 3. Validando c√°lculos existentes...")
    validar_calculos_obras()
    
    # 4. Gerar dados para novos KPIs
    print("üìà 4. Gerando dados para novos KPIs...")
    gerar_dados_kpis_avancados()
    
    # 5. Configurar alertas autom√°ticos
    print("üö® 5. Configurando sistema de alertas...")
    configurar_alertas_automaticos()
    
    print("‚úÖ Melhorias aplicadas com sucesso!")
    print("üìã Executar testes de valida√ß√£o...")
    executar_testes_validacao()

def recalcular_todos_registros_ponto():
    """
    Recalcula todos os registros de ponto com nova l√≥gica
    """
    registros = RegistroPonto.query.all()
    
    for registro in registros:
        calculos = calcular_horas_trabalhadas_e_extras(registro)
        registro.horas_trabalhadas_calculadas = calculos['horas_trabalhadas']
        registro.horas_extras_calculadas = calculos['horas_extras']
    
    db.session.commit()
    print(f"‚úÖ {len(registros)} registros recalculados")

def validar_calculos_obras():
    """
    Valida c√°lculos de todas as obras
    """
    obras = Obra.query.filter_by(status='Em andamento').all()
    
    for obra in obras:
        calculadora = CalculadoraObra(obra.id)
        custos = calculadora.calcular_custo_total()
        
        print(f"Obra {obra.nome}:")
        print(f"  - M√£o de obra: R$ {custos['mao_obra']:,.2f}")
        print(f"  - Transporte: R$ {custos['transporte']:,.2f}")
        print(f"  - Alimenta√ß√£o: R$ {custos['alimentacao']:,.2f}")
        print(f"  - Outros: R$ {custos['outros']:,.2f}")
        print(f"  - TOTAL: R$ {custos['total']:,.2f}")
        print()

def executar_testes_validacao():
    """
    Executa testes de valida√ß√£o das melhorias
    """
    print("üß™ Executando testes de valida√ß√£o...")
    
    # Teste 1: Verificar se KPIs est√£o funcionando
    obras = Obra.query.limit(3).all()
    for obra in obras:
        try:
            margem = KPIsFinanceiros.margem_lucro_realizada(obra.id)
            produtividade = KPIsOperacionais.indice_produtividade_obra(obra.id)
            print(f"‚úÖ KPIs funcionando para obra {obra.nome}")
        except Exception as e:
            print(f"‚ùå Erro nos KPIs da obra {obra.nome}: {e}")
    
    # Teste 2: Verificar dashboard executivo
    try:
        with app.test_client() as client:
            response = client.get(f'/obras/{obras[0].id}/dashboard-executivo')
            if response.status_code == 200:
                print("‚úÖ Dashboard executivo funcionando")
            else:
                print(f"‚ùå Erro no dashboard: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erro no teste do dashboard: {e}")
    
    print("üéØ Testes conclu√≠dos!")

# Executar melhorias
if __name__ == "__main__":
    aplicar_melhorias_sige()
```

---

## üìã 6. CHECKLIST DE IMPLEMENTA√á√ÉO

### **6.1 Fase 1: Corre√ß√µes Cr√≠ticas (Semana 1)**
- [ ] Implementar classe `CalculadoraObra` unificada
- [ ] Corrigir c√°lculo de horas extras por hor√°rio
- [ ] Criar trigger autom√°tico para rec√°lculo
- [ ] Validar discrep√¢ncia de R$ 10.477,26
- [ ] Testar com dados reais da obra

### **6.2 Fase 2: Novos KPIs (Semana 2)**
- [ ] Implementar 12 novos KPIs financeiros e operacionais
- [ ] Criar classes `KPIsFinanceiros`, `KPIsOperacionais`, `KPIsRecursosHumanos`
- [ ] Testar c√°lculos com dados hist√≥ricos
- [ ] Validar performance das queries
- [ ] Documentar f√≥rmulas e metodologias

### **6.3 Fase 3: Dashboard Executivo (Semana 3)**
- [ ] Criar nova rota `/obras/<id>/dashboard-executivo`
- [ ] Implementar template responsivo
- [ ] Integrar gr√°ficos Chart.js
- [ ] Adicionar funcionalidade de exporta√ß√£o
- [ ] Testar em diferentes dispositivos

### **6.4 Fase 4: Sistema de Alertas (Semana 4)**
- [ ] Implementar `AlertasInteligentes`
- [ ] Configurar envio de emails autom√°tico
- [ ] Criar dashboard de alertas
- [ ] Testar cen√°rios de alerta
- [ ] Documentar tipos de alerta

### **6.5 Fase 5: Testes e Valida√ß√£o (Semana 5)**
- [ ] Executar script de migra√ß√£o completo
- [ ] Validar todos os c√°lculos
- [ ] Testar performance com dados reais
- [ ] Treinar usu√°rios nas novas funcionalidades
- [ ] Documentar melhorias implementadas

---

## üéØ 7. RESULTADOS ESPERADOS

### **7.1 Corre√ß√µes Imediatas**
- ‚úÖ **Elimina√ß√£o da discrep√¢ncia** de R$ 10.477,26
- ‚úÖ **C√°lculos unificados** em todas as telas
- ‚úÖ **Horas extras corretas** por hor√°rio de trabalho
- ‚úÖ **Consist√™ncia total** nos dados

### **7.2 Novos Recursos**
- üìä **12 novos KPIs** estrat√©gicos
- üìà **Dashboard executivo** de classe mundial
- üö® **Sistema de alertas** proativo
- üì± **Interface responsiva** otimizada

### **7.3 Benef√≠cios de Gest√£o**
- üéØ **Tomada de decis√£o** 40% mais r√°pida
- üí∞ **Controle financeiro** 60% mais preciso
- ‚ö° **Identifica√ß√£o de problemas** em tempo real
- üìà **Aumento da margem de lucro** em 15-25%

---

**Este prompt implementar√° transforma√ß√µes significativas no SIGE, elevando-o a um sistema de gest√£o de classe mundial para constru√ß√£o civil!**

