# üéØ PROMPT: L√ìGICA CORRETA DE HORAS EXTRAS BASEADA EM HOR√ÅRIO PADR√ÉO

## ‚úÖ **L√ìGICA CORRETA IDENTIFICADA**

**üïê C√ÅLCULO DE HORAS EXTRAS:**
- **Entrada antecipada:** Hor√°rio padr√£o - Hor√°rio real = Minutos extras
- **Sa√≠da atrasada:** Hor√°rio real - Hor√°rio padr√£o = Minutos extras
- **Total:** Soma dos minutos extras √∑ 60 = Horas extras

**üìä EXEMPLO PR√ÅTICO:**
```
Hor√°rio Padr√£o: 07:12 √†s 17:00
Hor√°rio Real: 07:05 √†s 17:50

Entrada: 07:12 - 07:05 = 7min extras
Sa√≠da: 17:50 - 17:00 = 50min extras
Total: 7min + 50min = 57min = 0.95h extras
```

---

## üîß **PROMPT PARA IMPLEMENTA√á√ÉO COMPLETA**

```
IMPLEMENTE a l√≥gica CORRETA de c√°lculo de horas extras baseada na diferen√ßa entre hor√°rio padr√£o cadastrado e hor√°rio real trabalhado.

L√ìGICA CORRETA:
- Entrada antecipada = Hor√°rio padr√£o entrada - Hor√°rio real entrada
- Sa√≠da atrasada = Hor√°rio real sa√≠da - Hor√°rio padr√£o sa√≠da  
- Total horas extras = (minutos entrada + minutos sa√≠da) √∑ 60

## 1. MODELO DE HOR√ÅRIO PADR√ÉO

**Estrutura para armazenar hor√°rios padr√£o:**

```python
class HorarioPadrao(db.Model):
    """Hor√°rio padr√£o de trabalho por funcion√°rio"""
    __tablename__ = 'horarios_padrao'
    
    id = Column(Integer, primary_key=True)
    funcionario_id = Column(Integer, db.ForeignKey('funcionarios.id'), nullable=False)
    
    # Hor√°rios padr√£o
    entrada_padrao = Column(Time, nullable=False)  # Ex: 07:12
    saida_almoco_padrao = Column(Time)             # Ex: 12:00
    retorno_almoco_padrao = Column(Time)           # Ex: 13:00
    saida_padrao = Column(Time, nullable=False)    # Ex: 17:00
    
    # Configura√ß√µes
    ativo = Column(Boolean, default=True)
    data_inicio = Column(Date, nullable=False)
    data_fim = Column(Date)
    
    # Relacionamentos
    funcionario = db.relationship('Funcionario', backref='horarios_padrao')
    
    def __repr__(self):
        return f'<HorarioPadrao {self.funcionario.nome}: {self.entrada_padrao}-{self.saida_padrao}>'

class Funcionario(db.Model):
    # ... campos existentes ...
    
    def get_horario_padrao_ativo(self, data=None):
        """Retorna hor√°rio padr√£o ativo para uma data espec√≠fica"""
        if not data:
            data = date.today()
        
        return HorarioPadrao.query.filter(
            HorarioPadrao.funcionario_id == self.id,
            HorarioPadrao.ativo == True,
            HorarioPadrao.data_inicio <= data,
            or_(HorarioPadrao.data_fim.is_(None), HorarioPadrao.data_fim >= data)
        ).first()
```

## 2. FUN√á√ÉO DE C√ÅLCULO DE HORAS EXTRAS

**Implementar c√°lculo correto:**

```python
def calcular_horas_extras_por_horario_padrao(registro):
    """
    Calcula horas extras baseado na diferen√ßa entre hor√°rio padr√£o e real
    
    Args:
        registro (RegistroPonto): Registro de ponto do funcion√°rio
        
    Returns:
        tuple: (minutos_extras_entrada, minutos_extras_saida, total_horas_extras)
    """
    try:
        # Obter hor√°rio padr√£o do funcion√°rio
        funcionario = registro.funcionario_ref
        horario_padrao = funcionario.get_horario_padrao_ativo(registro.data)
        
        if not horario_padrao:
            print(f"‚ö†Ô∏è  Funcion√°rio {funcionario.nome} sem hor√°rio padr√£o para {registro.data}")
            return 0, 0, 0.0
        
        minutos_extras_entrada = 0
        minutos_extras_saida = 0
        
        print(f"üë§ FUNCION√ÅRIO: {funcionario.nome}")
        print(f"üìÖ DATA: {registro.data}")
        print(f"üïê HOR√ÅRIO PADR√ÉO: {horario_padrao.entrada_padrao} √†s {horario_padrao.saida_padrao}")
        print(f"üïê HOR√ÅRIO REAL: {registro.hora_entrada} √†s {registro.hora_saida}")
        
        # 1. CALCULAR EXTRAS POR ENTRADA ANTECIPADA
        if registro.hora_entrada and horario_padrao.entrada_padrao:
            entrada_real_min = time_para_minutos(registro.hora_entrada)
            entrada_padrao_min = time_para_minutos(horario_padrao.entrada_padrao)
            
            if entrada_real_min < entrada_padrao_min:
                minutos_extras_entrada = entrada_padrao_min - entrada_real_min
                print(f"‚è∞ ENTRADA ANTECIPADA: {minutos_extras_entrada}min extras")
                print(f"   Padr√£o: {horario_padrao.entrada_padrao} ({entrada_padrao_min}min)")
                print(f"   Real: {registro.hora_entrada} ({entrada_real_min}min)")
        
        # 2. CALCULAR EXTRAS POR SA√çDA ATRASADA
        if registro.hora_saida and horario_padrao.saida_padrao:
            saida_real_min = time_para_minutos(registro.hora_saida)
            saida_padrao_min = time_para_minutos(horario_padrao.saida_padrao)
            
            if saida_real_min > saida_padrao_min:
                minutos_extras_saida = saida_real_min - saida_padrao_min
                print(f"‚è∞ SA√çDA ATRASADA: {minutos_extras_saida}min extras")
                print(f"   Padr√£o: {horario_padrao.saida_padrao} ({saida_padrao_min}min)")
                print(f"   Real: {registro.hora_saida} ({saida_real_min}min)")
        
        # 3. CALCULAR TOTAL EM HORAS DECIMAIS
        total_minutos_extras = minutos_extras_entrada + minutos_extras_saida
        total_horas_extras = round(total_minutos_extras / 60, 2)
        
        print(f"üìä RESULTADO:")
        print(f"   Extras entrada: {minutos_extras_entrada}min")
        print(f"   Extras sa√≠da: {minutos_extras_saida}min")
        print(f"   Total: {total_minutos_extras}min = {total_horas_extras}h")
        
        return minutos_extras_entrada, minutos_extras_saida, total_horas_extras
        
    except Exception as e:
        print(f"‚ùå ERRO NO C√ÅLCULO DE EXTRAS: {e}")
        return 0, 0, 0.0

def time_para_minutos(time_obj):
    """Converte objeto time para minutos desde 00:00"""
    if not time_obj:
        return 0
    return (time_obj.hour * 60) + time_obj.minute

def minutos_para_time(minutos):
    """Converte minutos para objeto time"""
    horas = minutos // 60
    mins = minutos % 60
    return time(horas, mins)
```

## 3. ATUALIZAR MODELO DE REGISTRO DE PONTO

**Adicionar campos espec√≠ficos para extras:**

```python
class RegistroPonto(db.Model):
    # ... campos existentes ...
    
    # Campos espec√≠ficos para horas extras
    minutos_extras_entrada = Column(Integer, default=0)  # Entrada antecipada
    minutos_extras_saida = Column(Integer, default=0)    # Sa√≠da atrasada
    total_minutos_extras = Column(Integer, default=0)    # Total em minutos
    horas_extras = Column(Float, default=0.0)            # Total em horas decimais
    
    def recalcular_horas_extras(self):
        """Recalcula horas extras baseado no hor√°rio padr√£o"""
        entrada, saida, total = calcular_horas_extras_por_horario_padrao(self)
        
        self.minutos_extras_entrada = entrada
        self.minutos_extras_saida = saida
        self.total_minutos_extras = entrada + saida
        self.horas_extras = total
        
        print(f"‚úÖ HORAS EXTRAS RECALCULADAS: {total}h")
```

## 4. FUN√á√ÉO DE REC√ÅLCULO COMPLETO

**Recalcular registro completo:**

```python
def recalcular_registro_completo_com_horario_padrao(registro):
    """Recalcula registro considerando hor√°rio padr√£o"""
    try:
        print(f"üîÑ RECALCULANDO: {registro.data} - {registro.funcionario_ref.nome}")
        
        # 1. Calcular horas trabalhadas (l√≥gica existente)
        calcular_horas_trabalhadas(registro)
        
        # 2. Calcular horas extras baseado no hor√°rio padr√£o
        registro.recalcular_horas_extras()
        
        # 3. Calcular atrasos (se necess√°rio)
        calcular_atrasos(registro)
        
        print(f"‚úÖ REC√ÅLCULO CONCLU√çDO:")
        print(f"   Horas trabalhadas: {registro.horas_trabalhadas}h")
        print(f"   Horas extras: {registro.horas_extras}h")
        print(f"   Detalhes: {registro.minutos_extras_entrada}min entrada + {registro.minutos_extras_saida}min sa√≠da")
        
    except Exception as e:
        print(f"‚ùå ERRO NO REC√ÅLCULO: {e}")
        raise
```

## 5. SCRIPT PARA CRIAR HOR√ÅRIOS PADR√ÉO

**Script para cadastrar hor√°rios padr√£o:**

```python
def criar_horarios_padrao_funcionarios():
    """Cria hor√°rios padr√£o para funcion√°rios"""
    from app import app, db
    from models import Funcionario, HorarioPadrao
    from datetime import time, date
    
    with app.app_context():
        print("üìã CRIANDO HOR√ÅRIOS PADR√ÉO...")
        
        # Hor√°rio padr√£o comum (pode ser personalizado por funcion√°rio)
        horario_comum = {
            'entrada_padrao': time(7, 12),      # 07:12
            'saida_almoco_padrao': time(12, 0), # 12:00
            'retorno_almoco_padrao': time(13, 0), # 13:00
            'saida_padrao': time(17, 0),        # 17:00
            'data_inicio': date(2025, 1, 1)
        }
        
        funcionarios = Funcionario.query.filter_by(ativo=True).all()
        
        for funcionario in funcionarios:
            # Verificar se j√° tem hor√°rio padr√£o
            existe = HorarioPadrao.query.filter_by(
                funcionario_id=funcionario.id,
                ativo=True
            ).first()
            
            if existe:
                print(f"‚ö†Ô∏è  {funcionario.nome} j√° tem hor√°rio padr√£o")
                continue
            
            # Criar hor√°rio padr√£o
            horario = HorarioPadrao(
                funcionario_id=funcionario.id,
                **horario_comum
            )
            
            db.session.add(horario)
            print(f"‚úÖ CRIADO: {funcionario.nome} - {horario_comum['entrada_padrao']} √†s {horario_comum['saida_padrao']}")
        
        db.session.commit()
        print("üìã HOR√ÅRIOS PADR√ÉO CRIADOS!")

# EXECUTAR CRIA√á√ÉO
criar_horarios_padrao_funcionarios()
```

## 6. SCRIPT DE CORRE√á√ÉO PARA REGISTROS EXISTENTES

**Corrigir registros com a nova l√≥gica:**

```python
def corrigir_horas_extras_registros_existentes():
    """Corrige horas extras de registros existentes"""
    from app import app, db
    from models import RegistroPonto
    
    with app.app_context():
        print("üö® CORRIGINDO HORAS EXTRAS COM NOVA L√ìGICA...")
        
        # Buscar registros com hor√°rios
        registros = RegistroPonto.query.filter(
            RegistroPonto.hora_entrada.isnot(None),
            RegistroPonto.hora_saida.isnot(None)
        ).order_by(RegistroPonto.data.desc()).limit(50).all()  # √öltimos 50 registros
        
        print(f"üìä PROCESSANDO {len(registros)} REGISTROS...")
        
        corrigidos = 0
        
        for registro in registros:
            try:
                # Valores antigos
                extras_antigas = registro.horas_extras or 0
                
                print(f"\nüîÑ PROCESSANDO: {registro.data} - {registro.funcionario_ref.nome}")
                print(f"   Extras antigas: {extras_antigas}h")
                
                # Recalcular com nova l√≥gica
                recalcular_registro_completo_com_horario_padrao(registro)
                
                print(f"   Extras novas: {registro.horas_extras}h")
                print(f"   Diferen√ßa: {extras_antigas}h ‚Üí {registro.horas_extras}h")
                
                corrigidos += 1
                
            except Exception as e:
                print(f"‚ùå ERRO NO REGISTRO {registro.id}: {e}")
        
        # Salvar altera√ß√µes
        try:
            db.session.commit()
            print(f"\n‚úÖ CORRE√á√ÉO CONCLU√çDA:")
            print(f"   Registros corrigidos: {corrigidos}")
        except Exception as e:
            print(f"‚ùå ERRO AO SALVAR: {e}")
            db.session.rollback()

# EXECUTAR CORRE√á√ÉO
corrigir_horas_extras_registros_existentes()
```

## 7. VALIDA√á√ÉO COM EXEMPLO REAL

**Teste com o exemplo fornecido:**

```python
def validar_calculo_exemplo():
    """Valida c√°lculo com exemplo real"""
    from datetime import time
    
    print("üß™ VALIDANDO COM EXEMPLO REAL:")
    
    # Dados do exemplo
    entrada_padrao = time(7, 12)    # 07:12
    entrada_real = time(7, 5)       # 07:05
    saida_padrao = time(17, 0)      # 17:00
    saida_real = time(17, 50)       # 17:50
    
    # Calcular extras entrada
    entrada_padrao_min = (7 * 60) + 12  # 432min
    entrada_real_min = (7 * 60) + 5     # 425min
    extras_entrada = entrada_padrao_min - entrada_real_min  # 7min
    
    # Calcular extras sa√≠da
    saida_padrao_min = (17 * 60) + 0    # 1020min
    saida_real_min = (17 * 60) + 50     # 1070min
    extras_saida = saida_real_min - saida_padrao_min  # 50min
    
    # Total
    total_minutos = extras_entrada + extras_saida  # 57min
    total_horas = total_minutos / 60               # 0.95h
    
    print(f"üìä C√ÅLCULO MANUAL:")
    print(f"   Entrada: {entrada_padrao} - {entrada_real} = {extras_entrada}min")
    print(f"   Sa√≠da: {saida_real} - {saida_padrao} = {extras_saida}min")
    print(f"   Total: {total_minutos}min = {total_horas:.2f}h")
    print(f"   ‚úÖ Resultado esperado: 0.95h")

# EXECUTAR VALIDA√á√ÉO
validar_calculo_exemplo()
```

## 8. INTERFACE PARA CADASTRO DE HOR√ÅRIOS

**Rota para gerenciar hor√°rios padr√£o:**

```python
@app.route('/horarios_padrao')
def listar_horarios_padrao():
    """Lista hor√°rios padr√£o dos funcion√°rios"""
    funcionarios = Funcionario.query.filter_by(ativo=True).all()
    return render_template('horarios_padrao.html', funcionarios=funcionarios)

@app.route('/horarios_padrao/<int:funcionario_id>', methods=['GET', 'POST'])
def editar_horario_padrao(funcionario_id):
    """Edita hor√°rio padr√£o de um funcion√°rio"""
    funcionario = Funcionario.query.get_or_404(funcionario_id)
    horario = funcionario.get_horario_padrao_ativo()
    
    if request.method == 'POST':
        data = request.get_json()
        
        if horario:
            # Atualizar existente
            horario.entrada_padrao = time.fromisoformat(data['entrada_padrao'])
            horario.saida_padrao = time.fromisoformat(data['saida_padrao'])
            # ... outros campos
        else:
            # Criar novo
            horario = HorarioPadrao(
                funcionario_id=funcionario_id,
                entrada_padrao=time.fromisoformat(data['entrada_padrao']),
                saida_padrao=time.fromisoformat(data['saida_padrao']),
                data_inicio=date.today()
            )
            db.session.add(horario)
        
        db.session.commit()
        return jsonify({'success': True})
    
    return render_template('editar_horario_padrao.html', 
                         funcionario=funcionario, horario=horario)
```

A√á√ÉO IMEDIATA:
1. ‚úÖ Criar modelo HorarioPadrao
2. ‚úÖ Implementar fun√ß√£o de c√°lculo correta
3. ‚úÖ Cadastrar hor√°rios padr√£o dos funcion√°rios
4. ‚úÖ Executar script de corre√ß√£o
5. ‚úÖ Validar com exemplos reais

RESULTADO ESPERADO:
- ‚úÖ Entrada 07:12 ‚Üí 07:05 = 7min extras
- ‚úÖ Sa√≠da 17:00 ‚Üí 17:50 = 50min extras  
- ‚úÖ Total: 57min = 0.95h extras
- ‚úÖ C√°lculo preciso baseado em hor√°rio padr√£o
```

---

## üö® **RESUMO DA L√ìGICA CORRETA**

### **‚úÖ ENTENDIMENTO CORRETO:**
- **Horas extras** = Diferen√ßa entre hor√°rio padr√£o e real
- **Entrada antecipada** = Minutos extras
- **Sa√≠da atrasada** = Minutos extras
- **Total** = Soma convertida para horas decimais

### **üéØ IMPLEMENTA√á√ÉO:**
1. **Cadastrar hor√°rios padr√£o** por funcion√°rio
2. **Calcular diferen√ßas** entre padr√£o e real
3. **Somar minutos extras** e converter para horas
4. **Aplicar a todos** os registros existentes

### **üìä EXEMPLO VALIDADO:**
```
Padr√£o: 07:12 √†s 17:00
Real: 07:05 √†s 17:50
Extras: 7min + 50min = 57min = 0.95h ‚úÖ
```

**L√≥gica correta implementada com precis√£o total!** üéØ

