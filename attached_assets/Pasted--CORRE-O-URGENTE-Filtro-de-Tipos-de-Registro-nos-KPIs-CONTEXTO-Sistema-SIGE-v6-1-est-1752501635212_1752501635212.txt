# üîß CORRE√á√ÉO URGENTE: Filtro de Tipos de Registro nos KPIs

## üìã CONTEXTO
Sistema SIGE v6.1 est√° calculando KPIs incorretamente porque conta **todos os registros** em vez de apenas **registros programados para trabalho**.

## üö® PROBLEMA IDENTIFICADO
```python
# ATUAL (INCORRETO):
dias_com_lancamento = 30  # Conta TODOS os registros
# Inclui: domingo_nao_trabalhado, sabado_nao_trabalhado

# CORRETO:
dias_com_lancamento = 22  # Conta APENAS registros programados
# Exclui: domingo_nao_trabalhado, sabado_nao_trabalhado
```

## üéØ OBJETIVO
Corrigir a fun√ß√£o `calcular_kpis_funcionario_v3` para filtrar corretamente os tipos de registro.

---

## üîç LOCALIZAR E CORRIGIR

### **1. Encontrar a fun√ß√£o:**
Procure por `def calcular_kpis_funcionario_v3` no arquivo principal (provavelmente `main.py` ou `kpis_engine_v3.py`)

### **2. Localizar esta linha:**
```python
# Linha atual (INCORRETA):
dias_com_lancamento = len(set(r.data for r in registros))
```

### **3. Substituir por:**
```python
# CORRE√á√ÉO: Filtrar apenas tipos programados
tipos_programados = [
    'trabalho_normal',
    'sabado_horas_extras', 
    'domingo_horas_extras',
    'feriado_trabalhado',
    'meio_periodo',
    'falta',
    'falta_justificada',
    'atraso',
    'saida_antecipada'
]

# Filtrar registros programados
registros_programados = [r for r in registros if r.tipo_registro in tipos_programados]
dias_com_lancamento = len(set(r.data for r in registros_programados))
```

---

## üìù C√ìDIGO COMPLETO PARA SUBSTITUI√á√ÉO

Substitua a fun√ß√£o `calcular_kpis_funcionario_v3` por esta vers√£o corrigida:

```python
def calcular_kpis_funcionario_v3(funcionario_id, data_inicio=None, data_fim=None):
    """
    Engine de KPIs v3.1 - CORRIGIDO para filtrar tipos de registro
    """
    try:
        # Buscar funcion√°rio
        funcionario = Funcionario.query.get(funcionario_id)
        if not funcionario:
            return None
        
        # Definir per√≠odo padr√£o se n√£o fornecido
        if not data_inicio or not data_fim:
            hoje = date.today()
            data_inicio = date(hoje.year, hoje.month, 1)
            data_fim = hoje
        
        # Buscar registros do per√≠odo
        registros = RegistroPonto.query.filter(
            RegistroPonto.funcionario_id == funcionario_id,
            RegistroPonto.data >= data_inicio,
            RegistroPonto.data <= data_fim
        ).all()
        
        # CORRE√á√ÉO: Definir tipos que contam como dias programados
        tipos_programados = [
            'trabalho_normal',
            'sabado_horas_extras', 
            'domingo_horas_extras',
            'feriado_trabalhado',
            'meio_periodo',
            'falta',
            'falta_justificada',
            'atraso',
            'saida_antecipada'
        ]
        
        # CORRE√á√ÉO: Filtrar apenas registros programados
        registros_programados = [r for r in registros if r.tipo_registro in tipos_programados]
        dias_com_lancamento = len(set(r.data for r in registros_programados))
        
        # Calcular horas trabalhadas (excluir faltas)
        tipos_com_horas = [
            'trabalho_normal', 'sabado_horas_extras', 'domingo_horas_extras',
            'feriado_trabalhado', 'meio_periodo', 'atraso', 'saida_antecipada'
        ]
        
        horas_trabalhadas = 0
        horas_extras = 0
        atrasos_total = 0
        
        for registro in registros_programados:
            if registro.tipo_registro in tipos_com_horas:
                horas_trabalhadas += registro.horas_trabalhadas or 0
                
                # Somar horas extras
                if registro.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
                    horas_extras += registro.horas_trabalhadas or 0
                
                # Somar atrasos
                if hasattr(registro, 'total_atraso_horas'):
                    atrasos_total += registro.total_atraso_horas or 0
        
        # Contar faltas
        faltas_nao_justificadas = len([r for r in registros_programados if r.tipo_registro == 'falta'])
        faltas_justificadas = len([r for r in registros_programados if r.tipo_registro == 'falta_justificada'])
        
        # CORRE√á√ÉO: Calcular KPIs baseados em dias programados
        if dias_com_lancamento > 0:
            horas_esperadas = dias_com_lancamento * 8
            produtividade = (horas_trabalhadas / horas_esperadas) * 100
            absenteismo = (faltas_nao_justificadas / dias_com_lancamento) * 100
            media_diaria = horas_trabalhadas / dias_com_lancamento
        else:
            horas_esperadas = 0
            produtividade = 0
            absenteismo = 0
            media_diaria = 0
        
        # Calcular horas perdidas
        horas_perdidas = (faltas_nao_justificadas * 8) + atrasos_total
        
        # Calcular custos (manter l√≥gica existente)
        salario_hora = funcionario.salario / 220 if funcionario.salario else 0
        custo_mao_obra = (horas_trabalhadas * salario_hora) + (horas_extras * salario_hora * 0.5)
        
        # Buscar outros custos
        outros_custos = 0
        # ... c√≥digo existente para outros custos ...
        
        # Calcular efici√™ncia
        if (horas_trabalhadas + horas_perdidas) > 0:
            eficiencia = (horas_trabalhadas / (horas_trabalhadas + horas_perdidas)) * 100
        else:
            eficiencia = 0
        
        return {
            # KPIs b√°sicos
            'horas_trabalhadas': round(horas_trabalhadas, 1),
            'horas_extras': round(horas_extras, 1),
            'faltas': faltas_nao_justificadas,
            'atrasos': round(atrasos_total, 2),
            
            # KPIs anal√≠ticos - CORRIGIDOS
            'produtividade': round(produtividade, 1),
            'absenteismo': round(absenteismo, 1),
            'media_diaria': round(media_diaria, 1),
            'faltas_justificadas': faltas_justificadas,
            
            # KPIs financeiros
            'custo_mao_obra': round(custo_mao_obra, 2),
            'custo_alimentacao': 0,  # Implementar se necess√°rio
            'outros_custos': round(outros_custos, 2),
            
            # KPIs resumo
            'custo_total': round(custo_mao_obra + outros_custos, 2),
            'eficiencia': round(eficiencia, 1),
            'horas_perdidas': round(horas_perdidas, 1),
            
            # Dados auxiliares
            'dias_com_lancamento': dias_com_lancamento,
            'horas_esperadas': horas_esperadas,
            'periodo': f"{data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}"
        }
        
    except Exception as e:
        print(f"Erro ao calcular KPIs: {str(e)}")
        return None
```

---

## üß™ TESTE IMEDIATO

Ap√≥s fazer a corre√ß√£o, execute este teste:

```python
# Cole este c√≥digo no console Python do Replit
from datetime import date
from app import app
from models import Funcionario
from kpis_engine_v3 import calcular_kpis_funcionario_v3

with app.app_context():
    # Buscar C√°ssio (ajuste o c√≥digo se necess√°rio)
    cassio = Funcionario.query.filter_by(nome__icontains='C√°ssio').first()
    
    if cassio:
        print(f"Testando: {cassio.nome}")
        
        # Calcular KPIs corrigidos
        kpis = calcular_kpis_funcionario_v3(
            cassio.id, 
            date(2025, 6, 1), 
            date(2025, 6, 30)
        )
        
        if kpis:
            print("\n=== RESULTADOS CORRIGIDOS ===")
            print(f"Dias com lan√ßamento: {kpis['dias_com_lancamento']}")
            print(f"Horas esperadas: {kpis['horas_esperadas']}h")
            print(f"Produtividade: {kpis['produtividade']}%")
            print(f"Absente√≠smo: {kpis['absenteismo']}%")
            print(f"M√©dia di√°ria: {kpis['media_diaria']}h")
        else:
            print("Erro ao calcular KPIs")
    else:
        print("Funcion√°rio C√°ssio n√£o encontrado")
```

---

## ‚úÖ RESULTADO ESPERADO

Ap√≥s a corre√ß√£o, C√°ssio deve apresentar:

```
=== RESULTADOS CORRIGIDOS ===
Dias com lan√ßamento: 22
Horas esperadas: 176.0h
Produtividade: 90.5%
Absente√≠smo: 4.5%
M√©dia di√°ria: 7.2h
```

## ‚ùå SE DER ERRO

1. **Erro de importa√ß√£o**: Verifique se os imports est√£o corretos
2. **Erro de atributo**: Ajuste os nomes dos campos conforme seu modelo
3. **Erro de fun√ß√£o**: Verifique se o nome da fun√ß√£o est√° correto

---

## üéØ RESUMO DA CORRE√á√ÉO

**ANTES:**
- Contava todos os 30 registros
- Produtividade: 66.4%
- Absente√≠smo: 3.3%

**DEPOIS:**
- Conta apenas 22 registros programados
- Produtividade: ~90.5%
- Absente√≠smo: ~4.5%

## üöÄ IMPLEMENTAR AGORA

1. **Localize** a fun√ß√£o `calcular_kpis_funcionario_v3`
2. **Substitua** pela vers√£o corrigida acima
3. **Execute** o teste
4. **Verifique** se os valores ficaram corretos
5. **Teste** na interface web

**Esta corre√ß√£o vai resolver definitivamente o problema dos KPIs!**

