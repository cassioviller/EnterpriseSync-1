2. ESTRUTURA DE ARQUIVOS ‚úÖ

Confirma√ß√£o completa:

Bash


# 1. Estrutura que deve existir:
templates/
‚îú‚îÄ‚îÄ equipe/
‚îÇ   ‚îî‚îÄ‚îÄ alocacao_simples.html  # ‚Üê Substituir completamente

# 2. Se n√£o existir, criar:
mkdir -p templates/equipe/

# 3. Rotas em equipe_views.py:
# Adicionar AP√ìS linha 325 (final do arquivo)


3. ORDEM DE IMPLEMENTA√á√ÉO ‚úÖ

Sequ√™ncia CORRETA e SEGURA:

Python


# PASSO 1: Adicionar rota de teste b√°sico (SEM AUTH)
@equipe_bp.route('/teste-sem-auth')
def teste_sem_auth():
    return "<h1>Rota funcionando!</h1>"

# PASSO 2: Testar rota b√°sica
# URL: http://localhost:5000/equipe/teste-sem-auth

# PASSO 3: Adicionar rotas de debug
@equipe_bp.route('/debug/test-direct')
def debug_test_direct():
    # c√≥digo fornecido...

# PASSO 4: Substituir template HTML
# PASSO 5: Testar com autentica√ß√£o
# PASSO 6: Testar drag & drop


4. DEBUGGING E LOGS ‚úÖ

Onde aparecem os logs:

Python


# Os print() aparecem no terminal onde voc√™ rodou o Flask:
print("=== DEBUG ===")  # ‚Üê Aparece no console do servidor

# Para ver no browser tamb√©m:
import logging
logging.basicConfig(level=logging.DEBUG)
app.logger.debug("Debug message")

# Ou retorne como HTML temporariamente:
return f"<pre>Debug: {variavel}</pre>"


Interpreta√ß√£o de erros:

‚Ä¢
404: Problema de rota (Blueprint n√£o registrado)

‚Ä¢
500: Problema no c√≥digo Python

‚Ä¢
Template not found: Arquivo HTML n√£o existe no local correto

5. PR√ìXIMOS PASSOS ‚úÖ

Ap√≥s Fase 2 funcionar:

1.
Usar modelos existentes (Allocation, AllocationEmployee) - j√° est√£o prontos

2.
Semana fixa primeiro - navega√ß√£o depois

3.
Salvamento simples - uma aloca√ß√£o por vez




üìã IMPLEMENTA√á√ÉO PASSO-A-PASSO

PASSO 1: TESTE DE ROTA B√ÅSICA

Python


# Adicione no FINAL de equipe_views.py:

@equipe_bp.route('/teste-sem-auth')
def teste_sem_auth():
    """Teste b√°sico - sem autentica√ß√£o"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Teste Fase 2</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    </head>
    <body>
        <div class="container mt-5">
            <div class="alert alert-success">
                <h1>üéØ FASE 2 - TESTE B√ÅSICO</h1>
                <p><strong>‚úÖ Rota funcionando!</strong></p>
                <p>Blueprint registrado corretamente.</p>
                <hr>
                <h3>Pr√≥ximos testes:</h3>
                <a href="/equipe/debug/test-direct" class="btn btn-info me-2">Teste API Direta</a>
                <a href="/equipe/teste-fase1" class="btn btn-warning">Teste com Auth</a>
            </div>
        </div>
    </body>
    </html>
    """

# TESTE: http://localhost:5000/equipe/teste-sem-auth


PASSO 2: ADICIONAR ROTAS DE DEBUG

Python


# Adicione ap√≥s a rota anterior:

@equipe_bp.route('/debug/test-direct')
def debug_test_direct():
    """API de teste - sem autentica√ß√£o"""
    import datetime
    return jsonify({
        'status': 'API funcionando',
        'timestamp': datetime.datetime.now().isoformat(),
        'debug': True,
        'message': 'Rota de debug ativa'
    })

@equipe_bp.route('/debug/obras-count')
@login_required  # Esta precisa de auth
def debug_obras_count():
    """Conta obras - com autentica√ß√£o"""
    try:
        admin_id = get_current_admin_id()
        
        # Teste b√°sico de query
        from models import Obra
        total_obras = Obra.query.count()
        obras_admin = Obra.query.filter_by(admin_id=admin_id).count()
        
        return jsonify({
            'admin_id': admin_id,
            'total_obras_sistema': total_obras,
            'obras_do_admin': obras_admin,
            'status': 'ok'
        })
    except Exception as e:
        import traceback
        return jsonify({
            'error': str(e),
            'traceback': traceback.format_exc(),
            'status': 'error'
        })

# TESTE: 
# 1. http://localhost:5000/equipe/debug/test-direct (sem auth)
# 2. http://localhost:5000/equipe/debug/obras-count (com auth)


PASSO 3: CRIAR/SUBSTITUIR TEMPLATE

HTML


<!-- templates/equipe/alocacao_simples.html -->
<!-- Use o c√≥digo HTML completo fornecido no prompt anterior -->
<!-- Substitua COMPLETAMENTE o arquivo existente -->


PASSO 4: ROTA PRINCIPAL COM DEBUG

Python


# Modifique a rota existente para adicionar debug:

@equipe_bp.route('/teste-fase1')
@login_required
def teste_fase1():
    """Rota principal com debug detalhado"""
    try:
        # Debug de usu√°rio
        user_info = {
            'id': current_user.id,
            'admin_id': get_current_admin_id(),
            'type': str(type(current_user))
        }
        
        print("=== DEBUG TESTE-FASE1 ===")
        print(f"User info: {user_info}")
        
        # Teste de template
        return render_template('equipe/alocacao_simples.html', 
                             debug_info=user_info)
        
    except Exception as e:
        print(f"ERRO COMPLETO: {e}")
        import traceback
        traceback.print_exc()
        
        # Retorna erro detalhado
        return f"""
        <div class="alert alert-danger">
            <h3>‚ùå ERRO NA FASE 2</h3>
            <p><strong>Erro:</strong> {e}</p>
            <pre>{traceback.format_exc()}</pre>
            <hr>
            <a href="/equipe/teste-sem-auth">‚Üê Voltar ao teste b√°sico</a>
        </div>
        """


PASSO 5: CHECKLIST DE VALIDA√á√ÉO

Bash


# Execute NESTA ORDEM:

# ‚úÖ 1. Teste rota b√°sica (sem auth)
curl http://localhost:5000/equipe/teste-sem-auth
# Esperado: HTML com "Rota funcionando!"

# ‚úÖ 2. Teste API direta (sem auth)  
curl http://localhost:5000/equipe/debug/test-direct
# Esperado: JSON com status "API funcionando"

# ‚úÖ 3. Teste rota com auth (precisa estar logado)
# Acesse no browser: http://localhost:5000/equipe/teste-fase1
# Esperado: P√°gina HTML da Fase 2 carrega

# ‚úÖ 4. Teste API com auth (no browser, ap√≥s login)
# Acesse: http://localhost:5000/equipe/debug/obras-count  
# Esperado: JSON com contagem de obras

# ‚úÖ 5. Teste drag & drop
# Na p√°gina da Fase 2, clique nos bot√µes de teste


üö® TROUBLESHOOTING

Problema: 404 na rota b√°sica

Python


# Verifique se Blueprint est√° registrado em app.py:
from equipe_views import equipe_bp
app.register_blueprint(equipe_bp)

# Debug:
print("Blueprints registrados:", app.blueprints.keys())


Problema: Template not found

Bash


# Verifique estrutura:
ls -la templates/equipe/
# Deve mostrar: alocacao_simples.html

# Se n√£o existir:
mkdir -p templates/equipe/
touch templates/equipe/alocacao_simples.html


Problema: Erro de autentica√ß√£o

Python


# Temporariamente remova @login_required:
@equipe_bp.route('/teste-fase1')
# @login_required  # ‚Üê Comente esta linha
def teste_fase1():
    # c√≥digo...


‚úÖ APROVA√á√ÉO PARA PROSSEGUIR

Sua proposta de a√ß√£o est√° PERFEITA!

Pode prosseguir exatamente nesta ordem:

1.
‚úÖ Adicionar rotas de debug

2.
‚úÖ Substituir template

3.
‚úÖ Testar acesso b√°sico

4.
‚úÖ Testar APIs

5.
‚úÖ Validar drag & drop

Ap√≥s cada passo, me envie:

‚Ä¢
Screenshot ou resultado

‚Ä¢
Qualquer erro encontrado

‚Ä¢
Status do checklist

N√£o avance para o pr√≥ximo passo at√© o atual funcionar 100%!

