# üö® PROMPT PARA REPLIT - CORRE√á√ÉO URGENTE SIGE v8.0

## CONTEXTO DO PROBLEMA
Sistema SIGE v8.0 em produ√ß√£o com **ERRO 405 METHOD NOT ALLOWED** em duas opera√ß√µes cr√≠ticas:

1. **Salvamento de servi√ßos em obras** - API `/api/obras/servicos` POST
2. **Exclus√£o de obras** - Rota `/obras/excluir/<id>` POST

## ARQUIVOS PRINCIPAIS ANALISADOS

### 1. ROTAS PROBLEM√ÅTICAS (views.py)
```python
# LINHA 5285-5371: API adicionar servi√ßo obra
@main_bp.route('/api/obras/servicos', methods=['POST'])
@login_required
def adicionar_servico_obra():
    # C√≥digo est√° correto, mas retorna 405

# LINHA 1434-1457: Excluir obra  
@main_bp.route('/obras/excluir/<int:id>', methods=['POST'])
@login_required
def excluir_obra(id):
    # C√≥digo est√° correto, mas retorna 405
```

### 2. CONFIGURA√á√ÉO APP (app.py)
```python
# PROBLEMA IDENTIFICADO: Configura√ß√£o CSRF conflitante
app.config['WTF_CSRF_ENABLED'] = False  # CSRF desabilitado
# ...
csrf = CSRFProtect()  # Mas CSRFProtect ainda √© inicializado
csrf.init_app(app)     # CONFLITO!
```

### 3. FRONTEND JAVASCRIPT (obras.html)
```javascript
// Fun√ß√£o excluirObra est√° CORRETA - envia POST
function excluirObra(id) {
    const form = document.createElement('form');
    form.method = 'POST';  // ‚úÖ CORRETO
    form.action = '/obras/excluir/' + id;
    // ... c√≥digo correto
}
```

## DIAGN√ìSTICO T√âCNICO

### ‚ùå PROBLEMAS IDENTIFICADOS:

1. **CSRF CONFLITANTE**: CSRFProtect inicializado mesmo com CSRF desabilitado
2. **FALTA CORS**: Nenhuma configura√ß√£o CORS para requisi√ß√µes AJAX
3. **POSS√çVEL CONFLITO DE ROTAS**: Blueprint pode n√£o estar registrado corretamente

### ‚úÖ ESTRUTURAS CORRETAS:

- Modelo ServicoObra definido corretamente
- Tabela servico_obra criada no banco
- JavaScript frontend enviando POST corretamente
- L√≥gica das rotas est√° adequada

## SOLU√á√ïES NECESS√ÅRIAS

### 1. CORRIGIR CONFIGURA√á√ÉO CSRF
```python
# Em app.py - ESCOLHER UMA OP√á√ÉO:

# OP√á√ÉO A: Remover CSRFProtect completamente
app.config['WTF_CSRF_ENABLED'] = False
# csrf = CSRFProtect()  # COMENTAR ESTAS LINHAS
# csrf.init_app(app)    # COMENTAR ESTAS LINHAS

# OP√á√ÉO B: Habilitar CSRF corretamente
app.config['WTF_CSRF_ENABLED'] = True
csrf = CSRFProtect()
csrf.init_app(app)
```

### 2. ADICIONAR CORS
```python
# Instalar: pip install flask-cors
from flask_cors import CORS

# Ap√≥s criar app:
CORS(app, origins="*", methods=["GET", "POST", "PUT", "DELETE"])
```

### 3. VERIFICAR REGISTRO DE BLUEPRINT
```python
# Garantir que main_bp est√° registrado:
from views import main_bp
app.register_blueprint(main_bp)
```

## TESTE DE VALIDA√á√ÉO

Ap√≥s corre√ß√µes, testar:

1. **Teste API servi√ßos:**
```bash
curl -X POST http://localhost:5000/api/obras/servicos \
  -H "Content-Type: application/json" \
  -d '{"obra_id": 1, "servico_id": 1}'
```

2. **Teste exclus√£o obra:**
```bash
curl -X POST http://localhost:5000/obras/excluir/1
```

## ARQUIVOS PARA MODIFICAR

1. **app.py** - Corrigir CSRF e adicionar CORS
2. **views.py** - Verificar se rotas est√£o corretas (parecem estar)
3. **requirements.txt** - Adicionar flask-cors se necess√°rio

## PRIORIDADE M√ÅXIMA

‚ö†Ô∏è **SISTEMA EM PRODU√á√ÉO COM USU√ÅRIOS AFETADOS**
‚ö†Ô∏è **FUNCIONALIDADES CR√çTICAS QUEBRADAS**
‚ö†Ô∏è **CORRE√á√ÉO URGENTE NECESS√ÅRIA**

## RESULTADO ESPERADO

Ap√≥s corre√ß√µes:
- ‚úÖ API `/api/obras/servicos` POST funcionando
- ‚úÖ Rota `/obras/excluir/<id>` POST funcionando  
- ‚úÖ Usu√°rios conseguem salvar servi√ßos em obras
- ‚úÖ Usu√°rios conseguem excluir obras

---

**INSTRU√á√ÉO FINAL:** Analise os arquivos fornecidos, implemente as corre√ß√µes sugeridas e teste as rotas problem√°ticas. Foque na configura√ß√£o CSRF conflitante como causa mais prov√°vel do erro 405.

