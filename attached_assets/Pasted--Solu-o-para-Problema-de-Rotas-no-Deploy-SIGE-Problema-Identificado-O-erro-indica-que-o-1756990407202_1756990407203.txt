# Solu√ß√£o para Problema de Rotas no Deploy - SIGE

## Problema Identificado

O erro indica que o Flask n√£o consegue construir URLs fora de um contexto de requisi√ß√£o ativa. Isso acontece porque:

1. As novas rotas criadas podem n√£o estar sendo registradas corretamente
2. O script de verifica√ß√£o est√° tentando usar `url_for()` para rotas que n√£o existem
3. Pode haver problemas de importa√ß√£o das novas fun√ß√µes

## Solu√ß√µes

### Solu√ß√£o 1: Corrigir o Script de Verifica√ß√£o de Rotas

**Arquivo:** `docker-entrypoint-unified.sh`

**Problema:** O script est√° tentando verificar rotas que podem n√£o existir.

**Corre√ß√£o:**
```bash
# Substituir a se√ß√£o de verifica√ß√£o de rotas por:
echo "üîç Verificando estrutura de rotas..."
python -c "
from app import app

with app.app_context():
    try:
        # Listar todas as rotas dispon√≠veis
        print('üìã Rotas registradas:')
        for rule in app.url_map.iter_rules():
            print(f'   {rule.endpoint}: {rule.rule} [{rule.methods}]')
        
        # Verificar se as rotas essenciais existem
        rotas_essenciais = [
            'main.dashboard',
            'main.funcionarios', 
            'main.health_check'
        ]
        
        rotas_existentes = [rule.endpoint for rule in app.url_map.iter_rules()]
        
        for rota in rotas_essenciais:
            if rota in rotas_existentes:
                print(f'‚úÖ Rota essencial OK: {rota}')
            else:
                print(f'‚ùå Rota essencial n√£o encontrada: {rota}')
        
        print('‚úÖ Verifica√ß√£o de rotas conclu√≠da')
        
    except Exception as e:
        print(f'‚ùå Erro na verifica√ß√£o de rotas: {e}')
        import traceback
        traceback.print_exc()
"
```

### Solu√ß√£o 2: Verificar Importa√ß√£o das Novas Rotas

**Arquivo:** `views.py`

**Problema:** As novas rotas podem n√£o estar sendo importadas corretamente.

**Verifica√ß√£o:**
1. Certifique-se de que as novas fun√ß√µes est√£o definidas no arquivo `views.py`
2. Verifique se o blueprint `main_bp` est√° sendo registrado corretamente
3. Confirme que n√£o h√° erros de sintaxe nas novas rotas

**Exemplo de rota correta:**
```python
@main_bp.route('/api/obras/servicos-rdo', methods=['POST', 'OPTIONS'])
@login_required
def adicionar_servico_rdo_obra():
    # ... c√≥digo da fun√ß√£o
    pass

@main_bp.route('/api/servicos-disponiveis-obra/<int:obra_id>')
@login_required  
def api_servicos_disponiveis_obra(obra_id):
    # ... c√≥digo da fun√ß√£o
    pass
```

### Solu√ß√£o 3: Configurar Vari√°veis de Ambiente Corretas

**Arquivo:** `Dockerfile` ou vari√°veis de ambiente

**Adicionar:**
```bash
ENV SERVER_NAME=localhost:5000
ENV APPLICATION_ROOT=/
ENV PREFERRED_URL_SCHEME=http
```

### Solu√ß√£o 4: Script de Verifica√ß√£o Simplificado

**Criar arquivo:** `check_routes.py`

```python
#!/usr/bin/env python3
"""Script para verificar rotas do SIGE"""

import sys
import os

# Adicionar o diret√≥rio da aplica√ß√£o ao path
sys.path.insert(0, '/app')

try:
    from app import app
    
    print("üîç Verificando rotas do SIGE...")
    
    with app.app_context():
        # Listar todas as rotas
        routes = []
        for rule in app.url_map.iter_rules():
            routes.append({
                'endpoint': rule.endpoint,
                'rule': rule.rule,
                'methods': list(rule.methods)
            })
        
        print(f"üìä Total de rotas encontradas: {len(routes)}")
        
        # Verificar rotas espec√≠ficas das corre√ß√µes
        rotas_novas = [
            'main.adicionar_servico_rdo_obra',
            'main.api_servicos_disponiveis_obra'
        ]
        
        endpoints_existentes = [r['endpoint'] for r in routes]
        
        for rota in rotas_novas:
            if rota in endpoints_existentes:
                print(f"‚úÖ Nova rota encontrada: {rota}")
            else:
                print(f"‚ùå Nova rota n√£o encontrada: {rota}")
        
        # Mostrar algumas rotas importantes
        print("\nüìã Rotas principais:")
        for route in routes[:10]:
            print(f"   {route['endpoint']}: {route['rule']}")
        
        print("‚úÖ Verifica√ß√£o conclu√≠da com sucesso!")
        
except Exception as e:
    print(f"‚ùå Erro ao verificar rotas: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)
```

### Solu√ß√£o 5: Dockerfile Corrigido

**Arquivo:** `Dockerfile`

**Adicionar antes do ENTRYPOINT:**
```dockerfile
# Copiar script de verifica√ß√£o
COPY check_routes.py /app/
RUN chmod +x /app/check_routes.py

# Configurar vari√°veis para resolver problemas de URL
ENV SERVER_NAME=0.0.0.0:5000 \
    APPLICATION_ROOT=/ \
    PREFERRED_URL_SCHEME=http
```

### Solu√ß√£o 6: Entrypoint Simplificado

**Arquivo:** `docker-entrypoint-unified.sh`

**Substituir a se√ß√£o problem√°tica por:**
```bash
# Verificar rotas com script dedicado
echo "üîç Verificando rotas..."
python /app/check_routes.py

if [[ $? -ne 0 ]]; then
    echo "‚ö†Ô∏è Problemas na verifica√ß√£o de rotas, mas continuando..."
fi
```

## Implementa√ß√£o R√°pida

### Passo 1: Atualizar o Entrypoint
```bash
# Substituir a se√ß√£o de verifica√ß√£o de rotas no docker-entrypoint-unified.sh
# pela vers√£o simplificada acima
```

### Passo 2: Criar o Script de Verifica√ß√£o
```bash
# Criar o arquivo check_routes.py com o conte√∫do fornecido
```

### Passo 3: Atualizar Dockerfile
```bash
# Adicionar as vari√°veis de ambiente e copiar o script
```

### Passo 4: Rebuild e Deploy
```bash
docker build -t sige:v8.2-fixed .
docker run -p 5000:5000 sige:v8.2-fixed
```

## Teste das Rotas

Ap√≥s o deploy, teste as novas rotas:

```bash
# Testar rota de adicionar servi√ßo
curl -X POST http://localhost:5000/api/obras/servicos-rdo \
  -H "Content-Type: application/json" \
  -d '{"obra_id": 1, "servico_id": 1}'

# Testar rota de servi√ßos dispon√≠veis  
curl http://localhost:5000/api/servicos-disponiveis-obra/1
```

Esta solu√ß√£o deve resolver o problema de rotas n√£o sendo criadas no deploy.