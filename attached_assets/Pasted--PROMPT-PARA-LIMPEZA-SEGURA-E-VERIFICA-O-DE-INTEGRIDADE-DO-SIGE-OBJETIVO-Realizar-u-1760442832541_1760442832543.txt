# üßπ PROMPT PARA LIMPEZA SEGURA E VERIFICA√á√ÉO DE INTEGRIDADE DO SIGE

## üéØ OBJETIVO

Realizar uma limpeza meticulosa e segura do sistema SIGE, removendo arquivos √≥rf√£os, corrigindo relacionamentos quebrados e validando a integridade entre m√≥dulos, preparando o sistema para implementa√ß√£o do m√≥dulo financeiro.

---

## üìä AN√ÅLISE ATUAL DO SISTEMA

### **SITUA√á√ÉO IDENTIFICADA:**
- ‚úÖ **153 arquivos Python** no diret√≥rio raiz
- ‚ö†Ô∏è **95 arquivos √≥rf√£os** (62% do total) n√£o s√£o importados
- ‚ö†Ô∏è **152 templates HTML** (alguns podem estar √≥rf√£os)
- ‚ùå **M√∫ltiplas ForeignKeys √≥rf√£s** apontando para tabelas inexistentes
- ‚ùå **Relacionamentos quebrados** entre m√≥dulos

### **PROBLEMAS CR√çTICOS ENCONTRADOS:**
1. **Tabela `usuario` referenciada mas n√£o existe** - deveria ser `Usuario`
2. **Tabelas do m√≥dulo financeiro** (`plano_contas`, `lancamento_contabil`) referenciadas mas n√£o implementadas
3. **Tabelas de propostas** (`propostas_comerciais`, `proposta_templates`) com refer√™ncias inconsistentes
4. **M√≥dulos √≥rf√£os** com c√≥digo duplicado e funcionalidades sobrepostas

---

## üîß PLANO DE LIMPEZA SEGURA

### **FASE 1: BACKUP E PREPARA√á√ÉO (CR√çTICO)**

```python
def criar_backup_completo():
    """
    OBRIGAT√ìRIO: Criar backup completo antes de qualquer limpeza
    """
    import os
    import datetime
    from shutil import copytree, ignore_patterns
    
    timestamp = datetime.datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_dir = f'backup_pre_limpeza_{timestamp}'
    
    # Backup do c√≥digo
    copytree('.', backup_dir, 
             ignore=ignore_patterns('__pycache__', '*.pyc', '.git', 'node_modules'))
    
    # Backup do banco de dados
    os.system(f'pg_dump $DATABASE_URL > {backup_dir}/database_backup.sql')
    
    print(f"‚úÖ Backup criado em: {backup_dir}")
    return backup_dir
```

### **FASE 2: AN√ÅLISE DE DEPEND√äNCIAS**

```python
def analisar_dependencias_seguras():
    """
    Identificar quais arquivos podem ser removidos com seguran√ßa
    """
    
    # ARQUIVOS SEGUROS PARA REMO√á√ÉO (Scripts de migra√ß√£o antigos)
    arquivos_seguros_remocao = [
        'adicionar_tipos_folga_ferias.py',
        'atualizar_admin_ids.py',
        'atualizar_badges_tabela.py',
        'correcao_horas_extras_final.py',
        'correcao_obras_completa.py',
        'create_foto_base64_column.py',
        'deploy_final_checklist.py',
        'deploy_fix_subatividades_v10.py',
        'deploy_rdo_completo_v10.py',
        'deploy_veiculos_v2_production.py',
        'excluir_registros_agosto.py',
        'fix_detalhes_uso_production.py',
        'fix_producao_urgente.py',
        'gerar_lancamentos_julho.py',
        'migrate_v8_0.py',
        'migration_rdo_melhorias.py',
        'populacao_nova_simples.py',
        'script_migracao_producao.py',
        'substituir_lancamentos_vale_verde.py',
        'validar_correcao_custo.py',
        'validar_correcao_final.py',
        # ... outros scripts de migra√ß√£o pontuais
    ]
    
    # ARQUIVOS DE TESTE (Podem ser movidos para pasta tests/)
    arquivos_teste = [
        'test_accessibility.py',
        'test_healthcheck_endpoint.py',
        'test_performance.py',
        'test_rdo_comprehensive.py',
        'tests_modulos_consolidados.py',
    ]
    
    # ARQUIVOS DUPLICADOS (Funcionalidade j√° implementada em outros)
    arquivos_duplicados = [
        'alimentacao_crud.py',  # Funcionalidade em alimentacao_views.py
        'api_servicos_corrigida.py',  # Funcionalidade em api_servicos_obra_limpa.py
        'dashboard_hotfix.py',  # Funcionalidade em views.py
        'login_simples.py',  # Funcionalidade em auth.py
        'mobile_api.py',  # N√£o est√° sendo usado
    ]
    
    return {
        'seguros_remocao': arquivos_seguros_remocao,
        'arquivos_teste': arquivos_teste,
        'duplicados': arquivos_duplicados
    }
```

### **FASE 3: CORRE√á√ÉO DE RELACIONAMENTOS**

```python
def corrigir_relacionamentos_models():
    """
    Corrigir ForeignKeys √≥rf√£s e relacionamentos quebrados
    """
    
    # CORRE√á√ïES NECESS√ÅRIAS NO MODELS.PY:
    
    # 1. Corrigir refer√™ncias para 'usuario' -> 'Usuario'
    correcoes_fk = {
        "db.ForeignKey('usuario.id')": "db.ForeignKey('usuario.id')",  # Manter como est√° (tabela real)
        # Verificar se a tabela realmente se chama 'usuario' ou 'Usuario'
    }
    
    # 2. Remover/comentar modelos n√£o implementados
    modelos_nao_implementados = [
        'PlanoContas',  # Ser√° implementado no m√≥dulo financeiro
        'LancamentoContabil',  # Ser√° implementado no m√≥dulo financeiro
        'CentroCustoContabil',  # Ser√° implementado no m√≥dulo financeiro
        'NotaFiscal',  # N√£o est√° sendo usado
        'CategoriaServico',  # Verificar se est√° sendo usado
    ]
    
    # 3. Validar relacionamentos existentes
    relacionamentos_validar = [
        'Funcionario -> Departamento',
        'Funcionario -> Funcao',
        'Obra -> Funcionario (responsavel)',
        'RegistroPonto -> Funcionario',
        'RegistroPonto -> Obra',
        'ServicoObra -> Obra',
        'ServicoObra -> Servico',
    ]
    
    return {
        'correcoes_fk': correcoes_fk,
        'modelos_nao_implementados': modelos_nao_implementados,
        'relacionamentos_validar': relacionamentos_validar
    }
```

### **FASE 4: LIMPEZA DE TEMPLATES √ìRF√ÉOS**

```python
def identificar_templates_orfaos():
    """
    Identificar templates HTML n√£o referenciados
    """
    import os
    import re
    
    # Buscar por render_template em todos os arquivos Python
    templates_referenciados = set()
    
    for root, dirs, files in os.walk('.'):
        for file in files:
            if file.endswith('.py'):
                filepath = os.path.join(root, file)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        content = f.read()
                        # Buscar padr√µes render_template('template.html')
                        matches = re.findall(r"render_template\(['\"]([^'\"]+)['\"]", content)
                        templates_referenciados.update(matches)
                except:
                    continue
    
    # Listar todos os templates existentes
    templates_existentes = set()
    for root, dirs, files in os.walk('templates'):
        for file in files:
            if file.endswith('.html'):
                # Caminho relativo a partir de templates/
                rel_path = os.path.relpath(os.path.join(root, file), 'templates')
                templates_existentes.add(rel_path)
    
    # Templates √≥rf√£os
    templates_orfaos = templates_existentes - templates_referenciados
    
    return {
        'referenciados': templates_referenciados,
        'existentes': templates_existentes,
        'orfaos': templates_orfaos
    }
```

---

## üîç VERIFICA√á√ÉO DE INTEGRIDADE ENTRE M√ìDULOS

### **TESTE 1: Integridade de Dados**

```python
def testar_integridade_dados():
    """
    Verificar se os relacionamentos entre m√≥dulos est√£o funcionando
    """
    from app import app, db
    from models import *
    
    with app.app_context():
        testes = []
        
        # Teste 1: Funcion√°rio -> Departamento
        try:
            funcionario = Funcionario.query.first()
            if funcionario and funcionario.departamento_id:
                departamento = funcionario.departamento_ref
                testes.append({
                    'teste': 'Funcionario -> Departamento',
                    'status': 'OK' if departamento else 'ERRO',
                    'detalhes': f'Funcion√°rio {funcionario.nome} -> Depto {departamento.nome if departamento else "NULL"}'
                })
        except Exception as e:
            testes.append({
                'teste': 'Funcionario -> Departamento',
                'status': 'ERRO',
                'detalhes': str(e)
            })
        
        # Teste 2: Obra -> Respons√°vel
        try:
            obra = Obra.query.first()
            if obra and obra.responsavel_id:
                responsavel = Funcionario.query.get(obra.responsavel_id)
                testes.append({
                    'teste': 'Obra -> Responsavel',
                    'status': 'OK' if responsavel else 'ERRO',
                    'detalhes': f'Obra {obra.nome} -> Resp {responsavel.nome if responsavel else "NULL"}'
                })
        except Exception as e:
            testes.append({
                'teste': 'Obra -> Responsavel',
                'status': 'ERRO',
                'detalhes': str(e)
            })
        
        # Teste 3: RegistroPonto -> Funcionario/Obra
        try:
            registro = RegistroPonto.query.first()
            if registro:
                funcionario = registro.funcionario_ref
                obra = registro.obra_ref
                testes.append({
                    'teste': 'RegistroPonto -> Funcionario/Obra',
                    'status': 'OK' if (funcionario and obra) else 'ERRO',
                    'detalhes': f'Ponto {registro.data} -> {funcionario.nome if funcionario else "NULL"} / {obra.nome if obra else "NULL"}'
                })
        except Exception as e:
            testes.append({
                'teste': 'RegistroPonto -> Funcionario/Obra',
                'status': 'ERRO',
                'detalhes': str(e)
            })
        
        return testes
```

### **TESTE 2: Funcionalidades dos M√≥dulos**

```python
def testar_funcionalidades_modulos():
    """
    Testar se as funcionalidades principais de cada m√≥dulo est√£o funcionando
    """
    from app import app
    import requests
    
    # URLs para testar (assumindo que o app est√° rodando)
    base_url = 'http://localhost:5000'
    
    testes_urls = [
        # M√≥dulo Principal
        {'url': '/', 'modulo': 'Dashboard', 'esperado': 200},
        {'url': '/funcionarios', 'modulo': 'Funcion√°rios', 'esperado': 200},
        {'url': '/obras', 'modulo': 'Obras', 'esperado': 200},
        
        # M√≥dulo RDO
        {'url': '/rdo', 'modulo': 'RDO', 'esperado': 200},
        
        # M√≥dulo Ve√≠culos/Frota
        {'url': '/frota', 'modulo': 'Frota', 'esperado': 200},
        
        # M√≥dulo Almoxarifado
        {'url': '/almoxarifado', 'modulo': 'Almoxarifado', 'esperado': 200},
        
        # M√≥dulo Ponto
        {'url': '/ponto', 'modulo': 'Ponto', 'esperado': 200},
        
        # M√≥dulo Propostas
        {'url': '/propostas', 'modulo': 'Propostas', 'esperado': 200},
        
        # APIs
        {'url': '/api/funcionarios', 'modulo': 'API Funcion√°rios', 'esperado': 200},
    ]
    
    resultados = []
    
    with app.test_client() as client:
        for teste in testes_urls:
            try:
                response = client.get(teste['url'])
                status = 'OK' if response.status_code == teste['esperado'] else 'ERRO'
                resultados.append({
                    'modulo': teste['modulo'],
                    'url': teste['url'],
                    'status_code': response.status_code,
                    'esperado': teste['esperado'],
                    'status': status
                })
            except Exception as e:
                resultados.append({
                    'modulo': teste['modulo'],
                    'url': teste['url'],
                    'status_code': 'ERRO',
                    'esperado': teste['esperado'],
                    'status': 'ERRO',
                    'erro': str(e)
                })
    
    return resultados
```

### **TESTE 3: Lan√ßamentos Autom√°ticos**

```python
def testar_lancamentos_automaticos():
    """
    Testar se os lan√ßamentos autom√°ticos entre m√≥dulos est√£o funcionando
    """
    from app import app, db
    from models import *
    from datetime import datetime, date
    
    with app.app_context():
        testes_lancamentos = []
        
        # Teste 1: Criar registro de ponto -> Deve impactar KPIs
        try:
            funcionario = Funcionario.query.first()
            obra = Obra.query.first()
            
            if funcionario and obra:
                # Criar registro de ponto
                registro = RegistroPonto(
                    funcionario_id=funcionario.id,
                    obra_id=obra.id,
                    data=date.today(),
                    entrada=datetime.now().time(),
                    admin_id=funcionario.admin_id
                )
                db.session.add(registro)
                db.session.commit()
                
                # Verificar se foi criado
                registro_criado = RegistroPonto.query.filter_by(
                    funcionario_id=funcionario.id,
                    data=date.today()
                ).first()
                
                testes_lancamentos.append({
                    'teste': 'Criar Registro Ponto',
                    'status': 'OK' if registro_criado else 'ERRO',
                    'detalhes': f'Registro ID: {registro_criado.id if registro_criado else "NULL"}'
                })
                
                # Limpar teste
                if registro_criado:
                    db.session.delete(registro_criado)
                    db.session.commit()
                    
        except Exception as e:
            testes_lancamentos.append({
                'teste': 'Criar Registro Ponto',
                'status': 'ERRO',
                'detalhes': str(e)
            })
        
        # Teste 2: Criar entrada no almoxarifado -> Deve impactar estoque
        try:
            # Verificar se m√≥dulo almoxarifado est√° implementado
            if hasattr(sys.modules.get('models'), 'AlmoxarifadoItem'):
                item = AlmoxarifadoItem.query.first()
                if item:
                    estoque_antes = AlmoxarifadoEstoque.query.filter_by(item_id=item.id).first()
                    quantidade_antes = estoque_antes.quantidade if estoque_antes else 0
                    
                    # Simular entrada (isso deveria ser feito via service)
                    # ... c√≥digo de teste de entrada ...
                    
                    testes_lancamentos.append({
                        'teste': 'Entrada Almoxarifado',
                        'status': 'IMPLEMENTAR',
                        'detalhes': 'M√≥dulo almoxarifado detectado'
                    })
                else:
                    testes_lancamentos.append({
                        'teste': 'Entrada Almoxarifado',
                        'status': 'SEM_DADOS',
                        'detalhes': 'Nenhum item no almoxarifado'
                    })
            else:
                testes_lancamentos.append({
                    'teste': 'Entrada Almoxarifado',
                    'status': 'NAO_IMPLEMENTADO',
                    'detalhes': 'M√≥dulo almoxarifado n√£o encontrado'
                })
                
        except Exception as e:
            testes_lancamentos.append({
                'teste': 'Entrada Almoxarifado',
                'status': 'ERRO',
                'detalhes': str(e)
            })
        
        return testes_lancamentos
```

---

## üìã CHECKLIST DE EXECU√á√ÉO

### **PR√â-EXECU√á√ÉO (OBRIGAT√ìRIO)**
- [ ] ‚úÖ Criar backup completo do sistema e banco de dados
- [ ] ‚úÖ Testar backup (restaurar em ambiente de teste)
- [ ] ‚úÖ Documentar vers√£o atual do sistema
- [ ] ‚úÖ Notificar usu√°rios sobre manuten√ß√£o

### **EXECU√á√ÉO FASE 1: LIMPEZA SEGURA**
- [ ] üóëÔ∏è Mover arquivos de teste para pasta `tests/`
- [ ] üóëÔ∏è Remover scripts de migra√ß√£o antigos (j√° executados)
- [ ] üóëÔ∏è Remover arquivos duplicados (manter vers√£o mais recente)
- [ ] üóëÔ∏è Limpar pasta `attached_assets/` (arquivos tempor√°rios)
- [ ] üìÅ Criar pasta `archive/` para arquivos hist√≥ricos

### **EXECU√á√ÉO FASE 2: CORRE√á√ÉO DE MODELOS**
- [ ] üîß Corrigir ForeignKeys √≥rf√£s no `models.py`
- [ ] üîß Remover/comentar modelos n√£o implementados
- [ ] üîß Validar relacionamentos existentes
- [ ] üîß Executar migra√ß√£o para corrigir banco de dados
- [ ] ‚úÖ Testar integridade dos relacionamentos

### **EXECU√á√ÉO FASE 3: LIMPEZA DE TEMPLATES**
- [ ] üé® Identificar templates √≥rf√£os
- [ ] üé® Mover templates n√£o utilizados para `templates/archive/`
- [ ] üé® Validar templates principais
- [ ] üé® Testar renderiza√ß√£o das p√°ginas principais

### **EXECU√á√ÉO FASE 4: TESTES DE INTEGRIDADE**
- [ ] üß™ Executar testes de integridade de dados
- [ ] üß™ Testar funcionalidades de cada m√≥dulo
- [ ] üß™ Validar lan√ßamentos autom√°ticos
- [ ] üß™ Testar APIs principais
- [ ] üìä Gerar relat√≥rio de integridade

### **P√ìS-EXECU√á√ÉO**
- [ ] üìù Documentar mudan√ßas realizadas
- [ ] üöÄ Deploy em ambiente de produ√ß√£o
- [ ] üë• Treinar usu√°rios sobre mudan√ßas
- [ ] üìä Monitorar sistema por 48h
- [ ] ‚úÖ Confirmar que tudo est√° funcionando

---

## ‚ö†Ô∏è CUIDADOS ESPECIAIS

### **ARQUIVOS QUE N√ÉO DEVEM SER REMOVIDOS**
- `app.py` - Arquivo principal da aplica√ß√£o
- `models.py` - Modelos de dados principais
- `views.py` - Views principais
- `auth.py` - Sistema de autentica√ß√£o
- `migrations.py` - Sistema de migra√ß√µes
- Qualquer arquivo importado em `app.py`

### **VALIDA√á√ïES OBRIGAT√ìRIAS**
1. **Antes de remover qualquer arquivo:**
   ```bash
   grep -r "nome_do_arquivo" . --exclude="nome_do_arquivo.py"
   ```

2. **Antes de alterar models.py:**
   ```python
   # Testar em ambiente de desenvolvimento primeiro
   python3 -c "from models import *; print('Modelos OK')"
   ```

3. **Ap√≥s cada mudan√ßa:**
   ```bash
   python3 app.py  # Verificar se inicia sem erro
   ```

### **ROLLBACK PLAN**
Se algo der errado:
1. Parar aplica√ß√£o
2. Restaurar backup do c√≥digo
3. Restaurar backup do banco de dados
4. Reiniciar aplica√ß√£o
5. Validar funcionamento

---

## üéØ RESULTADO ESPERADO

Ap√≥s a execu√ß√£o completa:

### **SISTEMA LIMPO**
- ‚úÖ **~60 arquivos removidos** (scripts antigos, duplicados, testes)
- ‚úÖ **Estrutura organizada** com pastas `tests/` e `archive/`
- ‚úÖ **Zero ForeignKeys √≥rf√£s** no models.py
- ‚úÖ **Templates organizados** sem √≥rf√£os

### **INTEGRIDADE VALIDADA**
- ‚úÖ **Relacionamentos funcionando** entre todos os m√≥dulos
- ‚úÖ **APIs respondendo** corretamente
- ‚úÖ **Lan√ßamentos autom√°ticos** testados e funcionais
- ‚úÖ **Zero erros** no log da aplica√ß√£o

### **PREPARADO PARA FINANCEIRO**
- ‚úÖ **Base de dados limpa** e consistente
- ‚úÖ **Estrutura de relacionamentos** validada
- ‚úÖ **Performance otimizada** sem c√≥digo morto
- ‚úÖ **Documenta√ß√£o atualizada** do que foi alterado

---

## üöÄ IMPLEMENTA√á√ÉO

**Para executar esta limpeza, use este prompt no Replit:**

```
Atue como um especialista em refatora√ß√£o de sistemas Python/Flask. Execute uma limpeza meticulosa e segura do sistema SIGE seguindo EXATAMENTE o plano detalhado acima.

CR√çTICO: 
1. SEMPRE criar backup completo antes de qualquer altera√ß√£o
2. Testar cada mudan√ßa antes de prosseguir
3. Documentar tudo que foi alterado
4. Validar integridade ap√≥s cada fase

Execute as 4 fases na ordem, reportando o progresso de cada etapa.

OBJETIVO: Deixar o sistema limpo, organizado e com integridade validada, preparado para implementa√ß√£o do m√≥dulo financeiro.
```

**Este processo transformar√° o SIGE em uma base s√≥lida e confi√°vel para futuras implementa√ß√µes!** üßπ‚ú®
