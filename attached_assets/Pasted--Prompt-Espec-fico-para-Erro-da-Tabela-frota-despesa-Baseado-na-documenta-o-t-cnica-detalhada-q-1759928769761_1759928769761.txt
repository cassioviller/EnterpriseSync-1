# Prompt Espec√≠fico para Erro da Tabela frota_despesa

Baseado na documenta√ß√£o t√©cnica detalhada que voc√™ forneceu, agora tenho uma vis√£o completa do problema. O sistema passou por uma reescrita completa e usa a nova arquitetura com tabelas `frota_*`.

## Prompt para o Replit:

```
Atue como um desenvolvedor full-stack s√™nior, especialista em Flask, SQLAlchemy e migra√ß√µes de banco de dados PostgreSQL.

**CONTEXTO CR√çTICO:**
O sistema de gest√£o de frota passou por uma REESCRITA COMPLETA em outubro de 2025. A nova arquitetura usa tabelas com prefixo `frota_*` ao inv√©s das antigas tabelas `veiculo`, `uso_veiculo`, `custo_veiculo` e `fleet_*`.

**O PROBLEMA:**
Estou recebendo o erro:
```
(psycopg2.errors.UndefinedColumn) column frota_despesa.obra_id does not exist
```

**AN√ÅLISE BASEADA NA DOCUMENTA√á√ÉO:**
1. **Nova Arquitetura Atual:**
   - `frota_veiculo` ‚Üí Cadastro de ve√≠culos
   - `frota_utilizacao` ‚Üí Registros de uso/viagens  
   - `frota_despesa` ‚Üí Custos e despesas

2. **Problema Identificado:**
   Segundo a documenta√ß√£o, a tabela `frota_despesa` DEVE ter a coluna `obra_id` (FK ‚Üí obra.id, NULLABLE), mas o erro indica que ela n√£o existe no banco de dados.

3. **Migra√ß√£o Relacionada:**
   - **Migra√ß√£o 28:** Migra dados das tabelas antigas para `frota_*`
   - **Migra√ß√£o 29:** Corrige `data_id` ‚Üí `data_custo` na tabela `frota_despesa`

**ESTRUTURA ESPERADA DA TABELA frota_despesa:**
```sql
CREATE TABLE frota_despesa (
    id SERIAL PRIMARY KEY,
    veiculo_id INTEGER NOT NULL REFERENCES frota_veiculo(id),
    obra_id INTEGER REFERENCES obra(id),  -- ‚Üê ESTA COLUNA EST√Å FALTANDO
    data_custo DATE NOT NULL,
    tipo_custo VARCHAR(30) NOT NULL,
    valor NUMERIC(10,2) NOT NULL,
    descricao VARCHAR(200) NOT NULL,
    fornecedor VARCHAR(100),
    numero_nota_fiscal VARCHAR(20),
    data_vencimento DATE,
    status_pagamento VARCHAR(20) DEFAULT 'Pendente',
    forma_pagamento VARCHAR(30),
    km_veiculo INTEGER,
    observacoes TEXT,
    admin_id INTEGER NOT NULL REFERENCES usuario(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

**TAREFA:**
1. **Verificar a estrutura atual da tabela:**
   ```sql
   SELECT column_name, data_type, is_nullable 
   FROM information_schema.columns 
   WHERE table_name = 'frota_despesa' 
   ORDER BY ordinal_position;
   ```

2. **Implementar a corre√ß√£o no arquivo `migrations.py`:**
   Adicione uma nova migra√ß√£o (Migra√ß√£o 30) para corrigir a estrutura:

```python
def corrigir_coluna_obra_id_frota_despesa():
    """
    MIGRA√á√ÉO 30: Adicionar coluna obra_id na tabela frota_despesa
    
    CONTEXTO:
    - A tabela frota_despesa foi criada sem a coluna obra_id
    - Esta coluna √© necess√°ria para vincular custos a obras espec√≠ficas
    - Campo √© NULLABLE (opcional)
    """
    try:
        logger.info("=" * 80)
        logger.info("üîß MIGRA√á√ÉO 30: Corrigir coluna obra_id em frota_despesa")
        logger.info("=" * 80)
        
        connection = db.engine.raw_connection()
        cursor = connection.cursor()
        
        # Verificar se a tabela frota_despesa existe
        cursor.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_name = 'frota_despesa'
        """)
        
        if not cursor.fetchone():
            logger.warning("‚ö†Ô∏è Tabela frota_despesa n√£o existe. Pulando migra√ß√£o.")
            return
        
        # Verificar se a coluna obra_id j√° existe
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'frota_despesa' 
            AND column_name = 'obra_id'
        """)
        
        if cursor.fetchone():
            logger.info("‚úÖ Coluna obra_id j√° existe na tabela frota_despesa")
        else:
            logger.info("üîß Adicionando coluna obra_id na tabela frota_despesa...")
            cursor.execute("""
                ALTER TABLE frota_despesa 
                ADD COLUMN obra_id INTEGER REFERENCES obra(id)
            """)
            logger.info("‚úÖ Coluna obra_id adicionada com sucesso!")
            
            # Criar √≠ndice para performance
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_frota_despesa_obra_id 
                ON frota_despesa(obra_id)
            """)
            logger.info("‚úÖ √çndice criado para obra_id")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        logger.info("=" * 80)
        logger.info("‚úÖ MIGRA√á√ÉO 30: Conclu√≠da com sucesso!")
        logger.info("=" * 80)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na Migra√ß√£o 30: {e}")
        if 'connection' in locals():
            connection.rollback()
            cursor.close()
            connection.close()
```

3. **Adicionar a chamada da migra√ß√£o na fun√ß√£o `executar_migracoes()`:**
   ```python
   # Adicione esta linha no final da fun√ß√£o executar_migracoes()
   corrigir_coluna_obra_id_frota_despesa()  # Migra√ß√£o 30
   ```

4. **Verificar o modelo SQLAlchemy:**
   Confirme que o modelo `FrotaDespesa` em `models.py` est√° correto:
   ```python
   class FrotaDespesa(db.Model):
       __tablename__ = 'frota_despesa'
       # ... outros campos ...
       obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=True)
       # ... outros campos ...
       
       # Relacionamentos
       obra = db.relationship('Obra', backref='despesas_frota')
   ```

**VALIDA√á√ÉO:**
Ap√≥s aplicar a migra√ß√£o, teste:
1. Acesse a p√°gina de detalhes do ve√≠culo
2. Tente registrar uma nova despesa
3. Verifique se o erro desapareceu

**ENTREG√ÅVEL:**
Forne√ßa o c√≥digo completo da Migra√ß√£o 30 implementada e confirme que a estrutura da tabela `frota_despesa` agora est√° alinhada com a documenta√ß√£o t√©cnica.
```

## Observa√ß√µes Importantes

- O problema √© que a tabela `frota_despesa` foi criada sem a coluna `obra_id` que √© esperada pelo modelo SQLAlchemy
- A Migra√ß√£o 29 j√° corrigiu o problema `data_id` ‚Üí `data_custo`, mas n√£o adicionou a coluna `obra_id`
- Esta √© uma corre√ß√£o simples mas cr√≠tica para o funcionamento do sistema
- A coluna √© NULLABLE, ent√£o n√£o afetar√° dados existentes

Use este prompt para resolver definitivamente o problema!
