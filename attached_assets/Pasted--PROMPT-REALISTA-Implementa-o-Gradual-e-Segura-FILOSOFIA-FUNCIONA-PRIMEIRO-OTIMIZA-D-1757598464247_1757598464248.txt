# PROMPT REALISTA - Implementa√ß√£o Gradual e Segura

## üéØ FILOSOFIA: "FUNCIONA PRIMEIRO, OTIMIZA DEPOIS"

Voc√™ est√° certo em questionar complexidades desnecess√°rias. Vamos implementar de forma incremental, testando cada passo, usando o que voc√™ j√° domina.

## üìã FASE 1: DIAGN√ìSTICO E BASE SEGURA (PRIORIDADE M√ÅXIMA)

### 1.1 INVESTIGAR SISTEMA ATUAL
**Antes de qualquer c√≥digo, entenda o que j√° existe:**

```python
# 1. Verificar modelos existentes
# No terminal Python do SIGE:
from models import *
print("=== MODELOS EXISTENTES ===")
print("Funcionario:", Funcionario.__table__.columns.keys())
print("Obra:", Obra.__table__.columns.keys())
print("Usuario:", Usuario.__table__.columns.keys())

# 2. Verificar sistema de autentica√ß√£o atual
print("=== CURRENT USER ===")
print("Tipo:", type(current_user))
print("Atributos:", dir(current_user))
print("Admin ID?", hasattr(current_user, 'admin_id'))
```

### 1.2 CRIAR MODELOS SIMPLES (SEM √çNDICES COMPLEXOS)
**Comece com o m√≠nimo que funciona:**

```python
# models.py - VERS√ÉO SIMPLES E SEGURA
class Allocation(db.Model):
    """Aloca√ß√£o obra‚Üídia - VERS√ÉO M√çNIMA"""
    __tablename__ = 'allocation_equipe'  # Nome √∫nico para n√£o conflitar
    
    id = db.Column(db.Integer, primary_key=True)
    admin_id = db.Column(db.Integer, nullable=False)  # Sem FK por enquanto
    obra_id = db.Column(db.Integer, nullable=False)   # Sem FK por enquanto
    data_alocacao = db.Column(db.Date, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # SEM relacionamentos complexos por enquanto
    # SEM √≠ndices avan√ßados por enquanto
    # SEM constraints √∫nicos por enquanto

class AllocationEmployee(db.Model):
    """Funcion√°rios‚Üíobra - VERS√ÉO M√çNIMA"""
    __tablename__ = 'allocation_employee_equipe'
    
    id = db.Column(db.Integer, primary_key=True)
    allocation_id = db.Column(db.Integer, nullable=False)
    funcionario_id = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
```

### 1.3 API ULTRA SIMPLES (SEM VALIDA√á√ïES COMPLEXAS)
**Use o padr√£o que voc√™ j√° conhece:**

```python
# equipe_views.py - VERS√ÉO M√çNIMA
from flask import Blueprint, request, jsonify, render_template
from flask_login import login_required, current_user

equipe_bp = Blueprint('equipe', __name__, url_prefix='/equipe')

def get_current_admin_id():
    """Descubra como funciona no SEU sistema"""
    # TESTE PRIMEIRO - adapte conforme necess√°rio
    if hasattr(current_user, 'admin_id'):
        return current_user.admin_id
    return current_user.id  # Fallback

@equipe_bp.route('/api/test', methods=['GET'])
@login_required
def test_api():
    """API de teste para validar integra√ß√£o"""
    return jsonify({
        'status': 'ok',
        'user_id': current_user.id,
        'admin_id': get_current_admin_id(),
        'user_type': str(type(current_user)),
        'timestamp': datetime.now().isoformat()
    })

@equipe_bp.route('/api/obras', methods=['GET'])
@login_required
def get_obras_simples():
    """Lista obras - VERS√ÉO SIMPLES"""
    try:
        # Use a query que voc√™ j√° conhece
        admin_id = get_current_admin_id()
        
        # ADAPTE conforme seu modelo Obra atual
        obras = Obra.query.filter_by(admin_id=admin_id).all()
        
        result = []
        for obra in obras:
            result.append({
                'id': obra.id,
                'codigo': obra.codigo,
                'nome': obra.nome
            })
        
        return jsonify({'success': True, 'data': result})
        
    except Exception as e:
        print(f"ERRO: {e}")  # Debug simples
        return jsonify({'success': False, 'error': str(e)})
```

## üìã FASE 2: INTERFACE VISUAL SIMPLES

### 2.1 HTML ESTRUTURAL (SEM CSS GRID COMPLEXO)
**Use Bootstrap que voc√™ j√° domina:**

```html
<!-- alocacao_simples.html -->
{% extends "base_completo.html" %}

{% block content %}
<div class="container-fluid">
    <h3>üìã Gest√£o de Equipe - TESTE</h3>
    
    <!-- Layout Bootstrap simples -->
    <div class="row">
        <!-- Sidebar: Obras -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5>üèóÔ∏è Obras</h5>
                </div>
                <div class="card-body" id="obras-list">
                    <!-- Carregado via JS -->
                </div>
            </div>
        </div>
        
        <!-- Grid semanal -->
        <div class="col-md-9">
            <div class="card">
                <div class="card-header">
                    <h5>üìÖ Semana</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col">
                            <h6>Segunda</h6>
                            <div class="border p-3" style="min-height: 200px;" 
                                 data-day="0" id="day-0">
                                <small class="text-muted">Arraste obras aqui</small>
                            </div>
                        </div>
                        <div class="col">
                            <h6>Ter√ßa</h6>
                            <div class="border p-3" style="min-height: 200px;" 
                                 data-day="1" id="day-1">
                                <small class="text-muted">Arraste obras aqui</small>
                            </div>
                        </div>
                        <!-- Repita para outros dias -->
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Debug info -->
<div class="mt-4">
    <button class="btn btn-info" onclick="testAPI()">üîç Testar API</button>
    <div id="debug-info" class="mt-2"></div>
</div>
{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
<script>
// JavaScript SIMPLES que voc√™ domina
class EquipeSimples {
    constructor() {
        this.obras = [];
        this.init();
    }
    
    async init() {
        await this.testAPI();
        await this.loadObras();
        this.setupDragDrop();
    }
    
    async testAPI() {
        try {
            const response = await fetch('/equipe/api/test');
            const data = await response.json();
            console.log('API Test:', data);
            
            document.getElementById('debug-info').innerHTML = `
                <div class="alert alert-info">
                    <strong>API OK:</strong> User ID: ${data.user_id}, Admin ID: ${data.admin_id}
                </div>
            `;
        } catch (error) {
            console.error('API Error:', error);
            document.getElementById('debug-info').innerHTML = `
                <div class="alert alert-danger">
                    <strong>API ERRO:</strong> ${error.message}
                </div>
            `;
        }
    }
    
    async loadObras() {
        try {
            const response = await fetch('/equipe/api/obras');
            const result = await response.json();
            
            if (result.success) {
                this.obras = result.data;
                this.renderObras();
            } else {
                console.error('Erro ao carregar obras:', result.error);
            }
        } catch (error) {
            console.error('Erro na requisi√ß√£o:', error);
        }
    }
    
    renderObras() {
        const container = document.getElementById('obras-list');
        container.innerHTML = '';
        
        this.obras.forEach(obra => {
            const div = document.createElement('div');
            div.className = 'card mb-2';
            div.dataset.obraId = obra.id;
            div.innerHTML = `
                <div class="card-body p-2">
                    <h6 class="card-title mb-1">${obra.codigo}</h6>
                    <small class="text-muted">${obra.nome}</small>
                </div>
            `;
            container.appendChild(div);
        });
    }
    
    setupDragDrop() {
        // SortableJS que voc√™ j√° domina
        const obrasList = document.getElementById('obras-list');
        
        Sortable.create(obrasList, {
            group: {
                name: 'obras',
                pull: 'clone',
                put: false
            },
            sort: false
        });
        
        // Setup drop zones
        for (let i = 0; i < 5; i++) {
            const dayElement = document.getElementById(`day-${i}`);
            if (dayElement) {
                Sortable.create(dayElement, {
                    group: 'obras',
                    onAdd: (evt) => {
                        console.log('Obra adicionada:', evt.item.dataset.obraId, 'no dia:', i);
                        // TODO: Salvar no backend
                    }
                });
            }
        }
    }
}

// Fun√ß√£o global para teste
function testAPI() {
    window.equipe.testAPI();
}

// Inicializa√ß√£o
document.addEventListener('DOMContentLoaded', () => {
    window.equipe = new EquipeSimples();
});
</script>
{% endblock %}
```

## üìã FASE 3: VALIDA√á√ÉO E INCREMENTO

### 3.1 CHECKLIST DE VALIDA√á√ÉO
**Antes de prosseguir, confirme:**

```bash
# 1. Teste a rota b√°sica
curl http://localhost:5000/equipe/api/test

# 2. Teste listagem de obras
curl http://localhost:5000/equipe/api/obras

# 3. Verifique se drag & drop visual funciona
# (arrastar cards entre colunas)

# 4. Confirme que n√£o quebrou nada existente
# (navegue pelo SIGE normal)
```

### 3.2 PR√ìXIMOS INCREMENTOS (APENAS AP√ìS FASE 1-3 FUNCIONAREM)

**Ordem de implementa√ß√£o:**
1. ‚úÖ **Drag & drop visual** (Fase 2)
2. üîÑ **Salvar aloca√ß√µes simples** (pr√≥ximo)
3. üîÑ **Listar aloca√ß√µes existentes**
4. üîÑ **Modal de funcion√°rios b√°sico**
5. üîÑ **Navega√ß√£o de semanas**
6. üîÑ **Otimiza√ß√µes de performance** (s√≥ no final)

## üö® RESPOSTAS √ÄS SUAS D√öVIDAS ESPEC√çFICAS

### 1. **INTEGRA√á√ÉO COM MODELOS EXISTENTES**
**Resposta:** Comece com tabelas novas (`allocation_equipe`) para n√£o quebrar nada. Depois migre se necess√°rio.

### 2. **PRAGMATIC DRAG & DROP**
**Resposta:** IGNORE por enquanto. SortableJS funciona perfeitamente para seu caso. Otimize depois.

### 3. **OTIMIZA√á√ïES DE PERFORMANCE**
**Resposta:** IGNORE √≠ndices complexos na Fase 1. Adicione apenas quando tiver problemas reais.

### 4. **CSS GRID AVAN√áADO**
**Resposta:** Use Bootstrap que voc√™ domina. Grid CSS √© otimiza√ß√£o para depois.

### 5. **APIs COMPLEXAS**
**Resposta:** Comece com `jsonify({'success': True, 'data': data})` simples. Padronize depois.

### 6. **SISTEMA MULTI-TENANT**
**Resposta:** Teste primeiro com `current_user.id`. Ajuste conforme descobrir como funciona.

## üéØ CRIT√âRIO DE SUCESSO DA FASE 1

**Voc√™ avan√ßa para Fase 2 APENAS quando:**
1. ‚úÖ API `/api/test` retorna dados do usu√°rio
2. ‚úÖ API `/api/obras` lista obras sem erro
3. ‚úÖ P√°gina carrega sem quebrar o SIGE
4. ‚úÖ Console do browser n√£o mostra erros cr√≠ticos

## üí° DICAS DE DEBUGGING

```javascript
// Adicione sempre no in√≠cio dos m√©todos:
console.log('=== M√âTODO X ===', parametros);

// Adicione no final:
console.log('=== RESULTADO ===', resultado);

// Para APIs:
console.log('=== RESPONSE ===', response.status, await response.text());
```

## ü§ù PR√ìXIMO PROMPT

**Ap√≥s implementar Fase 1-2, me envie:**
1. Screenshot da interface funcionando
2. Console logs das APIs
3. Qualquer erro encontrado
4. Suas pr√≥ximas d√∫vidas espec√≠ficas

**A√≠ criamos Fase 3 baseado no que realmente funcionou.**

---

**LEMBRE-SE:** Melhor ter algo simples funcionando do que algo complexo quebrado. Sua abordagem gradual √© a correta!

