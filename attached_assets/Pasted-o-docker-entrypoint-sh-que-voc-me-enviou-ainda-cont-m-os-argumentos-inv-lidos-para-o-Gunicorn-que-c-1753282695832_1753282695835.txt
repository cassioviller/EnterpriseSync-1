o docker-entrypoint.sh que voc√™ me enviou ainda cont√©m os argumentos inv√°lidos para o Gunicorn que causam o erro unrecognized arguments: --keepalive main:app.
Eu j√° havia fornecido uma vers√£o corrigida do docker-entrypoint.sh na nossa intera√ß√£o anterior. Parece que essa vers√£o n√£o foi aplicada.
A causa do erro do Gunicorn √© que os argumentos --keepalive, --max-requests e --max-requests-jitter n√£o s√£o op√ß√µes v√°lidas para o Gunicorn na forma como est√£o sendo usadas no seu script.
Por favor, substitua o seu docker-entrypoint.sh pelo conte√∫do abaixo (que √© a vers√£o corrigida que j√° te enviei):
bash
#!/bin/bash
# DOCKER ENTRYPOINT - SIGE v8.0
# Script de inicializa√ß√£o para container de produ√ß√£o

set -e

echo "üöÄ Iniciando SIGE v8.0 em container Docker..."

# Aguardar banco de dados estar dispon√≠vel
echo "‚è≥ Aguardando banco de dados PostgreSQL..."

# Extrair host e porta da DATABASE_URL
DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
DB_USER=$(echo $DATABASE_URL | sed -n 's/.*\/\/\([^:]*\):.*/\1/p')

# Usar valores padr√£o se n√£o conseguir extrair
DB_HOST=${DB_HOST:-viajey_sige}
DB_PORT=${DB_PORT:-5432}
DB_USER=${DB_USER:-sige}

echo "   Conectando em: $DB_HOST:$DB_PORT como $DB_USER"

until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
    echo "   Banco ainda n√£o dispon√≠vel, aguardando..."
    sleep 3
done
echo "‚úÖ Banco de dados conectado!"

# Aplicar migra√ß√µes e criar tabelas
echo "üóÑÔ∏è Preparando banco de dados..."
cd /app
python -c "
from app import app, db
with app.app_context():
    try:
        import models
        db.create_all()
        print('‚úÖ Tabelas criadas/verificadas com sucesso')
    except Exception as e:
        print(f'‚ùå Erro ao criar tabelas: {e}')
        exit(1)
"

# Verificar sa√∫de da aplica√ß√£o
echo "üîç Verificando aplica√ß√£o..."
python -c "
from app import app
try:
    with app.app_context():
        print('‚úÖ Aplica√ß√£o carregada com sucesso')
except Exception as e:
    print(f'‚ùå Erro na aplica√ß√£o: {e}')
    exit(1)
"

# Iniciar aplica√ß√£o com Gunicorn
echo "üåê Iniciando servidor Gunicorn na porta ${PORT}..."
exec gunicorn \
    --bind 0.0.0.0:${PORT} \
    --workers 4 \
    --worker-class sync \
    --timeout 30 \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    --capture-output \
    main:app
Ap√≥s substituir o arquivo, certifique-se de que ele tenha permiss√µes de execu√ß√£o (chmod +x docker-entrypoint.sh) e tente o deploy novamente no EasyPanel. Isso deve resolver o problema do Gunicorn.
11:57
Obrigado por compartilhar os arquivos. Analisei o Dockerfile e o docker-entrypoint.sh que voc√™ forneceu. O Dockerfile est√° correto e o build deve estar funcionando sem problemas.
No entanto, o docker-entrypoint.sh que voc√™ me enviou ainda cont√©m os argumentos inv√°lidos para o Gunicorn que causam o erro unrecognized arguments: --keepalive main:app.
Eu j√° havia fornecido uma vers√£o corrigida do docker-entrypoint.sh na nossa intera√ß√£o anterior. Parece que essa vers√£o n√£o foi aplicada.
A causa do erro do Gunicorn √© que os argumentos --keepalive, --max-requests e --max-requests-jitter n√£o s√£o op√ß√µes v√°lidas para o Gunicorn na forma como est√£o sendo usadas no seu script.
Por favor, substitua o seu docker-entrypoint.sh pelo conte√∫do abaixo (que √© a vers√£o corrigida que j√° te enviei):
bash
#!/bin/bash
# DOCKER ENTRYPOINT - SIGE v8.0
# Script de inicializa√ß√£o para container de produ√ß√£o

set -e

echo "üöÄ Iniciando SIGE v8.0 em container Docker..."

# Aguardar banco de dados estar dispon√≠vel
echo "‚è≥ Aguardando banco de dados PostgreSQL..."

# Extrair host e porta da DATABASE_URL
DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
DB_USER=$(echo $DATABASE_URL | sed -n 's/.*\/\/\([^:]*\):.*/\1/p')

# Usar valores padr√£o se n√£o conseguir extrair
DB_HOST=${DB_HOST:-viajey_sige}
DB_PORT=${DB_PORT:-5432}
DB_USER=${DB_USER:-sige}

echo "   Conectando em: $DB_HOST:$DB_PORT como $DB_USER"

until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
    echo "   Banco ainda n√£o dispon√≠vel, aguardando..."
    sleep 3
done
echo "‚úÖ Banco de dados conectado!"

# Aplicar migra√ß√µes e criar tabelas
echo "üóÑÔ∏è Preparando banco de dados..."
cd /app
python -c "
from app import app, db
with app.app_context():
    try:
        import models
        db.create_all()
        print('‚úÖ Tabelas criadas/verificadas com sucesso')
    except Exception as e:
        print(f'‚ùå Erro ao criar tabelas: {e}')
        exit(1)
"

# Verificar sa√∫de da aplica√ß√£o
echo "üîç Verificando aplica√ß√£o..."
python -c "
from app import app
try:
    with app.app_context():
        print('‚úÖ Aplica√ß√£o carregada com sucesso')
except Exception as e:
    print(f'‚ùå Erro na aplica√ß√£o: {e}')
    exit(1)
"

# Iniciar aplica√ß√£o com Gunicorn
echo "üåê Iniciando servidor Gunicorn na porta ${PORT}..."
exec gunicorn \
    --bind 0.0.0.0:${PORT} \
    --workers 4 \
    --worker-class sync \
    --timeout 30 \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    --capture-output \
    main:app
Ap√≥s substituir o arquivo, certifique-se de que ele tenha permiss√µes de execu√ß√£o (chmod +x docker-entrypoint.sh) e tente o deploy novamente no EasyPanel. Isso deve resolver o problema do Gunicorn.