# üéØ PROMPT PARA REPLIT AGENT - Adicionar Campo jornada_semanal

**COPIE TODO ESTE CONTE√öDO E COLE NO REPLIT AGENT**

---

## üö® CONTEXTO CR√çTICO

**Problema em Produ√ß√£o:**
```
AttributeError: 'Funcionario' object has no attribute 'jornada_semanal'
```

**Impacto:** 
- ‚ùå 100% dos KPIs de funcion√°rios quebrados
- ‚ùå Custos de obras n√£o calculados
- ‚ùå Dashboard mostrando R$ 0.00

**Causa Raiz:**
O c√≥digo foi atualizado (commits a0b1611, 2ad22f1, ef4e42b) para usar `funcionario.jornada_semanal`, mas:
1. ‚ùå O campo N√ÉO foi adicionado ao modelo `Funcionario` em `models.py`
2. ‚ùå Nenhuma migra√ß√£o foi criada para adicionar a coluna no banco de dados

**Resultado:**
- ‚úÖ Funciona em DEV (SQLite cria coluna automaticamente)
- ‚ùå QUEBRA em PRODU√á√ÉO (PostgreSQL exige migra√ß√£o expl√≠cita)

---

## üéØ OBJETIVO

Adicionar o campo `jornada_semanal` ao modelo `Funcionario` e criar a migra√ß√£o 44 para atualizar o banco de dados em produ√ß√£o.

---

## ‚úÖ MODIFICA√á√ÉO 1: Adicionar Campo ao Modelo

**Arquivo:** `models.py`

**Localizar a classe Funcionario (aproximadamente linha 71-94):**

```python
class Funcionario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(10), unique=True, nullable=False)
    nome = db.Column(db.String(100), nullable=False)
    cpf = db.Column(db.String(14), unique=True, nullable=False)
    rg = db.Column(db.String(20))
    data_nascimento = db.Column(db.Date)
    endereco = db.Column(db.Text)
    telefone = db.Column(db.String(20))
    email = db.Column(db.String(120))
    data_admissao = db.Column(db.Date, nullable=False)
    salario = db.Column(db.Float, default=0.0)
    ativo = db.Column(db.Boolean, default=True)
    foto = db.Column(db.String(255))
    foto_base64 = db.Column(db.Text)
    departamento_id = db.Column(db.Integer, db.ForeignKey('departamento.id'))
    funcao_id = db.Column(db.Integer, db.ForeignKey('funcao.id'))
    horario_trabalho_id = db.Column(db.Integer, db.ForeignKey('horario_trabalho.id'))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
```

**ADICIONAR esta linha ap√≥s `salario` (linha ~82):**

```python
    salario = db.Column(db.Float, default=0.0)
    jornada_semanal = db.Column(db.Integer, default=44)  # Horas semanais (CLT padr√£o: 44h)
    ativo = db.Column(db.Boolean, default=True)
```

**Resultado esperado:**

```python
class Funcionario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    codigo = db.Column(db.String(10), unique=True, nullable=False)
    nome = db.Column(db.String(100), nullable=False)
    cpf = db.Column(db.String(14), unique=True, nullable=False)
    rg = db.Column(db.String(20))
    data_nascimento = db.Column(db.Date)
    endereco = db.Column(db.Text)
    telefone = db.Column(db.String(20))
    email = db.Column(db.String(120))
    data_admissao = db.Column(db.Date, nullable=False)
    salario = db.Column(db.Float, default=0.0)
    jornada_semanal = db.Column(db.Integer, default=44)  # ‚úÖ ADICIONADO
    ativo = db.Column(db.Boolean, default=True)
    foto = db.Column(db.String(255))
    foto_base64 = db.Column(db.Text)
    departamento_id = db.Column(db.Integer, db.ForeignKey('departamento.id'))
    funcao_id = db.Column(db.Integer, db.ForeignKey('funcao.id'))
    horario_trabalho_id = db.Column(db.Integer, db.ForeignKey('horario_trabalho.id'))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
```

---

## ‚úÖ MODIFICA√á√ÉO 2: Criar Migra√ß√£o 44

**Arquivo:** `migrations.py`

**PASSO 1: Adicionar fun√ß√£o de migra√ß√£o no final do arquivo (antes de `executar_migracoes()`):**

**Localizar (aproximadamente linha 1696):**
```python
def executar_migracoes():
    """
    Execute todas as migra√ß√µes necess√°rias automaticamente com rastreamento
    """
```

**ADICIONAR ANTES desta fun√ß√£o:**

```python
def _migration_44_adicionar_jornada_semanal():
    """
    MIGRA√á√ÉO 44: Adicionar coluna jornada_semanal √† tabela funcionario
    
    Contexto:
    - Commits a0b1611, 2ad22f1, ef4e42b atualizaram c√≥digo para usar jornada_semanal
    - Coluna n√£o existe em produ√ß√£o, causando AttributeError
    - Requerida por: utils.py, views.py, kpis_engine.py, folha_service.py
    
    A√ß√£o:
    - Adiciona coluna jornada_semanal INTEGER DEFAULT 44
    - Valor padr√£o 44h (jornada CLT padr√£o)
    """
    try:
        logger.info("=" * 80)
        logger.info("üë∑ MIGRA√á√ÉO 44: Adicionar jornada_semanal a funcionario")
        logger.info("=" * 80)
        
        connection = db.engine.raw_connection()
        cursor = connection.cursor()
        
        # Verificar se coluna j√° existe
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'funcionario' 
            AND column_name = 'jornada_semanal'
        """)
        
        if not cursor.fetchone():
            logger.info("üîß Adicionando coluna jornada_semanal...")
            
            # Adicionar coluna com valor padr√£o
            cursor.execute("""
                ALTER TABLE funcionario 
                ADD COLUMN jornada_semanal INTEGER DEFAULT 44
            """)
            
            logger.info("‚úÖ Coluna jornada_semanal adicionada (padr√£o: 44h CLT)")
            
            # Atualizar funcion√°rios existentes que tenham NULL
            cursor.execute("""
                UPDATE funcionario 
                SET jornada_semanal = 44 
                WHERE jornada_semanal IS NULL
            """)
            
            updated_count = cursor.rowcount
            logger.info(f"‚úÖ {updated_count} funcion√°rios atualizados com jornada padr√£o 44h")
        else:
            logger.info("‚è≠Ô∏è  Coluna jornada_semanal j√° existe - SKIP")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        logger.info("=" * 80)
        logger.info("‚úÖ MIGRA√á√ÉO 44 CONCLU√çDA: jornada_semanal adicionada!")
        logger.info("=" * 80)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na Migra√ß√£o 44: {str(e)}")
        if 'connection' in locals():
            connection.rollback()
            cursor.close()
            connection.close()
        import traceback
        logger.error(traceback.format_exc())
        raise


```

---

**PASSO 2: Registrar migra√ß√£o na lista de migra√ß√µes:**

**Localizar dentro da fun√ß√£o `executar_migracoes()` (aproximadamente linha 1718-1732):**

```python
        migrations_to_run = [
            (20, "Sistema de Ve√≠culos Inteligente", _migration_20_unified_vehicle_system),
            (27, "Sistema de Alimenta√ß√£o", _migration_27_alimentacao_system),
            (33, "Recriar frota_despesa", _migration_33_recreate_frota_despesa),
            (34, "Campos pagamento Restaurante", _migration_34_restaurante_campos_pagamento),
            (35, "Coluna numero_nota_fiscal custo_veiculo", _migration_35_custo_veiculo_numero_nota_fiscal),
            (36, "Remover tabelas propostas legado", _migration_36_remove_old_propostas_tables),
            (37, "Renomear campos propostas_comerciais", _migration_37_rename_propostas_fields),
            (38, "Criar proposta_historico", _migration_38_create_proposta_historico),
            (39, "Sistema Almoxarifado v3.0", _migration_39_create_almoxarifado_system),
            (40, "Sistema Ponto Eletr√¥nico Compartilhado", _migration_40_ponto_compartilhado),
            (41, "Sistema Financeiro v9.0", _migration_41_sistema_financeiro),
            (42, "Configura√ß√£o Obras/Funcion√°rio Ponto", _migration_42_funcionario_obras_ponto),
            (43, "Completar estruturas v9.0", _migration_43_completar_estruturas_v9),
        ]
```

**ADICIONAR esta linha no final da lista:**

```python
        migrations_to_run = [
            (20, "Sistema de Ve√≠culos Inteligente", _migration_20_unified_vehicle_system),
            (27, "Sistema de Alimenta√ß√£o", _migration_27_alimentacao_system),
            (33, "Recriar frota_despesa", _migration_33_recreate_frota_despesa),
            (34, "Campos pagamento Restaurante", _migration_34_restaurante_campos_pagamento),
            (35, "Coluna numero_nota_fiscal custo_veiculo", _migration_35_custo_veiculo_numero_nota_fiscal),
            (36, "Remover tabelas propostas legado", _migration_36_remove_old_propostas_tables),
            (37, "Renomear campos propostas_comerciais", _migration_37_rename_propostas_fields),
            (38, "Criar proposta_historico", _migration_38_create_proposta_historico),
            (39, "Sistema Almoxarifado v3.0", _migration_39_create_almoxarifado_system),
            (40, "Sistema Ponto Eletr√¥nico Compartilhado", _migration_40_ponto_compartilhado),
            (41, "Sistema Financeiro v9.0", _migration_41_sistema_financeiro),
            (42, "Configura√ß√£o Obras/Funcion√°rio Ponto", _migration_42_funcionario_obras_ponto),
            (43, "Completar estruturas v9.0", _migration_43_completar_estruturas_v9),
            (44, "Adicionar jornada_semanal a funcionario", _migration_44_adicionar_jornada_semanal),  # ‚úÖ ADICIONADO
        ]
```

---

## üìã VALIDA√á√ÉO

Ap√≥s implementar as modifica√ß√µes:

### ‚úÖ Teste 1: Verificar Modelo
```bash
# Verificar se jornada_semanal est√° no modelo
grep -n "jornada_semanal" models.py
```

**Resultado esperado:**
```
83:    jornada_semanal = db.Column(db.Integer, default=44)  # Horas semanais (CLT padr√£o: 44h)
```

### ‚úÖ Teste 2: Verificar Migra√ß√£o Criada
```bash
# Verificar se migra√ß√£o 44 foi criada
grep -n "_migration_44" migrations.py
```

**Resultado esperado:**
```
XXXX:def _migration_44_adicionar_jornada_semanal():
```

### ‚úÖ Teste 3: Verificar Migra√ß√£o Registrada
```bash
# Verificar se migra√ß√£o 44 est√° na lista
grep -n "44.*jornada_semanal" migrations.py
```

**Resultado esperado:**
```
YYYY:            (44, "Adicionar jornada_semanal a funcionario", _migration_44_adicionar_jornada_semanal),
```

### ‚úÖ Teste 4: Testar em Desenvolvimento
```bash
# Executar migra√ß√µes localmente
python3.11 pre_start.py
```

**Resultado esperado:**
```
üë∑ MIGRA√á√ÉO 44: Adicionar jornada_semanal a funcionario
üîß Adicionando coluna jornada_semanal...
‚úÖ Coluna jornada_semanal adicionada (padr√£o: 44h CLT)
‚úÖ XX funcion√°rios atualizados com jornada padr√£o 44h
‚úÖ MIGRA√á√ÉO 44 CONCLU√çDA: jornada_semanal adicionada!
```

---

## üöÄ DEPLOY EM PRODU√á√ÉO

### Passo 1: Commit e Push
```bash
git add models.py migrations.py
git commit -m "Add jornada_semanal field to Funcionario model and migration 44"
git push origin main
```

### Passo 2: Deploy no Easypanel/Hostinger
1. Acesse o painel de deploy
2. Fa√ßa o deploy da nova vers√£o
3. Aguarde o Docker executar as migra√ß√µes

### Passo 3: Verificar Logs
```bash
# Verificar logs do container
docker logs <container_name> | grep "MIGRA√á√ÉO 44"
```

**Resultado esperado:**
```
üë∑ MIGRA√á√ÉO 44: Adicionar jornada_semanal a funcionario
‚úÖ Coluna jornada_semanal adicionada (padr√£o: 44h CLT)
‚úÖ 47 funcion√°rios atualizados com jornada padr√£o 44h
‚úÖ MIGRA√á√ÉO 44 CONCLU√çDA!
```

### Passo 4: Verificar KPIs
1. Acessar `/dashboard`
2. Verificar se KPIs mostram valores corretos
3. Acessar `/funcionarios`
4. Verificar se custos aparecem

---

## üìä RESULTADO ESPERADO

### ANTES (QUEBRADO):
```
‚ùå AttributeError: 'Funcionario' object has no attribute 'jornada_semanal'
‚ùå KPIs Funcion√°rios: R$ 0.00
‚ùå Custos por Obra: {} (vazio)
‚ùå Total Horas: 0
```

### DEPOIS (CORRIGIDO):
```
‚úÖ Coluna jornada_semanal criada no banco
‚úÖ KPIs Funcion√°rios: R$ 45.320,00
‚úÖ Custos por Obra: Valores corretos
‚úÖ Total Horas: 3.528h
```

---

## üîç TROUBLESHOOTING

### Problema: Migra√ß√£o n√£o executa
**Solu√ß√£o:** Verificar se a migra√ß√£o foi adicionada √† lista `migrations_to_run`

### Problema: Erro "column already exists"
**Solu√ß√£o:** Normal - a migra√ß√£o detecta e pula automaticamente

### Problema: KPIs ainda mostram R$ 0.00
**Solu√ß√£o:** 
1. Verificar se migra√ß√£o foi executada: `SELECT * FROM migration_history WHERE migration_number = 44`
2. Verificar se coluna foi criada: `SELECT column_name FROM information_schema.columns WHERE table_name='funcionario' AND column_name='jornada_semanal'`
3. Reiniciar container Docker

### Problema: Funcion√°rios com jornada NULL
**Solu√ß√£o:** A migra√ß√£o atualiza automaticamente com valor padr√£o 44h

---

## ‚ö†Ô∏è OBSERVA√á√ïES IMPORTANTES

1. **Valor Padr√£o:** 44h √© a jornada CLT padr√£o no Brasil
2. **Idempot√™ncia:** A migra√ß√£o pode ser executada m√∫ltiplas vezes sem problemas
3. **Compatibilidade:** Funciona com PostgreSQL e SQLite
4. **Rollback:** Se necess√°rio, pode remover a coluna com `ALTER TABLE funcionario DROP COLUMN jornada_semanal`

---

## üéØ PRIORIDADE

üî¥ **CR√çTICA** - Sistema 100% quebrado em produ√ß√£o

**Tempo Estimado:** 15-30 minutos

**Complexidade:** Baixa

**Impacto:** Resolve 100% dos erros de KPIs em produ√ß√£o

---

**FIM DO PROMPT - COPIE TUDO E COLE NO REPLIT AGENT**

