# üéØ PROMPT COMPLETO: Implementar M√≥dulo de Folha de Pagamento

## CONTEXTO DO PROJETO

**Sistema:** SIGE v8.0 - Gest√£o de Constru√ß√£o Civil  
**M√≥dulo:** Folha de Pagamento Autom√°tica (M√≥dulo 6)  
**Status Atual:** 50% implementado  
**Objetivo:** Implementar 100% das funcionalidades

---

## SITUA√á√ÉO ATUAL

### ‚úÖ O QUE J√Å EXISTE:

**Modelos (models.py):**
- ‚úÖ FolhaPagamento (linha 1619) - Folha mensal por funcion√°rio
- ‚úÖ ParametrosLegais (linha 1784) - INSS, IRRF, FGTS, etc
- ‚úÖ BeneficioFuncionario (linha 1551) - VR, VT, plano de sa√∫de
- ‚úÖ Adiantamento (linha 1712) - Adiantamentos salariais
- ‚úÖ FeriasDecimo (linha 1747) - F√©rias e 13¬∫ sal√°rio
- ‚úÖ CalculoHorasMensal (linha 1579) - C√°lculo de horas

**Servi√ßo (services/folha_service.py):**
- ‚úÖ Fun√ß√£o `processar_folha_funcionario()` - C√°lculo completo

**Views (folha_pagamento_views.py):**
- ‚úÖ Dashboard (`/folha/dashboard`) - Funcionando
- ‚úÖ Processar Folha (`/folha/processar/<ano>/<mes>`) - Funcionando
- ‚ùå Configura√ß√µes Salariais - "em desenvolvimento"
- ‚ùå Benef√≠cios - "em desenvolvimento"
- ‚ùå Adiantamentos - "em desenvolvimento"
- ‚ùå Relat√≥rios - "em desenvolvimento"

---

## OBJETIVO

Implementar as **4 funcionalidades faltantes** com CRUD completo, valida√ß√µes e interface profissional.

---

## TAREFA 1: PAR√ÇMETROS LEGAIS

### Funcionalidade:
Configurar par√¢metros legais anuais (INSS, IRRF, FGTS, sal√°rio m√≠nimo, etc)

### Rotas a Implementar:

#### 1.1 - Listar Par√¢metros
```python
@folha_bp.route('/parametros-legais')
@admin_required
def listar_parametros_legais():
    """Listar par√¢metros legais configurados"""
    parametros = ParametrosLegais.query.filter_by(
        admin_id=current_user.id
    ).order_by(ParametrosLegais.ano_vigencia.desc()).all()
    
    return render_template('folha_pagamento/parametros_legais.html',
                         parametros=parametros)
```

#### 1.2 - Criar/Editar Par√¢metros
```python
@folha_bp.route('/parametros-legais/criar', methods=['GET', 'POST'])
@folha_bp.route('/parametros-legais/editar/<int:id>', methods=['GET', 'POST'])
@admin_required
def criar_editar_parametros(id=None):
    """Criar ou editar par√¢metros legais"""
    parametro = None
    if id:
        parametro = ParametrosLegais.query.get_or_404(id)
        if parametro.admin_id != current_user.id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('folha.listar_parametros_legais'))
    
    if request.method == 'POST':
        try:
            ano = int(request.form.get('ano_vigencia'))
            
            # Verificar se j√° existe para este ano
            existe = ParametrosLegais.query.filter_by(
                admin_id=current_user.id,
                ano_vigencia=ano
            ).first()
            
            if existe and (not id or existe.id != id):
                flash(f'J√° existem par√¢metros configurados para {ano}.', 'warning')
                return redirect(url_for('folha.listar_parametros_legais'))
            
            if not parametro:
                parametro = ParametrosLegais(
                    admin_id=current_user.id,
                    ano_vigencia=ano
                )
            
            # INSS
            parametro.inss_faixa1_limite = float(request.form.get('inss_faixa1_limite'))
            parametro.inss_faixa1_percentual = float(request.form.get('inss_faixa1_percentual'))
            parametro.inss_faixa2_limite = float(request.form.get('inss_faixa2_limite'))
            parametro.inss_faixa2_percentual = float(request.form.get('inss_faixa2_percentual'))
            parametro.inss_faixa3_limite = float(request.form.get('inss_faixa3_limite'))
            parametro.inss_faixa3_percentual = float(request.form.get('inss_faixa3_percentual'))
            parametro.inss_faixa4_limite = float(request.form.get('inss_faixa4_limite'))
            parametro.inss_faixa4_percentual = float(request.form.get('inss_faixa4_percentual'))
            parametro.inss_teto = float(request.form.get('inss_teto'))
            
            # IRRF
            parametro.irrf_isencao = float(request.form.get('irrf_isencao'))
            parametro.irrf_faixa1_limite = float(request.form.get('irrf_faixa1_limite'))
            parametro.irrf_faixa1_percentual = float(request.form.get('irrf_faixa1_percentual'))
            parametro.irrf_faixa1_deducao = float(request.form.get('irrf_faixa1_deducao'))
            parametro.irrf_faixa2_limite = float(request.form.get('irrf_faixa2_limite'))
            parametro.irrf_faixa2_percentual = float(request.form.get('irrf_faixa2_percentual'))
            parametro.irrf_faixa2_deducao = float(request.form.get('irrf_faixa2_deducao'))
            parametro.irrf_faixa3_limite = float(request.form.get('irrf_faixa3_limite'))
            parametro.irrf_faixa3_percentual = float(request.form.get('irrf_faixa3_percentual'))
            parametro.irrf_faixa3_deducao = float(request.form.get('irrf_faixa3_deducao'))
            parametro.irrf_faixa4_percentual = float(request.form.get('irrf_faixa4_percentual'))
            parametro.irrf_faixa4_deducao = float(request.form.get('irrf_faixa4_deducao'))
            parametro.irrf_dependente_valor = float(request.form.get('irrf_dependente_valor'))
            
            # Outros
            parametro.fgts_percentual = float(request.form.get('fgts_percentual'))
            parametro.salario_minimo = float(request.form.get('salario_minimo'))
            parametro.vale_transporte_percentual = float(request.form.get('vale_transporte_percentual'))
            parametro.adicional_noturno_percentual = float(request.form.get('adicional_noturno_percentual'))
            parametro.hora_extra_50_percentual = float(request.form.get('hora_extra_50_percentual'))
            parametro.hora_extra_100_percentual = float(request.form.get('hora_extra_100_percentual'))
            parametro.ativo = request.form.get('ativo') == 'true'
            
            if not id:
                db.session.add(parametro)
            
            db.session.commit()
            flash(f'Par√¢metros legais de {ano} salvos com sucesso!', 'success')
            return redirect(url_for('folha.listar_parametros_legais'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao salvar par√¢metros: {str(e)}', 'error')
    
    # Valores padr√£o 2025
    valores_padrao = {
        'ano_vigencia': 2025,
        'inss_faixa1_limite': 1412.00,
        'inss_faixa1_percentual': 7.5,
        'inss_faixa2_limite': 2666.68,
        'inss_faixa2_percentual': 9.0,
        'inss_faixa3_limite': 4000.03,
        'inss_faixa3_percentual': 12.0,
        'inss_faixa4_limite': 7786.02,
        'inss_faixa4_percentual': 14.0,
        'inss_teto': 908.85,
        'irrf_isencao': 2259.20,
        'irrf_faixa1_limite': 2826.65,
        'irrf_faixa1_percentual': 7.5,
        'irrf_faixa1_deducao': 169.44,
        'irrf_faixa2_limite': 3751.05,
        'irrf_faixa2_percentual': 15.0,
        'irrf_faixa2_deducao': 381.44,
        'irrf_faixa3_limite': 4664.68,
        'irrf_faixa3_percentual': 22.5,
        'irrf_faixa3_deducao': 662.77,
        'irrf_faixa4_percentual': 27.5,
        'irrf_faixa4_deducao': 896.00,
        'irrf_dependente_valor': 189.59,
        'fgts_percentual': 8.0,
        'salario_minimo': 1412.00,
        'vale_transporte_percentual': 6.0,
        'adicional_noturno_percentual': 20.0,
        'hora_extra_50_percentual': 50.0,
        'hora_extra_100_percentual': 100.0,
    }
    
    return render_template('folha_pagamento/parametros_form.html',
                         parametro=parametro,
                         valores_padrao=valores_padrao)
```

---

## TAREFA 2: BENEF√çCIOS

### Funcionalidade:
Gerenciar benef√≠cios dos funcion√°rios (VR, VT, plano de sa√∫de, seguro de vida)

### Rotas a Implementar:

#### 2.1 - Listar Benef√≠cios
```python
@folha_bp.route('/beneficios')
@admin_required
def listar_beneficios():
    """Listar todos os benef√≠cios"""
    beneficios = BeneficioFuncionario.query.filter_by(
        admin_id=current_user.id
    ).join(Funcionario).order_by(Funcionario.nome).all()
    
    # Agrupar por tipo
    beneficios_por_tipo = {}
    for b in beneficios:
        if b.tipo_beneficio not in beneficios_por_tipo:
            beneficios_por_tipo[b.tipo_beneficio] = []
        beneficios_por_tipo[b.tipo_beneficio].append(b)
    
    # Calcular totais
    total_vr = sum(b.valor for b in beneficios if b.tipo_beneficio == 'VR' and b.ativo)
    total_vt = sum(b.valor for b in beneficios if b.tipo_beneficio == 'VT' and b.ativo)
    total_saude = sum(b.valor for b in beneficios if b.tipo_beneficio == 'PLANO_SAUDE' and b.ativo)
    
    return render_template('folha_pagamento/beneficios.html',
                         beneficios=beneficios,
                         beneficios_por_tipo=beneficios_por_tipo,
                         total_vr=total_vr,
                         total_vt=total_vt,
                         total_saude=total_saude)
```

#### 2.2 - Criar/Editar Benef√≠cio
```python
@folha_bp.route('/beneficios/criar', methods=['GET', 'POST'])
@folha_bp.route('/beneficios/editar/<int:id>', methods=['GET', 'POST'])
@admin_required
def criar_editar_beneficio(id=None):
    """Criar ou editar benef√≠cio"""
    beneficio = None
    if id:
        beneficio = BeneficioFuncionario.query.get_or_404(id)
        if beneficio.admin_id != current_user.id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('folha.listar_beneficios'))
    
    if request.method == 'POST':
        try:
            funcionario_id = int(request.form.get('funcionario_id'))
            tipo_beneficio = request.form.get('tipo_beneficio')
            valor = float(request.form.get('valor'))
            percentual_desconto = float(request.form.get('percentual_desconto', 0))
            dias_por_mes = int(request.form.get('dias_por_mes', 22))
            data_inicio = datetime.strptime(request.form.get('data_inicio'), '%Y-%m-%d').date()
            data_fim_str = request.form.get('data_fim')
            data_fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date() if data_fim_str else None
            
            if not beneficio:
                beneficio = BeneficioFuncionario(
                    admin_id=current_user.id,
                    funcionario_id=funcionario_id
                )
            
            beneficio.tipo_beneficio = tipo_beneficio
            beneficio.valor = valor
            beneficio.percentual_desconto = percentual_desconto
            beneficio.dias_por_mes = dias_por_mes
            beneficio.data_inicio = data_inicio
            beneficio.data_fim = data_fim
            beneficio.observacoes = request.form.get('observacoes')
            beneficio.ativo = request.form.get('ativo') == 'true'
            
            if not id:
                db.session.add(beneficio)
            
            db.session.commit()
            flash('Benef√≠cio salvo com sucesso!', 'success')
            return redirect(url_for('folha.listar_beneficios'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao salvar benef√≠cio: {str(e)}', 'error')
    
    # Buscar funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=current_user.id,
        ativo=True
    ).order_by(Funcionario.nome).all()
    
    tipos_beneficio = [
        ('VR', 'Vale Refei√ß√£o'),
        ('VT', 'Vale Transporte'),
        ('PLANO_SAUDE', 'Plano de Sa√∫de'),
        ('PLANO_ODONTO', 'Plano Odontol√≥gico'),
        ('SEGURO_VIDA', 'Seguro de Vida'),
        ('AUXILIO_CRECHE', 'Aux√≠lio Creche'),
        ('OUTRO', 'Outro')
    ]
    
    return render_template('folha_pagamento/beneficio_form.html',
                         beneficio=beneficio,
                         funcionarios=funcionarios,
                         tipos_beneficio=tipos_beneficio)
```

#### 2.3 - Deletar Benef√≠cio
```python
@folha_bp.route('/beneficios/deletar/<int:id>', methods=['POST'])
@admin_required
def deletar_beneficio(id):
    """Deletar benef√≠cio"""
    beneficio = BeneficioFuncionario.query.get_or_404(id)
    
    if beneficio.admin_id != current_user.id:
        flash('Acesso negado.', 'error')
        return redirect(url_for('folha.listar_beneficios'))
    
    try:
        db.session.delete(beneficio)
        db.session.commit()
        flash('Benef√≠cio deletado com sucesso!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Erro ao deletar benef√≠cio: {str(e)}', 'error')
    
    return redirect(url_for('folha.listar_beneficios'))
```

---

## TAREFA 3: ADIANTAMENTOS

### Funcionalidade:
Gerenciar adiantamentos salariais com aprova√ß√£o e parcelamento

### Rotas a Implementar:

#### 3.1 - Listar Adiantamentos
```python
@folha_bp.route('/adiantamentos')
@admin_required
def listar_adiantamentos():
    """Listar adiantamentos"""
    status_filtro = request.args.get('status', 'TODOS')
    
    query = Adiantamento.query.filter_by(admin_id=current_user.id)
    
    if status_filtro != 'TODOS':
        query = query.filter_by(status=status_filtro)
    
    adiantamentos = query.join(Funcionario).order_by(
        Adiantamento.data_solicitacao.desc()
    ).all()
    
    # Calcular totais
    total_solicitado = sum(a.valor_total for a in adiantamentos if a.status == 'SOLICITADO')
    total_aprovado = sum(a.valor_total for a in adiantamentos if a.status == 'APROVADO')
    total_quitado = sum(a.valor_total for a in adiantamentos if a.status == 'QUITADO')
    
    return render_template('folha_pagamento/adiantamentos.html',
                         adiantamentos=adiantamentos,
                         status_filtro=status_filtro,
                         total_solicitado=total_solicitado,
                         total_aprovado=total_aprovado,
                         total_quitado=total_quitado)
```

#### 3.2 - Criar Adiantamento
```python
@folha_bp.route('/adiantamentos/criar', methods=['GET', 'POST'])
@admin_required
def criar_adiantamento():
    """Criar novo adiantamento"""
    if request.method == 'POST':
        try:
            funcionario_id = int(request.form.get('funcionario_id'))
            valor_total = float(request.form.get('valor_total'))
            parcelas = int(request.form.get('parcelas', 1))
            motivo = request.form.get('motivo')
            observacoes = request.form.get('observacoes')
            
            # Calcular valor da parcela
            valor_parcela = valor_total / parcelas if parcelas > 0 else valor_total
            
            adiantamento = Adiantamento(
                funcionario_id=funcionario_id,
                valor_total=valor_total,
                data_solicitacao=date.today(),
                parcelas=parcelas,
                valor_parcela=valor_parcela,
                motivo=motivo,
                observacoes=observacoes,
                status='SOLICITADO',
                admin_id=current_user.id
            )
            
            db.session.add(adiantamento)
            db.session.commit()
            
            flash('Adiantamento solicitado com sucesso!', 'success')
            return redirect(url_for('folha.listar_adiantamentos'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao criar adiantamento: {str(e)}', 'error')
    
    # Buscar funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=current_user.id,
        ativo=True
    ).order_by(Funcionario.nome).all()
    
    return render_template('folha_pagamento/adiantamento_form.html',
                         funcionarios=funcionarios)
```

#### 3.3 - Aprovar/Rejeitar Adiantamento
```python
@folha_bp.route('/adiantamentos/aprovar/<int:id>', methods=['POST'])
@admin_required
def aprovar_adiantamento(id):
    """Aprovar adiantamento"""
    adiantamento = Adiantamento.query.get_or_404(id)
    
    if adiantamento.admin_id != current_user.id:
        flash('Acesso negado.', 'error')
        return redirect(url_for('folha.listar_adiantamentos'))
    
    try:
        adiantamento.status = 'APROVADO'
        adiantamento.data_aprovacao = date.today()
        adiantamento.aprovado_por = current_user.id
        
        db.session.commit()
        flash('Adiantamento aprovado!', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Erro ao aprovar: {str(e)}', 'error')
    
    return redirect(url_for('folha.listar_adiantamentos'))

@folha_bp.route('/adiantamentos/rejeitar/<int:id>', methods=['POST'])
@admin_required
def rejeitar_adiantamento(id):
    """Rejeitar adiantamento"""
    adiantamento = Adiantamento.query.get_or_404(id)
    
    if adiantamento.admin_id != current_user.id:
        flash('Acesso negado.', 'error')
        return redirect(url_for('folha.listar_adiantamentos'))
    
    try:
        adiantamento.status = 'CANCELADO'
        adiantamento.observacoes = request.form.get('motivo_rejeicao', '')
        
        db.session.commit()
        flash('Adiantamento rejeitado.', 'info')
    except Exception as e:
        db.session.rollback()
        flash(f'Erro ao rejeitar: {str(e)}', 'error')
    
    return redirect(url_for('folha.listar_adiantamentos'))
```

---

## TAREFA 4: RELAT√ìRIOS

### Funcionalidade:
Gerar holerites, relat√≥rios anal√≠ticos e exporta√ß√µes

### Rotas a Implementar:

#### 4.1 - Dashboard de Relat√≥rios
```python
@folha_bp.route('/relatorios')
@admin_required
def relatorios():
    """Dashboard de relat√≥rios"""
    # M√™s atual
    hoje = date.today()
    mes_atual = hoje.replace(day=1)
    
    # √öltimos 6 meses
    meses_disponiveis = []
    for i in range(6):
        mes = (mes_atual - timedelta(days=i*30)).replace(day=1)
        folhas_mes = FolhaPagamento.query.filter_by(
            admin_id=current_user.id,
            mes_referencia=mes
        ).count()
        
        if folhas_mes > 0:
            meses_disponiveis.append({
                'mes': mes,
                'mes_nome': mes.strftime('%B/%Y'),
                'total_folhas': folhas_mes
            })
    
    return render_template('folha_pagamento/relatorios.html',
                         meses_disponiveis=meses_disponiveis)
```

#### 4.2 - Holerite Individual (PDF)
```python
@folha_bp.route('/relatorios/holerite/<int:folha_id>')
@admin_required
def gerar_holerite(folha_id):
    """Gerar holerite individual em PDF"""
    folha = FolhaPagamento.query.get_or_404(folha_id)
    
    if folha.admin_id != current_user.id:
        flash('Acesso negado.', 'error')
        return redirect(url_for('folha.relatorios'))
    
    # Renderizar template HTML do holerite
    html = render_template('folha_pagamento/holerite_pdf.html',
                         folha=folha,
                         funcionario=folha.funcionario,
                         empresa=current_user)
    
    # Converter para PDF usando WeasyPrint
    from weasyprint import HTML
    pdf = HTML(string=html).write_pdf()
    
    # Retornar PDF
    from flask import make_response
    response = make_response(pdf)
    response.headers['Content-Type'] = 'application/pdf'
    response.headers['Content-Disposition'] = f'inline; filename=holerite_{folha.funcionario.nome}_{folha.mes_referencia.strftime("%m_%Y")}.pdf'
    
    return response
```

#### 4.3 - Relat√≥rio Anal√≠tico (Excel)
```python
@folha_bp.route('/relatorios/analitico/<int:ano>/<int:mes>')
@admin_required
def relatorio_analitico(ano, mes):
    """Gerar relat√≥rio anal√≠tico em Excel"""
    mes_referencia = date(ano, mes, 1)
    
    folhas = FolhaPagamento.query.filter_by(
        admin_id=current_user.id,
        mes_referencia=mes_referencia
    ).join(Funcionario).order_by(Funcionario.nome).all()
    
    if not folhas:
        flash('Nenhuma folha encontrada para este per√≠odo.', 'warning')
        return redirect(url_for('folha.relatorios'))
    
    # Criar Excel usando openpyxl
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment, PatternFill
    
    wb = Workbook()
    ws = wb.active
    ws.title = f"Folha {mes:02d}/{ano}"
    
    # Cabe√ßalho
    headers = ['Funcion√°rio', 'CPF', 'Cargo', 'Sal√°rio Base', 'Horas Extras', 
               'Total Proventos', 'INSS', 'IRRF', 'Outros Desc.', 
               'Total Desc.', 'L√≠quido', 'FGTS']
    
    for col, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col, value=header)
        cell.font = Font(bold=True)
        cell.fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
        cell.alignment = Alignment(horizontal='center')
    
    # Dados
    for row, folha in enumerate(folhas, 2):
        ws.cell(row=row, column=1, value=folha.funcionario.nome)
        ws.cell(row=row, column=2, value=folha.funcionario.cpf)
        ws.cell(row=row, column=3, value=folha.funcionario.cargo or '')
        ws.cell(row=row, column=4, value=float(folha.salario_base or 0))
        ws.cell(row=row, column=5, value=float(folha.horas_extras or 0))
        ws.cell(row=row, column=6, value=float(folha.total_proventos or 0))
        ws.cell(row=row, column=7, value=float(folha.inss or 0))
        ws.cell(row=row, column=8, value=float(folha.irrf or 0))
        ws.cell(row=row, column=9, value=float(folha.outros_descontos or 0))
        ws.cell(row=row, column=10, value=float(folha.total_descontos or 0))
        ws.cell(row=row, column=11, value=float(folha.salario_liquido or 0))
        ws.cell(row=row, column=12, value=float(folha.fgts or 0))
    
    # Ajustar largura das colunas
    for col in ws.columns:
        max_length = 0
        column = col[0].column_letter
        for cell in col:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)
            except:
                pass
        adjusted_width = (max_length + 2)
        ws.column_dimensions[column].width = adjusted_width
    
    # Salvar em mem√≥ria
    from io import BytesIO
    output = BytesIO()
    wb.save(output)
    output.seek(0)
    
    # Retornar Excel
    from flask import send_file
    return send_file(
        output,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        as_attachment=True,
        download_name=f'folha_analitica_{mes:02d}_{ano}.xlsx'
    )
```

---

## MODIFICA√á√ïES NECESS√ÅRIAS

### Arquivo: `folha_pagamento_views.py`

**SUBSTITUIR as linhas 215-248 (rotas "em desenvolvimento") por TODAS as rotas acima.**

**Total de rotas a adicionar:** 12 novas rotas

---

## TEMPLATES HTML NECESS√ÅRIOS

Criar os seguintes templates em `templates/folha_pagamento/`:

1. **parametros_legais.html** - Lista de par√¢metros
2. **parametros_form.html** - Formul√°rio de par√¢metros
3. **beneficios.html** - Lista de benef√≠cios
4. **beneficio_form.html** - Formul√°rio de benef√≠cio
5. **adiantamentos.html** - Lista de adiantamentos
6. **adiantamento_form.html** - Formul√°rio de adiantamento
7. **relatorios.html** - Dashboard de relat√≥rios
8. **holerite_pdf.html** - Template do holerite (PDF)

---

## VALIDA√á√ÉO

### Checklist de Funcionalidades:

**Par√¢metros Legais:**
- [ ] Listar par√¢metros configurados
- [ ] Criar novos par√¢metros para um ano
- [ ] Editar par√¢metros existentes
- [ ] Validar unicidade (1 par√¢metro por ano)
- [ ] Valores padr√£o 2025 pr√©-preenchidos

**Benef√≠cios:**
- [ ] Listar todos os benef√≠cios
- [ ] Criar novo benef√≠cio para funcion√°rio
- [ ] Editar benef√≠cio existente
- [ ] Deletar benef√≠cio
- [ ] Calcular totais por tipo (VR, VT, Sa√∫de)
- [ ] Filtrar benef√≠cios ativos/inativos

**Adiantamentos:**
- [ ] Listar adiantamentos com filtro de status
- [ ] Criar novo adiantamento
- [ ] Aprovar adiantamento
- [ ] Rejeitar adiantamento
- [ ] Calcular parcelas automaticamente
- [ ] Mostrar totais por status

**Relat√≥rios:**
- [ ] Dashboard com meses dispon√≠veis
- [ ] Gerar holerite individual (PDF)
- [ ] Gerar relat√≥rio anal√≠tico (Excel)
- [ ] Exportar dados completos
- [ ] Visualizar √∫ltimos 6 meses

---

## PRIORIDADE

üî¥ **ALTA** - M√≥dulo essencial para gest√£o de RH

**Tempo Estimado:** 4-6 horas (com Replit Agent)

---

## OBSERVA√á√ïES IMPORTANTES

1. **Multi-tenancy:** Todas as queries DEVEM filtrar por `admin_id`
2. **Valida√ß√µes:** Adicionar valida√ß√µes de dados em todos os formul√°rios
3. **Seguran√ßa:** Verificar permiss√µes em todas as rotas
4. **UX:** Mensagens de feedback claras (flash messages)
5. **Performance:** Usar joins eficientes nas queries
6. **Exporta√ß√µes:** WeasyPrint para PDF, openpyxl para Excel

---

## RESULTADO ESPERADO

Ap√≥s implementa√ß√£o:

‚úÖ **Par√¢metros Legais:** CRUD completo, valores 2025 padr√£o  
‚úÖ **Benef√≠cios:** Gest√£o completa de VR, VT, planos  
‚úÖ **Adiantamentos:** Solicita√ß√£o, aprova√ß√£o, parcelamento  
‚úÖ **Relat√≥rios:** Holerites PDF, relat√≥rios Excel  

**Status do M√≥dulo:** 100% funcional üéâ

