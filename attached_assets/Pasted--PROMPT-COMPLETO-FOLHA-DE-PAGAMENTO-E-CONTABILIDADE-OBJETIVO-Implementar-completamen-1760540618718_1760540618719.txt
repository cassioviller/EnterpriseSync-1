# üìã PROMPT COMPLETO - FOLHA DE PAGAMENTO E CONTABILIDADE

## üéØ OBJETIVO
Implementar completamente os m√≥dulos de **Folha de Pagamento** e **Contabilidade** no SIGE, transformando-os de prot√≥tipos em funcionalidades 100% operacionais.

## üîç AN√ÅLISE DA SITUA√á√ÉO ATUAL

### ‚úÖ **J√Å IMPLEMENTADO:**
- **Blueprints registrados** no app.py (`/folha-pagamento`, `/contabilidade`)
- **Modelos completos** no models.py (FolhaPagamento, ParametrosLegais, etc.)
- **Views b√°sicas** com estrutura funcional
- **Templates** criados (9 templates contabilidade, 1 template folha)
- **Integra√ß√£o autom√°tica** via Event Manager
- **Utils de contabilidade** implementados

### ‚ùå **PENDENTE PARA IMPLEMENTA√á√ÉO:**

#### **FOLHA DE PAGAMENTO (70% ‚Üí 100%):**
- ‚úÖ Dashboard b√°sico funciona
- ‚ùå **Processamento real** da folha (apenas placeholder)
- ‚ùå **C√°lculos autom√°ticos** (sal√°rio, INSS, FGTS, IR)
- ‚ùå **Integra√ß√£o com ponto eletr√¥nico** (horas trabalhadas)
- ‚ùå **Templates faltantes** (8 p√°ginas n√£o implementadas)
- ‚ùå **Relat√≥rios** (holerite, resumo folha, encargos)

#### **CONTABILIDADE (80% ‚Üí 100%):**
- ‚úÖ Dashboard e estrutura b√°sica funcionam
- ‚úÖ Templates completos criados
- ‚ùå **Lan√ßamentos autom√°ticos** n√£o est√£o funcionando
- ‚ùå **Integra√ß√£o real** com outros m√≥dulos
- ‚ùå **C√°lculos de DRE** autom√°ticos
- ‚ùå **Gera√ß√£o de SPED** funcional

## üöÄ IMPLEMENTA√á√ÉO COMPLETA

### **FASE 1: FOLHA DE PAGAMENTO FUNCIONAL (3-4 horas)**

#### **1.1 Processamento Real da Folha**
```python
# Implementar em folha_pagamento_views.py:

@folha_bp.route('/processar/<int:ano>/<int:mes>', methods=['POST'])
def processar_folha_mes(ano, mes):
    """Processar folha de pagamento com c√°lculos reais"""
    
    # 1. Buscar funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=current_user.id, 
        ativo=True
    ).all()
    
    # 2. Para cada funcion√°rio:
    for funcionario in funcionarios:
        # 2.1 Calcular horas trabalhadas (integra√ß√£o com ponto)
        horas_trabalhadas = calcular_horas_mes(funcionario.id, ano, mes)
        
        # 2.2 Calcular sal√°rio bruto
        salario_bruto = calcular_salario_bruto(funcionario, horas_trabalhadas)
        
        # 2.3 Calcular descontos (INSS, IR, outros)
        descontos = calcular_descontos(salario_bruto, funcionario)
        
        # 2.4 Calcular encargos patronais (FGTS, INSS Patronal)
        encargos = calcular_encargos_patronais(salario_bruto)
        
        # 2.5 Criar/atualizar registro FolhaPagamento
        folha = FolhaPagamento(
            funcionario_id=funcionario.id,
            mes_referencia=date(ano, mes, 1),
            salario_base=funcionario.salario,
            horas_trabalhadas=horas_trabalhadas['total'],
            horas_extras=horas_trabalhadas['extras'],
            total_proventos=salario_bruto,
            inss=descontos['inss'],
            irrf=descontos['ir'],
            fgts=encargos['fgts'],
            salario_liquido=salario_bruto - descontos['total'],
            admin_id=current_user.id
        )
        
        # 2.6 Emitir evento para contabilidade
        EventManager.emit('folha_processada', {
            'folha_id': folha.id,
            'funcionario_id': funcionario.id,
            'valor_total': salario_bruto,
            'encargos': encargos['total']
        })
```

#### **1.2 Integra√ß√£o com Ponto Eletr√¥nico**
```python
# Criar fun√ß√£o em folha_service.py:

def calcular_horas_mes(funcionario_id: int, ano: int, mes: int) -> dict:
    """Calcular horas trabalhadas baseado nos registros de ponto"""
    
    from models import RegistroPonto
    
    # Buscar registros do m√™s
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario_id,
        extract('year', RegistroPonto.data) == ano,
        extract('month', RegistroPonto.data) == mes
    ).all()
    
    total_horas = 0
    horas_extras = 0
    
    for registro in registros:
        if registro.entrada and registro.saida:
            # Calcular horas do dia
            horas_dia = calcular_horas_dia(registro)
            total_horas += horas_dia['normais']
            horas_extras += horas_dia['extras']
    
    return {
        'total': total_horas,
        'extras': horas_extras,
        'dias_trabalhados': len(registros)
    }
```

#### **1.3 Templates Faltantes**
```html
<!-- Criar templates/folha_pagamento/: -->
- processar.html          # Interface de processamento
- configuracoes.html      # Configura√ß√µes salariais
- beneficios.html         # Gest√£o de benef√≠cios
- adiantamentos.html      # Controle de adiantamentos
- relatorios.html         # Central de relat√≥rios
- holerite.html          # Visualiza√ß√£o de holerite
- parametros.html        # Par√¢metros legais
- resumo_folha.html      # Resumo mensal
```

### **FASE 2: CONTABILIDADE FUNCIONAL (2-3 horas)**

#### **2.1 Lan√ßamentos Autom√°ticos Funcionais**
```python
# Melhorar contabilidade_utils.py:

def contabilizar_folha_pagamento(admin_id: int, mes_referencia: date):
    """Contabilizar folha de pagamento automaticamente"""
    
    # 1. Buscar folhas do m√™s
    folhas = FolhaPagamento.query.filter_by(
        admin_id=admin_id,
        mes_referencia=mes_referencia
    ).all()
    
    # 2. Calcular totais
    total_salarios = sum(f.total_proventos for f in folhas)
    total_inss = sum(f.inss for f in folhas)
    total_fgts = sum(f.fgts for f in folhas)
    
    # 3. Criar lan√ßamento cont√°bil
    lancamento = LancamentoContabil(
        numero=gerar_numero_lancamento(admin_id),
        data_lancamento=date.today(),
        historico=f"Folha de pagamento {mes_referencia.strftime('%m/%Y')}",
        admin_id=admin_id
    )
    
    # 4. Partidas do lan√ßamento
    partidas = [
        # D√©bito: Despesa com Sal√°rios
        PartidaContabil(
            conta_codigo='3.1.01.001',  # Sal√°rios e Ordenados
            tipo='D',
            valor=total_salarios
        ),
        # Cr√©dito: Sal√°rios a Pagar
        PartidaContabil(
            conta_codigo='2.1.02.001',  # Sal√°rios a Pagar
            tipo='C',
            valor=total_salarios - total_inss
        ),
        # Cr√©dito: INSS a Recolher
        PartidaContabil(
            conta_codigo='2.1.03.001',  # INSS a Recolher
            tipo='C',
            valor=total_inss
        )
    ]
    
    # 5. Salvar no banco
    db.session.add(lancamento)
    for partida in partidas:
        partida.lancamento_id = lancamento.id
        db.session.add(partida)
    
    db.session.commit()
```

#### **2.2 DRE Autom√°tica**
```python
# Implementar c√°lculo autom√°tico de DRE:

def calcular_dre_mensal(admin_id: int, mes_referencia: date):
    """Calcular DRE automaticamente baseado nos lan√ßamentos"""
    
    # 1. Receitas (contas 4.x.x.x)
    receitas = calcular_saldo_grupo('4', admin_id, mes_referencia)
    
    # 2. Custos (contas 3.1.x.x)
    custos = calcular_saldo_grupo('3.1', admin_id, mes_referencia)
    
    # 3. Despesas (contas 3.2.x.x)
    despesas = calcular_saldo_grupo('3.2', admin_id, mes_referencia)
    
    # 4. Atualizar DRE
    dre = DREMensal.query.filter_by(
        admin_id=admin_id,
        mes_referencia=mes_referencia
    ).first()
    
    if not dre:
        dre = DREMensal(admin_id=admin_id, mes_referencia=mes_referencia)
    
    dre.receita_bruta = receitas
    dre.custo_mercadorias = custos
    dre.despesas_operacionais = despesas
    dre.lucro_liquido = receitas - custos - despesas
    
    db.session.add(dre)
    db.session.commit()
```

### **FASE 3: INTEGRA√á√ÉO TOTAL (1-2 horas)**

#### **3.1 Event Handlers Completos**
```python
# Melhorar integracoes_automaticas.py:

@EventManager.handler('folha_processada')
def handle_folha_processada(data):
    """Handler para folha processada"""
    
    # 1. Contabilizar automaticamente
    folha = FolhaPagamento.query.get(data['folha_id'])
    contabilizar_folha_pagamento(folha.admin_id, folha.mes_referencia)
    
    # 2. Criar custo na obra (se funcion√°rio vinculado)
    funcionario = Funcionario.query.get(data['funcionario_id'])
    if funcionario.obra_id:
        CustoObra.criar_custo_automatico(
            obra_id=funcionario.obra_id,
            tipo='mao_obra',
            valor=data['valor_total'] + data['encargos'],
            descricao=f"Folha {funcionario.nome} - {folha.mes_referencia.strftime('%m/%Y')}"
        )

@EventManager.handler('conta_paga')
def handle_conta_paga(data):
    """Handler para conta paga"""
    
    conta = ContaPagar.query.get(data['conta_id'])
    
    # Lan√ßamento cont√°bil autom√°tico
    criar_lancamento_pagamento(
        conta_codigo=conta.conta_contabil_codigo or '2.1.01.001',
        valor=conta.valor,
        historico=f"Pagamento {conta.descricao}",
        admin_id=conta.admin_id
    )
```

#### **3.2 Menu Principal Atualizado**
```html
<!-- Atualizar templates/base.html: -->

<li class="nav-item dropdown">
    <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown">
        <i class="fas fa-calculator"></i> Financeiro
    </a>
    <ul class="dropdown-menu">
        <li><a class="dropdown-item" href="{{ url_for('financeiro.dashboard') }}">
            <i class="fas fa-chart-line"></i> Dashboard
        </a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="{{ url_for('folha.dashboard') }}">
            <i class="fas fa-users"></i> Folha de Pagamento
        </a></li>
        <li><a class="dropdown-item" href="{{ url_for('contabilidade.dashboard_contabil') }}">
            <i class="fas fa-book"></i> Contabilidade
        </a></li>
        <li><hr class="dropdown-divider"></li>
        <li><a class="dropdown-item" href="{{ url_for('financeiro.contas_pagar') }}">
            <i class="fas fa-file-invoice-dollar"></i> Contas a Pagar
        </a></li>
        <li><a class="dropdown-item" href="{{ url_for('financeiro.contas_receber') }}">
            <i class="fas fa-hand-holding-usd"></i> Contas a Receber
        </a></li>
    </ul>
</li>
```

## üéØ RESULTADO FINAL ESPERADO

### **FOLHA DE PAGAMENTO 100% FUNCIONAL:**
- ‚úÖ **Processamento autom√°tico** baseado no ponto eletr√¥nico
- ‚úÖ **C√°lculos precisos** (INSS, IR, FGTS, encargos)
- ‚úÖ **Holerites digitais** com todos os detalhes
- ‚úÖ **Relat√≥rios completos** (resumo, encargos, provis√µes)
- ‚úÖ **Integra√ß√£o cont√°bil** autom√°tica

### **CONTABILIDADE 100% FUNCIONAL:**
- ‚úÖ **Lan√ßamentos autom√°ticos** de todos os m√≥dulos
- ‚úÖ **DRE calculada** automaticamente
- ‚úÖ **Balancete mensal** atualizado
- ‚úÖ **Plano de contas** completo para constru√ß√£o civil
- ‚úÖ **Auditoria autom√°tica** com alertas

### **INTEGRA√á√ÉO TOTAL:**
- ‚úÖ **Ponto ‚Üí Folha ‚Üí Contabilidade ‚Üí Custos**
- ‚úÖ **Compras ‚Üí Contas a Pagar ‚Üí Contabilidade**
- ‚úÖ **Propostas ‚Üí Contas a Receber ‚Üí Contabilidade**
- ‚úÖ **Todos os custos** automaticamente contabilizados

## ‚è±Ô∏è CRONOGRAMA REALISTA

### **DIA 1: Folha de Pagamento (3-4h)**
- Implementar processamento real
- Criar c√°lculos autom√°ticos
- Integra√ß√£o com ponto eletr√¥nico
- Templates faltantes

### **DIA 2: Contabilidade (2-3h)**
- Lan√ßamentos autom√°ticos funcionais
- DRE autom√°tica
- Integra√ß√£o com outros m√≥dulos
- Testes de auditoria

### **DIA 3: Integra√ß√£o e Testes (1-2h)**
- Event handlers completos
- Menu atualizado
- Testes end-to-end
- Valida√ß√£o final

**TOTAL: 6-9 horas para m√≥dulos 100% funcionais**

## üí° VALIDA√á√ÉO FINAL

### **Checklist de Funcionalidades:**
- [ ] Processar folha de pagamento completa
- [ ] Gerar holerite com todos os c√°lculos
- [ ] Lan√ßamentos cont√°beis autom√°ticos
- [ ] DRE atualizada automaticamente
- [ ] Integra√ß√£o ponto ‚Üí folha funcionando
- [ ] Custos por obra atualizados
- [ ] Relat√≥rios export√°veis (PDF/Excel)
- [ ] Menu navega√ß√£o completo

### **Teste End-to-End:**
1. **Funcion√°rio bate ponto** ‚Üí Horas registradas
2. **Processar folha** ‚Üí C√°lculos autom√°ticos
3. **Verificar contabilidade** ‚Üí Lan√ßamentos criados
4. **Verificar custos obra** ‚Üí Valores atualizados
5. **Gerar relat√≥rios** ‚Üí Dados consistentes

**RESULTADO: SIGE com m√≥dulos financeiros de n√≠vel empresarial!** üí∞üìä

## üöÄ PR√ìXIMO PASSO

Execute este prompt para transformar os prot√≥tipos em funcionalidades 100% operacionais, completando o ERP com capacidades financeiras profissionais.
