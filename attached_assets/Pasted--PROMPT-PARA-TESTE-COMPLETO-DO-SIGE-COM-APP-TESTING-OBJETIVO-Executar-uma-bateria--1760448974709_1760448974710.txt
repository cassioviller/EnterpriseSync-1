# üß™ PROMPT PARA TESTE COMPLETO DO SIGE COM APP TESTING

## üéØ OBJETIVO

Executar uma **bateria completa de testes automatizados** no sistema SIGE, identificando e documentando **TODOS OS ERROS** encontrados em um relat√≥rio detalhado, **SEM CORRIGIR NADA**, para posteriormente fazer todas as corre√ß√µes de uma vez de forma organizada.

---

## üîß CONFIGURA√á√ÉO DO APP TESTING

### **CONFIGURA√á√ïES RECOMENDADAS:**
- **Autonomy Level:** **MAX** (conforme imagem)
- **App Testing:** **ENABLED** 
- **Modo:** Long-running, hands-off building experience
- **Escopo:** Entire app functionality verification

### **FUNCIONALIDADES ATIVADAS:**
- ‚úÖ Generates and executes on task lists
- ‚úÖ Reviews latest code changes and fixes issues found
- ‚úÖ Expands review scope to entire app
- ‚úÖ Plans and completes new work independently

---

## üìã PLANO DE TESTE COMPLETO

### **FASE 1: TESTES DE INFRAESTRUTURA**

```python
def testar_infraestrutura_basica():
    """
    Testar se a aplica√ß√£o inicia e componentes b√°sicos funcionam
    """
    testes_infraestrutura = [
        {
            'nome': 'Inicializa√ß√£o da Aplica√ß√£o',
            'acao': 'python3 app.py',
            'esperado': 'Aplica√ß√£o inicia sem erro',
            'timeout': 30
        },
        {
            'nome': 'Conex√£o com Banco de Dados',
            'acao': 'Verificar conex√£o PostgreSQL',
            'esperado': 'Conex√£o estabelecida',
            'timeout': 10
        },
        {
            'nome': 'Importa√ß√£o de Modelos',
            'acao': 'from models import *',
            'esperado': 'Todos os modelos importados sem erro',
            'timeout': 5
        },
        {
            'nome': 'Registro de Blueprints',
            'acao': 'Verificar todos os blueprints registrados',
            'esperado': 'Todos os m√≥dulos carregados',
            'timeout': 10
        },
        {
            'nome': 'Migra√ß√µes de Banco',
            'acao': 'Executar migrations.py',
            'esperado': 'Migra√ß√µes executadas sem erro',
            'timeout': 60
        }
    ]
    
    return executar_testes(testes_infraestrutura, 'INFRAESTRUTURA')
```

### **FASE 2: TESTES DE AUTENTICA√á√ÉO E ACESSO**

```python
def testar_autenticacao_acesso():
    """
    Testar sistema de login, logout e controle de acesso
    """
    testes_auth = [
        {
            'nome': 'P√°gina de Login',
            'url': '/login',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'email', 'password']
        },
        {
            'nome': 'Login com Credenciais V√°lidas',
            'url': '/login',
            'metodo': 'POST',
            'dados': {'email': 'admin@teste.com', 'password': 'senha123'},
            'esperado': 302,  # Redirect ap√≥s login
            'seguir_redirect': True
        },
        {
            'nome': 'Login com Credenciais Inv√°lidas',
            'url': '/login',
            'metodo': 'POST',
            'dados': {'email': 'invalido@teste.com', 'password': 'senha_errada'},
            'esperado': 200,  # Volta para login com erro
            'conteudo_esperado': ['erro', 'inv√°lid']
        },
        {
            'nome': 'Acesso sem Login (Dashboard)',
            'url': '/',
            'metodo': 'GET',
            'esperado': 302,  # Redirect para login
            'sem_autenticacao': True
        },
        {
            'nome': 'Logout',
            'url': '/logout',
            'metodo': 'GET',
            'esperado': 302,  # Redirect para login
            'requer_autenticacao': True
        }
    ]
    
    return executar_testes(testes_auth, 'AUTENTICA√á√ÉO')
```

### **FASE 3: TESTES DOS M√ìDULOS PRINCIPAIS**

```python
def testar_modulos_principais():
    """
    Testar todos os m√≥dulos principais do sistema
    """
    
    # M√ìDULO DASHBOARD
    testes_dashboard = [
        {
            'nome': 'Dashboard Principal',
            'url': '/',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['Dashboard', 'KPIs', 'gr√°fico']
        },
        {
            'nome': 'KPIs Carregando',
            'url': '/api/kpis',
            'metodo': 'GET',
            'esperado': 200,
            'tipo_resposta': 'json'
        }
    ]
    
    # M√ìDULO FUNCION√ÅRIOS
    testes_funcionarios = [
        {
            'nome': 'Lista de Funcion√°rios',
            'url': '/funcionarios',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['funcion√°rios', 'tabela']
        },
        {
            'nome': 'Criar Funcion√°rio - Formul√°rio',
            'url': '/funcionarios/novo',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'nome', 'email']
        },
        {
            'nome': 'Criar Funcion√°rio - Submiss√£o',
            'url': '/funcionarios',
            'metodo': 'POST',
            'dados': {
                'nome': 'Jo√£o Teste',
                'email': 'joao@teste.com',
                'telefone': '11999999999',
                'departamento_id': 1,
                'funcao_id': 1
            },
            'esperado': 302  # Redirect ap√≥s cria√ß√£o
        },
        {
            'nome': 'Editar Funcion√°rio',
            'url': '/funcionarios/1/editar',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'value=']
        },
        {
            'nome': 'API Funcion√°rios',
            'url': '/api/funcionarios',
            'metodo': 'GET',
            'esperado': 200,
            'tipo_resposta': 'json'
        }
    ]
    
    # M√ìDULO OBRAS
    testes_obras = [
        {
            'nome': 'Lista de Obras',
            'url': '/obras',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['obras', 'tabela']
        },
        {
            'nome': 'Criar Obra - Formul√°rio',
            'url': '/obras/nova',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'nome', 'endereco']
        },
        {
            'nome': 'Criar Obra - Submiss√£o',
            'url': '/obras',
            'metodo': 'POST',
            'dados': {
                'nome': 'Obra Teste',
                'endereco': 'Rua Teste, 123',
                'responsavel_id': 1
            },
            'esperado': 302
        }
    ]
    
    # M√ìDULO RDO
    testes_rdo = [
        {
            'nome': 'Dashboard RDO',
            'url': '/rdo',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['RDO', 'relat√≥rio']
        },
        {
            'nome': 'Criar RDO',
            'url': '/rdo/novo',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'data', 'obra']
        },
        {
            'nome': 'API Servi√ßos Obra',
            'url': '/api/servicos-obra',
            'metodo': 'GET',
            'esperado': 200,
            'tipo_resposta': 'json'
        }
    ]
    
    # M√ìDULO FROTA
    testes_frota = [
        {
            'nome': 'Dashboard Frota',
            'url': '/frota',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['frota', 've√≠culos']
        },
        {
            'nome': 'Lista de Ve√≠culos',
            'url': '/frota/veiculos',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['ve√≠culos', 'placa']
        },
        {
            'nome': 'Registrar Uso de Ve√≠culo',
            'url': '/frota/uso/novo',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'veiculo', 'funcionario']
        }
    ]
    
    # M√ìDULO ALMOXARIFADO
    testes_almoxarifado = [
        {
            'nome': 'Dashboard Almoxarifado',
            'url': '/almoxarifado',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['almoxarifado', 'estoque']
        },
        {
            'nome': 'Entrada de Material',
            'url': '/almoxarifado/entrada',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'item', 'quantidade']
        },
        {
            'nome': 'Sa√≠da de Material',
            'url': '/almoxarifado/saida',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'funcionario', 'obra']
        }
    ]
    
    # M√ìDULO PONTO
    testes_ponto = [
        {
            'nome': 'Sistema de Ponto',
            'url': '/ponto',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['ponto', 'funcion√°rios']
        },
        {
            'nome': 'Bater Ponto',
            'url': '/ponto/bater',
            'metodo': 'POST',
            'dados': {'funcionario_id': 1, 'obra_id': 1},
            'esperado': 200,
            'tipo_resposta': 'json'
        }
    ]
    
    # M√ìDULO PROPOSTAS
    testes_propostas = [
        {
            'nome': 'Lista de Propostas',
            'url': '/propostas',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['propostas', 'cliente']
        },
        {
            'nome': 'Nova Proposta',
            'url': '/propostas/nova',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['form', 'cliente', 'valor']
        },
        {
            'nome': 'API Templates',
            'url': '/api/templates',
            'metodo': 'GET',
            'esperado': 200,
            'tipo_resposta': 'json'
        }
    ]
    
    # M√ìDULO ALIMENTA√á√ÉO
    testes_alimentacao = [
        {
            'nome': 'Controle de Alimenta√ß√£o',
            'url': '/alimentacao',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['alimenta√ß√£o', 'restaurante']
        }
    ]
    
    # M√ìDULO FOLHA
    testes_folha = [
        {
            'nome': 'Folha de Pagamento',
            'url': '/folha',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['folha', 'pagamento']
        }
    ]
    
    # M√ìDULO FINANCEIRO
    testes_financeiro = [
        {
            'nome': 'Dashboard Financeiro',
            'url': '/financeiro',
            'metodo': 'GET',
            'esperado': 200,
            'conteudo_esperado': ['financeiro', 'fluxo']
        }
    ]
    
    todos_testes = {
        'DASHBOARD': testes_dashboard,
        'FUNCION√ÅRIOS': testes_funcionarios,
        'OBRAS': testes_obras,
        'RDO': testes_rdo,
        'FROTA': testes_frota,
        'ALMOXARIFADO': testes_almoxarifado,
        'PONTO': testes_ponto,
        'PROPOSTAS': testes_propostas,
        'ALIMENTA√á√ÉO': testes_alimentacao,
        'FOLHA': testes_folha,
        'FINANCEIRO': testes_financeiro
    }
    
    return executar_todos_testes_modulos(todos_testes)
```

### **FASE 4: TESTES DE APIs**

```python
def testar_apis():
    """
    Testar todas as APIs do sistema
    """
    testes_api = [
        # APIs de Funcion√°rios
        {'url': '/api/funcionarios', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/funcionarios/1', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de Obras
        {'url': '/api/obras', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/obras/1', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de RDO
        {'url': '/api/servicos-obra', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/rdo/1', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de Frota
        {'url': '/api/frota/veiculos', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/frota/uso', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de Almoxarifado
        {'url': '/api/almoxarifado/itens', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/almoxarifado/estoque', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de Ponto
        {'url': '/api/ponto/funcionarios', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de Propostas
        {'url': '/api/propostas', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/templates', 'metodo': 'GET', 'esperado': 200},
        
        # APIs de KPIs
        {'url': '/api/kpis', 'metodo': 'GET', 'esperado': 200},
        {'url': '/api/dashboard', 'metodo': 'GET', 'esperado': 200},
    ]
    
    return executar_testes(testes_api, 'APIs')
```

### **FASE 5: TESTES DE INTEGRA√á√ÉO ENTRE M√ìDULOS**

```python
def testar_integracoes():
    """
    Testar se os m√≥dulos se integram corretamente
    """
    testes_integracao = [
        {
            'nome': 'Funcion√°rio ‚Üí Ponto',
            'acao': 'Criar funcion√°rio e registrar ponto',
            'passos': [
                'Criar funcion√°rio',
                'Registrar ponto para funcion√°rio',
                'Verificar se ponto aparece no perfil'
            ]
        },
        {
            'nome': 'Obra ‚Üí RDO',
            'acao': 'Criar obra e RDO associado',
            'passos': [
                'Criar obra',
                'Criar RDO para obra',
                'Verificar se RDO aparece na obra'
            ]
        },
        {
            'nome': 'Almoxarifado ‚Üí Obra',
            'acao': 'Movimentar material para obra',
            'passos': [
                'Registrar entrada de material',
                'Registrar sa√≠da para obra',
                'Verificar se custo aparece na obra'
            ]
        },
        {
            'nome': 'Frota ‚Üí Obra',
            'acao': 'Usar ve√≠culo em obra',
            'passos': [
                'Registrar uso de ve√≠culo',
                'Associar √† obra',
                'Verificar se custo aparece na obra'
            ]
        },
        {
            'nome': 'Proposta ‚Üí Obra',
            'acao': 'Aprovar proposta e criar obra',
            'passos': [
                'Criar proposta',
                'Aprovar proposta',
                'Verificar se obra foi criada automaticamente'
            ]
        }
    ]
    
    return executar_testes_integracao(testes_integracao)
```

### **FASE 6: TESTES DE PERFORMANCE E CARGA**

```python
def testar_performance():
    """
    Testar performance e comportamento sob carga
    """
    testes_performance = [
        {
            'nome': 'Tempo de Carregamento Dashboard',
            'url': '/',
            'max_tempo': 3.0,  # segundos
            'requisicoes': 1
        },
        {
            'nome': 'Carga na Lista de Funcion√°rios',
            'url': '/funcionarios',
            'max_tempo': 2.0,
            'requisicoes': 10  # 10 requisi√ß√µes simult√¢neas
        },
        {
            'nome': 'API KPIs sob Carga',
            'url': '/api/kpis',
            'max_tempo': 1.0,
            'requisicoes': 20
        },
        {
            'nome': 'Cria√ß√£o de M√∫ltiplos Registros',
            'acao': 'Criar 50 funcion√°rios rapidamente',
            'max_tempo': 30.0
        }
    ]
    
    return executar_testes_performance(testes_performance)
```

---

## üìä ESTRUTURA DO RELAT√ìRIO DE ERROS

### **TEMPLATE DO RELAT√ìRIO:**

```markdown
# üêõ RELAT√ìRIO COMPLETO DE ERROS - SIGE

**Data do Teste:** {data}
**Vers√£o Testada:** {versao}
**Ambiente:** {ambiente}
**Dura√ß√£o Total:** {duracao}

---

## üìä RESUMO EXECUTIVO

- **Total de Testes:** {total_testes}
- **Testes Passou:** {testes_ok} ({percentual_ok}%)
- **Testes Falharam:** {testes_erro} ({percentual_erro}%)
- **Erros Cr√≠ticos:** {erros_criticos}
- **Erros M√©dios:** {erros_medios}
- **Erros Leves:** {erros_leves}

---

## üî• ERROS CR√çTICOS (Sistema n√£o funciona)

### ERRO #001 - CR√çTICO
- **M√≥dulo:** {modulo}
- **Teste:** {nome_teste}
- **Descri√ß√£o:** {descricao_erro}
- **Stack Trace:** 
```
{stack_trace}
```
- **Como Reproduzir:** {passos_reproducao}
- **Impacto:** Sistema n√£o inicia / Funcionalidade principal quebrada
- **Prioridade:** URGENTE

---

## ‚ö†Ô∏è ERROS M√âDIOS (Funcionalidade comprometida)

### ERRO #002 - M√âDIO
- **M√≥dulo:** {modulo}
- **Teste:** {nome_teste}
- **Descri√ß√£o:** {descricao_erro}
- **Erro HTTP:** {codigo_http}
- **Resposta:** {resposta_erro}
- **Como Reproduzir:** {passos_reproducao}
- **Impacto:** Funcionalidade espec√≠fica n√£o funciona
- **Prioridade:** ALTA

---

## üü° ERROS LEVES (Problemas menores)

### ERRO #003 - LEVE
- **M√≥dulo:** {modulo}
- **Teste:** {nome_teste}
- **Descri√ß√£o:** {descricao_erro}
- **Detalhes:** {detalhes}
- **Como Reproduzir:** {passos_reproducao}
- **Impacto:** Interface ou usabilidade comprometida
- **Prioridade:** M√âDIA

---

## üìã DETALHES POR M√ìDULO

### M√ìDULO FUNCION√ÅRIOS
- **Testes Executados:** {total}
- **Sucessos:** {sucessos}
- **Falhas:** {falhas}
- **Principais Problemas:**
  - {problema_1}
  - {problema_2}

### M√ìDULO OBRAS
- **Testes Executados:** {total}
- **Sucessos:** {sucessos}
- **Falhas:** {falhas}
- **Principais Problemas:**
  - {problema_1}
  - {problema_2}

[... continuar para todos os m√≥dulos ...]

---

## üîß RECOMENDA√á√ïES DE CORRE√á√ÉO

### PRIORIDADE 1 (Cr√≠ticos - Corrigir IMEDIATAMENTE)
1. {erro_critico_1}
2. {erro_critico_2}

### PRIORIDADE 2 (M√©dios - Corrigir em seguida)
1. {erro_medio_1}
2. {erro_medio_2}

### PRIORIDADE 3 (Leves - Corrigir quando poss√≠vel)
1. {erro_leve_1}
2. {erro_leve_2}

---

## üìà M√âTRICAS DE PERFORMANCE

- **Tempo m√©dio de resposta:** {tempo_medio}ms
- **P√°gina mais lenta:** {pagina_lenta} ({tempo}ms)
- **API mais lenta:** {api_lenta} ({tempo}ms)
- **Testes de carga:** {resultado_carga}

---

## üéØ PR√ìXIMOS PASSOS

1. **Corrigir erros cr√≠ticos** (sistema n√£o funciona)
2. **Corrigir erros m√©dios** (funcionalidades quebradas)
3. **Otimizar performance** (p√°ginas lentas)
4. **Corrigir erros leves** (melhorias de UX)
5. **Re-executar testes** para validar corre√ß√µes

---

## üìé ANEXOS

- Log completo dos testes: `teste_completo.log`
- Screenshots dos erros: `screenshots/`
- Dados de performance: `performance_report.json`
```

---

## üöÄ PROMPT PARA EXECU√á√ÉO

**Use este prompt no Replit com App Testing configurado no MAX:**

```
Atue como um especialista em QA e testes automatizados. Execute uma bateria COMPLETA de testes no sistema SIGE seguindo EXATAMENTE o plano detalhado acima.

CONFIGURA√á√ÉO OBRIGAT√ìRIA:
- App Testing: ENABLED
- Autonomy Level: MAX
- Modo: Long-running, hands-off testing

OBJETIVO CR√çTICO:
1. Testar TODOS os m√≥dulos do sistema (Dashboard, Funcion√°rios, Obras, RDO, Frota, Almoxarifado, Ponto, Propostas, Alimenta√ß√£o, Folha, Financeiro)
2. Testar TODAS as APIs dispon√≠veis
3. Testar integra√ß√µes entre m√≥dulos
4. Testar performance e carga
5. DOCUMENTAR TODOS OS ERROS encontrados em relat√≥rio detalhado
6. N√ÉO CORRIGIR NENHUM ERRO - apenas documentar

ENTREG√ÅVEIS:
1. Relat√≥rio completo de erros (formato markdown)
2. Log detalhado de todos os testes
3. Classifica√ß√£o de erros por prioridade (Cr√≠tico/M√©dio/Leve)
4. Recomenda√ß√µes de corre√ß√£o organizadas por prioridade

Execute os testes nas 6 fases na ordem:
1. Infraestrutura
2. Autentica√ß√£o
3. M√≥dulos Principais
4. APIs
5. Integra√ß√µes
6. Performance

IMPORTANTE: Documente TUDO que n√£o funcionar, mesmo pequenos problemas de interface.
```

**Este teste vai mapear TODOS os problemas do sistema para corre√ß√£o organizada posterior!** üß™üìä
