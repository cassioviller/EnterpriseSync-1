# üîß PROMPT - CORRE√á√ÉO URGENTE EXPORTA√á√ÉO PDF
**PROBLEMA ESPEC√çFICO: jsPDFConstructor is not a constructor**

## üéØ SITUA√á√ÉO ATUAL

### ‚úÖ O QUE EST√Å FUNCIONANDO:
- **html2canvas**: Criando canvas perfeitamente
- **Interface**: Bot√µes PDF Semana e PDF Dia funcionais
- **Bibliotecas**: Carregando corretamente via CDN
- **Detec√ß√£o**: Sistema aguarda bibliotecas antes de executar
- **Elementos**: Captura correta do weekly-grid e colunas espec√≠ficas

### ‚ùå PROBLEMA ESPEC√çFICO:
**Erro:** `jsPDFConstructor is not a constructor`
**Causa:** Forma incorreta de instanciar jsPDF 2.5.1 UMD
**Local:** Linha onde cria `new jsPDF({...})`

## üîß CORRE√á√ÉO IMEDIATA

### **PROBLEMA IDENTIFICADO:**
```javascript
// ‚ùå C√ìDIGO ATUAL (INCORRETO)
const { jsPDF } = window.jsPDF || window;
const pdf = new jsPDF({
    orientation: 'landscape',
    unit: 'mm',
    format: 'a4'
});
```

### **SOLU√á√ÉO CORRETA:**
```javascript
// ‚úÖ C√ìDIGO CORRETO para jsPDF 2.5.1 UMD
const pdf = new window.jsPDF.jsPDF({
    orientation: 'landscape',  // ou 'portrait' para dia espec√≠fico
    unit: 'mm',
    format: 'a4'
});
```

## üìã IMPLEMENTA√á√ÉO ESPEC√çFICA

### **1. Corrigir Fun√ß√£o exportarPDFSemana()**
```javascript
async exportarPDFSemana() {
    try {
        console.log('üîÑ Iniciando exporta√ß√£o PDF da semana...');
        
        // Aguardar bibliotecas (j√° funciona)
        await this.aguardarBibliotecasPDF();
        
        // Ocultar bot√µes (j√° funciona)
        this.ocultarBotoesParaExportacao(true);
        
        // Capturar elemento (j√° funciona)
        const elemento = document.getElementById('weekly-grid');
        if (!elemento) {
            throw new Error('Elemento weekly-grid n√£o encontrado');
        }
        
        // html2canvas (j√° funciona)
        console.log('üì∏ Gerando canvas...');
        const canvas = await html2canvas(elemento, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#ffffff',
            logging: false
        });
        console.log('‚úÖ Canvas gerado:', canvas.width, 'x', canvas.height);
        
        // ‚úÖ CORRE√á√ÉO AQUI - Instanciar jsPDF corretamente
        console.log('üìÑ Criando PDF...');
        const pdf = new window.jsPDF.jsPDF({
            orientation: 'landscape',
            unit: 'mm',
            format: 'a4'
        });
        
        // Dimens√µes A4 paisagem
        const pdfWidth = 297;  // A4 paisagem largura
        const pdfHeight = 210; // A4 paisagem altura
        const margin = 10;
        
        // Calcular dimens√µes da imagem
        const imgWidth = pdfWidth - (margin * 2);
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        
        // Adicionar imagem
        const imgData = canvas.toDataURL('image/png');
        pdf.addImage(imgData, 'PNG', margin, margin + 15, imgWidth, imgHeight);
        
        // Cabe√ßalho
        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        pdf.text('Gest√£o de Equipe - Semana', margin, margin + 5);
        
        // Data atual
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        const dataAtual = new Date().toLocaleDateString('pt-BR');
        pdf.text(`Gerado em: ${dataAtual}`, pdfWidth - 60, margin + 5);
        
        // Download
        const nomeArquivo = `gestao-equipe-semana-${new Date().toISOString().split('T')[0]}.pdf`;
        pdf.save(nomeArquivo);
        
        console.log('‚úÖ PDF da semana exportado com sucesso!');
        
    } catch (error) {
        console.error('‚ùå Erro na exporta√ß√£o PDF da semana:', error);
        alert(`Erro ao exportar PDF: ${error.message}`);
    } finally {
        // Mostrar bot√µes novamente
        this.ocultarBotoesParaExportacao(false);
    }
}
```

### **2. Corrigir Fun√ß√£o exportarPDFDia(dayIndex)**
```javascript
async exportarPDFDia(dayIndex) {
    try {
        console.log(`üîÑ Iniciando exporta√ß√£o PDF do dia ${dayIndex}...`);
        
        // Aguardar bibliotecas (j√° funciona)
        await this.aguardarBibliotecasPDF();
        
        // Ocultar bot√µes (j√° funciona)
        this.ocultarBotoesParaExportacao(true);
        
        // Capturar coluna espec√≠fica (j√° funciona)
        const colunaElemento = document.querySelector(`[data-day="${dayIndex}"]`).closest('.col');
        if (!colunaElemento) {
            throw new Error(`Coluna do dia ${dayIndex} n√£o encontrada`);
        }
        
        // html2canvas (j√° funciona)
        console.log('üì∏ Gerando canvas do dia...');
        const canvas = await html2canvas(colunaElemento, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#ffffff',
            logging: false
        });
        console.log('‚úÖ Canvas do dia gerado:', canvas.width, 'x', canvas.height);
        
        // ‚úÖ CORRE√á√ÉO AQUI - Instanciar jsPDF corretamente
        console.log('üìÑ Criando PDF do dia...');
        const pdf = new window.jsPDF.jsPDF({
            orientation: 'portrait',  // Retrato para dia espec√≠fico
            unit: 'mm',
            format: 'a4'
        });
        
        // Dimens√µes A4 retrato
        const pdfWidth = 210;  // A4 retrato largura
        const pdfHeight = 297; // A4 retrato altura
        const margin = 10;
        
        // Calcular dimens√µes da imagem
        const imgWidth = pdfWidth - (margin * 2);
        const imgHeight = (canvas.height * imgWidth) / canvas.width;
        
        // Adicionar imagem
        const imgData = canvas.toDataURL('image/png');
        pdf.addImage(imgData, 'PNG', margin, margin + 15, imgWidth, imgHeight);
        
        // Cabe√ßalho
        pdf.setFontSize(16);
        pdf.setFont('helvetica', 'bold');
        const diasSemana = ['Domingo', 'Segunda', 'Ter√ßa', 'Quarta', 'Quinta', 'Sexta', 'S√°bado'];
        pdf.text(`Gest√£o de Equipe - ${diasSemana[dayIndex]}`, margin, margin + 5);
        
        // Data atual
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        const dataAtual = new Date().toLocaleDateString('pt-BR');
        pdf.text(`Gerado em: ${dataAtual}`, pdfWidth - 60, margin + 5);
        
        // Download
        const nomeArquivo = `gestao-equipe-${diasSemana[dayIndex].toLowerCase()}-${new Date().toISOString().split('T')[0]}.pdf`;
        pdf.save(nomeArquivo);
        
        console.log(`‚úÖ PDF do ${diasSemana[dayIndex]} exportado com sucesso!`);
        
    } catch (error) {
        console.error(`‚ùå Erro na exporta√ß√£o PDF do dia ${dayIndex}:`, error);
        alert(`Erro ao exportar PDF: ${error.message}`);
    } finally {
        // Mostrar bot√µes novamente
        this.ocultarBotoesParaExportacao(false);
    }
}
```

### **3. Atualizar Fun√ß√£o de Verifica√ß√£o (Opcional - Melhorar Debug)**
```javascript
async aguardarBibliotecasPDF() {
    const maxTentativas = 15;
    let tentativas = 0;
    
    while (tentativas < maxTentativas) {
        // Verificar jsPDF de forma mais espec√≠fica
        const jsPDFDisponivel = (
            typeof window.jsPDF !== 'undefined' && 
            typeof window.jsPDF.jsPDF === 'function'  // Verificar se √© fun√ß√£o
        );
        
        const html2canvasDisponivel = (
            typeof html2canvas !== 'undefined'
        );
        
        console.log(`Tentativa ${tentativas + 1}: jsPDF=${jsPDFDisponivel}, html2canvas=${html2canvasDisponivel}`);
        
        if (jsPDFDisponivel && html2canvasDisponivel) {
            console.log('‚úÖ Bibliotecas PDF carregadas com sucesso!');
            return;
        }
        
        await new Promise(resolve => setTimeout(resolve, 800));
        tentativas++;
    }
    
    throw new Error('Timeout: Bibliotecas PDF n√£o carregaram no tempo esperado');
}
```

## üß™ TESTE R√ÅPIDO

### **Adicionar Debug Tempor√°rio:**
```javascript
// Adicionar antes da cria√ß√£o do PDF para debug
console.log('üîç Debug jsPDF:');
console.log('window.jsPDF:', typeof window.jsPDF);
console.log('window.jsPDF.jsPDF:', typeof window.jsPDF.jsPDF);
console.log('Estrutura completa:', window.jsPDF);

// Ent√£o criar o PDF
const pdf = new window.jsPDF.jsPDF({...});
```

## ‚úÖ CHECKLIST DE IMPLEMENTA√á√ÉO

### **Corre√ß√£o Imediata:**
- [ ] Substituir `new jsPDF({...})` por `new window.jsPDF.jsPDF({...})`
- [ ] Testar exporta√ß√£o da semana (paisagem)
- [ ] Testar exporta√ß√£o de dia espec√≠fico (retrato)
- [ ] Verificar se downloads funcionam corretamente

### **Valida√ß√£o:**
- [ ] Abrir PDF gerado e verificar qualidade
- [ ] Testar em diferentes navegadores se poss√≠vel
- [ ] Confirmar que bot√µes voltam a aparecer ap√≥s exporta√ß√£o

## üéØ RESULTADO ESPERADO

Ap√≥s implementa√ß√£o:
1. **Bot√£o "PDF Semana"** ‚Üí Gera PDF paisagem da semana completa
2. **Dropdown "PDF Dia"** ‚Üí Gera PDF retrato do dia selecionado
3. **Downloads autom√°ticos** com nomes descritivos
4. **Qualidade alta** (scale: 2 no html2canvas)
5. **Sem erros no console**

**TEMPO ESTIMADO:** 15-30 minutos para implementar e testar

**PRIORIDADE:** ALTA - Funcionalidade cr√≠tica para usu√°rios finais

