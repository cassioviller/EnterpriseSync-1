# üéØ REUNI√ÉO T√âCNICA ESPECIALIZADA - M√ìDULO 3: GEST√ÉO DE EQUIPES

**Data:** 22/11/2025 - 14:00h  
**Dura√ß√£o:** 3 horas  
**Contexto:** Implementa√ß√£o do terceiro m√≥dulo - M√≥dulos 1 e 2 j√° funcionando perfeitamente  
**Status:** Continuidade da evolu√ß√£o SIGE v8.0

---

## üë• PARTICIPANTES DA REUNI√ÉO

**Marina Santos** - Product Manager (Moderadora)  
**Carlos Rodriguez** - Tech Lead  
**Ana Silva** - Backend Developer  
**Lucia Ferreira** - Frontend/UX  
**Rafael Costa** - AI/ML Engineer  
**Jo√£o Mendes** - DevOps Engineer  
**Patricia Lima** - Especialista em RH (nova participante)  

---

## üìã AGENDA DA REUNI√ÉO

### **14:00 - Abertura e Status dos M√≥dulos Anteriores**

**Marina:** Boa tarde, pessoal! Excelente trabalho nos M√≥dulos 1 e 2. O sistema est√° funcionando perfeitamente:
- **M√≥dulo 1:** Propostas sendo aprovadas e convertidas em obras automaticamente
- **M√≥dulo 2:** Clientes acompanhando obras em tempo real com 95% de satisfa√ß√£o

Agora vamos focar no **M√≥dulo 3 - Gest√£o de Equipes**. Este √© um m√≥dulo cr√≠tico porque vai **AUTOMATIZAR** a cria√ß√£o de RDOs e **INTEGRAR** com o sistema de ponto existente. Patricia, bem-vinda √† equipe!

**Patricia:** Obrigada, Marina! Analisei o sistema atual e vejo que j√° temos uma base s√≥lida com `Funcionario`, `Ponto` e `RDO`. O desafio √© criar uma interface visual para o gestor alocar pessoas e automatizar a cria√ß√£o de RDOs.

### **14:10 - An√°lise Profunda do Sistema Atual**

**Carlos:** Vamos revisar o que j√° temos funcionando:

```python
# Sistema existente que ser√° INTEGRADO
class Funcionario(db.Model):
    nome = db.Column(db.String(100))
    cargo = db.Column(db.String(50))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    ativo = db.Column(db.Boolean, default=True)

class Ponto(db.Model):
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'))
    data_ponto = db.Column(db.Date)
    hora_entrada = db.Column(db.Time)
    hora_saida = db.Column(db.Time)
    tipo_local = db.Column(db.String(20))  # 'oficina', 'campo'

class RDO(db.Model):
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    data_relatorio = db.Column(db.Date)
    status = db.Column(db.String(20))  # 'Rascunho', 'Finalizado'
```

**Ana:** Perfeito! O ponto crucial √© que o **gestor de equipes** vai poder:
1. **Alocar funcion√°rios** para obras em datas espec√≠ficas
2. **Definir se √© oficina ou campo** na aloca√ß√£o
3. **Criar RDO automaticamente** quando alocar para campo
4. **Integrar com sistema de ponto** existente

### **14:20 - Especifica√ß√£o da Interface Kanban/Calend√°rio**

**Lucia:** Analisei v√°rias op√ß√µes e sugiro uma **interface h√≠brida**:

**Vis√£o Kanban (Principal):**
- **Colunas:** Funcion√°rios dispon√≠veis
- **Cards:** Obras em andamento
- **Drag & Drop:** Arrastar obra para funcion√°rio = aloca√ß√£o
- **Cores:** Verde (oficina), Azul (campo), Cinza (n√£o alocado)

**Vis√£o Calend√°rio (Alternativa):**
- **Semana:** 7 dias vis√≠veis
- **Linhas:** Funcion√°rios
- **C√©lulas:** Aloca√ß√µes do dia
- **Click:** Editar aloca√ß√£o

**Rafael:** Do ponto de vista de dados, posso implementar:
- **Algoritmo de sugest√£o** de aloca√ß√£o baseado em hist√≥rico
- **Detec√ß√£o de conflitos** (funcion√°rio em 2 lugares)
- **Otimiza√ß√£o** de equipes por proximidade geogr√°fica

### **14:35 - Nova Classe: AlocacaoEquipe**

**Ana:** Vou criar uma nova classe para gerenciar aloca√ß√µes:

```python
class AlocacaoEquipe(db.Model):
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'))
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    data_alocacao = db.Column(db.Date)
    tipo_local = db.Column(db.String(20))  # 'oficina', 'campo'
    
    # Controle
    criado_por_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    rdo_gerado_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    
    # Status
    status = db.Column(db.String(20), default='Planejado')  # Planejado, Executado, Cancelado
    
    # Multi-tenant
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
```

**Carlos:** Excelente! E quando o gestor alocar algu√©m para **campo**, vamos automaticamente:
1. **Criar RDO** para aquela obra e data
2. **Vincular** a aloca√ß√£o ao RDO
3. **Notificar** o funcion√°rio (futuro)

### **14:45 - Permiss√µes e Seguran√ßa**

**Patricia:** Precisamos definir quem pode fazer o qu√™:

**Gestor de Equipes (novo tipo de usu√°rio):**
- Pode alocar TODOS os funcion√°rios
- Pode criar RDOs automaticamente
- Pode ver todas as obras em andamento
- N√ÉO pode editar dados de funcion√°rios

**Admin:**
- Pode fazer tudo que o gestor faz
- Pode definir quem √© gestor de equipes
- Pode editar dados de funcion√°rios

**Funcion√°rio:**
- Pode VER suas pr√≥prias aloca√ß√µes
- N√ÉO pode alterar aloca√ß√µes

**Ana:** Vou criar um novo enum para tipos de usu√°rio:

```python
class TipoUsuario(enum.Enum):
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    GESTOR_EQUIPES = "gestor_equipes"  # NOVO
    FUNCIONARIO = "funcionario"
```

### **15:00 - Interface Kanban Detalhada**

**Lucia:** Vou detalhar a interface Kanban:

**Layout Principal:**
```
+------------------+------------------+------------------+
| Funcion√°rios     | Obras Pendentes  | Aloca√ß√µes Hoje   |
| Dispon√≠veis      |                  |                  |
+------------------+------------------+------------------+
| Jo√£o Silva       | Obra A - Casa    | Jo√£o ‚Üí Obra A    |
| [Pedreiro]       | Obra B - Pr√©dio  | Maria ‚Üí Obra B   |
| [Dispon√≠vel]     | Obra C - Reforma | Pedro ‚Üí Oficina  |
|                  |                  |                  |
| Maria Santos     |                  |                  |
| [Eletricista]    |                  |                  |
| [Obra B]         |                  |                  |
+------------------+------------------+------------------+
```

**Funcionalidades:**
- **Drag & Drop:** Arrastar obra para funcion√°rio
- **Modal de Aloca√ß√£o:** Escolher data, tipo (oficina/campo)
- **Cores visuais:** Verde (oficina), Azul (campo)
- **Filtros:** Por data, por obra, por funcion√°rio

**Jo√£o:** Para performance, vou implementar:
- **WebSockets** para atualiza√ß√µes em tempo real
- **Cache Redis** para dados de aloca√ß√£o
- **Lazy loading** para funcion√°rios inativos

### **15:15 - Cria√ß√£o Autom√°tica de RDO**

**Carlos:** Este √© o ponto mais cr√≠tico. Quando o gestor alocar algu√©m para **campo**:

```python
def criar_rdo_automatico(alocacao_id):
    alocacao = AlocacaoEquipe.query.get(alocacao_id)
    
    if alocacao.tipo_local != 'campo':
        return None  # S√≥ cria RDO para campo
    
    # Verificar se j√° existe RDO para esta obra/data
    rdo_existente = RDO.query.filter_by(
        obra_id=alocacao.obra_id,
        data_relatorio=alocacao.data_alocacao
    ).first()
    
    if rdo_existente:
        # Vincular aloca√ß√£o ao RDO existente
        alocacao.rdo_gerado_id = rdo_existente.id
    else:
        # Criar novo RDO
        numero_rdo = gerar_numero_rdo(alocacao.obra_id, alocacao.data_alocacao)
        
        rdo = RDO(
            numero_rdo=numero_rdo,
            obra_id=alocacao.obra_id,
            data_relatorio=alocacao.data_alocacao,
            status='Rascunho',
            admin_id=alocacao.admin_id
        )
        
        db.session.add(rdo)
        db.session.flush()
        
        alocacao.rdo_gerado_id = rdo.id
    
    db.session.commit()
    return rdo
```

**Ana:** E vou criar uma fun√ß√£o para gerar n√∫meros de RDO autom√°ticos:

```python
def gerar_numero_rdo(obra_id, data_relatorio):
    obra = Obra.query.get(obra_id)
    data_str = data_relatorio.strftime('%Y%m%d')
    
    # Formato: RDO-OBRA001-20251122-001
    ultimo_rdo = RDO.query.filter(
        RDO.obra_id == obra_id,
        RDO.numero_rdo.like(f'RDO-{obra.codigo}-%{data_str}%')
    ).order_by(RDO.numero_rdo.desc()).first()
    
    if ultimo_rdo:
        ultimo_numero = int(ultimo_rdo.numero_rdo.split('-')[-1])
        novo_numero = ultimo_numero + 1
    else:
        novo_numero = 1
    
    return f"RDO-{obra.codigo}-{data_str}-{novo_numero:03d}"
```

### **15:30 - Integra√ß√£o com Sistema de Ponto**

**Patricia:** A integra√ß√£o com o ponto √© fundamental:

**Fluxo Completo:**
1. **Gestor aloca** funcion√°rio para obra (campo) no dia X
2. **Sistema cria** RDO automaticamente
3. **Funcion√°rio bate ponto** no dia X
4. **Sistema detecta** que ele est√° alocado para campo
5. **Ponto √© vinculado** √† obra automaticamente

```python
def processar_ponto_com_alocacao(ponto_id):
    ponto = Ponto.query.get(ponto_id)
    
    # Buscar aloca√ß√£o do funcion√°rio para esta data
    alocacao = AlocacaoEquipe.query.filter_by(
        funcionario_id=ponto.funcionario_id,
        data_alocacao=ponto.data_ponto,
        status='Planejado'
    ).first()
    
    if alocacao:
        # Atualizar tipo_local do ponto baseado na aloca√ß√£o
        ponto.tipo_local = alocacao.tipo_local
        
        # Se for campo, vincular √† obra
        if alocacao.tipo_local == 'campo':
            ponto.obra_id = alocacao.obra_id  # NOVO CAMPO
        
        # Marcar aloca√ß√£o como executada
        alocacao.status = 'Executado'
        
        db.session.commit()
```

### **15:45 - Dashboard do Gestor de Equipes**

**Lucia:** O dashboard do gestor ter√° v√°rias vis√µes:

**Vis√£o Di√°ria (Principal):**
- **Kanban** com funcion√°rios e obras
- **Estat√≠sticas** do dia (X funcion√°rios alocados)
- **Alertas** (conflitos, funcion√°rios sem aloca√ß√£o)

**Vis√£o Semanal:**
- **Calend√°rio** 7 dias
- **Planejamento** antecipado
- **Hist√≥rico** de aloca√ß√µes

**Vis√£o Mensal:**
- **Relat√≥rios** de produtividade
- **Gr√°ficos** de utiliza√ß√£o de equipe
- **An√°lises** de efici√™ncia

**Rafael:** Vou implementar analytics:
- **Taxa de utiliza√ß√£o** por funcion√°rio
- **Obras com mais aloca√ß√µes**
- **Funcion√°rios mais produtivos**
- **Previs√£o de demanda** de equipe

### **16:00 - APIs para Interface Din√¢mica**

**Jo√£o:** Vou criar APIs espec√≠ficas para o Kanban:

```python
@main_bp.route('/api/gestao-equipes/funcionarios-disponiveis')
@gestor_equipes_required
def api_funcionarios_disponiveis():
    data = request.args.get('data', date.today().isoformat())
    data_obj = datetime.strptime(data, '%Y-%m-%d').date()
    
    # Funcion√°rios ativos
    funcionarios = Funcionario.query.filter_by(
        admin_id=get_tenant_filter(),
        ativo=True
    ).all()
    
    resultado = []
    for funcionario in funcionarios:
        # Verificar se j√° est√° alocado nesta data
        alocacao = AlocacaoEquipe.query.filter_by(
            funcionario_id=funcionario.id,
            data_alocacao=data_obj
        ).first()
        
        resultado.append({
            'id': funcionario.id,
            'nome': funcionario.nome,
            'cargo': funcionario.cargo,
            'alocado': alocacao is not None,
            'alocacao': {
                'obra_nome': alocacao.obra.nome if alocacao else None,
                'tipo_local': alocacao.tipo_local if alocacao else None
            } if alocacao else None
        })
    
    return jsonify(resultado)

@main_bp.route('/api/gestao-equipes/obras-ativas')
@gestor_equipes_required
def api_obras_ativas():
    obras = Obra.query.filter_by(
        admin_id=get_tenant_filter(),
        status='Em Andamento'
    ).all()
    
    return jsonify([{
        'id': obra.id,
        'nome': obra.nome,
        'codigo': obra.codigo,
        'endereco': obra.endereco,
        'progresso': calcular_progresso_obra_cliente(obra.id)['percentual_geral']
    } for obra in obras])

@main_bp.route('/api/gestao-equipes/alocar', methods=['POST'])
@gestor_equipes_required
def api_alocar_funcionario():
    data = request.get_json()
    
    # Validar dados
    funcionario_id = data.get('funcionario_id')
    obra_id = data.get('obra_id')
    data_alocacao = datetime.strptime(data.get('data'), '%Y-%m-%d').date()
    tipo_local = data.get('tipo_local')  # 'oficina' ou 'campo'
    
    # Verificar conflitos
    conflito = AlocacaoEquipe.query.filter_by(
        funcionario_id=funcionario_id,
        data_alocacao=data_alocacao
    ).first()
    
    if conflito:
        return jsonify({'error': 'Funcion√°rio j√° alocado nesta data'}), 400
    
    # Criar aloca√ß√£o
    alocacao = AlocacaoEquipe(
        funcionario_id=funcionario_id,
        obra_id=obra_id,
        data_alocacao=data_alocacao,
        tipo_local=tipo_local,
        criado_por_id=current_user.id,
        admin_id=get_tenant_filter()
    )
    
    db.session.add(alocacao)
    db.session.flush()
    
    # Se for campo, criar RDO automaticamente
    if tipo_local == 'campo':
        rdo = criar_rdo_automatico(alocacao.id)
        
        # Notificar cliente (integra√ß√£o com M√≥dulo 2)
        if rdo:
            criar_notificacao_cliente(
                obra_id=obra_id,
                tipo='equipe_alocada',
                titulo='Equipe Alocada',
                mensagem=f'Funcion√°rio {alocacao.funcionario.nome} foi alocado para sua obra.',
                prioridade='normal'
            )
    
    db.session.commit()
    
    return jsonify({'success': True, 'alocacao_id': alocacao.id})
```

### **16:15 - Interface Responsiva**

**Lucia:** A interface ser√° **mobile-first**:

**Desktop:**
- **3 colunas** (funcion√°rios, obras, aloca√ß√µes)
- **Drag & drop** completo
- **Modais** para detalhes

**Tablet:**
- **2 colunas** (funcion√°rios + obras, aloca√ß√µes)
- **Touch** otimizado
- **Swipe** para navega√ß√£o

**Mobile:**
- **1 coluna** com abas
- **Lista** em vez de Kanban
- **Bot√µes grandes** para aloca√ß√£o

**Jo√£o:** Vou usar:
- **Progressive Web App** (PWA)
- **Service Workers** para offline
- **Push notifications** (futuro)

### **16:30 - Relat√≥rios e Analytics**

**Rafael:** Vou implementar relat√≥rios avan√ßados:

**Relat√≥rio de Produtividade:**
```python
def gerar_relatorio_produtividade(data_inicio, data_fim):
    alocacoes = AlocacaoEquipe.query.filter(
        AlocacaoEquipe.data_alocacao.between(data_inicio, data_fim),
        AlocacaoEquipe.admin_id == get_tenant_filter()
    ).all()
    
    dados = defaultdict(lambda: {
        'dias_trabalhados': 0,
        'dias_oficina': 0,
        'dias_campo': 0,
        'obras_atendidas': set()
    })
    
    for alocacao in alocacoes:
        funcionario_nome = alocacao.funcionario.nome
        dados[funcionario_nome]['dias_trabalhados'] += 1
        
        if alocacao.tipo_local == 'oficina':
            dados[funcionario_nome]['dias_oficina'] += 1
        else:
            dados[funcionario_nome]['dias_campo'] += 1
            dados[funcionario_nome]['obras_atendidas'].add(alocacao.obra_id)
    
    # Converter sets para contadores
    for funcionario in dados:
        dados[funcionario]['obras_atendidas'] = len(dados[funcionario]['obras_atendidas'])
    
    return dict(dados)
```

**Gr√°ficos Visuais:**
- **Pizza:** Distribui√ß√£o oficina vs campo
- **Barras:** Produtividade por funcion√°rio
- **Linha:** Evolu√ß√£o de aloca√ß√µes no tempo
- **Heatmap:** Funcion√°rios x Obras

### **16:45 - Integra√ß√£o com M√≥dulos Anteriores**

**Marina:** Como este m√≥dulo se integra com os anteriores?

**Carlos:** Integra√ß√£o perfeita:

**Com M√≥dulo 1 (Propostas):**
- Proposta aprovada ‚Üí Obra criada ‚Üí Dispon√≠vel para aloca√ß√£o

**Com M√≥dulo 2 (Portal Cliente):**
- Funcion√°rio alocado ‚Üí Cliente v√™ equipe trabalhando
- RDO criado ‚Üí Progresso atualizado automaticamente
- Notifica√ß√£o enviada ‚Üí Cliente informado

**Ana:** E prepara o terreno para os pr√≥ximos:

**M√≥dulo 4 (Almoxarifado):**
- RDO criado ‚Üí Materiais podem ser alocados
- Funcion√°rio em campo ‚Üí Pode requisitar materiais

**M√≥dulo 5 (Biometria):**
- Aloca√ß√£o criada ‚Üí Funcion√°rio deve bater ponto
- Reconhecimento facial ‚Üí Confirma presen√ßa na obra

### **17:00 - Cronograma de Implementa√ß√£o**

**Marina:** Qual o cronograma para este m√≥dulo?

**Carlos:** Baseado na complexidade:

**Semana 1:**
- Criar classe `AlocacaoEquipe`
- Implementar permiss√µes de gestor
- Interface Kanban b√°sica

**Semana 2:**
- APIs para drag & drop
- Cria√ß√£o autom√°tica de RDO
- Integra√ß√£o com sistema de ponto

**Semana 3:**
- Dashboard completo
- Relat√≥rios e analytics
- Testes e otimiza√ß√µes

**Patricia:** Posso ajudar com os testes de usabilidade e treinamento dos gestores.

### **17:10 - Considera√ß√µes Finais**

**Jo√£o:** Algumas preocupa√ß√µes t√©cnicas:

**Performance:**
- **Cache** de aloca√ß√µes do dia atual
- **√çndices** otimizados para consultas
- **Lazy loading** de dados hist√≥ricos

**Seguran√ßa:**
- **Valida√ß√£o** de permiss√µes em todas as APIs
- **Rate limiting** para evitar spam
- **Logs** de todas as aloca√ß√µes

**Usabilidade:**
- **Feedback visual** imediato
- **Confirma√ß√µes** para a√ß√µes cr√≠ticas
- **Undo** para aloca√ß√µes recentes

**Lucia:** E vou implementar:
- **Tooltips** explicativos
- **Onboarding** para novos gestores
- **Atalhos de teclado** para power users

### **17:15 - Pr√≥ximos Passos**

**Marina:** Resumindo as responsabilidades:

1. **Ana** - Classe `AlocacaoEquipe` e l√≥gica de RDO autom√°tico
2. **Lucia** - Interface Kanban e UX responsiva
3. **Jo√£o** - APIs e performance
4. **Rafael** - Analytics e relat√≥rios
5. **Patricia** - Testes e valida√ß√£o de fluxos
6. **Carlos** - Integra√ß√£o e revis√£o t√©cnica

**Pr√≥xima reuni√£o:** Sexta-feira para review do M√≥dulo 3 completo.

---

## üìù DECIS√ïES T√âCNICAS FINAIS

### **Arquitetura:**
- **1 nova classe:** `AlocacaoEquipe`
- **Novo tipo de usu√°rio:** `GESTOR_EQUIPES`
- **Integra√ß√£o total** com sistema RDO existente
- **Cria√ß√£o autom√°tica** de RDO para aloca√ß√µes de campo

### **Interface:**
- **Kanban principal** com drag & drop
- **Calend√°rio alternativo** para vis√£o semanal
- **Dashboard** com analytics em tempo real
- **Mobile-first** e PWA

### **Funcionalidades:**
- **Aloca√ß√£o visual** de funcion√°rios para obras
- **Cria√ß√£o autom√°tica** de RDO quando alocar para campo
- **Integra√ß√£o** com sistema de ponto existente
- **Notifica√ß√µes** para cliente (M√≥dulo 2)
- **Relat√≥rios** de produtividade

### **Seguran√ßa:**
- **Permiss√µes espec√≠ficas** para gestor de equipes
- **Valida√ß√£o** de conflitos de aloca√ß√£o
- **Logs** de auditoria completos
- **Rate limiting** nas APIs

**Status:** M√≥dulo 3 especificado e pronto para implementa√ß√£o! üöÄ

