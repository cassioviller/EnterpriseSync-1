# Prompt para Limpeza Completa do Sistema Antigo de Ve√≠culos

Com base na documenta√ß√£o t√©cnica do sistema, vou criar um prompt para fazer uma limpeza segura e completa de todos os resqu√≠cios das arquiteturas antigas de ve√≠culos.

## Prompt para o Replit:

```
Atue como um desenvolvedor full-stack s√™nior, especialista em Flask, SQLAlchemy e limpeza de c√≥digo legacy. Sua miss√£o √© fazer uma LIMPEZA COMPLETA e SEGURA do sistema antigo de ve√≠culos.

**CONTEXTO CR√çTICO:**
O sistema de gest√£o de frota passou por uma REESCRITA COMPLETA em outubro de 2025. Atualmente coexistem TR√äS arquiteturas diferentes:

1. **SISTEMA ATUAL (frota_*)** - ‚úÖ MANTER
   - `frota_veiculo` ‚Üí Cadastro de ve√≠culos
   - `frota_utilizacao` ‚Üí Registros de uso/viagens  
   - `frota_despesa` ‚Üí Custos e despesas

2. **SISTEMA LEGACY ORIGINAL** - ‚ùå REMOVER
   - `veiculo`, `uso_veiculo`, `custo_veiculo`
   - `passageiro_veiculo`, `documento_fiscal`

3. **SISTEMA FLEET INTERMEDI√ÅRIO** - ‚ùå REMOVER
   - `fleet_vehicle`, `fleet_vehicle_usage`, `fleet_vehicle_cost`

**OBJETIVO:**
Fazer uma limpeza completa e segura, removendo TODOS os resqu√≠cios dos sistemas antigos, mantendo apenas o sistema `frota_*` que est√° em produ√ß√£o.

**TAREFA COMPLETA:**

## 1. LIMPEZA DO BANCO DE DADOS

### 1.1 Criar Migra√ß√£o de Limpeza Segura
Implemente uma nova migra√ß√£o (Migra√ß√£o 31) no arquivo `migrations.py`:

```python
def limpeza_completa_sistemas_antigos_veiculos():
    """
    MIGRA√á√ÉO 31: Limpeza completa dos sistemas antigos de ve√≠culos
    
    Remove todas as tabelas e resqu√≠cios dos sistemas legacy:
    - Sistema original: veiculo, uso_veiculo, custo_veiculo, etc.
    - Sistema FLEET: fleet_vehicle, fleet_vehicle_usage, fleet_vehicle_cost
    
    MANT√âM apenas: frota_veiculo, frota_utilizacao, frota_despesa
    
    SEGURAN√áA: S√≥ executa se DROP_OLD_VEHICLE_TABLES=true
    """
    try:
        # Verificar feature flag de seguran√ßa
        if os.environ.get('DROP_OLD_VEHICLE_TABLES', 'false').lower() != 'true':
            logger.info("üîí MIGRA√á√ÉO 31: Bloqueada por seguran√ßa. Para ativar: DROP_OLD_VEHICLE_TABLES=true")
            return
        
        logger.info("=" * 80)
        logger.info("üßπ MIGRA√á√ÉO 31: Limpeza completa dos sistemas antigos de ve√≠culos")
        logger.info("‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL!")
        logger.info("=" * 80)
        
        connection = db.engine.raw_connection()
        cursor = connection.cursor()
        
        # Lista de tabelas para remover (ordem importa devido a FKs)
        tabelas_para_remover = [
            # Sistema FLEET (intermedi√°rio)
            'fleet_vehicle_usage',
            'fleet_vehicle_cost', 
            'fleet_vehicle',
            
            # Sistema LEGACY original
            'passageiro_veiculo',
            'documento_fiscal',
            'uso_veiculo',
            'custo_veiculo',
            'veiculo'
        ]
        
        for tabela in tabelas_para_remover:
            try:
                # Verificar se tabela existe
                cursor.execute("""
                    SELECT table_name 
                    FROM information_schema.tables 
                    WHERE table_name = %s
                """, (tabela,))
                
                if cursor.fetchone():
                    logger.info(f"üóëÔ∏è  Removendo tabela: {tabela}")
                    cursor.execute(f"DROP TABLE IF EXISTS {tabela} CASCADE")
                    logger.info(f"‚úÖ Tabela {tabela} removida com sucesso")
                else:
                    logger.info(f"‚ÑπÔ∏è  Tabela {tabela} n√£o existe (j√° removida)")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è  Erro ao remover tabela {tabela}: {e}")
                # Continuar com outras tabelas
        
        # Remover √≠ndices √≥rf√£os se existirem
        indices_orfaos = [
            'idx_veiculo_admin_placa',
            'idx_uso_veiculo_data',
            'idx_custo_veiculo_tipo',
            'idx_fleet_vehicle_admin_plate',
            'idx_fleet_usage_date_admin'
        ]
        
        for indice in indices_orfaos:
            try:
                cursor.execute(f"DROP INDEX IF EXISTS {indice}")
                logger.info(f"üóëÔ∏è  √çndice √≥rf√£o removido: {indice}")
            except Exception as e:
                logger.debug(f"√çndice {indice} n√£o existe: {e}")
        
        connection.commit()
        cursor.close()
        connection.close()
        
        logger.info("=" * 80)
        logger.info("‚úÖ MIGRA√á√ÉO 31: Limpeza do banco conclu√≠da com sucesso!")
        logger.info("üéØ Sistema agora usa APENAS tabelas frota_*")
        logger.info("=" * 80)
        
    except Exception as e:
        logger.error(f"‚ùå Erro na Migra√ß√£o 31: {e}")
        if 'connection' in locals():
            connection.rollback()
            cursor.close()
            connection.close()
```

### 1.2 Adicionar chamada da migra√ß√£o
```python
# No final da fun√ß√£o executar_migracoes()
limpeza_completa_sistemas_antigos_veiculos()  # Migra√ß√£o 31
```

## 2. LIMPEZA DO C√ìDIGO PYTHON

### 2.1 Remover Modelos Obsoletos
No arquivo `models.py`, remova COMPLETAMENTE:

```python
# REMOVER ESTES MODELOS:
class Veiculo(db.Model):  # ‚ùå REMOVER COMPLETAMENTE
class UsoVeiculo(db.Model):  # ‚ùå REMOVER COMPLETAMENTE  
class CustoVeiculo(db.Model):  # ‚ùå REMOVER COMPLETAMENTE
class PassageiroVeiculo(db.Model):  # ‚ùå REMOVER COMPLETAMENTE
class DocumentoFiscal(db.Model):  # ‚ùå REMOVER COMPLETAMENTE (se relacionado a ve√≠culos)
```

### 2.2 Remover Arquivos Obsoletos
Delete os seguintes arquivos se existirem:

```bash
# Arquivos para DELETAR:
rm -f fleet_models.py          # Sistema FLEET intermedi√°rio
rm -f fleet_service.py         # Servi√ßos FLEET
rm -f fleet_routes.py          # Rotas FLEET
rm -f veiculo_service.py       # Servi√ßos legacy (se existir)
rm -f veiculo_views.py         # Views legacy (se existir)
```

### 2.3 Limpar Imports Obsoletos
Remova todos os imports relacionados aos sistemas antigos:

```python
# REMOVER imports como:
from fleet_models import FleetVehicle, FleetVehicleUsage, FleetVehicleCost
from fleet_service import FleetService
from veiculo_service import VeiculoService  # se existir
```

### 2.4 Limpar Registros de Blueprints
No arquivo `app.py`, remova:

```python
# REMOVER registros de blueprints obsoletos:
try:
    from fleet_routes import register_fleet_routes
    fleet_registered = register_fleet_routes(app)
    # ... c√≥digo relacionado
except ImportError:
    # ... c√≥digo relacionado

# REMOVER tamb√©m:
from fleet_routes import fleet_bp
app.register_blueprint(fleet_bp)
```

## 3. LIMPEZA DOS TEMPLATES

### 3.1 Remover Templates Obsoletos
Delete os seguintes templates se existirem:

```bash
# Templates para DELETAR:
rm -f templates/fleet_*.html
rm -f templates/veiculo_*.html  # se diferentes de veiculos_*.html
rm -f templates/uso_veiculo_*.html  # se diferentes dos atuais
rm -f templates/custo_veiculo_*.html  # se diferentes dos atuais
```

### 3.2 Atualizar Links nos Templates
Nos templates restantes, garanta que todos os links apontem para `/frota`:

```html
<!-- CORRIGIR links como: -->
<a href="/veiculos">  ‚Üí  <a href="/frota">
<a href="/fleet">     ‚Üí  <a href="/frota">
```

## 4. LIMPEZA DAS ROTAS

### 4.1 Simplificar Redirecionamentos
No arquivo `views.py`, simplifique os redirecionamentos:

```python
# MANTER apenas este redirecionamento simples:
@app.route('/veiculos')
@app.route('/veiculos/')
def redirect_veiculos_para_frota():
    """Redireciona URLs antigas /veiculos para /frota"""
    return redirect('/frota', code=301)  # Redirect permanente

# REMOVER todos os outros redirecionamentos complexos relacionados a fleet_*
```

## 5. LIMPEZA DE CONFIGURA√á√ïES

### 5.1 Remover Feature Flags Obsoletos
Remova as seguintes vari√°veis de ambiente e refer√™ncias no c√≥digo:

```python
# REMOVER refer√™ncias a:
FLEET_CUTOVER
FLEET_CUTOVER_TIMESTAMP
FLEET_ENABLED
```

### 5.2 Limpar Coment√°rios e TODOs
Remova todos os coment√°rios relacionados aos sistemas antigos:

```python
# REMOVER coment√°rios como:
# TODO: Migrar para sistema FLEET
# FIXME: Compatibilidade com veiculo legacy
# NOTE: Sistema fleet em desenvolvimento
```

## 6. VALIDA√á√ÉO FINAL

Ap√≥s a limpeza, execute estes testes:

1. **Teste de Funcionalidade:**
   - Acesse `/frota` ‚Üí deve funcionar normalmente
   - Acesse `/veiculos` ‚Üí deve redirecionar para `/frota`
   - Cadastre um novo ve√≠culo ‚Üí deve usar tabela `frota_veiculo`
   - Registre uso ‚Üí deve usar tabela `frota_utilizacao`
   - Registre despesa ‚Üí deve usar tabela `frota_despesa`

2. **Teste de Limpeza:**
   - Verifique que n√£o h√° mais refer√™ncias a `fleet_*` no c√≥digo
   - Verifique que n√£o h√° mais refer√™ncias a `veiculo` (legacy) no c√≥digo
   - Confirme que apenas tabelas `frota_*` existem no banco

3. **Teste de Performance:**
   - Sistema deve estar mais r√°pido sem c√≥digo legacy
   - Logs devem estar mais limpos

**ENTREG√ÅVEL:**
1. C√≥digo da Migra√ß√£o 31 implementada
2. Lista de arquivos removidos
3. Lista de modelos/classes removidas do c√≥digo
4. Confirma√ß√£o de que apenas o sistema `frota_*` permanece ativo
5. Relat√≥rio de testes de valida√ß√£o

**SEGURAN√áA:**
- A migra√ß√£o s√≥ executa com `DROP_OLD_VEHICLE_TABLES=true`
- Fa√ßa backup do banco antes de executar
- Teste em ambiente de desenvolvimento primeiro
```

## Observa√ß√µes Importantes

- **Seguran√ßa:** A migra√ß√£o est√° protegida por feature flag
- **Irrevers√≠vel:** Esta opera√ß√£o remove permanentemente os dados antigos
- **Backup:** Sempre fa√ßa backup antes de executar
- **Teste:** Execute primeiro em desenvolvimento
- **Gradual:** Pode ser feito em etapas se preferir

Use este prompt para fazer uma limpeza completa e definitiva do sistema!
