# üéØ REUNI√ÉO T√âCNICA ESPECIALIZADA - M√ìDULO 4: ALMOXARIFADO INTELIGENTE

**Data:** 25/11/2025 - 09:00h  
**Dura√ß√£o:** 3,5 horas  
**Contexto:** Implementa√ß√£o do quarto m√≥dulo - M√≥dulos 1, 2 e 3 j√° funcionando perfeitamente  
**Status:** Continuidade da evolu√ß√£o SIGE v8.0

---

## üë• PARTICIPANTES DA REUNI√ÉO

**Marina Santos** - Product Manager (Moderadora)  
**Carlos Rodriguez** - Tech Lead  
**Ana Silva** - Backend Developer  
**Lucia Ferreira** - Frontend/UX  
**Rafael Costa** - AI/ML Engineer  
**Jo√£o Mendes** - DevOps Engineer  
**Patricia Lima** - Especialista em RH  
**Roberto Almeida** - Especialista em Log√≠stica (novo participante)  

---

## üìã AGENDA DA REUNI√ÉO

### **09:00 - Abertura e Status dos M√≥dulos Anteriores**

**Marina:** Bom dia, pessoal! Excelente trabalho nos tr√™s primeiros m√≥dulos. O sistema est√° funcionando de forma excepcional:
- **M√≥dulo 1:** Propostas sendo aprovadas e convertidas automaticamente
- **M√≥dulo 2:** Clientes acompanhando obras em tempo real com 98% de satisfa√ß√£o
- **M√≥dulo 3:** Gestores alocando equipes visualmente com cria√ß√£o autom√°tica de RDO

Agora vamos implementar o **M√≥dulo 4 - Almoxarifado Inteligente**. Este √© um m√≥dulo cr√≠tico porque vai **AUTOMATIZAR** todo o controle de estoque e **INTEGRAR** com os RDOs do M√≥dulo 3. Roberto, bem-vindo √† equipe!

**Roberto:** Obrigado, Marina! Analisei o sistema atual e vejo que temos uma base s√≥lida. O desafio √© criar um almoxarifado que funcione tanto de forma **independente** quanto **integrado com RDOs**. Precisamos de leitura de c√≥digo de barras, importa√ß√£o de XML de notas fiscais, e controle total de entrada/sa√≠da/devolu√ß√£o.

### **09:10 - An√°lise Profunda do Sistema Atual**

**Carlos:** Vamos revisar o que j√° temos funcionando e como o almoxarifado se integrar√°:

```python
# Sistema existente que ser√° INTEGRADO
class RDO(db.Model):
    # ... campos existentes ...
    # SER√Å INTEGRADO: materiais usados no RDO

class AlocacaoEquipe(db.Model):  # M√≥dulo 3
    # ... campos existentes ...
    # SER√Å INTEGRADO: funcion√°rio que requisita materiais

class Obra(db.Model):
    # ... campos existentes ...
    # SER√Å INTEGRADO: materiais alocados por obra
```

**Ana:** O ponto crucial √© que o almoxarifado ter√° **duas formas de opera√ß√£o**:

1. **Opera√ß√£o Independente:** Almoxarife faz lan√ßamentos diretos
2. **Opera√ß√£o via RDO:** Almoxarife lan√ßa materiais dentro do RDO

**Roberto:** Exato! E precisamos de **rastreabilidade total**:
- **Por funcion√°rio:** Quem pegou o material
- **Por obra:** Onde foi usado
- **Por data:** Quando foi usado
- **Por RDO:** Em qual relat√≥rio foi registrado

### **09:25 - Especifica√ß√£o do Sistema de C√≥digo de Barras**

**Rafael:** Para o c√≥digo de barras, sugiro usar a biblioteca **pyzbar** para leitura e **python-barcode** para gera√ß√£o:

**Funcionalidades:**
- **Leitura** de c√≥digos EAN-13, Code-128, QR Code
- **Gera√ß√£o autom√°tica** de c√≥digos para produtos sem c√≥digo
- **Integra√ß√£o** com c√¢mera web para leitura em tempo real
- **Valida√ß√£o** de c√≥digos existentes no sistema

**Jo√£o:** Do ponto de vista t√©cnico, vou implementar:
- **API de leitura** via JavaScript + WebRTC
- **Fallback** para input manual
- **Cache** de c√≥digos lidos recentemente
- **Valida√ß√£o** em tempo real

### **09:40 - Sistema de Importa√ß√£o XML**

**Ana:** Para importa√ß√£o de XML de notas fiscais, vou usar **lxml** e seguir o padr√£o NFe:

**Estrutura do XML NFe:**
```xml
<nfeProc>
  <NFe>
    <infNFe>
      <det nItem="1">
        <prod>
          <cProd>001</cProd>
          <cEAN>7891234567890</cEAN>
          <xProd>Cimento CP-II 50kg</xProd>
          <uCom>SC</uCom>
          <qCom>100.0000</qCom>
          <vUnCom>25.5000</vUnCom>
        </prod>
      </det>
    </infNFe>
  </NFe>
</nfeProc>
```

**Funcionalidades de Importa√ß√£o:**
- **Upload** de arquivo XML
- **Parsing autom√°tico** dos produtos
- **Valida√ß√£o** de estrutura NFe
- **Cria√ß√£o autom√°tica** de produtos n√£o cadastrados
- **Lan√ßamento autom√°tico** de entrada no estoque

**Roberto:** E vou implementar **valida√ß√µes cr√≠ticas**:
- **CNPJ do fornecedor** deve estar cadastrado
- **Produtos** devem ter c√≥digo de barras v√°lido
- **Quantidades** devem ser positivas
- **Valores** devem ser consistentes

### **09:55 - Nova Arquitetura: 5 Classes Principais**

**Carlos:** Vou criar 5 novas classes para o almoxarifado:

```python
# 1. PRODUTOS/MATERIAIS
class Produto(db.Model):
    codigo_interno = db.Column(db.String(20), unique=True)
    codigo_barras = db.Column(db.String(50))
    nome = db.Column(db.String(200))
    descricao = db.Column(db.Text)
    unidade_medida = db.Column(db.String(10))  # UN, KG, M, L, etc.
    categoria_id = db.Column(db.Integer, db.ForeignKey('categoria_produto.id'))
    estoque_minimo = db.Column(db.Numeric(10,3), default=0)
    estoque_atual = db.Column(db.Numeric(10,3), default=0)
    valor_medio = db.Column(db.Numeric(10,2), default=0)
    ativo = db.Column(db.Boolean, default=True)

# 2. CATEGORIAS DE PRODUTOS
class CategoriaProduto(db.Model):
    nome = db.Column(db.String(100))
    descricao = db.Column(db.Text)
    codigo = db.Column(db.String(10))  # CIM, ELE, HID, etc.

# 3. FORNECEDORES
class Fornecedor(db.Model):
    razao_social = db.Column(db.String(200))
    nome_fantasia = db.Column(db.String(200))
    cnpj = db.Column(db.String(18), unique=True)
    endereco = db.Column(db.Text)
    telefone = db.Column(db.String(20))
    email = db.Column(db.String(100))

# 4. MOVIMENTA√á√ïES DE ESTOQUE
class MovimentacaoEstoque(db.Model):
    produto_id = db.Column(db.Integer, db.ForeignKey('produto.id'))
    tipo_movimentacao = db.Column(db.String(20))  # ENTRADA, SAIDA, DEVOLUCAO
    quantidade = db.Column(db.Numeric(10,3))
    valor_unitario = db.Column(db.Numeric(10,2))
    data_movimentacao = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Origem da movimenta√ß√£o
    nota_fiscal_id = db.Column(db.Integer, db.ForeignKey('nota_fiscal.id'))
    rdo_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'))
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    
    # Controle
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    observacoes = db.Column(db.Text)

# 5. NOTAS FISCAIS
class NotaFiscal(db.Model):
    numero = db.Column(db.String(20))
    serie = db.Column(db.String(5))
    chave_acesso = db.Column(db.String(44), unique=True)
    fornecedor_id = db.Column(db.Integer, db.ForeignKey('fornecedor.id'))
    data_emissao = db.Column(db.Date)
    valor_total = db.Column(db.Numeric(10,2))
    xml_content = db.Column(db.Text)  # Armazenar XML completo
    status = db.Column(db.String(20), default='Pendente')  # Pendente, Processada
```

**Ana:** Perfeito! E vou adicionar **relacionamentos inteligentes**:
- **Produto** ‚Üî **MovimentacaoEstoque** (hist√≥rico completo)
- **NotaFiscal** ‚Üî **MovimentacaoEstoque** (rastreabilidade)
- **RDO** ‚Üî **MovimentacaoEstoque** (integra√ß√£o M√≥dulo 3)
- **Funcionario** ‚Üî **MovimentacaoEstoque** (quem pegou)

### **10:15 - Integra√ß√£o com RDO (M√≥dulo 3)**

**Patricia:** A integra√ß√£o com RDO √© fundamental. O fluxo ser√°:

**Cen√°rio 1: Almoxarife trabalha via RDO**
1. **Almoxarife** acessa RDO criado pelo gestor (M√≥dulo 3)
2. **Dentro do RDO** tem aba "Materiais"
3. **Almoxarife** escaneia c√≥digo de barras ou digita
4. **Sistema** faz lan√ßamento autom√°tico de SA√çDA
5. **No final do dia** almoxarife pode registrar DEVOLU√á√ÉO

**Cen√°rio 2: Almoxarife trabalha independente**
1. **Almoxarife** acessa m√≥dulo de almoxarifado
2. **Faz lan√ßamentos** diretos de entrada/sa√≠da/devolu√ß√£o
3. **Pode vincular** √† obra e funcion√°rio manualmente

**Carlos:** Vou criar **abas espec√≠ficas no RDO**:

```python
# MODIFICAR template do RDO para incluir aba de materiais
# RDO existente ter√° nova aba: "Materiais"
# S√≥ almoxarife pode editar esta aba
# Funcion√°rios veem apenas para consulta
```

**Roberto:** E vou implementar **controle de permiss√µes**:
- **Almoxarife:** Pode lan√ßar materiais em qualquer RDO
- **Gestor:** Pode ver relat√≥rios de consumo
- **Funcion√°rio:** Pode ver materiais do seu RDO (somente leitura)

### **10:30 - Interface de Leitura de C√≥digo de Barras**

**Lucia:** Vou criar uma interface **mobile-first** para leitura:

**Tela Principal:**
```
+----------------------------------+
|  üì∑ [Escanear C√≥digo]           |
|                                  |
|  üìù [Digitar C√≥digo]            |
|                                  |
|  üìã [√öltimos Escaneados]        |
|  - Cimento CP-II (10 min atr√°s) |
|  - Ferro 8mm (15 min atr√°s)     |
|                                  |
|  üìä [Estoque Baixo] (3 itens)   |
+----------------------------------+
```

**Funcionalidades:**
- **C√¢mera em tempo real** com overlay de mira
- **Feedback sonoro** quando ler c√≥digo
- **Hist√≥rico** dos √∫ltimos c√≥digos lidos
- **Sugest√µes** de produtos similares
- **Modo offline** para locais sem internet

**Rafael:** Vou implementar **IA para reconhecimento**:
- **OCR** para c√≥digos danificados
- **Sugest√£o autom√°tica** baseada em hist√≥rico
- **Detec√ß√£o** de produtos similares
- **Aprendizado** de padr√µes de uso

### **10:45 - Sistema de Importa√ß√£o XML Avan√ßado**

**Ana:** Para importa√ß√£o de XML, vou criar um **wizard inteligente**:

**Passo 1: Upload do XML**
- **Drag & drop** ou sele√ß√£o de arquivo
- **Valida√ß√£o** de estrutura NFe
- **Extra√ß√£o** autom√°tica de dados

**Passo 2: Valida√ß√£o de Fornecedor**
- **Busca autom√°tica** por CNPJ
- **Cria√ß√£o** de fornecedor se n√£o existir
- **Valida√ß√£o** de dados obrigat√≥rios

**Passo 3: Mapeamento de Produtos**
- **Lista** todos os produtos do XML
- **Busca autom√°tica** por c√≥digo de barras
- **Sugest√£o** de produtos similares
- **Cria√ß√£o** de novos produtos

**Passo 4: Confirma√ß√£o e Processamento**
- **Resumo** da importa√ß√£o
- **Valores** calculados automaticamente
- **Lan√ßamento** autom√°tico no estoque

**Roberto:** E vou adicionar **valida√ß√µes cr√≠ticas**:
```python
def validar_xml_nfe(xml_content):
    # Validar estrutura XML
    # Validar CNPJ do fornecedor
    # Validar c√≥digos de produtos
    # Validar quantidades e valores
    # Detectar duplicatas
    return {
        'valido': True/False,
        'erros': [],
        'avisos': [],
        'produtos': []
    }
```

### **11:00 - Controle de Estoque Inteligente**

**Rafael:** Vou implementar **algoritmos inteligentes** para controle:

**C√°lculo de Estoque M√≠nimo:**
```python
def calcular_estoque_minimo(produto_id, dias_historico=90):
    # Analisar consumo dos √∫ltimos 90 dias
    # Calcular m√©dia m√≥vel
    # Considerar sazonalidade
    # Aplicar margem de seguran√ßa
    return estoque_minimo_sugerido
```

**Previs√£o de Consumo:**
```python
def prever_consumo(produto_id, dias_futuros=30):
    # Usar regress√£o linear
    # Considerar obras em andamento
    # Analisar padr√µes hist√≥ricos
    # Retornar previs√£o com confian√ßa
    return {
        'consumo_previsto': quantidade,
        'confianca': percentual,
        'data_ruptura': data_estimada
    }
```

**Alertas Autom√°ticos:**
- **Estoque baixo** (abaixo do m√≠nimo)
- **Ruptura iminente** (previs√£o de acabar)
- **Produtos parados** (sem movimenta√ß√£o h√° 60 dias)
- **Diverg√™ncias** de estoque

### **11:15 - Relat√≥rios Avan√ßados**

**Jo√£o:** Vou criar **relat√≥rios espec√≠ficos** para gest√£o:

**Relat√≥rio de Consumo por Obra:**
- **Materiais** mais usados por obra
- **Custo** de materiais por obra
- **Comparativo** entre obras similares
- **Efici√™ncia** de uso de materiais

**Relat√≥rio de Produtividade:**
- **Consumo** por funcion√°rio
- **Padr√µes** de uso por cargo
- **Desperd√≠cio** identificado
- **Sugest√µes** de otimiza√ß√£o

**Relat√≥rio Financeiro:**
- **Valor** do estoque atual
- **Giro** de estoque por categoria
- **Fornecedores** mais utilizados
- **An√°lise** de custos

**Relat√≥rio de Auditoria:**
- **Todas** as movimenta√ß√µes
- **Usu√°rio** respons√°vel por cada lan√ßamento
- **Hist√≥rico** de altera√ß√µes
- **Rastreabilidade** completa

### **11:30 - Integra√ß√£o com M√≥dulos Anteriores**

**Marina:** Como este m√≥dulo se integra com os anteriores?

**Carlos:** Integra√ß√£o perfeita e inteligente:

**Com M√≥dulo 1 (Propostas):**
- **Proposta** pode incluir lista de materiais estimados
- **Convers√£o** para obra transfere materiais para or√ßamento
- **Cliente** pode ver custo estimado de materiais

**Com M√≥dulo 2 (Portal Cliente):**
- **Cliente** v√™ progresso de materiais utilizados
- **Transpar√™ncia** total sobre custos
- **Fotos** dos materiais sendo utilizados

**Com M√≥dulo 3 (Gest√£o Equipes):**
- **RDO criado** automaticamente tem aba de materiais
- **Funcion√°rio alocado** pode requisitar materiais
- **Almoxarife** lan√ßa materiais no RDO espec√≠fico

**Ana:** E prepara o terreno para os pr√≥ximos:

**M√≥dulo 5 (Biometria):**
- **Reconhecimento facial** para liberar materiais
- **Controle** de quem pegou cada material
- **Seguran√ßa** no almoxarifado

**M√≥dulo 6 (Folha Pagamento):**
- **Custo** de materiais por funcion√°rio
- **Produtividade** baseada em materiais utilizados

### **11:45 - Dashboard do Almoxarifado**

**Lucia:** O dashboard ter√° **vis√£o completa** do almoxarifado:

**Se√ß√£o 1: Indicadores Principais**
- **Valor total** do estoque
- **Produtos** em estoque baixo
- **Movimenta√ß√µes** do dia
- **Notas fiscais** pendentes

**Se√ß√£o 2: Gr√°ficos Visuais**
- **Consumo** por categoria (pizza)
- **Movimenta√ß√µes** no tempo (linha)
- **Top 10** produtos mais usados (barras)
- **Estoque** por obra (barras empilhadas)

**Se√ß√£o 3: A√ß√µes R√°pidas**
- **Escanear** c√≥digo de barras
- **Importar** XML de nota fiscal
- **Lan√ßar** sa√≠da manual
- **Ver** relat√≥rios

**Se√ß√£o 4: Alertas**
- **Produtos** com estoque baixo
- **Notas fiscais** n√£o processadas
- **Diverg√™ncias** detectadas
- **Materiais** sem movimenta√ß√£o

### **12:00 - Permiss√µes e Seguran√ßa**

**Patricia:** Vou definir **permiss√µes espec√≠ficas** para almoxarifado:

**Almoxarife (novo tipo de usu√°rio):**
- **Pode:** Fazer todos os lan√ßamentos
- **Pode:** Importar XML de notas fiscais
- **Pode:** Escanear c√≥digos de barras
- **Pode:** Acessar todos os RDOs para lan√ßar materiais
- **N√ÉO pode:** Alterar dados de funcion√°rios ou obras

**Gestor de Obras:**
- **Pode:** Ver relat√≥rios de consumo por obra
- **Pode:** Ver materiais utilizados nos RDOs
- **N√ÉO pode:** Fazer lan√ßamentos no estoque

**Funcion√°rio:**
- **Pode:** Ver materiais do seu RDO (somente leitura)
- **N√ÉO pode:** Fazer lan√ßamentos

**Ana:** Vou criar **logs de auditoria** completos:
```python
class LogAlmoxarifado(db.Model):
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    acao = db.Column(db.String(50))  # ENTRADA, SAIDA, DEVOLUCAO, IMPORTACAO_XML
    produto_id = db.Column(db.Integer, db.ForeignKey('produto.id'))
    quantidade_anterior = db.Column(db.Numeric(10,3))
    quantidade_nova = db.Column(db.Numeric(10,3))
    observacoes = db.Column(db.Text)
    ip_address = db.Column(db.String(45))
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
```

### **12:15 - Interface Mobile para Campo**

**Jo√£o:** Vou criar **app mobile** para uso em campo:

**Funcionalidades Mobile:**
- **C√¢mera** para escanear c√≥digos
- **Modo offline** para locais sem internet
- **Sincroniza√ß√£o** autom√°tica quando conectar
- **Interface** otimizada para touch
- **Notifica√ß√µes** push para alertas

**PWA (Progressive Web App):**
- **Instal√°vel** como app nativo
- **Funciona offline** com Service Workers
- **Sincroniza√ß√£o** em background
- **Notifica√ß√µes** push

### **12:30 - Cronograma de Implementa√ß√£o**

**Marina:** Qual o cronograma para este m√≥dulo?

**Carlos:** Baseado na complexidade:

**Semana 1:**
- Criar 5 novas classes do almoxarifado
- Implementar leitura de c√≥digo de barras
- Interface b√°sica de lan√ßamentos

**Semana 2:**
- Sistema de importa√ß√£o XML
- Integra√ß√£o com RDO (aba materiais)
- Relat√≥rios b√°sicos

**Semana 3:**
- Dashboard completo
- Algoritmos de IA para estoque
- Interface mobile/PWA

**Semana 4:**
- Testes e otimiza√ß√µes
- Integra√ß√£o com m√≥dulos anteriores
- Treinamento dos usu√°rios

**Roberto:** Posso ajudar com os testes de usabilidade e treinamento dos almoxarifes.

### **12:45 - Considera√ß√µes T√©cnicas Avan√ßadas**

**Rafael:** Algumas preocupa√ß√µes t√©cnicas importantes:

**Performance:**
- **√çndices** otimizados para consultas de estoque
- **Cache** de produtos mais acessados
- **Lazy loading** para listas grandes
- **Pagina√ß√£o** inteligente

**Seguran√ßa:**
- **Valida√ß√£o** rigorosa de c√≥digos de barras
- **Sanitiza√ß√£o** de XML importado
- **Rate limiting** para APIs
- **Criptografia** de dados sens√≠veis

**Usabilidade:**
- **Feedback** visual imediato
- **Undo** para lan√ßamentos recentes
- **Confirma√ß√µes** para a√ß√µes cr√≠ticas
- **Atalhos** de teclado para power users

**Lucia:** E vou implementar:
- **Tooltips** explicativos
- **Onboarding** para novos almoxarifes
- **Modo** de treinamento
- **Help** contextual

### **13:00 - Pr√≥ximos Passos**

**Marina:** Resumindo as responsabilidades:

1. **Ana** - 5 novas classes e l√≥gica de movimenta√ß√£o
2. **Lucia** - Interface de c√≥digo de barras e dashboard
3. **Jo√£o** - Sistema de importa√ß√£o XML e PWA
4. **Rafael** - Algoritmos de IA e analytics
5. **Roberto** - Testes e valida√ß√£o de fluxos
6. **Carlos** - Integra√ß√£o com RDO e revis√£o t√©cnica

**Pr√≥xima reuni√£o:** Sexta-feira para review do M√≥dulo 4 completo.

---

## üìù DECIS√ïES T√âCNICAS FINAIS

### **Arquitetura:**
- **5 novas classes:** Produto, CategoriaProduto, Fornecedor, MovimentacaoEstoque, NotaFiscal
- **Novo tipo de usu√°rio:** `ALMOXARIFE`
- **Integra√ß√£o total** com sistema RDO existente (M√≥dulo 3)
- **Aba espec√≠fica** nos RDOs para materiais

### **Funcionalidades:**
- **Leitura de c√≥digo de barras** com c√¢mera web
- **Importa√ß√£o autom√°tica** de XML de notas fiscais
- **Controle completo** de entrada/sa√≠da/devolu√ß√£o
- **Integra√ß√£o** com RDO para lan√ßamentos
- **Relat√≥rios avan√ßados** com IA

### **Interface:**
- **Dashboard** com indicadores em tempo real
- **Mobile-first** para uso em campo
- **PWA** para funcionar offline
- **Integra√ß√£o** com c√¢mera para c√≥digos

### **Integra√ß√µes:**
- **M√≥dulo 1:** Materiais estimados nas propostas
- **M√≥dulo 2:** Cliente v√™ progresso de materiais
- **M√≥dulo 3:** Aba materiais nos RDOs
- **Sistema existente:** Rastreabilidade por funcion√°rio/obra

### **Seguran√ßa:**
- **Permiss√µes espec√≠ficas** para almoxarife
- **Logs de auditoria** completos
- **Valida√ß√µes** rigorosas de XML
- **Rastreabilidade** total de movimenta√ß√µes

**Status:** M√≥dulo 4 especificado e pronto para implementa√ß√£o! üöÄ

