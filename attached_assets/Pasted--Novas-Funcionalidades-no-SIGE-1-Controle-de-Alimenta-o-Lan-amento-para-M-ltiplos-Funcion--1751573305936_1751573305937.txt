# Novas Funcionalidades no SIGE

## 1. Controle de Alimentação: Lançamento para Múltiplos Funcionários, Cards de Restaurantes, KPIs e Filtros

**Objetivo**: Simplificar o processo de registro de alimentação, permitindo que um único lançamento de marmitas de mesmo valor seja associado a múltiplos funcionários, otimizando o tempo e reduzindo a redundância de dados. Além disso, aprimorar a visualização e gestão dos restaurantes e seus custos através de cards, KPIs e filtros de data.

### 1.1. Interface de Lançamento (Formulário de Alimentação)

A página de Controle de Alimentação (`templates/alimentacao/formulario_alimentacao.html` ou similar) será aprimorada para permitir a seleção de múltiplos funcionários para um único registro de valor de marmita.

*   **Layout do Formulário**: O formulário de lançamento de alimentação deve conter os seguintes campos:
    *   **Data**: Seletor de data para o dia do lançamento da alimentação.
    *   **Tipo**: Dropdown para selecionar o tipo de alimentação (ex: "Marmita", "Refeição no Local", "Outros").
    *   **Valor**: Campo numérico para o valor total da marmita ou refeição. Este valor será o mesmo para todos os funcionários selecionados neste lançamento.
    *   **Obra (Opcional)**: Dropdown de autocompletar/seleção para vincular o custo a uma obra específica, populado com as `Obras` cadastradas no SIGE.
    *   **Observações**: Campo de texto para quaisquer notas adicionais sobre o lançamento.
    *   **Seleção de Funcionários**: Esta é a principal alteração. Em vez de um único dropdown para "Funcionário", haverá uma área que permite a seleção de múltiplos funcionários.
        *   **Comando**: Implemente um componente de seleção múltipla (ex: um campo de autocompletar que, ao selecionar um funcionário, o adicione a uma lista visível abaixo, ou uma lista de checkboxes com busca).
        *   **Autocompletar/Seleção**: A lista de funcionários para seleção deve ser populada com os `Funcionarios` já cadastrados no SIGE.
        *   **Visualização da Seleção**: À medida que os funcionários são selecionados, seus nomes devem aparecer em uma lista clara, permitindo que o usuário visualize quem está incluído no lançamento.
        *   **Remoção**: Deve ser possível remover funcionários da lista de seleção antes de finalizar o lançamento.

### 1.2. Lógica de Processamento (Backend)

Ao submeter o formulário, o backend (rota Flask correspondente) deverá processar o lançamento da seguinte forma:

*   **Criação de Múltiplos Registros**: Para cada funcionário selecionado no formulário, um registro individual de alimentação será criado no banco de dados, associando o `Valor`, `Data`, `Tipo` e `Obra` (se aplicável) a cada `Funcionario`.
*   **Reutilização de Dados**: O ID de cada funcionário selecionado será utilizado para criar os registros, garantindo a integridade dos dados com a tabela `Funcionarios` existente.

### 1.3. Exemplo de Fluxo de Usuário para Lançamento

1.  O usuário acessa a página de Controle de Alimentação.
2.  Preenche a `Data`, `Tipo` (ex: "Marmita") e `Valor` (ex: R$ 25,00).
3.  Na seção de seleção de funcionários, começa a digitar "João" e seleciona "João Silva". Em seguida, digita "Maria" e seleciona "Maria Souza".
4.  Os nomes "João Silva" e "Maria Souza" aparecem na lista de funcionários selecionados.
5.  O usuário clica em "Salvar".
6.  O sistema cria dois registros de alimentação: um para João Silva (R$ 25,00) e outro para Maria Souza (R$ 25,00), ambos com a mesma data e tipo.

### 1.4. Página de Listagem de Restaurantes (Visão Geral)

Uma nova seção ou página será dedicada à visualização dos restaurantes e seus dados agregados.

*   **Layout**: A página principal de Alimentação (`templates/alimentacao/alimentacao.html`) será reestruturada para exibir cards de restaurantes.
    *   **Cards de Restaurantes**: Cada card representará um restaurante cadastrado, exibindo informações básicas como nome e talvez um resumo de custos.
    *   **KPIs Gerais (Acima dos Cards)**: Na parte superior da página, serão exibidos KPIs gerais relacionados à alimentação, como:
        *   **Custo Total do Mês**: Soma de todos os gastos com alimentação no mês corrente.
        *   **Média Diária de Gasto**: Custo total do mês dividido pelo número de dias no mês.
        *   **Número de Registros Hoje**: Quantidade de lançamentos de alimentação realizados no dia atual.
    *   **Filtro de Data**: Um filtro de data (início e fim) será implementado na parte superior da página para permitir a visualização dos KPIs e dos dados dos cards dentro de um período específico.
        *   **Comando**: Implemente seletores de data e um botão "Aplicar Filtros".

### 1.5. Página de Detalhes do Restaurante

Ao clicar em um card de restaurante na página de listagem, o usuário será direcionado para uma página de detalhes específica para aquele restaurante.

*   **Layout**: Esta página (`templates/alimentacao/detalhes_restaurante.html`) exibirá:
    *   **Informações do Restaurante**: Nome, endereço, contato, etc.
    *   **KPIs Individuais (Dentro do Card/Seção)**: KPIs específicos para o restaurante selecionado, como:
        *   **Custo Total do Restaurante no Período**: Soma dos gastos com este restaurante no período filtrado.
        *   **Média de Gasto por Funcionário**: Custo total do restaurante dividido pelo número de funcionários que utilizaram o serviço.
    *   **Botão "+ Novo Registro"**: Um botão proeminente para adicionar um novo registro de alimentação para este restaurante. Ao clicar, o formulário de lançamento de alimentação (descrito em 1.1) será exibido, com o campo de restaurante já pré-selecionado.
    *   **Histórico de Lançamentos**: Uma tabela ou lista detalhando todos os lançamentos de alimentação associados a este restaurante, incluindo `Data`, `Funcionário(s)`, `Valor`, `Obra` e `Observações`.
        *   **Comando**: A lista de funcionários deve ser exibida de forma clara para cada registro.


## 2. Gestão de Veículos: Criação da Página, Cards de Veículos, KPIs e Filtros

**Objetivo**: Criar uma página dedicada para a gestão de veículos, permitindo o registro de usos e custos de forma integrada e eficiente, aproveitando os dados de funcionários já existentes no SIGE. As funcionalidades de registro de uso e custo serão acessadas a partir da página de detalhes de um veículo específico, após clicar no card do veículo na listagem principal. Aprimorar a visualização e gestão dos veículos e seus custos através de cards, KPIs e filtros de data.

### 2.1. Criação da Página de Gestão de Veículos (Listagem)

Uma nova página será criada para a Gestão de Veículos, acessível através do menu principal do SIGE. Esta página exibirá a listagem de todos os veículos.

*   **Rota (Backend)**: Uma nova rota Flask (`/veiculos` ou similar) será criada para renderizar a página de listagem de veículos.
*   **Template (Frontend)**: Um novo arquivo HTML (`templates/veiculos/lista_veiculos.html`) será criado para a interface desta página.

### 2.2. Layout da Página de Listagem de Veículos

A página `lista_veiculos.html` deve apresentar uma visão geral dos veículos cadastrados.

*   **Cards de Veículos**: Cada card representará um veículo cadastrado, exibindo informações básicas como `Placa`, `Marca/Modelo`, `Ano`, `KM Atual`, `Status` e `Próxima Manutenção`.
*   **KPIs Gerais (Acima dos Cards)**: Na parte superior da página, serão exibidos KPIs gerais relacionados aos veículos, como:
    *   **Custo Total de Veículos no Mês**: Soma de todos os gastos com veículos no mês corrente.
    *   **Número de Usos Registrados no Período**: Quantidade de registros de uso de veículos no período filtrado.
    *   **Média de KM Rodados no Período**: Média de quilometragem registrada para os veículos no período.
*   **Filtro de Data**: Um filtro de data (início e fim) será implementado na parte superior da página para permitir a visualização dos KPIs e dos dados dos cards dentro de um período específico.
    *   **Comando**: Implemente seletores de data e um botão "Aplicar Filtros".
*   **Ação de Detalhes**: Cada card de veículo deve ser clicável, direcionando o usuário para a página de detalhes daquele veículo específico.
    *   **Comando**: Implemente um link ou evento de clique que navegue para `/veiculos/<veiculo_id>/detalhes`.
*   **Botão de Ação Global**: Um botão `+ Novo Veículo` (se ainda não existir) na parte superior da página para cadastrar um novo veículo.

### 2.3. Criação da Página de Detalhes do Veículo

Esta é uma nova página que será acessada ao clicar em um veículo na lista. Ela consolidará as informações do veículo, seus históricos de uso e custo, e os botões para registrar novas ações.

*   **Rota (Backend)**: Uma nova rota Flask (`/veiculos/<int:veiculo_id>/detalhes` ou similar) será criada para renderizar a página de detalhes de um veículo específico.
*   **Template (Frontend)**: Um novo arquivo HTML (`templates/veiculos/detalhes_veiculo.html`) será criado para a interface desta página.

### 2.4. Layout da Página de Detalhes do Veículo

A página `detalhes_veiculo.html` deve apresentar todas as informações relevantes de um veículo, juntamente com as funcionalidades de registro de uso e custo e seus históricos.

*   **Informações do Veículo**: Exiba os dados principais do veículo (Placa, Marca/Modelo, Ano, KM Atual, Status, Próxima Manutenção, etc.) de forma clara e organizada.
*   **KPIs Individuais (Dentro do Card/Seção)**: KPIs específicos para o veículo selecionado, como:
    *   **Custo Total do Veículo no Período**: Soma dos gastos com este veículo no período filtrado.
    *   **Número de Usos no Período**: Quantidade de vezes que este veículo foi utilizado no período filtrado.
    *   **Média de Custo por KM Rodado**: Custo total do veículo dividido pela quilometragem rodada no período.
*   **Botões de Ação Específicos do Veículo**: Nesta página, e de forma proeminente, haverá:
    *   Um botão `+ Novo Uso`.
    *   Um botão `+ Custo`.
    *   **Comando**: Ao clicar nesses botões, um modal ou uma nova página de formulário será exibida para o registro, já pré-selecionada para o `veiculo_id` atual.
*   **Histórico de Usos**: Uma seção dedicada para listar todos os registros de uso daquele veículo.
    *   **Layout**: Tabela ou lista exibindo `Funcionário`, `Data de Uso`.
    *   **Comando**: Os dados de `Funcionário` devem ser exibidos com o nome completo, aproveitando o autocompletar da tabela `Funcionarios`.
*   **Histórico de Custos**: Uma seção dedicada para listar todos os custos associados àquele veículo.
    *   **Layout**: Tabela ou lista exibindo `Data do Custo`, `Valor`, `Descrição`, `Tipo de Custo`.

### 2.5. Funcionalidade "+ Novo Uso" (Formulário)

Esta funcionalidade permitirá registrar quem utilizou o veículo em um determinado dia. O formulário será acessado a partir da página de detalhes do veículo.

*   **Interface (Formulário)**: Um modal ou uma nova página de formulário será exibida com os seguintes campos:
    *   **Veículo**: Campo somente leitura ou oculto, pré-preenchido com o nome/placa do veículo atual.
    *   **Funcionário**: Dropdown de autocompletar/seleção, populado com os `Funcionarios` cadastrados no SIGE.
    *   **Data de Uso**: Seletor de data para registrar o dia em que o veículo foi utilizado.
*   **Lógica (Backend)**: Ao submeter o formulário, o backend deverá criar um novo registro na tabela de `Usos_Veiculo` (uma nova tabela a ser criada no schema, se ainda não existir, vinculando `Veiculo_id`, `Funcionario_id` e `Data_Uso`).

### 2.6. Funcionalidade "+ Custo" (Formulário)

Esta funcionalidade permitirá registrar os custos associados ao veículo. O formulário será acessado a partir da página de detalhes do veículo.

*   **Interface (Formulário)**: Um modal ou uma nova página de formulário será exibida com os seguintes campos:
    *   **Veículo**: Campo somente leitura ou oculto, pré-preenchido com o nome/placa do veículo atual.
    *   **Data do Custo**: Seletor de data para registrar o dia em que o custo ocorreu.
    *   **Valor**: Campo numérico para o valor do custo.
    *   **Descrição**: Campo de texto para uma descrição detalhada do custo (ex: "Troca de óleo", "Abastecimento").
    *   **Tipo de Custo**: Dropdown com opções pré-definidas como "Combustível", "Manutenção", "Outros".
*   **Lógica (Backend)**: Ao submeter o formulário, o backend deverá criar um novo registro na tabela de `Custos_Veiculo` (uma nova tabela a ser criada no schema, se ainda não existir, vinculando `Veiculo_id`, `Data_Custo`, `Valor`, `Descricao` e `Tipo_Custo`).

### 2.7. Reutilização de Dados Existentes

Ambas as funcionalidades ("+ Novo Uso" e "+ Custo") farão uso extensivo dos dados já cadastrados no SIGE:

*   **Veículos**: A lista de veículos para seleção (na página de listagem) e o veículo específico (na página de detalhes) serão obtidos da tabela de `Veiculos` existente.
*   **Funcionários**: A lista de funcionários para seleção será obtida da tabela de `Funcionarios` existente.

Essas implementações garantirão que a gestão de veículos seja abrangente e integrada ao sistema, fornecendo controle sobre o uso e os custos de cada veículo de forma centralizada na página de detalhes do veículo.

