# üö® CORRE√á√ÉO CR√çTICA: Servi√ßos da Obra N√£o Aparecem no RDO

## üéØ PROBLEMA IDENTIFICADO

Quando uma obra √© editada e **novos servi√ßos s√£o adicionados**, ao criar um novo RDO:
- ‚ùå **Apenas os servi√ßos do √∫ltimo RDO aparecem**
- ‚ùå **Novos servi√ßos adicionados √† obra N√ÉO aparecem**
- ‚ùå **Sistema puxa apenas dados do √∫ltimo RDO, ignorando mudan√ßas na obra**

### Cen√°rio do Problema:
1. Obra tem servi√ßos A, B, C
2. Cria RDO-1 com servi√ßos A, B, C
3. **Edita obra e adiciona servi√ßo D**
4. Cria RDO-2 ‚Üí **Servi√ßo D n√£o aparece!**

## üîç CAUSA RAIZ

A API `/api/rdo/ultima-dados/<obra_id>` (linha 8400 do views.py) apenas busca servi√ßos do √∫ltimo RDO, n√£o verifica se novos servi√ßos foram adicionados √† obra.

```python
# C√ìDIGO ATUAL (PROBLEM√ÅTICO):
subatividades = RDOServicoSubatividade.query.filter_by(
    rdo_id=ultimo_rdo.id  # ‚ùå S√≥ busca do √∫ltimo RDO
).all()
```

## üõ†Ô∏è SOLU√á√ÉO IMPLEMENTADA

### **ESTRAT√âGIA: Combinar Dados**
1. **Buscar servi√ßos do √∫ltimo RDO** (manter progresso)
2. **Buscar TODOS os servi√ßos atuais da obra**
3. **Identificar novos servi√ßos** (n√£o estavam no √∫ltimo RDO)
4. **Adicionar novos servi√ßos com 0% de progresso**

### **NOVA L√ìGICA:**
```
SERVI√áOS FINAIS = SERVI√áOS_√öLTIMO_RDO + NOVOS_SERVI√áOS_OBRA
```

## üìù IMPLEMENTA√á√ÉO

### **PASSO 1: Substituir a API no views.py**

Localizar a fun√ß√£o `api_rdo_ultima_dados` (linha ~8400) e substituir por:

```python
@main_bp.route('/api/rdo/ultima-dados/<int:obra_id>')
@login_required
def api_rdo_ultima_dados(obra_id):
    """
    API CORRIGIDA: Buscar dados do √∫ltimo RDO + novos servi√ßos da obra
    Combina servi√ßos do √∫ltimo RDO com novos servi√ßos adicionados √† obra
    """
    try:
        admin_id = get_admin_id_robusta()
        
        print(f"üîç API ultima-dados CORRIGIDA: obra {obra_id}, admin_id {admin_id}")
        
        # ETAPA 1: Buscar √∫ltimo RDO da obra
        ultimo_rdo = RDO.query.join(Obra).filter(
            Obra.id == obra_id,
            Obra.admin_id == admin_id
        ).order_by(RDO.data_relatorio.desc()).first()
        
        # ETAPA 2: Buscar TODOS os servi√ßos ativos da obra (incluindo novos)
        servicos_obra_atuais = db.session.query(ServicoObra, Servico).join(
            Servico, ServicoObra.servico_id == Servico.id
        ).filter(
            ServicoObra.obra_id == obra_id,
            ServicoObra.ativo == True,
            ServicoObra.admin_id == admin_id
        ).all()
        
        print(f"üìã SERVI√áOS ATUAIS DA OBRA: {len(servicos_obra_atuais)} encontrados")
        
        # ETAPA 3: Criar dicion√°rio de servi√ßos com dados do √∫ltimo RDO
        servicos_finais = {}
        servicos_do_ultimo_rdo = set()
        
        if ultimo_rdo:
            print(f"üìÑ √öLTIMO RDO: {ultimo_rdo.numero_rdo} - {ultimo_rdo.data_relatorio}")
            
            # Buscar subatividades do √∫ltimo RDO
            subatividades_ultimo_rdo = RDOServicoSubatividade.query.filter_by(
                rdo_id=ultimo_rdo.id
            ).all()
            
            # Agrupar subatividades por servi√ßo do √∫ltimo RDO
            for sub in subatividades_ultimo_rdo:
                servico_id = sub.servico_id
                servicos_do_ultimo_rdo.add(servico_id)
                
                if servico_id not in servicos_finais:
                    servico = Servico.query.get(servico_id)
                    if servico:
                        servicos_finais[servico_id] = {
                            'id': servico.id,
                            'nome': servico.nome,
                            'categoria': getattr(servico, 'categoria', 'Geral'),
                            'descricao': servico.descricao or '',
                            'subatividades': [],
                            'origem': 'ultimo_rdo'
                        }
                
                # Adicionar subatividade com dados do √∫ltimo RDO
                if servico_id in servicos_finais:
                    subatividade_mestre_id = sub.id
                    try:
                        subatividade_mestre = db.session.query(SubatividadeMestre).filter_by(
                            nome=sub.nome_subatividade,
                            servico_id=servico_id,
                            admin_id=admin_id
                        ).first()
                        
                        if subatividade_mestre:
                            subatividade_mestre_id = subatividade_mestre.id
                    except Exception as e:
                        print(f"‚ö†Ô∏è Erro ao buscar subatividade mestre: {e}")
                    
                    servicos_finais[servico_id]['subatividades'].append({
                        'id': subatividade_mestre_id,
                        'nome': sub.nome_subatividade,
                        'percentual': float(sub.percentual_conclusao or 0),
                        'observacoes': sub.observacoes_tecnicas or '',
                        'origem': 'ultimo_rdo'
                    })
        
        # ETAPA 4: Adicionar novos servi√ßos da obra que N√ÉO estavam no √∫ltimo RDO
        novos_servicos_adicionados = 0
        
        for servico_obra, servico in servicos_obra_atuais:
            servico_id = servico.id
            
            # Se o servi√ßo N√ÉO estava no √∫ltimo RDO, adicionar com percentual 0
            if servico_id not in servicos_do_ultimo_rdo:
                print(f"üÜï NOVO SERVI√áO DETECTADO: {servico.nome} (ID: {servico_id})")
                
                # Buscar subatividades do servi√ßo
                subatividades_mestre = SubatividadeMestre.query.filter_by(
                    servico_id=servico_id,
                    admin_id=admin_id,
                    ativo=True
                ).order_by(SubatividadeMestre.ordem_padrao).all()
                
                subatividades_novas = []
                for sub_mestre in subatividades_mestre:
                    subatividades_novas.append({
                        'id': sub_mestre.id,
                        'nome': sub_mestre.nome,
                        'percentual': 0.0,  # SEMPRE 0% para novos servi√ßos
                        'observacoes': '',
                        'origem': 'novo_servico'
                    })
                
                # Se n√£o tem subatividades mestre, criar uma padr√£o
                if not subatividades_novas:
                    subatividades_novas.append({
                        'id': f'default_{servico_id}',
                        'nome': servico.nome,
                        'percentual': 0.0,
                        'observacoes': f'Quantidade planejada: {servico_obra.quantidade_planejada} {servico.unidade_simbolo or servico.unidade_medida}',
                        'origem': 'novo_servico_default'
                    })
                
                servicos_finais[servico_id] = {
                    'id': servico.id,
                    'nome': servico.nome,
                    'categoria': getattr(servico, 'categoria', 'Geral'),
                    'descricao': servico.descricao or '',
                    'subatividades': subatividades_novas,
                    'origem': 'novo_servico'
                }
                
                novos_servicos_adicionados += 1
        
        # ETAPA 5: Converter para lista e ordenar
        servicos_data = []
        for servico_id, servico_data in servicos_finais.items():
            servico_data['subatividades'].sort(key=lambda x: x['nome'])
            servicos_data.append(servico_data)
        
        servicos_data.sort(key=lambda x: (x['categoria'], x['nome']))
        
        # ETAPA 6: Buscar funcion√°rios do √∫ltimo RDO
        funcionarios_data = []
        if ultimo_rdo:
            funcionarios_rdo = RDOMaoObra.query.filter_by(
                rdo_id=ultimo_rdo.id
            ).all()
            
            for func_rdo in funcionarios_rdo:
                funcionario = Funcionario.query.get(func_rdo.funcionario_id)
                if funcionario:
                    funcionarios_data.append({
                        'id': funcionario.id,
                        'nome': funcionario.nome,
                        'funcao': funcionario.funcao_ref.nome if funcionario.funcao_ref else 'N√£o definida',
                        'presente': True
                    })
        
        # LOGS DE DEBUG
        print(f"‚úÖ RESULTADO FINAL:")
        print(f"   - Servi√ßos do √∫ltimo RDO: {len(servicos_do_ultimo_rdo)}")
        print(f"   - Novos servi√ßos adicionados: {novos_servicos_adicionados}")
        print(f"   - Total de servi√ßos: {len(servicos_data)}")
        
        # ETAPA 7: Retornar dados combinados
        response_data = {
            'success': True,
            'tem_rdo_anterior': ultimo_rdo is not None,
            'novos_servicos_detectados': novos_servicos_adicionados,
            'total_servicos': len(servicos_data)
        }
        
        if ultimo_rdo:
            response_data['ultima_rdo'] = {
                'numero_rdo': ultimo_rdo.numero_rdo or f'RDO-{ultimo_rdo.id}',
                'data_relatorio': ultimo_rdo.data_relatorio.strftime('%Y-%m-%d'),
                'servicos': servicos_data,
                'funcionarios': funcionarios_data,
                'observacoes_gerais': getattr(ultimo_rdo, 'observacoes_gerais', '') or ''
            }
        else:
            response_data['primeira_rdo'] = {
                'servicos': servicos_data,
                'funcionarios': [],
                'observacoes_gerais': ''
            }
        
        return jsonify(response_data)
        
    except Exception as e:
        print(f"‚ùå ERRO API ultima-dados CORRIGIDA: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
```

### **PASSO 2: Atualizar JavaScript (Opcional)**

Adicionar ao template do RDO para mostrar feedback sobre novos servi√ßos:

```javascript
// Fun√ß√£o para mostrar alerta sobre novos servi√ßos
function mostrarAlertaNovoServico(quantidade) {
    if (quantidade > 0) {
        const alertaHtml = `
            <div class="alert alert-info alert-dismissible fade show" role="alert">
                <i class="fas fa-info-circle"></i>
                <strong>Novos servi√ßos detectados!</strong>
                ${quantidade} novo(s) servi√ßo(s) foram adicionados √† obra e aparecer√£o com 0% de progresso.
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        `;
        
        const container = document.querySelector('.container-fluid') || document.body;
        const alertaDiv = document.createElement('div');
        alertaDiv.innerHTML = alertaHtml;
        container.insertBefore(alertaDiv, container.firstChild);
    }
}

// Atualizar fun√ß√£o existente de carregamento
async function carregarDadosUltimoRDO(obraId) {
    try {
        const response = await fetch(`/api/rdo/ultima-dados/${obraId}`);
        const data = await response.json();
        
        if (data.success) {
            // Mostrar alerta se h√° novos servi√ßos
            if (data.novos_servicos_detectados > 0) {
                mostrarAlertaNovoServico(data.novos_servicos_detectados);
            }
            
            // Continuar com l√≥gica existente...
        }
    } catch (error) {
        console.error('Erro ao carregar dados:', error);
    }
}
```

## üß™ TESTE DA CORRE√á√ÉO

### **Cen√°rio de Teste:**
1. **Criar obra** com servi√ßos A, B, C
2. **Criar RDO-1** ‚Üí Verificar se A, B, C aparecem
3. **Editar obra** e adicionar servi√ßo D
4. **Criar RDO-2** ‚Üí **Verificar se A, B, C, D aparecem**
5. **Servi√ßos A, B, C** devem manter progresso do RDO-1
6. **Servi√ßo D** deve aparecer com 0% de progresso

### **Logs Esperados:**
```
üîç API ultima-dados CORRIGIDA: obra 19, admin_id 2
üìã SERVI√áOS ATUAIS DA OBRA: 4 encontrados
üìÑ √öLTIMO RDO: RDO-2-2025-026 - 2025-09-18
üÜï NOVO SERVI√áO DETECTADO: PERGOLADO MET√ÅLICO (ID: 37)
‚úÖ RESULTADO FINAL:
   - Servi√ßos do √∫ltimo RDO: 3
   - Novos servi√ßos adicionados: 1
   - Total de servi√ßos: 4
```

## üéØ RESULTADO ESPERADO

Ap√≥s a corre√ß√£o:
- ‚úÖ **Servi√ßos do √∫ltimo RDO mant√™m progresso**
- ‚úÖ **Novos servi√ßos aparecem com 0% de progresso**
- ‚úÖ **Todos os servi√ßos atuais da obra s√£o exibidos**
- ‚úÖ **Alerta visual sobre novos servi√ßos detectados**
- ‚úÖ **Logs detalhados para debug**

## üöÄ BENEF√çCIOS

1. **Corre√ß√£o Completa**: Resolve o problema raiz
2. **Preserva Dados**: Mant√©m progresso dos servi√ßos existentes
3. **Flexibilidade**: Permite adicionar servi√ßos a qualquer momento
4. **Feedback Visual**: Usu√°rio sabe quando novos servi√ßos foram detectados
5. **Debug Robusto**: Logs detalhados para troubleshooting

---

**Prioridade:** üî¥ CR√çTICA  
**Tempo Estimado:** 30-45 minutos  
**Impacto:** Resolve completamente o problema de servi√ßos n√£o aparecerem no RDO
