// Fun√ß√£o para atualizar interface de sele√ß√£o
function atualizarInterfaceSelecao() {
    const contador = servicosSelecionados.length;
    const contadorSelecionados = document.getElementById('contadorSelecionados');
    const contadorBotao = document.getElementById('contadorBotao');
    const btnSalvar = document.getElementById('btnSalvarServicos');
    const areaSelecionados = document.getElementById('servicosSelecionados');
    const listaSelecionados = document.getElementById('listaSelecionados');
    
    // Atualizar contadores
    contadorSelecionados.textContent = contador;
    contadorBotao.textContent = contador;
    
    // Habilitar/desabilitar bot√£o salvar
    btnSalvar.disabled = contador === 0;
    
    if (contador > 0) {
        // Mostrar √°rea de selecionados
        areaSelecionados.classList.remove('d-none');
        
        // Atualizar lista de selecionados
        listaSelecionados.innerHTML = servicosSelecionados.map(servico => 
            `<span class="badge bg-primary me-2 mb-2">${servico.nome}</span>`
        ).join('');
    } else {
        // Ocultar √°rea de selecionados
        areaSelecionados.classList.add('d-none');
    }
}

// Fun√ß√£o para selecionar todos os servi√ßos
function selecionarTodosServicos() {
    const checkboxes = document.querySelectorAll('.servico-checkbox');
    checkboxes.forEach(checkbox => {
        if (!checkbox.checked) {
            checkbox.checked = true;
            toggleServicoSelecao(checkbox);
        }
    });
}

// Fun√ß√£o para limpar sele√ß√£o
function limparSelecaoServicos() {
    const checkboxes = document.querySelectorAll('.servico-checkbox');
    checkboxes.forEach(checkbox => {
        if (checkbox.checked) {
            checkbox.checked = false;
            toggleServicoSelecao(checkbox);
        }
    });
}

// Fun√ß√£o para salvar servi√ßos selecionados
function salvarServicosSelecionados() {
    if (servicosSelecionados.length === 0) {
        mostrarMensagem('Nenhum servi√ßo selecionado!', 'error');
        return;
    }
    
    const obraId = 16;
    const btnSalvar = document.getElementById('btnSalvarServicos');
    
    // Desabilitar bot√£o durante o salvamento
    btnSalvar.disabled = true;
    btnSalvar.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Salvando...';
    
    console.log('üöÄ Salvando servi√ßos selecionados:', servicosSelecionados.length);
    
    // Salvar todos os servi√ßos em paralelo
    const promises = servicosSelecionados.map(servico => 
        fetch('/api/obras/servicos', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                obra_id: obraId,
                servico_id: servico.id
            })
        }).then(response => response.json())
    );
    
    Promise.all(promises)
        .then(results => {
            const sucessos = results.filter(r => r.success).length;
            const erros = results.filter(r => !r.success).length;
            
            if (sucessos > 0) {
                mostrarMensagem(`${sucessos} servi√ßo(s) adicionado(s) com sucesso!`, 'success');
                
                // Recarregar p√°gina ap√≥s sucesso
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            }
            
            if (erros > 0) {
                mostrarMensagem(`${erros} servi√ßo(s) falharam ao salvar`, 'error');
            }
            
            // Limpar sele√ß√£o
            servicosSelecionados = [];
            atualizarInterfaceSelecao();
        })
        .catch(error => {
            console.error('‚ùå Erro ao salvar servi√ßos:', error);
            mostrarMensagem('Erro ao salvar servi√ßos', 'error');
        })
        .finally(() => {
            // Reabilitar bot√£o
            btnSalvar.disabled = false;
            btnSalvar.innerHTML = '<i class="fas fa-save me-2"></i>Salvar Servi√ßos (<span id="contadorBotao">0</span>)';
        });
}

// Adicionar servi√ßo √† obra (fun√ß√£o antiga mantida para compatibilidade)
function adicionarServicoObra(servicoId, servicoNome) {
    const obraId = 16;
    
    fetch('/api/obras/servicos', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            obra_id: obraId,
            servico_id: servicoId
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Remover da lista de dispon√≠veis
            const servicoDisponivel = document.getElementById(`servico-disponivel-${servicoId}`);
            if (servicoDisponivel) {
                servicoDisponivel.remove();
            }
            
            // Adicionar √† lista de servi√ßos da obra
            adicionarServicoNaLista(servicoId, servicoNome, data.servico);
            
            // Remover mensagem de "nenhum servi√ßo" se existir
            const noServicosObra = document.getElementById('noServicosObra');
            if (noServicosObra) {
                noServicosObra.remove();
            }
            
            // Mostrar mensagem de sucesso
            mostrarMensagem('Servi√ßo adicionado com sucesso!', 'success');
            
            // Recarregar a p√°gina ap√≥s 1 segundo para atualizar a visualiza√ß√£o
            setTimeout(() => {
                window.location.reload();
            }, 1000);
            
        } else {
            mostrarMensagem(data.message || 'Erro ao adicionar servi√ßo', 'error');
        }
    })
    .catch(error => {
        console.error('Erro:', error);
        mostrarMensagem('Erro ao adicionar servi√ßo', 'error');
    });
}