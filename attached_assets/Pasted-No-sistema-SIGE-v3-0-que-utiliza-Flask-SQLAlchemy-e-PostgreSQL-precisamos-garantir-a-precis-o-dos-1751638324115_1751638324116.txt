No sistema SIGE v3.0, que utiliza Flask, SQLAlchemy e PostgreSQL, precisamos garantir a precisão dos cálculos dos 10 KPIs exibidos na página de perfil do funcionário (`/funcionarios/{id}/perfil`). O cálculo deve ser feito utilizando a função `calcular_kpis_funcionario_v3` no arquivo `kpis_engine_v3.py`, considerando os dados das tabelas `RegistroPonto` e `RegistroAlimentacao`.

Por favor, revise e ajuste a lógica de cálculo para cada um dos seguintes KPIs, garantindo que as regras de negócio especificadas no relatório técnico sejam estritamente seguidas:

**1. Horas Trabalhadas:**
   - **Cálculo:** `SUM(horas_trabalhadas)` da tabela `RegistroPonto` onde `hora_entrada` não é nula.

**2. Horas Extras:**
   - **Cálculo:** `SUM(horas_extras)` da tabela `RegistroPonto` onde `horas_extras` é maior que 0.

**3. Faltas:**
   - **Cálculo:** `dias_úteis - dias_com_presença`.
   - **Regra:** Dias úteis sem registro de entrada na tabela `RegistroPonto`. Sábados, domingos e feriados (incluindo feriados de 2025) não contam.

**4. Atrasos (Horas):**
   - **Cálculo:** `SUM(total_atraso_horas)` da tabela `RegistroPonto` onde `total_atraso_horas` é maior que 0.
   - **Regra:** Deve incluir atrasos de entrada (horário real > horário esperado) e saída antecipada (horário real < horário esperado), convertidos para horas.

**5. Produtividade (%):**
   - **Cálculo:** `(horas_trabalhadas / horas_esperadas) × 100`.
   - **Horas esperadas:** `dias_úteis × 8`.

**6. Absenteísmo (%):**
   - **Cálculo:** `(faltas / dias_úteis) × 100`.

**7. Média Diária:**
   - **Cálculo:** `horas_trabalhadas / dias_com_presença`.

**8. Horas Perdidas:**
   - **Cálculo:** `(faltas × 8) + total_atrasos_horas`.
   - **Regra:** Faltas em horas + atrasos.

**9. Custo Mão de Obra (R$):**
   - **Cálculo:** `(horas_trabalhadas + faltas_justificadas × 8) × salario_hora`.
   - **Salário hora:** `salario / 220` (onde `salario` vem da tabela `Funcionario`).
   - **Regra:** Inclui trabalho real e faltas justificadas (da tabela `Ocorrencia` com `status` 'Aprovado'). Não inclui faltas injustificadas.

**10. Custo Alimentação (R$):**
    - **Cálculo:** `SUM(valor)` da tabela `RegistroAlimentacao`.

Certifique-se de que a função `calcular_dias_uteis(data_inicio, data_fim)` em `kpis_engine_v3.py` esteja correta, considerando segunda a sexta, exceto feriados nacionais de 2025. Além disso, verifique se a função `atualizar_calculos_ponto(registro_ponto_id)` está sendo acionada corretamente ao salvar/editar registros de ponto para calcular `horas_trabalhadas`, `horas_extras`, `minutos_atraso_entrada`, `minutos_atraso_saida`, `total_atraso_minutos` e `total_atraso_horas` com base no `HorarioTrabalho` do funcionário.

O objetivo é que os KPIs sejam exibidos corretamente no layout 4-4-2 na página de perfil do funcionário, refletindo os dados de ponto e alimentação de forma precisa e em tempo real. Mantenha a consistência com o tema escuro do Bootstrap e a terminologia da construção civil.

