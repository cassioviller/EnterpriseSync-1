# PROMPT PARA CORRE√á√ÉO - Horas Extras em Dias Normais
## Sistema SIGE v6.2 - Engine de KPIs v4.0

---

## üéØ OBJETIVO

Corrigir o c√°lculo de horas extras para funcion√°rios que trabalham al√©m do hor√°rio padr√£o em dias normais, especificamente para o funcion√°rio Caio Fabio Silva de Azevedo (F0100) e aplicar a corre√ß√£o para todo o sistema.

---

## üö® PROBLEMA IDENTIFICADO

### **Registro com Erro:**
- **Data**: 29/06/2025
- **Funcion√°rio**: Caio Fabio Silva de Azevedo (F0100)
- **Hor√°rio Padr√£o**: 7h12 √†s 17h (8,8h di√°rias)
- **Hor√°rio Trabalhado**: 7h12 √†s 17h30 (9,3h)
- **Horas Extras Calculadas**: 0h ‚ùå
- **Horas Extras Corretas**: 0,5h ‚úÖ

### **Causa do Problema:**
O sistema n√£o est√° calculando horas extras para registros do tipo `trabalho_normal` quando o funcion√°rio trabalha al√©m do hor√°rio padr√£o.

---

## üõ†Ô∏è CORRE√á√ÉO NECESS√ÅRIA

### **1. Atualizar Engine de KPIs v4.0**

Localizar a fun√ß√£o de c√°lculo de horas extras no arquivo `kpis_engine.py` ou similar e implementar a seguinte l√≥gica:

```python
def calcular_horas_extras_funcionario(funcionario_id, data_inicio, data_fim):
    """
    Calcula horas extras considerando o hor√°rio espec√≠fico do funcion√°rio
    """
    funcionario = Funcionario.query.get(funcionario_id)
    horario_trabalho = funcionario.horario_trabalho
    horas_diarias_padrao = horario_trabalho.horas_diarias
    
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario_id,
        RegistroPonto.data.between(data_inicio, data_fim)
    ).all()
    
    total_horas_extras = 0
    
    for registro in registros:
        horas_trabalhadas = registro.horas_trabalhadas_calculadas or 0
        
        if registro.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
            # Para fins de semana e feriados, todas as horas s√£o extras
            horas_extras = horas_trabalhadas
        else:
            # Para dias normais, calcular extras baseado no hor√°rio padr√£o
            horas_extras = max(0, horas_trabalhadas - horas_diarias_padrao)
        
        total_horas_extras += horas_extras
    
    return total_horas_extras
```

### **2. Corrigir Fun√ß√£o de C√°lculo Individual**

Adicionar ou corrigir a fun√ß√£o que calcula horas extras para um registro espec√≠fico:

```python
def calcular_horas_extras_registro(registro_ponto):
    """
    Calcula horas extras para um registro espec√≠fico
    """
    funcionario = registro_ponto.funcionario
    horario_trabalho = funcionario.horario_trabalho
    horas_diarias_padrao = horario_trabalho.horas_diarias
    horas_trabalhadas = registro_ponto.horas_trabalhadas_calculadas or 0
    
    if registro_ponto.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
        # Fins de semana e feriados: todas as horas s√£o extras
        return horas_trabalhadas
    else:
        # Dias normais: extras = trabalhadas - padr√£o
        return max(0, horas_trabalhadas - horas_diarias_padrao)
```

### **3. Atualizar Trigger de C√°lculo**

Modificar a fun√ß√£o que √© chamada ao salvar/atualizar registros de ponto:

```python
def atualizar_calculos_registro_ponto(registro_id):
    """
    Recalcula horas trabalhadas e horas extras para um registro
    """
    registro = RegistroPonto.query.get(registro_id)
    
    if registro:
        # Recalcular horas trabalhadas (se necess√°rio)
        if registro.hora_entrada and registro.hora_saida:
            horas_trabalhadas = calcular_horas_trabalhadas(
                registro.hora_entrada,
                registro.hora_saida,
                registro.hora_almoco_saida,
                registro.hora_almoco_retorno
            )
            registro.horas_trabalhadas_calculadas = horas_trabalhadas
        
        # Recalcular horas extras usando a nova l√≥gica
        horas_extras = calcular_horas_extras_registro(registro)
        registro.horas_extras_calculadas = horas_extras
        
        db.session.commit()
```

---

## üîß SCRIPT DE CORRE√á√ÉO IMEDIATA

### **Corrigir Registro Espec√≠fico do Caio (29/06/2025):**

```python
def corrigir_registro_caio_29_06():
    """
    Corre√ß√£o espec√≠fica para o registro do Caio em 29/06/2025
    """
    from datetime import date
    
    # Buscar o registro
    registro = RegistroPonto.query.join(Funcionario).filter(
        Funcionario.codigo == 'F0100',
        RegistroPonto.data == date(2025, 6, 29)
    ).first()
    
    if registro:
        print(f"Registro encontrado: {registro.data}")
        print(f"Horas trabalhadas: {registro.horas_trabalhadas_calculadas}h")
        print(f"Horas extras antes: {registro.horas_extras_calculadas}h")
        
        # Aplicar corre√ß√£o
        horario_padrao = registro.funcionario.horario_trabalho.horas_diarias
        horas_extras_corretas = max(0, registro.horas_trabalhadas_calculadas - horario_padrao)
        
        registro.horas_extras_calculadas = horas_extras_corretas
        db.session.commit()
        
        print(f"Horas extras corrigidas: {registro.horas_extras_calculadas}h")
        print("Corre√ß√£o aplicada com sucesso!")
    else:
        print("Registro n√£o encontrado")

# Executar corre√ß√£o
corrigir_registro_caio_29_06()
```

### **Recalcular Todos os Registros do Caio:**

```python
def recalcular_todos_registros_caio():
    """
    Recalcula horas extras para todos os registros do Caio
    """
    funcionario = Funcionario.query.filter_by(codigo='F0100').first()
    
    if funcionario:
        registros = RegistroPonto.query.filter_by(funcionario_id=funcionario.id).all()
        horario_padrao = funcionario.horario_trabalho.horas_diarias
        
        print(f"Recalculando {len(registros)} registros do funcion√°rio {funcionario.nome}")
        print(f"Hor√°rio padr√£o: {horario_padrao}h di√°rias")
        
        for registro in registros:
            horas_trabalhadas = registro.horas_trabalhadas_calculadas or 0
            
            if registro.tipo_registro in ['sabado_horas_extras', 'domingo_horas_extras', 'feriado_trabalhado']:
                horas_extras = horas_trabalhadas
            else:
                horas_extras = max(0, horas_trabalhadas - horario_padrao)
            
            if registro.horas_extras_calculadas != horas_extras:
                print(f"Corrigindo {registro.data}: {registro.horas_extras_calculadas}h ‚Üí {horas_extras}h")
                registro.horas_extras_calculadas = horas_extras
        
        db.session.commit()
        print("Rec√°lculo conclu√≠do!")
    else:
        print("Funcion√°rio F0100 n√£o encontrado")

# Executar rec√°lculo
recalcular_todos_registros_caio()
```

---

## üß™ VALIDA√á√ÉO DA CORRE√á√ÉO

### **Teste 1: Registro Espec√≠fico (29/06/2025)**
```python
def validar_correcao_29_06():
    registro = RegistroPonto.query.join(Funcionario).filter(
        Funcionario.codigo == 'F0100',
        RegistroPonto.data == date(2025, 6, 29)
    ).first()
    
    if registro:
        print(f"Data: {registro.data}")
        print(f"Horas trabalhadas: {registro.horas_trabalhadas_calculadas}h")
        print(f"Horas extras: {registro.horas_extras_calculadas}h")
        print(f"Esperado: 0.5h")
        print(f"Correto: {registro.horas_extras_calculadas == 0.5}")
    
validar_correcao_29_06()
```

### **Teste 2: KPIs Atualizados**
```python
def validar_kpis_caio():
    from datetime import date
    
    # Calcular KPIs para junho/2025
    kpis = calcular_kpis_funcionario_v4('F0100', date(2025, 6, 1), date(2025, 6, 30))
    
    print("KPIs ap√≥s corre√ß√£o:")
    print(f"Horas trabalhadas: {kpis['horas_trabalhadas']}h")
    print(f"Horas extras: {kpis['horas_extras']}h")
    print(f"Valor horas extras: R$ {kpis['valor_horas_extras']:.2f}")
    
validar_kpis_caio()
```

---

## üìã CHECKLIST DE IMPLEMENTA√á√ÉO

### **1. Corre√ß√£o do Engine**
- [ ] Localizar fun√ß√£o de c√°lculo de horas extras
- [ ] Implementar l√≥gica que considera hor√°rio espec√≠fico do funcion√°rio
- [ ] Testar com registro do Caio (29/06/2025)

### **2. Corre√ß√£o de Dados**
- [ ] Executar script de corre√ß√£o para registro espec√≠fico
- [ ] Recalcular todos os registros do Caio
- [ ] Verificar se outros funcion√°rios t√™m o mesmo problema

### **3. Valida√ß√£o**
- [ ] Confirmar que registro 29/06 mostra 0,5h extras
- [ ] Verificar se KPIs s√£o atualizados corretamente
- [ ] Testar interface para ver se mostra valores corretos

### **4. Testes Adicionais**
- [ ] Testar com funcion√°rio de hor√°rio diferente
- [ ] Validar c√°lculo para s√°bados/domingos (deve continuar igual)
- [ ] Confirmar que valores financeiros s√£o recalculados

---

## üéØ RESULTADO ESPERADO

Ap√≥s a implementa√ß√£o:

### **Registro 29/06/2025 - Caio:**
- **Horas trabalhadas**: 9,3h
- **Horas extras**: 0,5h ‚úÖ
- **Valor extra**: 0,5h √ó R$ 15,00 √ó 1,5 = R$ 11,25

### **KPIs Atualizados:**
- **Total horas extras**: 25,4h + 0,5h = 25,9h
- **Valor total extras**: R$ 682,50 + R$ 11,25 = R$ 693,75

### **Sistema Corrigido:**
- ‚úÖ Calcula extras para dias normais quando necess√°rio
- ‚úÖ Mant√©m c√°lculo correto para s√°bados/domingos
- ‚úÖ Usa hor√°rio espec√≠fico de cada funcion√°rio
- ‚úÖ KPIs refletem valores corretos

---

**Este prompt deve ser implementado para corrigir o c√°lculo de horas extras em dias normais no sistema SIGE v6.2.**