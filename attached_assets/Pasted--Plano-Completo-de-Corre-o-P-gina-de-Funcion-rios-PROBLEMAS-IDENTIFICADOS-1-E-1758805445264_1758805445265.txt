# Plano Completo de Corre√ß√£o - P√°gina de Funcion√°rios

## üéØ PROBLEMAS IDENTIFICADOS

### 1. **Erro 404 - Rota de Lan√ßamento M√∫ltiplo Inexistente**
- **Erro:** `https://www.sige.cassioviller.tech/api/ponto/lancamento-multiplo`
- **Causa:** Template `funcionarios.html` faz chamada para rota que n√£o existe
- **Impacto:** Lan√ßamento m√∫ltiplo de ponto n√£o funciona

### 2. **Obras N√£o Aparecem no Controle de Ponto**
- **Problema:** Campo obra n√£o est√° sendo populado
- **Causa:** Falta de integra√ß√£o entre funcion√°rios e obras

### 3. **Fotos dos Funcion√°rios N√£o Aparecem**
- **Problema:** Cards mostram "Sem fun√ß√£o" em vez de foto
- **Causa:** Problemas no carregamento/exibi√ß√£o de imagens

### 4. **Desativa√ß√£o de Funcion√°rios**
- **Problema:** Erro ao desativar funcion√°rios
- **Necessidade:** Separar ativos/inativos visualmente

### 5. **C√≥digo Antigo e Sem Uso**
- **Problema:** M√∫ltiplas rotas duplicadas e c√≥digo obsoleto
- **Necessidade:** Limpeza e organiza√ß√£o

## üõ†Ô∏è PLANO DE CORRE√á√ÉO

### **FASE 1: Limpeza de C√≥digo Antigo**

#### 1.1. Identificar e Remover Rotas Duplicadas
```python
# ROTAS PARA AN√ÅLISE E POSS√çVEL REMO√á√ÉO:
# - /api/funcionario/funcionarios (linha 7505) - ALIAS desnecess√°rio
# - M√∫ltiplas APIs de funcion√°rios com funcionalidades sobrepostas
```

#### 1.2. Consolidar APIs de Funcion√°rios
- Manter apenas `/api/funcionarios` (linha 4784) como API principal
- Remover aliases e rotas obsoletas
- Documentar par√¢metros necess√°rios

### **FASE 2: Corre√ß√£o do Controle de Ponto**

#### 2.1. Criar Rota de Lan√ßamento M√∫ltiplo
```python
@main_bp.route('/api/ponto/lancamento-multiplo', methods=['POST'])
@login_required
def api_ponto_lancamento_multiplo():
    """API para lan√ßamento m√∫ltiplo de ponto"""
    try:
        data = request.get_json()
        
        # Validar dados obrigat√≥rios
        funcionarios_ids = data.get('funcionarios_ids', [])
        obra_id = data.get('obra_id')
        data_lancamento = data.get('data')
        
        if not funcionarios_ids:
            return jsonify({'success': False, 'message': 'Nenhum funcion√°rio selecionado'}), 400
        
        if not obra_id:
            return jsonify({'success': False, 'message': 'Obra n√£o selecionada'}), 400
            
        # Processar lan√ßamentos
        registros_criados = []
        erros = []
        
        for funcionario_id in funcionarios_ids:
            try:
                # Verificar se funcion√°rio existe e est√° ativo
                funcionario = Funcionario.query.filter_by(
                    id=funcionario_id, 
                    ativo=True,
                    admin_id=get_tenant_admin_id()
                ).first()
                
                if not funcionario:
                    erros.append(f"Funcion√°rio ID {funcionario_id} n√£o encontrado")
                    continue
                
                # Verificar se j√° existe registro para esta data
                registro_existente = RegistroPonto.query.filter_by(
                    funcionario_id=funcionario_id,
                    data=datetime.strptime(data_lancamento, '%Y-%m-%d').date()
                ).first()
                
                if registro_existente:
                    erros.append(f"J√° existe registro para {funcionario.nome} na data {data_lancamento}")
                    continue
                
                # Criar registro de ponto
                registro = RegistroPonto(
                    funcionario_id=funcionario_id,
                    obra_id=obra_id,
                    data=datetime.strptime(data_lancamento, '%Y-%m-%d').date(),
                    hora_entrada=datetime.strptime(data.get('hora_entrada'), '%H:%M').time() if data.get('hora_entrada') else None,
                    hora_saida=datetime.strptime(data.get('hora_saida'), '%H:%M').time() if data.get('hora_saida') else None,
                    hora_almoco_saida=datetime.strptime(data.get('hora_almoco_saida'), '%H:%M').time() if data.get('hora_almoco_saida') else None,
                    hora_almoco_retorno=datetime.strptime(data.get('hora_almoco_retorno'), '%H:%M').time() if data.get('hora_almoco_retorno') else None,
                    observacoes=data.get('observacoes', ''),
                    tipo_registro=data.get('tipo_lancamento', 'trabalho_normal'),
                    admin_id=get_tenant_admin_id()
                )
                
                # Calcular horas trabalhadas
                if registro.hora_entrada and registro.hora_saida:
                    from utils import calcular_horas_trabalhadas
                    horas_calc = calcular_horas_trabalhadas(
                        registro.hora_entrada,
                        registro.hora_saida,
                        registro.hora_almoco_saida,
                        registro.hora_almoco_retorno,
                        registro.data
                    )
                    registro.horas_trabalhadas = horas_calc.get('total', 0)
                    registro.horas_extras = horas_calc.get('extras', 0)
                
                db.session.add(registro)
                registros_criados.append({
                    'funcionario_id': funcionario_id,
                    'funcionario_nome': funcionario.nome
                })
                
            except Exception as e:
                erros.append(f"Erro ao processar {funcionario.nome if 'funcionario' in locals() else f'ID {funcionario_id}'}: {str(e)}")
        
        # Commit se houver registros criados
        if registros_criados:
            db.session.commit()
        
        return jsonify({
            'success': True,
            'message': f'{len(registros_criados)} registros criados com sucesso',
            'registros_criados': registros_criados,
            'erros': erros
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Erro interno: {str(e)}'}), 500
```

#### 2.2. Adicionar Campo Obra ao Modelo RegistroPonto
```python
# No models.py, adicionar √† classe RegistroPonto:
obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=True)
obra = db.relationship('Obra', backref='registros_ponto')
```

#### 2.3. Criar API para Listar Obras
```python
@main_bp.route('/api/obras/ativas')
@login_required
def api_obras_ativas():
    """API para listar obras ativas para sele√ß√£o"""
    try:
        admin_id = get_tenant_admin_id()
        
        obras = Obra.query.filter_by(
            admin_id=admin_id,
            ativo=True
        ).order_by(Obra.nome).all()
        
        return jsonify({
            'success': True,
            'obras': [{
                'id': obra.id,
                'nome': obra.nome,
                'codigo': obra.codigo,
                'endereco': obra.endereco
            } for obra in obras]
        })
        
    except Exception as e:
        return jsonify({'success': False, 'message': str(e)}), 500
```

### **FASE 3: Corre√ß√£o da Exibi√ß√£o de Fotos**

#### 3.1. Corrigir Carregamento de Fotos no Template
```html
<!-- No template funcionarios.html, corrigir a exibi√ß√£o de fotos -->
<div class="funcionario-foto">
    {% if funcionario.foto_base64 %}
        <img src="data:image/jpeg;base64,{{ funcionario.foto_base64 }}" 
             alt="{{ funcionario.nome }}" 
             class="foto-funcionario">
    {% elif funcionario.foto %}
        <img src="{{ url_for('static', filename='uploads/' + funcionario.foto) }}" 
             alt="{{ funcionario.nome }}" 
             class="foto-funcionario"
             onerror="this.src='{{ url_for('static', filename='img/avatar-default.png') }}'">
    {% else %}
        <div class="foto-placeholder">
            <i class="fas fa-user"></i>
        </div>
    {% endif %}
</div>
```

#### 3.2. Adicionar CSS para Fotos
```css
.foto-funcionario {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #dee2e6;
}

.foto-placeholder {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    border: 2px solid #dee2e6;
    color: #6c757d;
}
```

### **FASE 4: Sistema de Ativa√ß√£o/Desativa√ß√£o**

#### 4.1. Corrigir Fun√ß√£o de Desativa√ß√£o
```python
@main_bp.route('/api/funcionario/<int:funcionario_id>/toggle-ativo', methods=['POST'])
@login_required
def toggle_funcionario_ativo(funcionario_id):
    """Toggle status ativo/inativo do funcion√°rio"""
    try:
        admin_id = get_tenant_admin_id()
        
        funcionario = Funcionario.query.filter_by(
            id=funcionario_id,
            admin_id=admin_id
        ).first()
        
        if not funcionario:
            return jsonify({'success': False, 'message': 'Funcion√°rio n√£o encontrado'}), 404
        
        # Toggle status
        funcionario.ativo = not funcionario.ativo
        
        # Registrar data de desativa√ß√£o se necess√°rio
        if not funcionario.ativo:
            funcionario.data_desativacao = datetime.now().date()
        else:
            funcionario.data_desativacao = None
        
        db.session.commit()
        
        status_texto = "ativado" if funcionario.ativo else "desativado"
        
        return jsonify({
            'success': True,
            'message': f'Funcion√°rio {status_texto} com sucesso',
            'ativo': funcionario.ativo
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': str(e)}), 500
```

#### 4.2. Atualizar Template para Separar Ativos/Inativos
```html
<!-- Funcion√°rios Ativos -->
<div class="funcionarios-ativos">
    <h5><i class="fas fa-users text-success"></i> Funcion√°rios Ativos</h5>
    <div class="row" id="funcionarios-ativos-grid">
        {% for funcionario in funcionarios if funcionario.ativo %}
            <!-- Card do funcion√°rio ativo -->
        {% endfor %}
    </div>
</div>

<!-- Separador -->
{% if funcionarios_inativos %}
<hr class="my-4" style="border-top: 2px dashed #dee2e6;">

<!-- Funcion√°rios Inativos -->
<div class="funcionarios-inativos">
    <h5><i class="fas fa-user-slash text-muted"></i> Funcion√°rios Inativos</h5>
    <div class="row" id="funcionarios-inativos-grid">
        {% for funcionario in funcionarios if not funcionario.ativo %}
            <!-- Card do funcion√°rio inativo com estilo diferenciado -->
            <div class="col-md-4 mb-3">
                <div class="card funcionario-card inativo">
                    <!-- Conte√∫do do card com opacidade reduzida -->
                </div>
            </div>
        {% endfor %}
    </div>
</div>
{% endif %}
```

#### 4.3. CSS para Funcion√°rios Inativos
```css
.funcionario-card.inativo {
    opacity: 0.6;
    background-color: #f8f9fa;
    border: 1px dashed #dee2e6;
}

.funcionario-card.inativo .card-body {
    background: linear-gradient(45deg, transparent 40%, rgba(255,0,0,0.1) 50%, transparent 60%);
}
```

### **FASE 5: Melhorias na Interface**

#### 5.1. Adicionar Debug de Obras no JavaScript
```javascript
// Fun√ß√£o para carregar obras dispon√≠veis
async function carregarObras() {
    try {
        const response = await fetch('/api/obras/ativas');
        const data = await response.json();
        
        if (data.success) {
            const selectObra = document.getElementById('obra_id');
            selectObra.innerHTML = '<option value="">Selecione uma obra...</option>';
            
            data.obras.forEach(obra => {
                const option = document.createElement('option');
                option.value = obra.id;
                option.textContent = `${obra.nome} ${obra.codigo ? '(' + obra.codigo + ')' : ''}`;
                selectObra.appendChild(option);
            });
            
            console.log(`‚úÖ ${data.obras.length} obras carregadas`);
        } else {
            console.error('‚ùå Erro ao carregar obras:', data.message);
            mostrarAlerta('Erro ao carregar obras: ' + data.message, 'danger');
        }
    } catch (error) {
        console.error('‚ùå Erro na requisi√ß√£o de obras:', error);
        mostrarAlerta('Erro de conex√£o ao carregar obras', 'danger');
    }
}
```

#### 5.2. Melhorar Feedback Visual
```javascript
// Fun√ß√£o para mostrar progresso do lan√ßamento m√∫ltiplo
function mostrarProgressoLancamento(total) {
    const progressHtml = `
        <div class="progress mb-3">
            <div class="progress-bar progress-bar-striped progress-bar-animated" 
                 role="progressbar" style="width: 0%">
                Processando 0/${total}
            </div>
        </div>
    `;
    
    document.getElementById('progress-container').innerHTML = progressHtml;
}
```

## üß™ PLANO DE TESTES

### 1. **Teste de Lan√ßamento M√∫ltiplo**
- [ ] Selecionar m√∫ltiplos funcion√°rios
- [ ] Escolher obra
- [ ] Definir hor√°rios
- [ ] Verificar salvamento no banco
- [ ] Confirmar c√°lculo de horas

### 2. **Teste de Desativa√ß√£o**
- [ ] Desativar funcion√°rio
- [ ] Verificar posicionamento na lista
- [ ] Confirmar que dados hist√≥ricos permanecem
- [ ] Testar reativa√ß√£o

### 3. **Teste de Fotos**
- [ ] Upload de nova foto
- [ ] Exibi√ß√£o em diferentes tamanhos
- [ ] Fallback para foto padr√£o

### 4. **Teste de Performance**
- [ ] Carregamento com muitos funcion√°rios
- [ ] Filtros e busca
- [ ] Responsividade mobile

## üìã CHECKLIST DE IMPLEMENTA√á√ÉO

- [ ] **FASE 1**: Limpeza de c√≥digo antigo
  - [ ] Identificar rotas duplicadas
  - [ ] Remover c√≥digo obsoleto
  - [ ] Consolidar APIs

- [ ] **FASE 2**: Corre√ß√£o do controle de ponto
  - [ ] Criar rota `/api/ponto/lancamento-multiplo`
  - [ ] Adicionar campo obra ao modelo
  - [ ] Criar API de obras ativas
  - [ ] Testar lan√ßamento m√∫ltiplo

- [ ] **FASE 3**: Corre√ß√£o de fotos
  - [ ] Atualizar template de exibi√ß√£o
  - [ ] Adicionar CSS para fotos
  - [ ] Testar upload e exibi√ß√£o

- [ ] **FASE 4**: Sistema de ativa√ß√£o
  - [ ] Corrigir fun√ß√£o de toggle
  - [ ] Separar ativos/inativos visualmente
  - [ ] Preservar dados hist√≥ricos

- [ ] **FASE 5**: Melhorias de interface
  - [ ] Adicionar debug de obras
  - [ ] Melhorar feedback visual
  - [ ] Otimizar responsividade

## üöÄ RESULTADO ESPERADO

Ap√≥s a implementa√ß√£o:
- ‚úÖ Lan√ßamento m√∫ltiplo de ponto funcionando
- ‚úÖ Obras aparecendo corretamente
- ‚úÖ Fotos dos funcion√°rios exibidas
- ‚úÖ Desativa√ß√£o funcionando com separa√ß√£o visual
- ‚úÖ C√≥digo limpo e organizado
- ‚úÖ Interface responsiva e intuitiva

---

**Prioridade:** üî¥ CR√çTICA
**Tempo Estimado:** 4-6 horas
**Impacto:** Funcionalidade completa do m√≥dulo de funcion√°rios
