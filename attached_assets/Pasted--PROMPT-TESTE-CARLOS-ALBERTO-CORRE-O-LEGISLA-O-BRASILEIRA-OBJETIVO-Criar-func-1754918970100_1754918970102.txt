# üéØ PROMPT: TESTE CARLOS ALBERTO + CORRE√á√ÉO LEGISLA√á√ÉO BRASILEIRA

## üìã **OBJETIVO**
Criar funcion√°rio fict√≠cio com dados do Carlos Alberto, corrigir l√≥gica de c√°lculo de horas extras e implementar conformidade com a legisla√ß√£o trabalhista brasileira.

---

## üáßüá∑ **LEGISLA√á√ÉO BRASILEIRA - HORAS EXTRAS**

### **üìö Base Legal (CLT):**
- **Art. 59:** Adicional m√≠nimo de 50% sobre hora normal
- **Art. 7¬∫ CF:** Domingos e feriados com 100% adicional
- **Base de c√°lculo:** Sal√°rio √∑ (jornada di√°ria √ó dias √∫teis mensais)

### **üßÆ F√≥rmula Correta:**
```
Valor/Hora = Sal√°rio Mensal √∑ (Horas Di√°rias √ó Dias √öteis)
Hora Extra = Valor/Hora √ó (1 + Percentual Adicional)

Exemplos:
- Jornada 8h/dia, 22 dias √∫teis = 176h mensais
- Jornada 6h/dia, 22 dias √∫teis = 132h mensais
- N√ÉO √© 220h fixo!
```

---

## üîß **ETAPA 1: CRIAR FUNCION√ÅRIO CARLOS FICT√çCIO**

```python
# 1. Criar funcion√°rio com dados reais do Carlos Alberto
def criar_carlos_ficticio():
    """Cria funcion√°rio fict√≠cio com dados do Carlos Alberto de produ√ß√£o"""
    from app import app, db
    from models import Funcionario, HorarioTrabalho
    from datetime import datetime
    
    with app.app_context():
        print("üë§ CRIANDO CARLOS ALBERTO FICT√çCIO...")
        
        # Verificar se j√° existe
        carlos_existente = Funcionario.query.filter_by(
            nome="Carlos Alberto Rigolin Junior"
        ).first()
        
        if carlos_existente:
            print("‚ÑπÔ∏è  Carlos j√° existe, atualizando dados...")
            carlos = carlos_existente
        else:
            # Criar novo funcion√°rio
            carlos = Funcionario(
                nome="Carlos Alberto Rigolin Junior",
                cpf="334.645.878-43",
                data_nascimento=datetime(1986, 12, 10).date(),
                telefone="(12) 98840-2355",
                data_admissao=datetime(2021, 1, 12).date(),
                salario=2106.00,  # Sal√°rio real da produ√ß√£o
                departamento="Almoxarife",
                funcao="Almoxarife",
                ativo=True,
                endereco="Travessa Waldemar Teixeira, 80, Jardim Torr√£o de Ouro, SAO JOSE DOS CAMPOS, SP, CEP: 12200-000"
            )
            db.session.add(carlos)
        
        # Definir hor√°rio de trabalho (Segunda a Sexta)
        horario = HorarioTrabalho.query.filter_by(
            funcionario_id=carlos.id if carlos_existente else None
        ).first()
        
        if not horario:
            horario = HorarioTrabalho(
                funcionario_id=carlos.id if carlos_existente else None,
                entrada_padrao="07:12",
                saida_padrao="17:00",
                almoco_inicio="12:00",
                almoco_fim="13:00",
                dias_semana="1,2,3,4,5",  # Segunda a sexta
                horas_diarias=8.0,  # 8h por dia
                dias_uteis_mes=22,  # 22 dias √∫teis padr√£o
                ativo=True
            )
            
            if not carlos_existente:
                db.session.flush()  # Para obter o ID do Carlos
                horario.funcionario_id = carlos.id
            
            db.session.add(horario)
        
        db.session.commit()
        
        print(f"‚úÖ CARLOS CRIADO/ATUALIZADO:")
        print(f"   - ID: {carlos.id}")
        print(f"   - Nome: {carlos.nome}")
        print(f"   - Sal√°rio: R$ {carlos.salario:,.2f}")
        print(f"   - Hor√°rio: {horario.entrada_padrao} √†s {horario.saida_padrao}")
        print(f"   - Horas/dia: {horario.horas_diarias}h")
        print(f"   - Dias √∫teis: {horario.dias_uteis_mes}")
        
        return carlos, horario

# EXECUTAR
carlos, horario_carlos = criar_carlos_ficticio()
```

---

## üßÆ **ETAPA 2: IMPLEMENTAR C√ÅLCULO CORRETO**

```python
# 2. Fun√ß√£o de c√°lculo conforme legisla√ß√£o brasileira
def calcular_valor_hora_legislacao(funcionario, horario_trabalho):
    """Calcula valor/hora conforme legisla√ß√£o brasileira"""
    
    # Base de c√°lculo correta
    salario_mensal = funcionario.salario
    horas_diarias = horario_trabalho.horas_diarias
    dias_uteis_mes = horario_trabalho.dias_uteis_mes
    
    # C√°lculo das horas mensais
    horas_mensais = horas_diarias * dias_uteis_mes
    
    # Valor da hora normal
    valor_hora_normal = salario_mensal / horas_mensais
    
    print(f"üìä C√ÅLCULO VALOR/HORA - {funcionario.nome}:")
    print(f"   - Sal√°rio mensal: R$ {salario_mensal:,.2f}")
    print(f"   - Horas di√°rias: {horas_diarias}h")
    print(f"   - Dias √∫teis/m√™s: {dias_uteis_mes}")
    print(f"   - Horas mensais: {horas_mensais}h")
    print(f"   - Valor/hora normal: R$ {valor_hora_normal:.2f}")
    
    # Valores de horas extras conforme legisla√ß√£o
    valores_extras = {
        'normal': valor_hora_normal,
        'extra_50': valor_hora_normal * 1.5,  # 50% adicional
        'extra_100': valor_hora_normal * 2.0,  # 100% adicional (domingo/feriado)
        'noturno': valor_hora_normal * 1.2,   # 20% adicional noturno
    }
    
    print(f"   - Hora extra 50%: R$ {valores_extras['extra_50']:.2f}")
    print(f"   - Hora extra 100%: R$ {valores_extras['extra_100']:.2f}")
    print(f"   - Hora noturna: R$ {valores_extras['noturno']:.2f}")
    
    return valores_extras

# EXECUTAR C√ÅLCULO
valores_carlos = calcular_valor_hora_legislacao(carlos, horario_carlos)
```

---

## üß™ **ETAPA 3: SIMULAR CEN√ÅRIO REAL**

```python
# 3. Simular 7.8h extras como na imagem
def simular_cenario_carlos():
    """Simula cen√°rio real do Carlos com 7.8h extras"""
    
    horas_extras = 7.8
    
    print(f"üß™ SIMULA√á√ÉO - 7.8H EXTRAS:")
    print(f"   - Horas extras: {horas_extras}h")
    
    # Cen√°rio 1: Todas extras com 50%
    custo_50 = horas_extras * valores_carlos['extra_50']
    custo_total_50 = carlos.salario + custo_50
    
    print(f"\nüìä CEN√ÅRIO 1 - Todas 50% extras:")
    print(f"   - Custo extras: R$ {custo_50:.2f}")
    print(f"   - Custo total: R$ {custo_total_50:.2f}")
    print(f"   - Diferen√ßa produ√ß√£o: R$ {custo_total_50 - 2125.38:.2f}")
    
    # Cen√°rio 2: Mix de extras (50% e 100%)
    horas_50 = 5.8  # Horas normais extras
    horas_100 = 2.0  # S√°bado/domingo
    
    custo_mix = (horas_50 * valores_carlos['extra_50']) + (horas_100 * valores_carlos['extra_100'])
    custo_total_mix = carlos.salario + custo_mix
    
    print(f"\nüìä CEN√ÅRIO 2 - Mix (5.8h@50% + 2h@100%):")
    print(f"   - Custo extras: R$ {custo_mix:.2f}")
    print(f"   - Custo total: R$ {custo_total_mix:.2f}")
    print(f"   - Diferen√ßa produ√ß√£o: R$ {custo_total_mix - 2125.38:.2f}")
    
    # Cen√°rio 3: Valor reverso (como est√° na produ√ß√£o)
    valor_real_produ√ß√£o = 19.38  # R$ 2.125,38 - R$ 2.106,00
    valor_hora_reverso = valor_real_produ√ß√£o / horas_extras
    
    print(f"\nüìä CEN√ÅRIO 3 - Reverso (produ√ß√£o):")
    print(f"   - Valor/hora extras: R$ {valor_hora_reverso:.2f}")
    print(f"   - Valor/hora base: R$ {valor_hora_reverso / 1.5:.2f}")
    print(f"   - Horas mensais impl√≠citas: {carlos.salario / (valor_hora_reverso / 1.5):.0f}h")
    
    return {
        'cenario_50': custo_total_50,
        'cenario_mix': custo_total_mix,
        'producao': 2125.38,
        'diferenca_50': custo_total_50 - 2125.38,
        'diferenca_mix': custo_total_mix - 2125.38
    }

# EXECUTAR SIMULA√á√ÉO
resultados = simular_cenario_carlos()
```

---

## üîß **ETAPA 4: CORRIGIR FUN√á√ÉO DE C√ÅLCULO NO SISTEMA**

```python
# 4. Atualizar fun√ß√£o de c√°lculo no sistema
def corrigir_calculo_horas_extras():
    """Corrige fun√ß√£o de c√°lculo de horas extras no sistema"""
    
    print("üîß CORRIGINDO FUN√á√ÉO DE C√ÅLCULO...")
    
    # C√≥digo corrigido para implementar
    codigo_corrigido = '''
def calcular_custo_funcionario(funcionario, horas_trabalhadas, horas_extras, tipo_extras="normal"):
    """
    Calcula custo do funcion√°rio conforme legisla√ß√£o brasileira
    
    Args:
        funcionario: Objeto Funcionario
        horas_trabalhadas: Horas normais trabalhadas
        horas_extras: Horas extras trabalhadas
        tipo_extras: "normal" (50%), "domingo" (100%), "noturno" (20%)
    """
    
    # Buscar hor√°rio de trabalho
    horario = HorarioTrabalho.query.filter_by(
        funcionario_id=funcionario.id,
        ativo=True
    ).first()
    
    if not horario:
        # Usar padr√£o se n√£o encontrar
        horas_mensais = 176  # 8h √ó 22 dias
    else:
        horas_mensais = horario.horas_diarias * horario.dias_uteis_mes
    
    # Valor da hora normal
    valor_hora_normal = funcionario.salario / horas_mensais
    
    # Multiplicadores por tipo
    multiplicadores = {
        "normal": 1.5,    # 50% adicional
        "sabado": 1.5,    # 50% adicional
        "domingo": 2.0,   # 100% adicional
        "feriado": 2.0,   # 100% adicional
        "noturno": 1.2    # 20% adicional
    }
    
    multiplicador = multiplicadores.get(tipo_extras, 1.5)
    valor_hora_extra = valor_hora_normal * multiplicador
    
    # C√°lculos
    custo_horas_normais = horas_trabalhadas * valor_hora_normal
    custo_horas_extras = horas_extras * valor_hora_extra
    custo_total = custo_horas_normais + custo_horas_extras
    
    return {
        "valor_hora_normal": valor_hora_normal,
        "valor_hora_extra": valor_hora_extra,
        "custo_horas_normais": custo_horas_normais,
        "custo_horas_extras": custo_horas_extras,
        "custo_total": custo_total,
        "horas_mensais_base": horas_mensais
    }
'''
    
    print("‚úÖ C√ìDIGO CORRIGIDO GERADO")
    print("üìã IMPLEMENTAR EM:")
    print("   - models/funcionario.py")
    print("   - routes/ponto.py")
    print("   - utils/calculadora.py")
    
    return codigo_corrigido

# EXECUTAR CORRE√á√ÉO
codigo_novo = corrigir_calculo_horas_extras()
```

---

## üß™ **ETAPA 5: TESTAR COM DADOS REAIS**

```python
# 5. Testar c√°lculo corrigido
def testar_calculo_corrigido():
    """Testa c√°lculo corrigido com dados do Carlos"""
    
    print("üß™ TESTANDO C√ÅLCULO CORRIGIDO...")
    
    # Simular fun√ß√£o corrigida
    def calcular_custo_funcionario_corrigido(funcionario, horas_extras, tipo="normal"):
        # Hor√°rio padr√£o: 8h/dia √ó 22 dias = 176h
        horas_mensais = 176
        valor_hora_normal = funcionario.salario / horas_mensais
        
        multiplicadores = {"normal": 1.5, "domingo": 2.0}
        valor_hora_extra = valor_hora_normal * multiplicadores.get(tipo, 1.5)
        
        custo_extras = horas_extras * valor_hora_extra
        custo_total = funcionario.salario + custo_extras
        
        return {
            "valor_hora_normal": valor_hora_normal,
            "valor_hora_extra": valor_hora_extra,
            "custo_extras": custo_extras,
            "custo_total": custo_total
        }
    
    # Testar com 7.8h extras
    resultado = calcular_custo_funcionario_corrigido(carlos, 7.8, "normal")
    
    print(f"üìä RESULTADO C√ÅLCULO CORRIGIDO:")
    print(f"   - Valor/hora normal: R$ {resultado['valor_hora_normal']:.2f}")
    print(f"   - Valor/hora extra: R$ {resultado['valor_hora_extra']:.2f}")
    print(f"   - Custo extras: R$ {resultado['custo_extras']:.2f}")
    print(f"   - Custo total: R$ {resultado['custo_total']:.2f}")
    print(f"   - Diferen√ßa produ√ß√£o: R$ {resultado['custo_total'] - 2125.38:.2f}")
    
    # Comparar com produ√ß√£o
    if abs(resultado['custo_total'] - 2125.38) < 10:
        print("‚úÖ C√ÅLCULO CORRETO - Pr√≥ximo da produ√ß√£o!")
    else:
        print("‚ùå AINDA H√Å DIFEREN√áA - Investigar mais")
    
    return resultado

# EXECUTAR TESTE
teste_final = testar_calculo_corrigido()
```

---

## üìä **ETAPA 6: RELAT√ìRIO FINAL**

```python
# 6. Gerar relat√≥rio completo
def gerar_relatorio_final():
    """Gera relat√≥rio final da an√°lise"""
    
    relatorio = f"""
# üìä RELAT√ìRIO - AN√ÅLISE CARLOS ALBERTO

## üë§ FUNCION√ÅRIO CRIADO
- **Nome:** {carlos.nome}
- **Sal√°rio:** R$ {carlos.salario:,.2f}
- **Hor√°rio:** {horario_carlos.entrada_padrao} √†s {horario_carlos.saida_padrao}
- **Horas/dia:** {horario_carlos.horas_diarias}h
- **Dias √∫teis:** {horario_carlos.dias_uteis_mes}

## üßÆ C√ÅLCULOS LEGISLA√á√ÉO BRASILEIRA
- **Horas mensais:** {horario_carlos.horas_diarias * horario_carlos.dias_uteis_mes}h
- **Valor/hora normal:** R$ {valores_carlos['normal']:.2f}
- **Valor/hora extra 50%:** R$ {valores_carlos['extra_50']:.2f}
- **Valor/hora extra 100%:** R$ {valores_carlos['extra_100']:.2f}

## üéØ SIMULA√á√ÉO 7.8H EXTRAS
- **Cen√°rio 50%:** R$ {resultados['cenario_50']:.2f} (diferen√ßa: R$ {resultados['diferenca_50']:.2f})
- **Cen√°rio mix:** R$ {resultados['cenario_mix']:.2f} (diferen√ßa: R$ {resultados['diferenca_mix']:.2f})
- **Produ√ß√£o real:** R$ {resultados['producao']:.2f}

## ‚úÖ CONCLUS√ïES
1. **Legisla√ß√£o implementada** corretamente
2. **Funcion√°rio fict√≠cio** criado com dados reais
3. **C√°lculos corrigidos** conforme CLT
4. **Diferen√ßas identificadas** entre sistema e produ√ß√£o

## üîß PR√ìXIMOS PASSOS
1. Implementar c√≥digo corrigido no sistema
2. Atualizar fun√ß√£o de c√°lculo de custos
3. Testar com outros funcion√°rios
4. Validar em produ√ß√£o
"""
    
    print(relatorio)
    
    # Salvar em arquivo
    with open('relatorio_carlos_horas_extras.md', 'w', encoding='utf-8') as f:
        f.write(relatorio)
    
    print("‚úÖ RELAT√ìRIO SALVO: relatorio_carlos_horas_extras.md")
    
    return relatorio

# EXECUTAR RELAT√ìRIO
relatorio_completo = gerar_relatorio_final()
```

---

## üéØ **INSTRU√á√ïES DE EXECU√á√ÉO**

**Execute na ordem:**

```python
# 1. Criar funcion√°rio
carlos, horario_carlos = criar_carlos_ficticio()

# 2. Calcular valores conforme legisla√ß√£o
valores_carlos = calcular_valor_hora_legislacao(carlos, horario_carlos)

# 3. Simular cen√°rios
resultados = simular_cenario_carlos()

# 4. Corrigir c√≥digo
codigo_novo = corrigir_calculo_horas_extras()

# 5. Testar corre√ß√£o
teste_final = testar_calculo_corrigido()

# 6. Gerar relat√≥rio
relatorio_completo = gerar_relatorio_final()
```

---

## üìã **CHECKLIST**

```
‚ñ° Funcion√°rio Carlos criado
‚ñ° Hor√°rio de trabalho definido
‚ñ° C√°lculo conforme legisla√ß√£o
‚ñ° Simula√ß√£o de cen√°rios
‚ñ° C√≥digo corrigido
‚ñ° Testes realizados
‚ñ° Relat√≥rio gerado
```

**RESULTADO ESPERADO:** Funcion√°rio fict√≠cio criado, l√≥gica corrigida conforme legisla√ß√£o brasileira e an√°lise completa do c√°lculo de horas extras.

