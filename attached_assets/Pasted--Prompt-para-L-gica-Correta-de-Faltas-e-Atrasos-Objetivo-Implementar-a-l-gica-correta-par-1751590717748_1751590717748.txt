# Prompt para L√≥gica Correta de Faltas e Atrasos

## üéØ Objetivo
Implementar a l√≥gica correta para identificar **Faltas** e **Atrasos** baseado nos registros de ponto, conforme mostrado na imagem do sistema.

## üìä An√°lise da Imagem - Situa√ß√µes Identificadas

### **Situa√ß√£o 1: Linhas Vazias = FALTA**
- **Dias**: 30/06, 23/06, 19/06
- **Caracter√≠sticas**: Todos os campos vazios (-, -, -, -, -)
- **L√≥gica**: **FALTA COMPLETA**
- **Impacto**: +1 Falta, +8h perdidas

### **Situa√ß√£o 2: Registros com Atraso**
- **Dias**: 26/06, 25/06, 24/06, 20/06, 18/06, 17/06
- **Caracter√≠sticas**: Tem hor√°rios registrados + coluna "Atraso" preenchida
- **L√≥gica**: **ATRASO** (chegou depois do hor√°rio)
- **Impacto**: +1 Atraso, +minutos perdidos

---

## üîß Implementa√ß√£o da L√≥gica

### **1. Fun√ß√£o para Detectar Faltas e Atrasos**

```python
def processar_registros_ponto_para_kpis(funcionario_id, ano, mes):
    """
    Processa registros de ponto e identifica faltas/atrasos automaticamente
    """
    from datetime import datetime, date, time
    import calendar
    
    conn = get_db()
    
    # Buscar todos os registros do m√™s
    registros = conn.execute('''
        SELECT * FROM registros_ponto 
        WHERE funcionario_id = ? 
        AND strftime('%Y', data) = ? 
        AND strftime('%m', data) = ?
        ORDER BY data
    ''', [funcionario_id, str(ano), f'{mes:02d}']).fetchall()
    
    # Buscar hor√°rio padr√£o do funcion√°rio
    funcionario = conn.execute('''
        SELECT f.*, ht.entrada_padrao, ht.tolerancia_entrada
        FROM funcionarios f
        LEFT JOIN horarios_trabalho ht ON f.horario_trabalho_id = ht.id
        WHERE f.id = ?
    ''', [funcionario_id]).fetchone()
    
    entrada_padrao = funcionario['entrada_padrao'] or '08:00'
    tolerancia = funcionario['tolerancia_entrada'] or 10  # 10 minutos
    
    # Gerar todos os dias √∫teis do m√™s
    dias_uteis = gerar_dias_uteis_mes(ano, mes)
    
    faltas = 0
    atrasos = 0
    total_minutos_atraso = 0
    
    # Processar cada dia √∫til
    for dia_util in dias_uteis:
        data_str = dia_util.strftime('%Y-%m-%d')
        
        # Buscar registro do dia
        registro_dia = next((r for r in registros if r['data'] == data_str), None)
        
        if not registro_dia:
            # SITUA√á√ÉO 1: N√£o h√° registro = FALTA
            faltas += 1
            registrar_ocorrencia_automatica(funcionario_id, data_str, 'FALTA', 8.0)
            
        elif registro_dia['entrada'] and registro_dia['saida']:
            # SITUA√á√ÉO 2: Tem registro - verificar atraso
            entrada_real = datetime.strptime(registro_dia['entrada'], '%H:%M').time()
            entrada_esperada = datetime.strptime(entrada_padrao, '%H:%M').time()
            
            # Calcular diferen√ßa em minutos
            entrada_real_min = entrada_real.hour * 60 + entrada_real.minute
            entrada_esperada_min = entrada_esperada.hour * 60 + entrada_esperada.minute
            
            minutos_atraso = entrada_real_min - entrada_esperada_min
            
            if minutos_atraso > tolerancia:
                # √â um atraso
                atrasos += 1
                total_minutos_atraso += minutos_atraso
                registrar_ocorrencia_automatica(funcionario_id, data_str, 'ATRASO', 0, minutos_atraso)
        
        elif not registro_dia['entrada'] or not registro_dia['saida']:
            # Registro incompleto - tratar como falta
            faltas += 1
            registrar_ocorrencia_automatica(funcionario_id, data_str, 'FALTA', 8.0)
    
    conn.close()
    
    return {
        'faltas': faltas,
        'atrasos': atrasos,
        'total_minutos_atraso': total_minutos_atraso,
        'horas_perdidas_atrasos': total_minutos_atraso / 60.0
    }

def gerar_dias_uteis_mes(ano, mes):
    """
    Gera lista de dias √∫teis (segunda a sexta) do m√™s
    """
    import calendar
    from datetime import date
    
    dias_uteis = []
    cal = calendar.monthcalendar(ano, mes)
    
    for semana in cal:
        for dia_semana, dia in enumerate(semana):
            if dia > 0 and dia_semana < 5:  # Segunda a sexta (0-4)
                dias_uteis.append(date(ano, mes, dia))
    
    return dias_uteis

def registrar_ocorrencia_automatica(funcionario_id, data, tipo, horas_perdidas=0, minutos_atraso=0):
    """
    Registra ocorr√™ncia automaticamente (falta ou atraso)
    """
    conn = get_db()
    
    try:
        conn.execute('''
            INSERT OR REPLACE INTO ocorrencias (
                funcionario_id, data, tipo, horas_perdidas, minutos_atraso,
                motivo, justificado
            ) VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', [
            funcionario_id, data, tipo, horas_perdidas, minutos_atraso,
            'Detectado automaticamente', False
        ])
        conn.commit()
    except Exception as e:
        print(f"Erro ao registrar ocorr√™ncia: {e}")
    finally:
        conn.close()
```

### **2. Fun√ß√£o Atualizada para Calcular KPIs**

```python
def calcular_kpis_funcionario_v2(funcionario_id, ano=None, mes=None):
    """
    Calcula KPIs com detec√ß√£o autom√°tica de faltas/atrasos
    """
    from datetime import datetime
    
    if not ano or not mes:
        hoje = datetime.now()
        ano = hoje.year
        mes = hoje.month
    
    # Primeiro, processar registros para detectar faltas/atrasos
    ocorrencias = processar_registros_ponto_para_kpis(funcionario_id, ano, mes)
    
    conn = get_db()
    
    # Buscar dados b√°sicos
    registros = conn.execute('''
        SELECT 
            SUM(horas_trabalhadas) as total_horas,
            SUM(CASE WHEN horas_trabalhadas > 8 THEN horas_trabalhadas - 8 ELSE 0 END) as horas_extras,
            COUNT(DISTINCT data) as dias_trabalhados
        FROM registros_ponto 
        WHERE funcionario_id = ? 
        AND strftime('%Y', data) = ? 
        AND strftime('%m', data) = ?
        AND entrada IS NOT NULL 
        AND saida IS NOT NULL
    ''', [funcionario_id, str(ano), f'{mes:02d}']).fetchone()
    
    # Buscar calend√°rio do m√™s
    calendario = conn.execute('''
        SELECT horas_esperadas FROM calendario_mensal 
        WHERE ano = ? AND mes = ?
    ''', [ano, mes]).fetchone()
    
    conn.close()
    
    # Calcular valores
    horas_trabalhadas = float(registros['total_horas'] or 0)
    h_extras = float(registros['horas_extras'] or 0)
    dias_trabalhados = int(registros['dias_trabalhados'] or 0)
    faltas = ocorrencias['faltas']
    atrasos = ocorrencias['atrasos']
    
    # Horas perdidas = faltas + atrasos
    horas_perdidas_faltas = faltas * 8.0
    horas_perdidas_atrasos = ocorrencias['horas_perdidas_atrasos']
    horas_perdidas_total = horas_perdidas_faltas + horas_perdidas_atrasos
    
    # Horas esperadas
    horas_esperadas = float(calendario['horas_esperadas'] if calendario else 0)
    
    # Absente√≠smo
    absenteismo = 0.0
    if horas_esperadas > 0:
        absenteismo = (horas_perdidas_total / horas_esperadas) * 100
    
    # M√©dia di√°ria
    media_diaria = 0.0
    if dias_trabalhados > 0:
        media_diaria = horas_trabalhadas / dias_trabalhados
    
    return {
        'horas_trabalhadas': horas_trabalhadas,
        'h_extras': h_extras,
        'faltas': faltas,
        'atrasos': atrasos,
        'absenteismo': round(absenteismo, 1),
        'media_diaria': round(media_diaria, 1),
        'dias_trabalhados': dias_trabalhados,
        'horas_esperadas': horas_esperadas,
        'horas_perdidas_total': horas_perdidas_total,
        'detalhes': {
            'horas_perdidas_faltas': horas_perdidas_faltas,
            'horas_perdidas_atrasos': horas_perdidas_atrasos,
            'minutos_atraso_total': ocorrencias['total_minutos_atraso']
        }
    }
```

### **3. Rota para Recalcular KPIs**

```python
@app.route('/api/funcionarios/<int:funcionario_id>/recalcular-kpis', methods=['POST'])
def recalcular_kpis(funcionario_id):
    """
    Recalcula KPIs detectando faltas e atrasos automaticamente
    """
    try:
        # Limpar ocorr√™ncias autom√°ticas anteriores
        conn = get_db()
        conn.execute('''
            DELETE FROM ocorrencias 
            WHERE funcionario_id = ? 
            AND motivo = 'Detectado automaticamente'
        ''', [funcionario_id])
        conn.commit()
        conn.close()
        
        # Recalcular KPIs
        kpis = calcular_kpis_funcionario_v2(funcionario_id)
        
        return jsonify({
            'success': True,
            'kpis': kpis,
            'message': f'KPIs recalculadas: {kpis["faltas"]} faltas, {kpis["atrasos"]} atrasos detectados'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/funcionarios/<int:funcionario_id>/perfil')
def perfil_funcionario_v2(funcionario_id):
    """
    Perfil do funcion√°rio com KPIs recalculadas automaticamente
    """
    conn = get_db()
    
    # Dados b√°sicos
    funcionario = conn.execute('''
        SELECT f.*, fn.nome as funcao_nome, d.nome as departamento_nome
        FROM funcionarios f
        JOIN funcoes fn ON f.funcao_id = fn.id
        LEFT JOIN departamentos d ON f.departamento_id = d.id
        WHERE f.id = ?
    ''', [funcionario_id]).fetchone()
    
    if not funcionario:
        flash('Funcion√°rio n√£o encontrado', 'error')
        return redirect(url_for('funcionarios'))
    
    # KPIs com detec√ß√£o autom√°tica
    kpis = calcular_kpis_funcionario_v2(funcionario_id)
    
    # Hist√≥rico de ocorr√™ncias
    ocorrencias = conn.execute('''
        SELECT * FROM ocorrencias 
        WHERE funcionario_id = ? 
        AND strftime('%Y-%m', data) = strftime('%Y-%m', date('now'))
        ORDER BY data DESC
    ''', [funcionario_id]).fetchall()
    
    conn.close()
    
    return render_template('funcionarios/perfil.html',
                         funcionario=funcionario,
                         kpis=kpis,
                         ocorrencias=ocorrencias)
```

### **4. Template HTML Atualizado**

```html
<!-- Se√ß√£o de KPIs com valores corretos -->
<div class="kpis-container">
    <h3>üìä Indicadores de Desempenho (M√™s Atual)</h3>
    
    <div class="kpis-grid">
        <!-- Horas Trabalhadas -->
        <div class="kpi-card">
            <div class="kpi-valor">{{ "%.1f"|format(kpis.horas_trabalhadas) }}h</div>
            <div class="kpi-label">Horas Trabalhadas</div>
        </div>
        
        <!-- Horas Extras -->
        <div class="kpi-card {{ 'warning' if kpis.h_extras > 0 else '' }}">
            <div class="kpi-valor">{{ "%.1f"|format(kpis.h_extras) }}h</div>
            <div class="kpi-label">Horas Extras</div>
        </div>
        
        <!-- Faltas (detectadas automaticamente) -->
        <div class="kpi-card {{ 'danger' if kpis.faltas > 0 else '' }}">
            <div class="kpi-valor">{{ kpis.faltas }}</div>
            <div class="kpi-label">Faltas</div>
            <div class="kpi-info">Dias vazios detectados</div>
        </div>
        
        <!-- Atrasos (detectados automaticamente) -->
        <div class="kpi-card {{ 'warning' if kpis.atrasos > 0 else '' }}">
            <div class="kpi-valor">{{ kpis.atrasos }}</div>
            <div class="kpi-label">Atrasos</div>
            <div class="kpi-info">{{ kpis.detalhes.minutos_atraso_total }}min total</div>
        </div>
        
        <!-- Absente√≠smo -->
        <div class="kpi-card info">
            <div class="kpi-valor">{{ "%.1f"|format(kpis.absenteismo) }}%</div>
            <div class="kpi-label">Absente√≠smo</div>
        </div>
        
        <!-- M√©dia Di√°ria -->
        <div class="kpi-card success">
            <div class="kpi-valor">{{ "%.1f"|format(kpis.media_diaria) }}h</div>
            <div class="kpi-label">M√©dia Di√°ria</div>
        </div>
    </div>
    
    <!-- Bot√£o para Recalcular -->
    <div class="acoes-kpis">
        <button onclick="recalcularKPIs({{ funcionario.id }})" class="btn btn-primary">
            üîÑ Recalcular KPIs
        </button>
    </div>
    
    <!-- Detalhes do C√°lculo -->
    <div class="calculo-detalhes">
        <h4>üìã Detalhes do C√°lculo</h4>
        <div class="detalhes-grid">
            <div class="detalhe-item">
                <strong>Horas Esperadas:</strong> {{ "%.1f"|format(kpis.horas_esperadas) }}h
            </div>
            <div class="detalhe-item">
                <strong>Horas Perdidas (Faltas):</strong> {{ "%.1f"|format(kpis.detalhes.horas_perdidas_faltas) }}h
            </div>
            <div class="detalhe-item">
                <strong>Horas Perdidas (Atrasos):</strong> {{ "%.1f"|format(kpis.detalhes.horas_perdidas_atrasos) }}h
            </div>
            <div class="detalhe-item">
                <strong>Total Perdido:</strong> {{ "%.1f"|format(kpis.horas_perdidas_total) }}h
            </div>
        </div>
    </div>
</div>

<script>
async function recalcularKPIs(funcionarioId) {
    try {
        const response = await fetch(`/api/funcionarios/${funcionarioId}/recalcular-kpis`, {
            method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
            alert(result.message);
            location.reload();
        } else {
            alert('Erro: ' + result.error);
        }
    } catch (error) {
        alert('Erro ao recalcular KPIs');
    }
}
</script>
```

---

## üéØ L√≥gica Resumida

### **Para Faltas:**
```
SE (linha vazia OU entrada=null OU sa√≠da=null) 
ENT√ÉO falta = +1, horas_perdidas = +8h
```

### **Para Atrasos:**
```
SE (entrada > entrada_padr√£o + toler√¢ncia) 
ENT√ÉO atraso = +1, minutos_perdidos = diferen√ßa
```

### **Para Absente√≠smo:**
```
Absente√≠smo = ((Faltas √ó 8h) + (Atrasos em horas)) √∑ Horas_Esperadas √ó 100
```

## ‚úÖ Resultado Esperado

Ap√≥s implementar esta l√≥gica:

- **Faltas**: 3 (dias 30/06, 23/06, 19/06 - linhas vazias)
- **Atrasos**: 6 (dias com atraso registrado)
- **Absente√≠smo**: 8.7% (calculado corretamente)
- **Detec√ß√£o autom√°tica** de faltas e atrasos
- **Rec√°lculo manual** dispon√≠vel

