# PROMPT: Corrigir Bot√£o "Testar √öltimo RDO" - Mostrar Formul√°rio Edit√°vel

## PROBLEMA IDENTIFICADO

O bot√£o "Testar √öltimo RDO" est√° mostrando apenas **visualiza√ß√£o em modo leitura** (primeira imagem) quando deveria mostrar **formul√°rio edit√°vel** com campos de input (segunda imagem).

### COMPORTAMENTO ATUAL (ERRADO):
- Mostra dados est√°ticos do √∫ltimo RDO
- Sem campos de input edit√°veis
- Apenas visualiza√ß√£o dos percentuais salvos

### COMPORTAMENTO ESPERADO (CORRETO):
- Formul√°rio edit√°vel com campos de input
- Dados pr√©-preenchidos do √∫ltimo RDO
- Usu√°rio pode editar as porcentagens
- Campos com placeholder "0" e s√≠mbolo "%"

## AN√ÅLISE DO PROBLEMA

### CAUSA RAIZ:
A fun√ß√£o JavaScript `carregarDadosUltimoRDO()` n√£o est√° executando o c√≥digo correto para exibir o formul√°rio edit√°vel.

### CONDI√á√ÉO PROBLEM√ÅTICA:
```javascript
if (data.primeira_rdo) {
    // Primeira RDO - formul√°rio com 0%
} else {
    // DEVERIA entrar aqui e chamar:
    // exibirDadosPrimeiraRDO(data.ultimo_rdo, true)
    // MAS N√ÉO EST√Å EXECUTANDO
}
```

## SOLU√á√ÉO ESPEC√çFICA

### 1. CORRIGIR A CONDI√á√ÉO JAVASCRIPT

**Problema:** A API n√£o retorna `primeira_rdo: false` explicitamente, ent√£o `data.primeira_rdo` √© `undefined`.

**Solu√ß√£o:** Modificar a condi√ß√£o para detectar corretamente quando h√° √∫ltimo RDO:

```javascript
function carregarDadosUltimoRDO() {
    const obraId = document.getElementById('obra_id').value;
    
    if (!obraId) {
        alert('Selecione uma obra primeiro');
        return;
    }
    
    console.log('üîç Carregando dados do √∫ltimo RDO para obra:', obraId);
    
    fetch(`/api/ultimo-rdo-dados/${obraId}`)
        .then(response => response.json())
        .then(data => {
            console.log('üì¶ Dados recebidos:', data);
            
            if (data.success) {
                // CORRE√á√ÉO: Verificar se h√° √∫ltimo RDO pelos dados, n√£o pela flag
                const temUltimoRDO = data.ultimo_rdo && 
                                   data.ultimo_rdo.numero_rdo && 
                                   data.ultimo_rdo.numero_rdo !== 'PRIMEIRA_RDO';
                
                console.log('üîç Tem √∫ltimo RDO?', temUltimoRDO);
                console.log('üîç N√∫mero RDO:', data.ultimo_rdo?.numero_rdo);
                
                if (temUltimoRDO) {
                    // H√Å √öLTIMO RDO - Mostrar formul√°rio edit√°vel com dados preenchidos
                    console.log('üîß FOR√áANDO formul√°rio edit√°vel com dados preenchidos...');
                    exibirDadosPrimeiraRDO(data.ultimo_rdo, true); // true = com dados preenchidos
                    
                    // Mostrar informa√ß√£o do √∫ltimo RDO usado
                    mostrarInfoUltimoRDO(data.ultimo_rdo);
                } else {
                    // PRIMEIRA RDO - Mostrar formul√°rio com 0%
                    console.log('üÜï Primeira RDO - formul√°rio com 0%');
                    exibirDadosPrimeiraRDO(data.ultimo_rdo, false); // false = campos zerados
                    
                    // Mostrar informa√ß√£o de primeira RDO
                    mostrarInfoPrimeiraRDO();
                }
            } else {
                console.error('‚ùå Erro na API:', data.error);
                alert('Erro ao carregar dados do √∫ltimo RDO');
            }
        })
        .catch(error => {
            console.error('‚ùå Erro na requisi√ß√£o:', error);
            alert('Erro ao conectar com o servidor');
        });
}
```

### 2. GARANTIR QUE A FUN√á√ÉO SEJA CHAMADA CORRETAMENTE

**Verificar se a fun√ß√£o `exibirDadosPrimeiraRDO` est√° sendo chamada com os par√¢metros corretos:**

```javascript
function exibirDadosPrimeiraRDO(dadosRDO, comDadosPreenchidos = false) {
    console.log('üéØ exibirDadosPrimeiraRDO chamada:', {
        dadosRDO: dadosRDO,
        comDadosPreenchidos: comDadosPreenchidos
    });
    
    const container = document.getElementById('servicos-container');
    
    if (!dadosRDO || !dadosRDO.servicos) {
        console.error('‚ùå Dados do RDO inv√°lidos');
        return;
    }
    
    let html = '';
    
    // Cabe√ßalho informativo
    if (comDadosPreenchidos) {
        html += `
        <div class="alert alert-info mb-4">
            <i class="fas fa-info-circle"></i>
            <strong>üìã Dados do √öltimo RDO:</strong> ${dadosRDO.numero_rdo} (${dadosRDO.data_relatorio})<br>
            Servi√ßos: ${dadosRDO.servicos.length} | Funcion√°rios: ${dadosRDO.funcionarios?.length || 0}
        </div>`;
    } else {
        html += `
        <div class="alert alert-success mb-4">
            <i class="fas fa-seedling"></i>
            <strong>üÜï Primeira RDO da Obra!</strong> Servi√ßos carregados com percentual 0%<br>
            Total: ${dadosRDO.servicos.length} servi√ßos | ${dadosRDO.total_subatividades || 0} subatividades
        </div>`;
    }
    
    html += '<div class="servicos-accordion">';
    
    // Gerar formul√°rio para cada servi√ßo
    dadosRDO.servicos.forEach((servico, index) => {
        const servicoId = `servico-${servico.id}`;
        const isExpanded = index === 0; // Primeiro servi√ßo expandido
        
        html += `
        <div class="servico-card mb-3">
            <div class="servico-header" onclick="toggleServico('${servicoId}')">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h5 class="mb-0">
                            <i class="fas fa-wrench text-primary"></i>
                            ${servico.nome}
                        </h5>
                        <small class="text-muted">${servico.categoria || 'Categoria n√£o definida'}</small>
                    </div>
                    <div class="d-flex align-items-center gap-3">
                        <span class="badge bg-secondary">${servico.subatividades?.length || 0} subatividades</span>
                        <i class="fas fa-chevron-${isExpanded ? 'up' : 'down'}" id="icon-${servicoId}"></i>
                    </div>
                </div>
            </div>
            
            <div class="servico-body ${isExpanded ? '' : 'collapse'}" id="${servicoId}">
                <div class="subatividades-grid">`;
        
        // Gerar campos edit√°veis para cada subatividade
        if (servico.subatividades && servico.subatividades.length > 0) {
            servico.subatividades.forEach(subatividade => {
                const percentualAtual = comDadosPreenchidos ? subatividade.percentual || 0 : 0;
                
                html += `
                <div class="col-md-6 mb-3">
                    <label class="form-label">${subatividade.nome}</label>
                    <div class="input-group">
                        <input type="number" 
                               class="form-control" 
                               name="subatividade_${subatividade.id}_percentual"
                               value="${percentualAtual}"
                               min="0" 
                               max="100" 
                               step="0.1"
                               placeholder="0">
                        <span class="input-group-text">%</span>
                    </div>
                </div>`;
            });
        } else {
            html += `
            <div class="col-12">
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle"></i>
                    Nenhuma subatividade cadastrada para este servi√ßo.
                </div>
            </div>`;
        }
        
        html += `
                </div>
            </div>
        </div>`;
    });
    
    html += '</div>';
    
    // Atualizar container
    container.innerHTML = html;
    
    console.log('‚úÖ Formul√°rio edit√°vel gerado com sucesso');
    
    // Se tem dados preenchidos, preencher tamb√©m os funcion√°rios
    if (comDadosPreenchidos && dadosRDO.funcionarios) {
        preencherFuncionarios(dadosRDO.funcionarios);
    }
}
```

### 3. ADICIONAR FUN√á√ïES AUXILIARES

```javascript
function mostrarInfoUltimoRDO(ultimoRDO) {
    // Mostrar informa√ß√µes do √∫ltimo RDO usado
    const infoDiv = document.createElement('div');
    infoDiv.className = 'alert alert-info mb-3';
    infoDiv.innerHTML = `
        <i class="fas fa-history"></i>
        <strong>√öltimo RDO encontrado:</strong> ${ultimoRDO.numero_rdo} 
        (${ultimoRDO.data_relatorio}) - Dados carregados para edi√ß√£o
    `;
    
    const container = document.getElementById('servicos-container');
    container.insertBefore(infoDiv, container.firstChild);
}

function mostrarInfoPrimeiraRDO() {
    // Mostrar informa√ß√µes de primeira RDO
    const infoDiv = document.createElement('div');
    infoDiv.className = 'alert alert-success mb-3';
    infoDiv.innerHTML = `
        <i class="fas fa-seedling"></i>
        <strong>Primeira RDO da obra!</strong> 
        Servi√ßos carregados com percentual 0% para in√≠cio dos trabalhos
    `;
    
    const container = document.getElementById('servicos-container');
    container.insertBefore(infoDiv, container.firstChild);
}

function preencherFuncionarios(funcionarios) {
    // Preencher funcion√°rios do √∫ltimo RDO
    funcionarios.forEach(funcionario => {
        // L√≥gica para preencher funcion√°rios selecionados
        console.log('üë§ Preenchendo funcion√°rio:', funcionario.nome);
    });
}
```

### 4. VERIFICAR CHAMADA DO BOT√ÉO

**Garantir que o bot√£o chama a fun√ß√£o correta:**

```html
<button type="button" class="btn-modern btn-success" onclick="testarUltimoRDO()">
    <i class="fas fa-magic"></i>
    Testar √öltimo RDO
</button>
```

```javascript
function testarUltimoRDO() {
    console.log('üß™ BOT√ÉO TESTAR √öLTIMO RDO CLICADO');
    carregarDadosUltimoRDO();
}
```

## RESULTADO ESPERADO

Ap√≥s a corre√ß√£o, ao clicar em "Testar √öltimo RDO":

‚úÖ **Formul√°rio edit√°vel** aparece (n√£o visualiza√ß√£o est√°tica)
‚úÖ **Campos de input** com valores pr√©-preenchidos do √∫ltimo RDO
‚úÖ **S√≠mbolo "%"** nos campos de porcentagem
‚úÖ **Funcion√°rios** pr√©-selecionados (se houver)
‚úÖ **Informa√ß√£o** sobre qual RDO foi usado como base

## DEBUG ADICIONAL

Para confirmar que est√° funcionando, adicionar logs:

```javascript
console.log('üîç Verificando condi√ß√£o:');
console.log('- data.primeira_rdo:', data.primeira_rdo);
console.log('- data.ultimo_rdo:', data.ultimo_rdo);
console.log('- numero_rdo:', data.ultimo_rdo?.numero_rdo);
console.log('- temUltimoRDO:', temUltimoRDO);
```

A corre√ß√£o principal √© **modificar a condi√ß√£o de verifica√ß√£o** para detectar corretamente quando h√° dados do √∫ltimo RDO e **for√ßar a chamada** da fun√ß√£o `exibirDadosPrimeiraRDO(data.ultimo_rdo, true)` com o par√¢metro `true` para mostrar o formul√°rio edit√°vel.

