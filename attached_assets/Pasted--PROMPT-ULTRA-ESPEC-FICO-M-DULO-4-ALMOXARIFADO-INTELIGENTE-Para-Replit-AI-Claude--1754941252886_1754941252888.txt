# üéØ PROMPT ULTRA-ESPEC√çFICO: M√ìDULO 4 - ALMOXARIFADO INTELIGENTE

**Para:** Replit AI / Claude / ChatGPT  
**Sistema:** SIGE v8.0 - Sistema Integrado de Gest√£o Empresarial  
**M√≥dulo:** 4 de 7 - Almoxarifado Inteligente com C√≥digo de Barras e XML  
**Status:** M√≥dulos 1, 2 e 3 j√° implementados e funcionando - Continuidade da evolu√ß√£o

---

## ‚ö†Ô∏è CONTEXTO CR√çTICO - M√ìDULOS 1, 2 E 3 J√Å FUNCIONANDO

Voc√™ est√° implementando **APENAS O M√ìDULO 4** de uma evolu√ß√£o em andamento. Os **M√≥dulos 1, 2 e 3 j√° est√£o funcionando** perfeitamente:

### **Infraestrutura Existente dos M√≥dulos Anteriores:**
- ‚úÖ **M√≥dulo 1:** Sistema de propostas com convers√£o autom√°tica para obras
- ‚úÖ **M√≥dulo 2:** Portal do cliente com acompanhamento em tempo real
- ‚úÖ **M√≥dulo 3:** Gest√£o de equipes com interface Kanban e cria√ß√£o autom√°tica de RDO
- ‚úÖ **Sistema RDO:** Funcionando perfeitamente com progresso autom√°tico
- ‚úÖ **Sistema de Aloca√ß√£o:** Funcion√°rios sendo alocados para obras automaticamente

### **Sistema Base Atual (N√ÉO MODIFICAR):**
```
‚îú‚îÄ‚îÄ app.py                    # Flask app principal
‚îú‚îÄ‚îÄ models.py                 # Classes existentes + Proposta + NotificacaoCliente + AlocacaoEquipe
‚îú‚îÄ‚îÄ views.py                  # Blueprint main_bp + rotas dos M√≥dulos 1, 2 e 3
‚îú‚îÄ‚îÄ auth.py                   # Decorators funcionando + gestor_equipes_required
‚îú‚îÄ‚îÄ utils.py                  # Fun√ß√µes dos M√≥dulos 1, 2 e 3
‚îî‚îÄ‚îÄ templates/                # Templates dos M√≥dulos 1, 2 e 3 funcionando
    ‚îú‚îÄ‚îÄ propostas/            # ‚úÖ M√≥dulo 1 implementado
    ‚îú‚îÄ‚îÄ cliente/              # ‚úÖ M√≥dulo 2 implementado
    ‚îî‚îÄ‚îÄ gestao_equipes/       # ‚úÖ M√≥dulo 3 implementado
```

### **Classes Principais Existentes (USAR COMO BASE):**
```python
# ‚úÖ SISTEMA DE USU√ÅRIOS ATUAL
class TipoUsuario(enum.Enum):
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    GESTOR_EQUIPES = "gestor_equipes"
    FUNCIONARIO = "funcionario"
    # SER√Å ADICIONADO: ALMOXARIFE

# ‚úÖ SISTEMA RDO EXISTENTE (SER√Å INTEGRADO)
class RDO(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    numero_rdo = db.Column(db.String(20), unique=True, nullable=False)
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=False)
    data_relatorio = db.Column(db.Date, nullable=False)
    status = db.Column(db.String(20), default='Rascunho')  # Rascunho, Finalizado
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)

# ‚úÖ SISTEMA DE FUNCION√ÅRIOS EXISTENTE
class Funcionario(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    cargo = db.Column(db.String(50))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    ativo = db.Column(db.Boolean, default=True)

# ‚úÖ OBRAS EXISTENTES (M√ìDULOS 1, 2 E 3)
class Obra(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    codigo = db.Column(db.String(20), unique=True)
    endereco = db.Column(db.Text)
    status = db.Column(db.String(20), default='Planejamento')  # Planejamento, Em Andamento, Conclu√≠da
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    # + campos dos M√≥dulos 1 e 2 (token_cliente, etc.)

# ‚úÖ ALOCA√á√ÉO DE EQUIPES (M√ìDULO 3)
class AlocacaoEquipe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'), nullable=False)
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'), nullable=False)
    data_alocacao = db.Column(db.Date, nullable=False)
    tipo_local = db.Column(db.String(20), nullable=False)  # 'oficina', 'campo'
    rdo_gerado_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
```

---

## üéØ M√ìDULO 4: ALMOXARIFADO INTELIGENTE - ESPECIFICA√á√ÉO COMPLETA

### **OBJETIVO DO M√ìDULO:**
Criar sistema completo de almoxarifado que permite:
1. **Leitura de c√≥digo de barras** com c√¢mera web em tempo real
2. **Importa√ß√£o autom√°tica** de XML de notas fiscais (NFe)
3. **Controle total** de entrada/sa√≠da/devolu√ß√£o de materiais
4. **Integra√ß√£o com RDO** - aba espec√≠fica para materiais
5. **Rastreabilidade completa** por funcion√°rio, obra e data
6. **Relat√≥rios avan√ßados** com IA e analytics

---

## üìä IMPLEMENTA√á√ÉO T√âCNICA DETALHADA

### **PASSO 1: Atualizar Enum TipoUsuario (MODIFICAR EM models.py)**

```python
# ===== M√ìDULO 4: ATUALIZAR ENUM EXISTENTE =====
# LOCALIZAR o enum TipoUsuario em models.py e MODIFICAR:

class TipoUsuario(enum.Enum):
    SUPER_ADMIN = "super_admin"
    ADMIN = "admin"
    GESTOR_EQUIPES = "gestor_equipes"
    ALMOXARIFE = "almoxarife"  # ADICIONAR ESTA LINHA
    FUNCIONARIO = "funcionario"
```

### **PASSO 2: Novas Classes do Almoxarifado (ADICIONAR EM models.py)**

```python
# ===== M√ìDULO 4: 5 NOVAS CLASSES PARA ALMOXARIFADO =====
# ADICIONAR estas classes NO FINAL do arquivo models.py

from decimal import Decimal
import xml.etree.ElementTree as ET

# 1. CATEGORIAS DE PRODUTOS
class CategoriaProduto(db.Model):
    __tablename__ = 'categoria_produto'
    
    id = db.Column(db.Integer, primary_key=True)
    nome = db.Column(db.String(100), nullable=False)
    descricao = db.Column(db.Text)
    codigo = db.Column(db.String(10), nullable=False)  # CIM, ELE, HID, etc.
    cor_hex = db.Column(db.String(7), default='#007bff')  # Para interface visual
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Controle de tempo
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamentos
    produtos = db.relationship('Produto', backref='categoria', lazy='dynamic')
    
    # √çndices
    __table_args__ = (
        db.Index('idx_categoria_admin_codigo', 'admin_id', 'codigo'),
    )
    
    def __repr__(self):
        return f'<CategoriaProduto {self.nome}>'

# 2. FORNECEDORES
class Fornecedor(db.Model):
    __tablename__ = 'fornecedor'
    
    id = db.Column(db.Integer, primary_key=True)
    razao_social = db.Column(db.String(200), nullable=False)
    nome_fantasia = db.Column(db.String(200))
    cnpj = db.Column(db.String(18), nullable=False)
    inscricao_estadual = db.Column(db.String(20))
    
    # Endere√ßo
    endereco = db.Column(db.Text)
    cidade = db.Column(db.String(100))
    estado = db.Column(db.String(2))
    cep = db.Column(db.String(10))
    
    # Contato
    telefone = db.Column(db.String(20))
    email = db.Column(db.String(100))
    contato_responsavel = db.Column(db.String(100))
    
    # Status
    ativo = db.Column(db.Boolean, default=True)
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Controle de tempo
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamentos
    notas_fiscais = db.relationship('NotaFiscal', backref='fornecedor', lazy='dynamic')
    
    # √çndices
    __table_args__ = (
        db.UniqueConstraint('cnpj', 'admin_id', name='uk_fornecedor_cnpj_admin'),
        db.Index('idx_fornecedor_admin_ativo', 'admin_id', 'ativo'),
    )
    
    def __repr__(self):
        return f'<Fornecedor {self.razao_social}>'
    
    @property
    def cnpj_formatado(self):
        """Retorna CNPJ formatado"""
        if len(self.cnpj) == 14:
            return f"{self.cnpj[:2]}.{self.cnpj[2:5]}.{self.cnpj[5:8]}/{self.cnpj[8:12]}-{self.cnpj[12:]}"
        return self.cnpj

# 3. PRODUTOS/MATERIAIS
class Produto(db.Model):
    __tablename__ = 'produto'
    
    id = db.Column(db.Integer, primary_key=True)
    codigo_interno = db.Column(db.String(20), nullable=False)
    codigo_barras = db.Column(db.String(50))
    nome = db.Column(db.String(200), nullable=False)
    descricao = db.Column(db.Text)
    
    # Classifica√ß√£o
    categoria_id = db.Column(db.Integer, db.ForeignKey('categoria_produto.id'), nullable=False)
    
    # Unidades e medidas
    unidade_medida = db.Column(db.String(10), nullable=False)  # UN, KG, M, L, M2, M3, etc.
    peso_unitario = db.Column(db.Numeric(10,3))  # Para c√°lculos de frete
    dimensoes = db.Column(db.String(50))  # Ex: "10x20x30 cm"
    
    # Controle de estoque
    estoque_minimo = db.Column(db.Numeric(10,3), default=0)
    estoque_maximo = db.Column(db.Numeric(10,3))
    estoque_atual = db.Column(db.Numeric(10,3), default=0)
    estoque_reservado = db.Column(db.Numeric(10,3), default=0)  # Para futuras funcionalidades
    
    # Valores
    valor_medio = db.Column(db.Numeric(10,2), default=0)  # Calculado automaticamente
    ultimo_valor_compra = db.Column(db.Numeric(10,2))
    
    # Status e controle
    ativo = db.Column(db.Boolean, default=True)
    critico = db.Column(db.Boolean, default=False)  # Material cr√≠tico para obras
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Controle de tempo
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamentos
    movimentacoes = db.relationship('MovimentacaoEstoque', backref='produto', lazy='dynamic')
    
    # √çndices
    __table_args__ = (
        db.UniqueConstraint('codigo_interno', 'admin_id', name='uk_produto_codigo_admin'),
        db.Index('idx_produto_codigo_barras', 'codigo_barras'),
        db.Index('idx_produto_admin_ativo', 'admin_id', 'ativo'),
        db.Index('idx_produto_categoria', 'categoria_id'),
        db.Index('idx_produto_estoque_baixo', 'admin_id', 'estoque_atual', 'estoque_minimo'),
    )
    
    def __repr__(self):
        return f'<Produto {self.nome}>'
    
    @property
    def estoque_disponivel(self):
        """Estoque dispon√≠vel (atual - reservado)"""
        return self.estoque_atual - self.estoque_reservado
    
    @property
    def status_estoque(self):
        """Status do estoque: OK, BAIXO, CRITICO, ZERADO"""
        if self.estoque_atual <= 0:
            return 'ZERADO'
        elif self.estoque_atual <= (self.estoque_minimo * 0.5):
            return 'CRITICO'
        elif self.estoque_atual <= self.estoque_minimo:
            return 'BAIXO'
        else:
            return 'OK'
    
    @property
    def valor_estoque_atual(self):
        """Valor total do estoque atual"""
        return self.estoque_atual * self.valor_medio
    
    def to_dict(self):
        """Converter para dicion√°rio para APIs"""
        return {
            'id': self.id,
            'codigo_interno': self.codigo_interno,
            'codigo_barras': self.codigo_barras,
            'nome': self.nome,
            'descricao': self.descricao,
            'categoria': self.categoria.nome if self.categoria else None,
            'unidade_medida': self.unidade_medida,
            'estoque_atual': float(self.estoque_atual),
            'estoque_minimo': float(self.estoque_minimo),
            'valor_medio': float(self.valor_medio),
            'status_estoque': self.status_estoque,
            'ativo': self.ativo
        }

# 4. NOTAS FISCAIS
class NotaFiscal(db.Model):
    __tablename__ = 'nota_fiscal'
    
    id = db.Column(db.Integer, primary_key=True)
    numero = db.Column(db.String(20), nullable=False)
    serie = db.Column(db.String(5), nullable=False)
    chave_acesso = db.Column(db.String(44), unique=True, nullable=False)
    
    # Fornecedor
    fornecedor_id = db.Column(db.Integer, db.ForeignKey('fornecedor.id'), nullable=False)
    
    # Datas
    data_emissao = db.Column(db.Date, nullable=False)
    data_entrada = db.Column(db.Date)  # Data de entrada no estoque
    
    # Valores
    valor_produtos = db.Column(db.Numeric(10,2), nullable=False)
    valor_frete = db.Column(db.Numeric(10,2), default=0)
    valor_desconto = db.Column(db.Numeric(10,2), default=0)
    valor_total = db.Column(db.Numeric(10,2), nullable=False)
    
    # XML e processamento
    xml_content = db.Column(db.Text)  # Armazenar XML completo
    xml_hash = db.Column(db.String(64))  # Hash para detectar duplicatas
    
    # Status
    status = db.Column(db.String(20), default='Pendente')  # Pendente, Processada, Erro
    observacoes = db.Column(db.Text)
    
    # Controle
    processada_por_id = db.Column(db.Integer, db.ForeignKey('usuario.id'))
    data_processamento = db.Column(db.DateTime)
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Controle de tempo
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relacionamentos
    movimentacoes = db.relationship('MovimentacaoEstoque', backref='nota_fiscal', lazy='dynamic')
    processada_por = db.relationship('Usuario', foreign_keys=[processada_por_id])
    
    # √çndices
    __table_args__ = (
        db.Index('idx_nf_admin_status', 'admin_id', 'status'),
        db.Index('idx_nf_fornecedor_data', 'fornecedor_id', 'data_emissao'),
        db.Index('idx_nf_chave_acesso', 'chave_acesso'),
    )
    
    def __repr__(self):
        return f'<NotaFiscal {self.numero}/{self.serie}>'
    
    @property
    def numero_formatado(self):
        """N√∫mero da NF formatado"""
        return f"{self.numero}/{self.serie}"
    
    def processar_xml(self):
        """Processar XML da nota fiscal e extrair produtos"""
        if not self.xml_content:
            return False
        
        try:
            root = ET.fromstring(self.xml_content)
            # Implementar parsing do XML NFe
            # Extrair produtos e criar movimenta√ß√µes
            return True
        except Exception as e:
            self.observacoes = f"Erro ao processar XML: {str(e)}"
            return False

# 5. MOVIMENTA√á√ïES DE ESTOQUE
class MovimentacaoEstoque(db.Model):
    __tablename__ = 'movimentacao_estoque'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # Produto
    produto_id = db.Column(db.Integer, db.ForeignKey('produto.id'), nullable=False)
    
    # Tipo de movimenta√ß√£o
    tipo_movimentacao = db.Column(db.String(20), nullable=False)  # ENTRADA, SAIDA, DEVOLUCAO, AJUSTE
    
    # Quantidades
    quantidade = db.Column(db.Numeric(10,3), nullable=False)
    quantidade_anterior = db.Column(db.Numeric(10,3))  # Para auditoria
    quantidade_posterior = db.Column(db.Numeric(10,3))  # Para auditoria
    
    # Valores
    valor_unitario = db.Column(db.Numeric(10,2))
    valor_total = db.Column(db.Numeric(10,2))
    
    # Data e hora
    data_movimentacao = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    
    # Origem da movimenta√ß√£o (relacionamentos opcionais)
    nota_fiscal_id = db.Column(db.Integer, db.ForeignKey('nota_fiscal.id'))
    rdo_id = db.Column(db.Integer, db.ForeignKey('rdo.id'))
    funcionario_id = db.Column(db.Integer, db.ForeignKey('funcionario.id'))
    obra_id = db.Column(db.Integer, db.ForeignKey('obra.id'))
    
    # Controle e auditoria
    usuario_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    observacoes = db.Column(db.Text)
    ip_address = db.Column(db.String(45))
    
    # Multi-tenant (OBRIGAT√ìRIO)
    admin_id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)
    
    # Relacionamentos
    usuario = db.relationship('Usuario', backref='movimentacoes_estoque')
    funcionario = db.relationship('Funcionario', backref='movimentacoes_materiais')
    obra = db.relationship('Obra', backref='movimentacoes_materiais')
    rdo = db.relationship('RDO', backref='movimentacoes_materiais')
    
    # √çndices
    __table_args__ = (
        db.Index('idx_mov_produto_data', 'produto_id', 'data_movimentacao'),
        db.Index('idx_mov_admin_tipo', 'admin_id', 'tipo_movimentacao'),
        db.Index('idx_mov_obra_data', 'obra_id', 'data_movimentacao'),
        db.Index('idx_mov_funcionario_data', 'funcionario_id', 'data_movimentacao'),
        db.Index('idx_mov_rdo', 'rdo_id'),
        db.Index('idx_mov_nf', 'nota_fiscal_id'),
    )
    
    def __repr__(self):
        return f'<MovimentacaoEstoque {self.tipo_movimentacao} - {self.produto.nome if self.produto else "N/A"}>'
    
    def to_dict(self):
        """Converter para dicion√°rio para APIs"""
        return {
            'id': self.id,
            'produto_nome': self.produto.nome if self.produto else None,
            'tipo_movimentacao': self.tipo_movimentacao,
            'quantidade': float(self.quantidade),
            'valor_unitario': float(self.valor_unitario) if self.valor_unitario else None,
            'valor_total': float(self.valor_total) if self.valor_total else None,
            'data_movimentacao': self.data_movimentacao.isoformat(),
            'funcionario_nome': self.funcionario.nome if self.funcionario else None,
            'obra_nome': self.obra.nome if self.obra else None,
            'rdo_numero': self.rdo.numero_rdo if self.rdo else None,
            'usuario_nome': self.usuario.nome if self.usuario else None,
            'observacoes': self.observacoes
        }
```


### **PASSO 3: Novo Decorator de Permiss√£o (ADICIONAR EM auth.py)**

```python
# ===== M√ìDULO 4: NOVO DECORATOR PARA ALMOXARIFE =====
# ADICIONAR esta fun√ß√£o NO FINAL do arquivo auth.py

def almoxarife_required(f):
    """Decorator para rotas que requerem acesso de almoxarife ou superior"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if not current_user.is_authenticated:
            flash('Acesso negado. Fa√ßa login primeiro.', 'danger')
            return redirect(url_for('main.login'))
        
        if current_user.tipo_usuario not in [TipoUsuario.SUPER_ADMIN, TipoUsuario.ADMIN, TipoUsuario.ALMOXARIFE]:
            flash('Acesso negado. Apenas almoxarifes podem acessar esta p√°gina.', 'danger')
            return redirect(url_for('main.dashboard'))
        
        return f(*args, **kwargs)
    return decorated_function

def pode_gerenciar_almoxarifado():
    """Verificar se o usu√°rio atual pode gerenciar almoxarifado"""
    if not current_user.is_authenticated:
        return False
    
    return current_user.tipo_usuario in [TipoUsuario.SUPER_ADMIN, TipoUsuario.ADMIN, TipoUsuario.ALMOXARIFE]

def pode_lancar_materiais():
    """Verificar se o usu√°rio atual pode lan√ßar materiais"""
    if not current_user.is_authenticated:
        return False
    
    # Almoxarife pode lan√ßar em qualquer RDO
    # Admin e Super Admin tamb√©m podem
    return current_user.tipo_usuario in [TipoUsuario.SUPER_ADMIN, TipoUsuario.ADMIN, TipoUsuario.ALMOXARIFE]
```

### **PASSO 4: Fun√ß√µes Utilit√°rias do Almoxarifado (ADICIONAR EM utils.py)**

```python
# ===== M√ìDULO 4: FUN√á√ïES PARA ALMOXARIFADO INTELIGENTE =====
# ADICIONAR estas fun√ß√µes NO FINAL do arquivo utils.py

import hashlib
import xml.etree.ElementTree as ET
from decimal import Decimal
import re
import requests
from datetime import date, datetime, timedelta
from collections import defaultdict
from models import (Produto, CategoriaProduto, Fornecedor, NotaFiscal, 
                   MovimentacaoEstoque, RDO, Funcionario, Obra)

# ===== FUN√á√ïES DE C√ìDIGO DE BARRAS =====

def validar_codigo_barras(codigo):
    """Validar c√≥digo de barras (EAN-13, EAN-8, Code-128)"""
    if not codigo:
        return False
    
    # Remover espa√ßos e caracteres especiais
    codigo = re.sub(r'[^0-9]', '', codigo)
    
    # EAN-13 (13 d√≠gitos)
    if len(codigo) == 13:
        return validar_ean13(codigo)
    
    # EAN-8 (8 d√≠gitos)
    elif len(codigo) == 8:
        return validar_ean8(codigo)
    
    # Code-128 ou outros formatos (aceitar se tiver entre 4 e 50 caracteres)
    elif 4 <= len(codigo) <= 50:
        return True
    
    return False

def validar_ean13(codigo):
    """Validar c√≥digo EAN-13 com d√≠gito verificador"""
    if len(codigo) != 13:
        return False
    
    try:
        # Calcular d√≠gito verificador
        soma = 0
        for i, digito in enumerate(codigo[:-1]):
            peso = 1 if i % 2 == 0 else 3
            soma += int(digito) * peso
        
        digito_verificador = (10 - (soma % 10)) % 10
        return int(codigo[-1]) == digito_verificador
    except:
        return False

def validar_ean8(codigo):
    """Validar c√≥digo EAN-8 com d√≠gito verificador"""
    if len(codigo) != 8:
        return False
    
    try:
        # Calcular d√≠gito verificador
        soma = 0
        for i, digito in enumerate(codigo[:-1]):
            peso = 3 if i % 2 == 0 else 1
            soma += int(digito) * peso
        
        digito_verificador = (10 - (soma % 10)) % 10
        return int(codigo[-1]) == digito_verificador
    except:
        return False

def gerar_codigo_interno(admin_id, categoria_codigo=None):
    """Gerar c√≥digo interno √∫nico para produto"""
    # Formato: CAT001, CAT002, etc.
    if not categoria_codigo:
        categoria_codigo = "PRD"
    
    # Buscar √∫ltimo c√≥digo da categoria
    ultimo_produto = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.codigo_interno.like(f'{categoria_codigo}%')
    ).order_by(Produto.codigo_interno.desc()).first()
    
    if ultimo_produto:
        try:
            ultimo_numero = int(ultimo_produto.codigo_interno[3:])
            novo_numero = ultimo_numero + 1
        except:
            novo_numero = 1
    else:
        novo_numero = 1
    
    return f"{categoria_codigo}{novo_numero:03d}"

# ===== FUN√á√ïES DE ESTOQUE =====

def atualizar_estoque_produto(produto_id, quantidade, tipo_movimentacao, **kwargs):
    """Atualizar estoque do produto e criar movimenta√ß√£o"""
    produto = Produto.query.get(produto_id)
    if not produto:
        raise ValueError("Produto n√£o encontrado")
    
    # Validar quantidade
    if quantidade <= 0:
        raise ValueError("Quantidade deve ser positiva")
    
    # Validar tipo de movimenta√ß√£o
    tipos_validos = ['ENTRADA', 'SAIDA', 'DEVOLUCAO', 'AJUSTE']
    if tipo_movimentacao not in tipos_validos:
        raise ValueError(f"Tipo de movimenta√ß√£o inv√°lido. Use: {', '.join(tipos_validos)}")
    
    # Calcular nova quantidade
    quantidade_anterior = produto.estoque_atual
    
    if tipo_movimentacao == 'ENTRADA':
        nova_quantidade = quantidade_anterior + quantidade
    elif tipo_movimentacao == 'SAIDA':
        if quantidade_anterior < quantidade:
            raise ValueError(f"Estoque insuficiente. Dispon√≠vel: {quantidade_anterior}")
        nova_quantidade = quantidade_anterior - quantidade
    elif tipo_movimentacao == 'DEVOLUCAO':
        nova_quantidade = quantidade_anterior + quantidade
    elif tipo_movimentacao == 'AJUSTE':
        # Para ajuste, a quantidade √© o valor final desejado
        nova_quantidade = quantidade
        quantidade = nova_quantidade - quantidade_anterior  # Diferen√ßa para movimenta√ß√£o
    
    # Atualizar estoque
    produto.estoque_atual = nova_quantidade
    
    # Atualizar valor m√©dio se for entrada com valor
    valor_unitario = kwargs.get('valor_unitario')
    if tipo_movimentacao == 'ENTRADA' and valor_unitario:
        valor_total_anterior = quantidade_anterior * produto.valor_medio
        valor_total_entrada = quantidade * valor_unitario
        valor_total_novo = valor_total_anterior + valor_total_entrada
        
        if nova_quantidade > 0:
            produto.valor_medio = valor_total_novo / nova_quantidade
        
        produto.ultimo_valor_compra = valor_unitario
    
    # Criar movimenta√ß√£o
    movimentacao = MovimentacaoEstoque(
        produto_id=produto_id,
        tipo_movimentacao=tipo_movimentacao,
        quantidade=abs(quantidade),
        quantidade_anterior=quantidade_anterior,
        quantidade_posterior=nova_quantidade,
        valor_unitario=valor_unitario,
        valor_total=abs(quantidade) * valor_unitario if valor_unitario else None,
        data_movimentacao=kwargs.get('data_movimentacao', datetime.utcnow()),
        nota_fiscal_id=kwargs.get('nota_fiscal_id'),
        rdo_id=kwargs.get('rdo_id'),
        funcionario_id=kwargs.get('funcionario_id'),
        obra_id=kwargs.get('obra_id'),
        usuario_id=kwargs.get('usuario_id'),
        observacoes=kwargs.get('observacoes'),
        ip_address=kwargs.get('ip_address'),
        admin_id=produto.admin_id
    )
    
    db.session.add(movimentacao)
    db.session.commit()
    
    return movimentacao

def calcular_estoque_minimo_inteligente(produto_id, dias_historico=90):
    """Calcular estoque m√≠nimo baseado em IA"""
    produto = Produto.query.get(produto_id)
    if not produto:
        return 0
    
    # Buscar movimenta√ß√µes de sa√≠da dos √∫ltimos X dias
    data_inicio = datetime.utcnow() - timedelta(days=dias_historico)
    
    movimentacoes = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.produto_id == produto_id,
        MovimentacaoEstoque.tipo_movimentacao == 'SAIDA',
        MovimentacaoEstoque.data_movimentacao >= data_inicio
    ).all()
    
    if not movimentacoes:
        return produto.estoque_minimo or 10  # Valor padr√£o
    
    # Calcular consumo m√©dio di√°rio
    total_consumido = sum(mov.quantidade for mov in movimentacoes)
    consumo_medio_diario = total_consumido / dias_historico
    
    # Aplicar margem de seguran√ßa (30 dias de consumo)
    estoque_minimo_sugerido = consumo_medio_diario * 30
    
    # Considerar sazonalidade (picos de consumo)
    consumos_diarios = defaultdict(float)
    for mov in movimentacoes:
        data_mov = mov.data_movimentacao.date()
        consumos_diarios[data_mov] += mov.quantidade
    
    if consumos_diarios:
        consumos = list(consumos_diarios.values())
        consumo_maximo = max(consumos)
        
        # Se o pico for muito maior que a m√©dia, aumentar margem
        if consumo_maximo > (consumo_medio_diario * 2):
            estoque_minimo_sugerido *= 1.5
    
    return max(estoque_minimo_sugerido, 1)  # M√≠nimo de 1 unidade

def prever_ruptura_estoque(produto_id, dias_futuros=30):
    """Prever quando o estoque pode acabar"""
    produto = Produto.query.get(produto_id)
    if not produto:
        return None
    
    # Calcular consumo m√©dio dos √∫ltimos 30 dias
    data_inicio = datetime.utcnow() - timedelta(days=30)
    
    movimentacoes_saida = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.produto_id == produto_id,
        MovimentacaoEstoque.tipo_movimentacao == 'SAIDA',
        MovimentacaoEstoque.data_movimentacao >= data_inicio
    ).all()
    
    if not movimentacoes_saida:
        return None  # Sem hist√≥rico de consumo
    
    total_consumido = sum(mov.quantidade for mov in movimentacoes_saida)
    consumo_medio_diario = total_consumido / 30
    
    if consumo_medio_diario <= 0:
        return None
    
    # Calcular dias restantes
    dias_restantes = produto.estoque_atual / consumo_medio_diario
    
    if dias_restantes <= dias_futuros:
        data_ruptura = date.today() + timedelta(days=int(dias_restantes))
        return {
            'dias_restantes': int(dias_restantes),
            'data_ruptura': data_ruptura,
            'consumo_medio_diario': float(consumo_medio_diario),
            'confianca': 'alta' if len(movimentacoes_saida) >= 10 else 'baixa'
        }
    
    return None

# ===== FUN√á√ïES DE XML/NFe =====

def processar_xml_nfe(xml_content, admin_id, usuario_id):
    """Processar XML de nota fiscal eletr√¥nica"""
    try:
        # Calcular hash do XML para evitar duplicatas
        xml_hash = hashlib.sha256(xml_content.encode()).hexdigest()
        
        # Verificar se j√° foi processado
        nf_existente = NotaFiscal.query.filter_by(
            xml_hash=xml_hash,
            admin_id=admin_id
        ).first()
        
        if nf_existente:
            return {'erro': 'XML j√° foi processado anteriormente', 'nota_fiscal_id': nf_existente.id}
        
        # Fazer parsing do XML
        root = ET.fromstring(xml_content)
        
        # Namespace NFe
        ns = {'nfe': 'http://www.portalfiscal.inf.br/nfe'}
        
        # Extrair dados da nota fiscal
        inf_nfe = root.find('.//nfe:infNFe', ns)
        if inf_nfe is None:
            return {'erro': 'XML inv√°lido: n√£o √© uma NFe v√°lida'}
        
        chave_acesso = inf_nfe.get('Id', '').replace('NFe', '')
        
        # Dados do emitente (fornecedor)
        emit = inf_nfe.find('nfe:emit', ns)
        if emit is None:
            return {'erro': 'XML inv√°lido: dados do emitente n√£o encontrados'}
        
        cnpj_fornecedor = emit.find('nfe:CNPJ', ns)
        if cnpj_fornecedor is None:
            return {'erro': 'XML inv√°lido: CNPJ do fornecedor n√£o encontrado'}
        
        cnpj = cnpj_fornecedor.text
        
        # Buscar ou criar fornecedor
        fornecedor = Fornecedor.query.filter_by(
            cnpj=cnpj,
            admin_id=admin_id
        ).first()
        
        if not fornecedor:
            razao_social = emit.find('nfe:xNome', ns)
            nome_fantasia = emit.find('nfe:xFant', ns)
            
            fornecedor = Fornecedor(
                razao_social=razao_social.text if razao_social is not None else 'N√£o informado',
                nome_fantasia=nome_fantasia.text if nome_fantasia is not None else None,
                cnpj=cnpj,
                admin_id=admin_id
            )
            db.session.add(fornecedor)
            db.session.flush()
        
        # Dados da nota fiscal
        ide = inf_nfe.find('nfe:ide', ns)
        numero_nf = ide.find('nfe:nNF', ns).text
        serie_nf = ide.find('nfe:serie', ns).text
        data_emissao = datetime.strptime(ide.find('nfe:dhEmi', ns).text[:10], '%Y-%m-%d').date()
        
        # Valores totais
        total = inf_nfe.find('nfe:total/nfe:ICMSTot', ns)
        valor_produtos = Decimal(total.find('nfe:vProd', ns).text)
        valor_frete = Decimal(total.find('nfe:vFrete', ns).text or '0')
        valor_desconto = Decimal(total.find('nfe:vDesc', ns).text or '0')
        valor_total = Decimal(total.find('nfe:vNF', ns).text)
        
        # Criar nota fiscal
        nota_fiscal = NotaFiscal(
            numero=numero_nf,
            serie=serie_nf,
            chave_acesso=chave_acesso,
            fornecedor_id=fornecedor.id,
            data_emissao=data_emissao,
            valor_produtos=valor_produtos,
            valor_frete=valor_frete,
            valor_desconto=valor_desconto,
            valor_total=valor_total,
            xml_content=xml_content,
            xml_hash=xml_hash,
            status='Pendente',
            admin_id=admin_id
        )
        
        db.session.add(nota_fiscal)
        db.session.flush()
        
        # Extrair produtos
        produtos_xml = []
        detalhes = inf_nfe.findall('nfe:det', ns)
        
        for det in detalhes:
            prod = det.find('nfe:prod', ns)
            
            codigo_produto = prod.find('nfe:cProd', ns).text
            codigo_barras = prod.find('nfe:cEAN', ns)
            nome_produto = prod.find('nfe:xProd', ns).text
            unidade = prod.find('nfe:uCom', ns).text
            quantidade = Decimal(prod.find('nfe:qCom', ns).text)
            valor_unitario = Decimal(prod.find('nfe:vUnCom', ns).text)
            
            produtos_xml.append({
                'codigo_produto': codigo_produto,
                'codigo_barras': codigo_barras.text if codigo_barras is not None else None,
                'nome': nome_produto,
                'unidade': unidade,
                'quantidade': quantidade,
                'valor_unitario': valor_unitario,
                'valor_total': quantidade * valor_unitario
            })
        
        db.session.commit()
        
        return {
            'sucesso': True,
            'nota_fiscal_id': nota_fiscal.id,
            'fornecedor': {
                'id': fornecedor.id,
                'razao_social': fornecedor.razao_social,
                'cnpj': fornecedor.cnpj
            },
            'produtos': produtos_xml,
            'resumo': {
                'numero': numero_nf,
                'serie': serie_nf,
                'data_emissao': data_emissao.isoformat(),
                'valor_total': float(valor_total),
                'quantidade_produtos': len(produtos_xml)
            }
        }
        
    except ET.ParseError:
        return {'erro': 'XML inv√°lido: erro de formata√ß√£o'}
    except Exception as e:
        return {'erro': f'Erro ao processar XML: {str(e)}'}

def processar_produtos_nfe(nota_fiscal_id, produtos_mapeamento, admin_id, usuario_id):
    """Processar produtos da NFe e criar movimenta√ß√µes de entrada"""
    nota_fiscal = NotaFiscal.query.get(nota_fiscal_id)
    if not nota_fiscal:
        return {'erro': 'Nota fiscal n√£o encontrada'}
    
    if nota_fiscal.status == 'Processada':
        return {'erro': 'Nota fiscal j√° foi processada'}
    
    try:
        movimentacoes_criadas = []
        
        for item in produtos_mapeamento:
            produto_id = item.get('produto_id')
            quantidade = Decimal(str(item.get('quantidade', 0)))
            valor_unitario = Decimal(str(item.get('valor_unitario', 0)))
            criar_produto = item.get('criar_produto', False)
            
            # Se deve criar produto novo
            if criar_produto:
                categoria_id = item.get('categoria_id')
                if not categoria_id:
                    return {'erro': 'Categoria √© obrigat√≥ria para criar novo produto'}
                
                categoria = CategoriaProduto.query.get(categoria_id)
                if not categoria:
                    return {'erro': 'Categoria n√£o encontrada'}
                
                # Criar novo produto
                codigo_interno = gerar_codigo_interno(admin_id, categoria.codigo)
                
                produto = Produto(
                    codigo_interno=codigo_interno,
                    codigo_barras=item.get('codigo_barras'),
                    nome=item.get('nome'),
                    descricao=item.get('descricao', ''),
                    categoria_id=categoria_id,
                    unidade_medida=item.get('unidade_medida', 'UN'),
                    estoque_minimo=Decimal(str(item.get('estoque_minimo', 10))),
                    valor_medio=valor_unitario,
                    ultimo_valor_compra=valor_unitario,
                    admin_id=admin_id
                )
                
                db.session.add(produto)
                db.session.flush()
                produto_id = produto.id
            
            # Criar movimenta√ß√£o de entrada
            if produto_id and quantidade > 0:
                movimentacao = atualizar_estoque_produto(
                    produto_id=produto_id,
                    quantidade=quantidade,
                    tipo_movimentacao='ENTRADA',
                    valor_unitario=valor_unitario,
                    nota_fiscal_id=nota_fiscal_id,
                    usuario_id=usuario_id,
                    observacoes=f'Entrada via NFe {nota_fiscal.numero_formatado}'
                )
                
                movimentacoes_criadas.append(movimentacao)
        
        # Marcar nota fiscal como processada
        nota_fiscal.status = 'Processada'
        nota_fiscal.processada_por_id = usuario_id
        nota_fiscal.data_processamento = datetime.utcnow()
        nota_fiscal.data_entrada = date.today()
        
        db.session.commit()
        
        return {
            'sucesso': True,
            'movimentacoes_criadas': len(movimentacoes_criadas),
            'nota_fiscal_id': nota_fiscal_id
        }
        
    except Exception as e:
        db.session.rollback()
        return {'erro': f'Erro ao processar produtos: {str(e)}'}

# ===== FUN√á√ïES DE RELAT√ìRIOS =====

def gerar_relatorio_estoque(admin_id, filtros=None):
    """Gerar relat√≥rio completo de estoque"""
    query = Produto.query.filter_by(admin_id=admin_id, ativo=True)
    
    # Aplicar filtros
    if filtros:
        if filtros.get('categoria_id'):
            query = query.filter_by(categoria_id=filtros['categoria_id'])
        
        if filtros.get('status_estoque'):
            status = filtros['status_estoque']
            if status == 'BAIXO':
                query = query.filter(Produto.estoque_atual <= Produto.estoque_minimo)
            elif status == 'CRITICO':
                query = query.filter(Produto.estoque_atual <= (Produto.estoque_minimo * 0.5))
            elif status == 'ZERADO':
                query = query.filter(Produto.estoque_atual <= 0)
    
    produtos = query.order_by(Produto.nome).all()
    
    relatorio = {
        'produtos': [],
        'resumo': {
            'total_produtos': len(produtos),
            'valor_total_estoque': 0,
            'produtos_baixo_estoque': 0,
            'produtos_criticos': 0,
            'produtos_zerados': 0
        }
    }
    
    for produto in produtos:
        item = {
            'id': produto.id,
            'codigo_interno': produto.codigo_interno,
            'nome': produto.nome,
            'categoria': produto.categoria.nome,
            'unidade_medida': produto.unidade_medida,
            'estoque_atual': float(produto.estoque_atual),
            'estoque_minimo': float(produto.estoque_minimo),
            'valor_medio': float(produto.valor_medio),
            'valor_estoque': float(produto.valor_estoque_atual),
            'status_estoque': produto.status_estoque
        }
        
        relatorio['produtos'].append(item)
        relatorio['resumo']['valor_total_estoque'] += item['valor_estoque']
        
        if produto.status_estoque == 'BAIXO':
            relatorio['resumo']['produtos_baixo_estoque'] += 1
        elif produto.status_estoque == 'CRITICO':
            relatorio['resumo']['produtos_criticos'] += 1
        elif produto.status_estoque == 'ZERADO':
            relatorio['resumo']['produtos_zerados'] += 1
    
    return relatorio

def gerar_relatorio_movimentacoes(admin_id, data_inicio, data_fim, filtros=None):
    """Gerar relat√≥rio de movimenta√ß√µes por per√≠odo"""
    query = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.admin_id == admin_id,
        MovimentacaoEstoque.data_movimentacao.between(data_inicio, data_fim)
    )
    
    # Aplicar filtros
    if filtros:
        if filtros.get('produto_id'):
            query = query.filter_by(produto_id=filtros['produto_id'])
        
        if filtros.get('tipo_movimentacao'):
            query = query.filter_by(tipo_movimentacao=filtros['tipo_movimentacao'])
        
        if filtros.get('obra_id'):
            query = query.filter_by(obra_id=filtros['obra_id'])
        
        if filtros.get('funcionario_id'):
            query = query.filter_by(funcionario_id=filtros['funcionario_id'])
    
    movimentacoes = query.order_by(MovimentacaoEstoque.data_movimentacao.desc()).all()
    
    relatorio = {
        'movimentacoes': [mov.to_dict() for mov in movimentacoes],
        'resumo': {
            'total_movimentacoes': len(movimentacoes),
            'entradas': 0,
            'saidas': 0,
            'devolucoes': 0,
            'valor_total_entradas': 0,
            'valor_total_saidas': 0
        }
    }
    
    for mov in movimentacoes:
        if mov.tipo_movimentacao == 'ENTRADA':
            relatorio['resumo']['entradas'] += 1
            if mov.valor_total:
                relatorio['resumo']['valor_total_entradas'] += float(mov.valor_total)
        elif mov.tipo_movimentacao == 'SAIDA':
            relatorio['resumo']['saidas'] += 1
            if mov.valor_total:
                relatorio['resumo']['valor_total_saidas'] += float(mov.valor_total)
        elif mov.tipo_movimentacao == 'DEVOLUCAO':
            relatorio['resumo']['devolucoes'] += 1
    
    return relatorio

def gerar_relatorio_consumo_obra(obra_id, data_inicio=None, data_fim=None):
    """Gerar relat√≥rio de consumo de materiais por obra"""
    query = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.obra_id == obra_id,
        MovimentacaoEstoque.tipo_movimentacao == 'SAIDA'
    )
    
    if data_inicio and data_fim:
        query = query.filter(MovimentacaoEstoque.data_movimentacao.between(data_inicio, data_fim))
    
    movimentacoes = query.all()
    
    # Agrupar por produto
    consumo_por_produto = defaultdict(lambda: {
        'quantidade_total': 0,
        'valor_total': 0,
        'movimentacoes': []
    })
    
    for mov in movimentacoes:
        produto_nome = mov.produto.nome
        consumo_por_produto[produto_nome]['quantidade_total'] += mov.quantidade
        if mov.valor_total:
            consumo_por_produto[produto_nome]['valor_total'] += mov.valor_total
        consumo_por_produto[produto_nome]['movimentacoes'].append(mov.to_dict())
    
    obra = Obra.query.get(obra_id)
    
    return {
        'obra': {
            'id': obra.id,
            'nome': obra.nome,
            'codigo': obra.codigo
        },
        'periodo': {
            'data_inicio': data_inicio.isoformat() if data_inicio else None,
            'data_fim': data_fim.isoformat() if data_fim else None
        },
        'consumo_por_produto': dict(consumo_por_produto),
        'resumo': {
            'produtos_utilizados': len(consumo_por_produto),
            'valor_total_consumido': sum(item['valor_total'] for item in consumo_por_produto.values()),
            'total_movimentacoes': len(movimentacoes)
        }
    }

# ===== FUN√á√ïES DE INTEGRA√á√ÉO COM RDO =====

def obter_materiais_rdo(rdo_id):
    """Obter materiais lan√ßados em um RDO espec√≠fico"""
    movimentacoes = MovimentacaoEstoque.query.filter_by(
        rdo_id=rdo_id,
        tipo_movimentacao='SAIDA'
    ).all()
    
    materiais = []
    for mov in movimentacoes:
        materiais.append({
            'id': mov.id,
            'produto_id': mov.produto_id,
            'produto_nome': mov.produto.nome,
            'produto_unidade': mov.produto.unidade_medida,
            'quantidade': float(mov.quantidade),
            'valor_unitario': float(mov.valor_unitario) if mov.valor_unitario else None,
            'valor_total': float(mov.valor_total) if mov.valor_total else None,
            'data_lancamento': mov.data_movimentacao.isoformat(),
            'usuario_nome': mov.usuario.nome if mov.usuario else None,
            'observacoes': mov.observacoes
        })
    
    return materiais

def lancar_material_rdo(rdo_id, produto_id, quantidade, usuario_id, observacoes=None):
    """Lan√ßar material em um RDO espec√≠fico"""
    # Validar RDO
    rdo = RDO.query.get(rdo_id)
    if not rdo:
        raise ValueError("RDO n√£o encontrado")
    
    # Validar produto
    produto = Produto.query.get(produto_id)
    if not produto:
        raise ValueError("Produto n√£o encontrado")
    
    # Obter dados da obra e funcion√°rio atrav√©s da aloca√ß√£o
    alocacao = AlocacaoEquipe.query.filter_by(rdo_gerado_id=rdo_id).first()
    funcionario_id = alocacao.funcionario_id if alocacao else None
    obra_id = rdo.obra_id
    
    # Criar movimenta√ß√£o de sa√≠da
    movimentacao = atualizar_estoque_produto(
        produto_id=produto_id,
        quantidade=quantidade,
        tipo_movimentacao='SAIDA',
        rdo_id=rdo_id,
        funcionario_id=funcionario_id,
        obra_id=obra_id,
        usuario_id=usuario_id,
        observacoes=observacoes or f'Material usado no RDO {rdo.numero_rdo}'
    )
    
    return movimentacao

def processar_devolucao_rdo(rdo_id, devolucoes, usuario_id):
    """Processar devolu√ß√£o de materiais de um RDO"""
    movimentacoes_devolucao = []
    
    for item in devolucoes:
        produto_id = item.get('produto_id')
        quantidade_devolvida = item.get('quantidade')
        observacoes = item.get('observacoes', '')
        
        if quantidade_devolvida > 0:
            # Obter dados da obra
            rdo = RDO.query.get(rdo_id)
            alocacao = AlocacaoEquipe.query.filter_by(rdo_gerado_id=rdo_id).first()
            funcionario_id = alocacao.funcionario_id if alocacao else None
            
            movimentacao = atualizar_estoque_produto(
                produto_id=produto_id,
                quantidade=quantidade_devolvida,
                tipo_movimentacao='DEVOLUCAO',
                rdo_id=rdo_id,
                funcionario_id=funcionario_id,
                obra_id=rdo.obra_id,
                usuario_id=usuario_id,
                observacoes=f'Devolu√ß√£o do RDO {rdo.numero_rdo}. {observacoes}'.strip()
            )
            
            movimentacoes_devolucao.append(movimentacao)
    
    return movimentacoes_devolucao
```


### **PASSO 5: Rotas Principais do Almoxarifado (ADICIONAR EM views.py)**

```python
# ===== M√ìDULO 4: ALMOXARIFADO INTELIGENTE - ROTAS PRINCIPAIS =====
# ADICIONAR estas rotas no Blueprint main_bp existente

from datetime import date, datetime, timedelta
from flask import jsonify, request, render_template, flash, redirect, url_for
from werkzeug.utils import secure_filename
from auth import almoxarife_required, pode_gerenciar_almoxarifado, pode_lancar_materiais
import os
import json

@main_bp.route('/almoxarifado')
@almoxarife_required
def almoxarifado_dashboard():
    """Dashboard principal do almoxarifado"""
    admin_id = get_tenant_filter()
    
    # Estat√≠sticas principais
    total_produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).count()
    
    produtos_baixo_estoque = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.ativo == True,
        Produto.estoque_atual <= Produto.estoque_minimo
    ).count()
    
    produtos_criticos = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.ativo == True,
        Produto.estoque_atual <= (Produto.estoque_minimo * 0.5)
    ).count()
    
    # Valor total do estoque
    produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).all()
    valor_total_estoque = sum(p.valor_estoque_atual for p in produtos)
    
    # Movimenta√ß√µes do dia
    hoje = date.today()
    movimentacoes_hoje = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.admin_id == admin_id,
        MovimentacaoEstoque.data_movimentacao >= datetime.combine(hoje, datetime.min.time())
    ).count()
    
    # Notas fiscais pendentes
    nfs_pendentes = NotaFiscal.query.filter_by(
        admin_id=admin_id,
        status='Pendente'
    ).count()
    
    # Produtos com maior movimenta√ß√£o (√∫ltimos 30 dias)
    data_inicio = datetime.utcnow() - timedelta(days=30)
    produtos_mais_movimentados = db.session.query(
        Produto.nome,
        db.func.sum(MovimentacaoEstoque.quantidade).label('total_movimentado')
    ).join(MovimentacaoEstoque).filter(
        MovimentacaoEstoque.admin_id == admin_id,
        MovimentacaoEstoque.data_movimentacao >= data_inicio,
        MovimentacaoEstoque.tipo_movimentacao == 'SAIDA'
    ).group_by(Produto.id, Produto.nome).order_by(
        db.func.sum(MovimentacaoEstoque.quantidade).desc()
    ).limit(10).all()
    
    # Alertas de estoque
    alertas = []
    
    # Produtos com estoque zerado
    produtos_zerados = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.ativo == True,
        Produto.estoque_atual <= 0
    ).limit(5).all()
    
    for produto in produtos_zerados:
        alertas.append({
            'tipo': 'danger',
            'titulo': 'Estoque Zerado',
            'mensagem': f'{produto.nome} est√° sem estoque',
            'produto_id': produto.id
        })
    
    # Produtos com estoque baixo
    produtos_baixo = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.ativo == True,
        Produto.estoque_atual > 0,
        Produto.estoque_atual <= Produto.estoque_minimo
    ).limit(5).all()
    
    for produto in produtos_baixo:
        alertas.append({
            'tipo': 'warning',
            'titulo': 'Estoque Baixo',
            'mensagem': f'{produto.nome} est√° com estoque baixo ({produto.estoque_atual} {produto.unidade_medida})',
            'produto_id': produto.id
        })
    
    return render_template('almoxarifado/dashboard.html',
                         total_produtos=total_produtos,
                         produtos_baixo_estoque=produtos_baixo_estoque,
                         produtos_criticos=produtos_criticos,
                         valor_total_estoque=valor_total_estoque,
                         movimentacoes_hoje=movimentacoes_hoje,
                         nfs_pendentes=nfs_pendentes,
                         produtos_mais_movimentados=produtos_mais_movimentados,
                         alertas=alertas)

@main_bp.route('/almoxarifado/produtos')
@almoxarife_required
def almoxarifado_produtos():
    """Lista de produtos do almoxarifado"""
    admin_id = get_tenant_filter()
    
    # Filtros
    categoria_id = request.args.get('categoria_id', type=int)
    status_estoque = request.args.get('status_estoque')
    busca = request.args.get('busca', '').strip()
    
    # Query base
    query = Produto.query.filter_by(admin_id=admin_id, ativo=True)
    
    # Aplicar filtros
    if categoria_id:
        query = query.filter_by(categoria_id=categoria_id)
    
    if status_estoque:
        if status_estoque == 'BAIXO':
            query = query.filter(Produto.estoque_atual <= Produto.estoque_minimo)
        elif status_estoque == 'CRITICO':
            query = query.filter(Produto.estoque_atual <= (Produto.estoque_minimo * 0.5))
        elif status_estoque == 'ZERADO':
            query = query.filter(Produto.estoque_atual <= 0)
    
    if busca:
        query = query.filter(
            db.or_(
                Produto.nome.ilike(f'%{busca}%'),
                Produto.codigo_interno.ilike(f'%{busca}%'),
                Produto.codigo_barras.ilike(f'%{busca}%')
            )
        )
    
    produtos = query.order_by(Produto.nome).all()
    
    # Categorias para filtro
    categorias = CategoriaProduto.query.filter_by(admin_id=admin_id).order_by(CategoriaProduto.nome).all()
    
    return render_template('almoxarifado/produtos.html',
                         produtos=produtos,
                         categorias=categorias,
                         filtros={
                             'categoria_id': categoria_id,
                             'status_estoque': status_estoque,
                             'busca': busca
                         })

@main_bp.route('/almoxarifado/produto/novo', methods=['GET', 'POST'])
@almoxarife_required
def almoxarifado_produto_novo():
    """Criar novo produto"""
    admin_id = get_tenant_filter()
    
    if request.method == 'POST':
        try:
            # Dados do formul√°rio
            nome = request.form.get('nome', '').strip()
            descricao = request.form.get('descricao', '').strip()
            categoria_id = request.form.get('categoria_id', type=int)
            codigo_barras = request.form.get('codigo_barras', '').strip()
            unidade_medida = request.form.get('unidade_medida', '').strip()
            estoque_minimo = request.form.get('estoque_minimo', type=float, default=0)
            estoque_inicial = request.form.get('estoque_inicial', type=float, default=0)
            valor_unitario = request.form.get('valor_unitario', type=float, default=0)
            
            # Valida√ß√µes
            if not nome:
                flash('Nome do produto √© obrigat√≥rio', 'danger')
                raise ValueError('Nome obrigat√≥rio')
            
            if not categoria_id:
                flash('Categoria √© obrigat√≥ria', 'danger')
                raise ValueError('Categoria obrigat√≥ria')
            
            categoria = CategoriaProduto.query.filter_by(id=categoria_id, admin_id=admin_id).first()
            if not categoria:
                flash('Categoria n√£o encontrada', 'danger')
                raise ValueError('Categoria inv√°lida')
            
            # Validar c√≥digo de barras se fornecido
            if codigo_barras and not validar_codigo_barras(codigo_barras):
                flash('C√≥digo de barras inv√°lido', 'danger')
                raise ValueError('C√≥digo de barras inv√°lido')
            
            # Verificar se c√≥digo de barras j√° existe
            if codigo_barras:
                produto_existente = Produto.query.filter_by(
                    codigo_barras=codigo_barras,
                    admin_id=admin_id
                ).first()
                if produto_existente:
                    flash('C√≥digo de barras j√° cadastrado', 'danger')
                    raise ValueError('C√≥digo de barras duplicado')
            
            # Gerar c√≥digo interno
            codigo_interno = gerar_codigo_interno(admin_id, categoria.codigo)
            
            # Criar produto
            produto = Produto(
                codigo_interno=codigo_interno,
                codigo_barras=codigo_barras or None,
                nome=nome,
                descricao=descricao,
                categoria_id=categoria_id,
                unidade_medida=unidade_medida,
                estoque_minimo=estoque_minimo,
                estoque_atual=estoque_inicial,
                valor_medio=valor_unitario,
                ultimo_valor_compra=valor_unitario if valor_unitario > 0 else None,
                admin_id=admin_id
            )
            
            db.session.add(produto)
            db.session.flush()
            
            # Se tem estoque inicial, criar movimenta√ß√£o de entrada
            if estoque_inicial > 0:
                atualizar_estoque_produto(
                    produto_id=produto.id,
                    quantidade=estoque_inicial,
                    tipo_movimentacao='ENTRADA',
                    valor_unitario=valor_unitario if valor_unitario > 0 else None,
                    usuario_id=current_user.id,
                    observacoes='Estoque inicial do produto'
                )
            
            db.session.commit()
            
            flash(f'Produto "{nome}" criado com sucesso!', 'success')
            return redirect(url_for('main.almoxarifado_produtos'))
            
        except Exception as e:
            db.session.rollback()
            if 'flash' not in str(e):  # Se n√£o foi um erro j√° tratado com flash
                flash(f'Erro ao criar produto: {str(e)}', 'danger')
    
    # GET - mostrar formul√°rio
    categorias = CategoriaProduto.query.filter_by(admin_id=admin_id).order_by(CategoriaProduto.nome).all()
    
    return render_template('almoxarifado/produto_form.html',
                         categorias=categorias,
                         produto=None)

@main_bp.route('/almoxarifado/movimentacoes')
@almoxarife_required
def almoxarifado_movimentacoes():
    """Lista de movimenta√ß√µes do estoque"""
    admin_id = get_tenant_filter()
    
    # Filtros
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')
    produto_id = request.args.get('produto_id', type=int)
    tipo_movimentacao = request.args.get('tipo_movimentacao')
    obra_id = request.args.get('obra_id', type=int)
    
    # Datas padr√£o (√∫ltimos 30 dias)
    if not data_inicio:
        data_inicio = (date.today() - timedelta(days=30)).isoformat()
    if not data_fim:
        data_fim = date.today().isoformat()
    
    # Converter para datetime
    try:
        dt_inicio = datetime.strptime(data_inicio, '%Y-%m-%d')
        dt_fim = datetime.strptime(data_fim, '%Y-%m-%d') + timedelta(days=1)
    except:
        dt_inicio = datetime.utcnow() - timedelta(days=30)
        dt_fim = datetime.utcnow()
    
    # Query base
    query = MovimentacaoEstoque.query.filter(
        MovimentacaoEstoque.admin_id == admin_id,
        MovimentacaoEstoque.data_movimentacao.between(dt_inicio, dt_fim)
    )
    
    # Aplicar filtros
    if produto_id:
        query = query.filter_by(produto_id=produto_id)
    
    if tipo_movimentacao:
        query = query.filter_by(tipo_movimentacao=tipo_movimentacao)
    
    if obra_id:
        query = query.filter_by(obra_id=obra_id)
    
    movimentacoes = query.order_by(MovimentacaoEstoque.data_movimentacao.desc()).limit(500).all()
    
    # Dados para filtros
    produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).order_by(Produto.nome).all()
    obras = Obra.query.filter_by(admin_id=admin_id).order_by(Obra.nome).all()
    
    return render_template('almoxarifado/movimentacoes.html',
                         movimentacoes=movimentacoes,
                         produtos=produtos,
                         obras=obras,
                         filtros={
                             'data_inicio': data_inicio,
                             'data_fim': data_fim,
                             'produto_id': produto_id,
                             'tipo_movimentacao': tipo_movimentacao,
                             'obra_id': obra_id
                         })

@main_bp.route('/almoxarifado/entrada-manual', methods=['GET', 'POST'])
@almoxarife_required
def almoxarifado_entrada_manual():
    """Lan√ßamento manual de entrada de material"""
    admin_id = get_tenant_filter()
    
    if request.method == 'POST':
        try:
            produto_id = request.form.get('produto_id', type=int)
            quantidade = request.form.get('quantidade', type=float)
            valor_unitario = request.form.get('valor_unitario', type=float)
            observacoes = request.form.get('observacoes', '').strip()
            
            # Valida√ß√µes
            if not produto_id:
                flash('Produto √© obrigat√≥rio', 'danger')
                raise ValueError('Produto obrigat√≥rio')
            
            if not quantidade or quantidade <= 0:
                flash('Quantidade deve ser maior que zero', 'danger')
                raise ValueError('Quantidade inv√°lida')
            
            produto = Produto.query.filter_by(id=produto_id, admin_id=admin_id).first()
            if not produto:
                flash('Produto n√£o encontrado', 'danger')
                raise ValueError('Produto n√£o encontrado')
            
            # Criar movimenta√ß√£o
            movimentacao = atualizar_estoque_produto(
                produto_id=produto_id,
                quantidade=quantidade,
                tipo_movimentacao='ENTRADA',
                valor_unitario=valor_unitario if valor_unitario and valor_unitario > 0 else None,
                usuario_id=current_user.id,
                observacoes=observacoes or 'Entrada manual',
                ip_address=request.remote_addr
            )
            
            flash(f'Entrada registrada com sucesso! Novo estoque: {produto.estoque_atual} {produto.unidade_medida}', 'success')
            return redirect(url_for('main.almoxarifado_entrada_manual'))
            
        except Exception as e:
            db.session.rollback()
            if 'flash' not in str(e):
                flash(f'Erro ao registrar entrada: {str(e)}', 'danger')
    
    # GET - mostrar formul√°rio
    produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).order_by(Produto.nome).all()
    
    return render_template('almoxarifado/entrada_manual.html',
                         produtos=produtos)

@main_bp.route('/almoxarifado/saida-manual', methods=['GET', 'POST'])
@almoxarife_required
def almoxarifado_saida_manual():
    """Lan√ßamento manual de sa√≠da de material"""
    admin_id = get_tenant_filter()
    
    if request.method == 'POST':
        try:
            produto_id = request.form.get('produto_id', type=int)
            quantidade = request.form.get('quantidade', type=float)
            funcionario_id = request.form.get('funcionario_id', type=int)
            obra_id = request.form.get('obra_id', type=int)
            observacoes = request.form.get('observacoes', '').strip()
            
            # Valida√ß√µes
            if not produto_id:
                flash('Produto √© obrigat√≥rio', 'danger')
                raise ValueError('Produto obrigat√≥rio')
            
            if not quantidade or quantidade <= 0:
                flash('Quantidade deve ser maior que zero', 'danger')
                raise ValueError('Quantidade inv√°lida')
            
            produto = Produto.query.filter_by(id=produto_id, admin_id=admin_id).first()
            if not produto:
                flash('Produto n√£o encontrado', 'danger')
                raise ValueError('Produto n√£o encontrado')
            
            # Validar estoque dispon√≠vel
            if produto.estoque_atual < quantidade:
                flash(f'Estoque insuficiente. Dispon√≠vel: {produto.estoque_atual} {produto.unidade_medida}', 'danger')
                raise ValueError('Estoque insuficiente')
            
            # Criar movimenta√ß√£o
            movimentacao = atualizar_estoque_produto(
                produto_id=produto_id,
                quantidade=quantidade,
                tipo_movimentacao='SAIDA',
                funcionario_id=funcionario_id if funcionario_id else None,
                obra_id=obra_id if obra_id else None,
                usuario_id=current_user.id,
                observacoes=observacoes or 'Sa√≠da manual',
                ip_address=request.remote_addr
            )
            
            flash(f'Sa√≠da registrada com sucesso! Novo estoque: {produto.estoque_atual} {produto.unidade_medida}', 'success')
            return redirect(url_for('main.almoxarifado_saida_manual'))
            
        except Exception as e:
            db.session.rollback()
            if 'flash' not in str(e):
                flash(f'Erro ao registrar sa√≠da: {str(e)}', 'danger')
    
    # GET - mostrar formul√°rio
    produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).order_by(Produto.nome).all()
    funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).order_by(Funcionario.nome).all()
    obras = Obra.query.filter_by(admin_id=admin_id, status='Em Andamento').order_by(Obra.nome).all()
    
    return render_template('almoxarifado/saida_manual.html',
                         produtos=produtos,
                         funcionarios=funcionarios,
                         obras=obras)

@main_bp.route('/almoxarifado/importar-xml', methods=['GET', 'POST'])
@almoxarife_required
def almoxarifado_importar_xml():
    """Importar XML de nota fiscal"""
    admin_id = get_tenant_filter()
    
    if request.method == 'POST':
        try:
            # Verificar se arquivo foi enviado
            if 'arquivo_xml' not in request.files:
                flash('Nenhum arquivo selecionado', 'danger')
                raise ValueError('Arquivo n√£o enviado')
            
            arquivo = request.files['arquivo_xml']
            if arquivo.filename == '':
                flash('Nenhum arquivo selecionado', 'danger')
                raise ValueError('Arquivo vazio')
            
            # Validar extens√£o
            if not arquivo.filename.lower().endswith('.xml'):
                flash('Apenas arquivos XML s√£o permitidos', 'danger')
                raise ValueError('Extens√£o inv√°lida')
            
            # Ler conte√∫do do XML
            xml_content = arquivo.read().decode('utf-8')
            
            # Processar XML
            resultado = processar_xml_nfe(xml_content, admin_id, current_user.id)
            
            if 'erro' in resultado:
                flash(f'Erro ao processar XML: {resultado["erro"]}', 'danger')
                raise ValueError('Erro no processamento')
            
            # Sucesso - redirecionar para mapeamento de produtos
            flash('XML processado com sucesso! Agora mapeie os produtos.', 'success')
            return redirect(url_for('main.almoxarifado_mapear_produtos', nf_id=resultado['nota_fiscal_id']))
            
        except Exception as e:
            if 'flash' not in str(e):
                flash(f'Erro ao importar XML: {str(e)}', 'danger')
    
    # GET - mostrar formul√°rio
    return render_template('almoxarifado/importar_xml.html')

@main_bp.route('/almoxarifado/mapear-produtos/<int:nf_id>')
@almoxarife_required
def almoxarifado_mapear_produtos(nf_id):
    """Mapear produtos da nota fiscal"""
    admin_id = get_tenant_filter()
    
    # Buscar nota fiscal
    nota_fiscal = NotaFiscal.query.filter_by(id=nf_id, admin_id=admin_id).first()
    if not nota_fiscal:
        flash('Nota fiscal n√£o encontrada', 'danger')
        return redirect(url_for('main.almoxarifado_importar_xml'))
    
    if nota_fiscal.status == 'Processada':
        flash('Nota fiscal j√° foi processada', 'warning')
        return redirect(url_for('main.almoxarifado_notas_fiscais'))
    
    # Reprocessar XML para obter produtos
    resultado = processar_xml_nfe(nota_fiscal.xml_content, admin_id, current_user.id)
    
    if 'erro' in resultado:
        flash(f'Erro ao reprocessar XML: {resultado["erro"]}', 'danger')
        return redirect(url_for('main.almoxarifado_importar_xml'))
    
    produtos_xml = resultado['produtos']
    
    # Para cada produto do XML, tentar encontrar correspond√™ncia
    produtos_mapeados = []
    for produto_xml in produtos_xml:
        produto_encontrado = None
        
        # Buscar por c√≥digo de barras
        if produto_xml['codigo_barras']:
            produto_encontrado = Produto.query.filter_by(
                codigo_barras=produto_xml['codigo_barras'],
                admin_id=admin_id
            ).first()
        
        # Se n√£o encontrou, buscar por nome similar
        if not produto_encontrado:
            produtos_similares = Produto.query.filter(
                Produto.admin_id == admin_id,
                Produto.nome.ilike(f'%{produto_xml["nome"][:20]}%')
            ).limit(3).all()
        else:
            produtos_similares = []
        
        produtos_mapeados.append({
            'xml': produto_xml,
            'produto_encontrado': produto_encontrado,
            'produtos_similares': produtos_similares
        })
    
    # Categorias para criar novos produtos
    categorias = CategoriaProduto.query.filter_by(admin_id=admin_id).order_by(CategoriaProduto.nome).all()
    
    return render_template('almoxarifado/mapear_produtos.html',
                         nota_fiscal=nota_fiscal,
                         produtos_mapeados=produtos_mapeados,
                         categorias=categorias)

# ===== APIs PARA INTERFACE DIN√ÇMICA =====

@main_bp.route('/api/almoxarifado/buscar-produto')
@almoxarife_required
def api_buscar_produto():
    """API para buscar produto por c√≥digo de barras ou nome"""
    admin_id = get_tenant_filter()
    termo = request.args.get('termo', '').strip()
    
    if not termo:
        return jsonify([])
    
    # Buscar por c√≥digo de barras primeiro
    produto = Produto.query.filter_by(
        codigo_barras=termo,
        admin_id=admin_id,
        ativo=True
    ).first()
    
    if produto:
        return jsonify([produto.to_dict()])
    
    # Buscar por c√≥digo interno
    produto = Produto.query.filter_by(
        codigo_interno=termo,
        admin_id=admin_id,
        ativo=True
    ).first()
    
    if produto:
        return jsonify([produto.to_dict()])
    
    # Buscar por nome (m√°ximo 10 resultados)
    produtos = Produto.query.filter(
        Produto.admin_id == admin_id,
        Produto.ativo == True,
        Produto.nome.ilike(f'%{termo}%')
    ).order_by(Produto.nome).limit(10).all()
    
    return jsonify([p.to_dict() for p in produtos])

@main_bp.route('/api/almoxarifado/produto/<int:produto_id>')
@almoxarife_required
def api_produto_detalhes(produto_id):
    """API para obter detalhes de um produto"""
    admin_id = get_tenant_filter()
    
    produto = Produto.query.filter_by(
        id=produto_id,
        admin_id=admin_id
    ).first()
    
    if not produto:
        return jsonify({'erro': 'Produto n√£o encontrado'}), 404
    
    # √öltimas movimenta√ß√µes
    ultimas_movimentacoes = MovimentacaoEstoque.query.filter_by(
        produto_id=produto_id
    ).order_by(MovimentacaoEstoque.data_movimentacao.desc()).limit(10).all()
    
    # Previs√£o de ruptura
    previsao_ruptura = prever_ruptura_estoque(produto_id)
    
    return jsonify({
        'produto': produto.to_dict(),
        'ultimas_movimentacoes': [mov.to_dict() for mov in ultimas_movimentacoes],
        'previsao_ruptura': previsao_ruptura,
        'estoque_minimo_sugerido': float(calcular_estoque_minimo_inteligente(produto_id))
    })

@main_bp.route('/api/almoxarifado/validar-codigo-barras')
@almoxarife_required
def api_validar_codigo_barras():
    """API para validar c√≥digo de barras"""
    codigo = request.args.get('codigo', '').strip()
    
    if not codigo:
        return jsonify({'valido': False, 'erro': 'C√≥digo n√£o fornecido'})
    
    valido = validar_codigo_barras(codigo)
    
    if valido:
        # Verificar se j√° existe no sistema
        admin_id = get_tenant_filter()
        produto_existente = Produto.query.filter_by(
            codigo_barras=codigo,
            admin_id=admin_id
        ).first()
        
        return jsonify({
            'valido': True,
            'existe': produto_existente is not None,
            'produto': produto_existente.to_dict() if produto_existente else None
        })
    else:
        return jsonify({'valido': False, 'erro': 'C√≥digo de barras inv√°lido'})

@main_bp.route('/api/almoxarifado/processar-produtos-nfe', methods=['POST'])
@almoxarife_required
def api_processar_produtos_nfe():
    """API para processar produtos mapeados da NFe"""
    try:
        data = request.get_json()
        nf_id = data.get('nota_fiscal_id')
        produtos_mapeamento = data.get('produtos', [])
        
        admin_id = get_tenant_filter()
        
        resultado = processar_produtos_nfe(nf_id, produtos_mapeamento, admin_id, current_user.id)
        
        if 'erro' in resultado:
            return jsonify(resultado), 400
        
        return jsonify(resultado)
        
    except Exception as e:
        return jsonify({'erro': f'Erro interno: {str(e)}'}), 500

# ===== INTEGRA√á√ÉO COM RDO =====

@main_bp.route('/rdo/<int:rdo_id>/materiais')
@almoxarife_required
def rdo_materiais(rdo_id):
    """Aba de materiais do RDO (integra√ß√£o com M√≥dulo 3)"""
    admin_id = get_tenant_filter()
    
    # Verificar se RDO existe e pertence ao admin
    rdo = RDO.query.filter_by(id=rdo_id, admin_id=admin_id).first()
    if not rdo:
        flash('RDO n√£o encontrado', 'danger')
        return redirect(url_for('main.gestao_equipes_dashboard'))
    
    # Obter materiais j√° lan√ßados
    materiais_lancados = obter_materiais_rdo(rdo_id)
    
    # Produtos dispon√≠veis para lan√ßamento
    produtos = Produto.query.filter_by(admin_id=admin_id, ativo=True).order_by(Produto.nome).all()
    
    return render_template('almoxarifado/rdo_materiais.html',
                         rdo=rdo,
                         materiais_lancados=materiais_lancados,
                         produtos=produtos)

@main_bp.route('/api/rdo/<int:rdo_id>/lancar-material', methods=['POST'])
@almoxarife_required
def api_rdo_lancar_material(rdo_id):
    """API para lan√ßar material em RDO"""
    try:
        data = request.get_json()
        produto_id = data.get('produto_id')
        quantidade = data.get('quantidade')
        observacoes = data.get('observacoes', '')
        
        # Valida√ß√µes
        if not produto_id or not quantidade:
            return jsonify({'erro': 'Produto e quantidade s√£o obrigat√≥rios'}), 400
        
        if quantidade <= 0:
            return jsonify({'erro': 'Quantidade deve ser maior que zero'}), 400
        
        # Lan√ßar material
        movimentacao = lancar_material_rdo(
            rdo_id=rdo_id,
            produto_id=produto_id,
            quantidade=quantidade,
            usuario_id=current_user.id,
            observacoes=observacoes
        )
        
        return jsonify({
            'sucesso': True,
            'movimentacao': movimentacao.to_dict(),
            'message': 'Material lan√ßado com sucesso!'
        })
        
    except ValueError as e:
        return jsonify({'erro': str(e)}), 400
    except Exception as e:
        return jsonify({'erro': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/rdo/<int:rdo_id>/processar-devolucao', methods=['POST'])
@almoxarife_required
def api_rdo_processar_devolucao(rdo_id):
    """API para processar devolu√ß√£o de materiais do RDO"""
    try:
        data = request.get_json()
        devolucoes = data.get('devolucoes', [])
        
        if not devolucoes:
            return jsonify({'erro': 'Nenhuma devolu√ß√£o informada'}), 400
        
        movimentacoes = processar_devolucao_rdo(rdo_id, devolucoes, current_user.id)
        
        return jsonify({
            'sucesso': True,
            'movimentacoes_criadas': len(movimentacoes),
            'message': f'{len(movimentacoes)} devolu√ß√£o(√µes) processada(s) com sucesso!'
        })
        
    except Exception as e:
        return jsonify({'erro': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/almoxarifado/materiais-rdo/<int:rdo_id>')
@almoxarife_required
def api_materiais_rdo(rdo_id):
    """API para obter materiais de um RDO"""
    materiais = obter_materiais_rdo(rdo_id)
    return jsonify(materiais)
```


### **PASSO 6: Templates da Interface (CRIAR EM templates/almoxarifado/)**

#### **Template Principal - Dashboard**
```html
<!-- templates/almoxarifado/dashboard.html -->
{% extends "base.html" %}
{% block title %}Almoxarifado{% endblock %}

{% block extra_css %}
<style>
    .card-stat { transition: transform 0.2s; }
    .card-stat:hover { transform: translateY(-2px); }
    .alerta-item { border-left: 4px solid; }
    .alerta-danger { border-left-color: #dc3545; }
    .alerta-warning { border-left-color: #ffc107; }
    .scanner-button { 
        background: linear-gradient(135deg, #28a745, #20c997);
        border: none;
        color: white;
        padding: 15px 30px;
        border-radius: 10px;
        font-size: 1.1em;
        transition: all 0.3s;
    }
    .scanner-button:hover {
        transform: scale(1.05);
        box-shadow: 0 5px 15px rgba(40, 167, 69, 0.3);
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h3><i class="fas fa-warehouse"></i> Almoxarifado Inteligente</h3>
                    <p class="text-muted mb-0">Controle total de estoque com c√≥digo de barras e IA</p>
                </div>
                <div>
                    <button class="scanner-button mr-2" onclick="abrirScanner()">
                        <i class="fas fa-qrcode"></i> Escanear C√≥digo
                    </button>
                    <div class="btn-group">
                        <a href="{{ url_for('main.almoxarifado_entrada_manual') }}" class="btn btn-success">
                            <i class="fas fa-plus"></i> Entrada
                        </a>
                        <a href="{{ url_for('main.almoxarifado_saida_manual') }}" class="btn btn-warning">
                            <i class="fas fa-minus"></i> Sa√≠da
                        </a>
                        <a href="{{ url_for('main.almoxarifado_importar_xml') }}" class="btn btn-info">
                            <i class="fas fa-file-upload"></i> Importar XML
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Cards de Estat√≠sticas -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card card-stat bg-primary text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ total_produtos }}</h4>
                            <small>Produtos Cadastrados</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-boxes fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card card-stat bg-warning text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ produtos_baixo_estoque }}</h4>
                            <small>Estoque Baixo</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-exclamation-triangle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card card-stat bg-danger text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">{{ produtos_criticos }}</h4>
                            <small>Estoque Cr√≠tico</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-times-circle fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-3">
            <div class="card card-stat bg-success text-white h-100">
                <div class="card-body">
                    <div class="d-flex align-items-center">
                        <div class="flex-grow-1">
                            <h4 class="mb-0">R$ {{ "%.2f"|format(valor_total_estoque) }}</h4>
                            <small>Valor Total Estoque</small>
                        </div>
                        <div class="ml-3">
                            <i class="fas fa-dollar-sign fa-2x opacity-75"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- A√ß√µes R√°pidas -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-bolt"></i> A√ß√µes R√°pidas
                    </h5>
                </div>
                <div class="card-body">
                    <div class="list-group list-group-flush">
                        <a href="#" onclick="abrirScanner()" class="list-group-item list-group-item-action">
                            <i class="fas fa-qrcode text-primary"></i>
                            <strong>Escanear C√≥digo de Barras</strong>
                            <small class="d-block text-muted">Buscar produto por c√≥digo</small>
                        </a>
                        
                        <a href="{{ url_for('main.almoxarifado_entrada_manual') }}" class="list-group-item list-group-item-action">
                            <i class="fas fa-plus text-success"></i>
                            <strong>Lan√ßar Entrada</strong>
                            <small class="d-block text-muted">Registrar entrada de material</small>
                        </a>
                        
                        <a href="{{ url_for('main.almoxarifado_saida_manual') }}" class="list-group-item list-group-item-action">
                            <i class="fas fa-minus text-warning"></i>
                            <strong>Lan√ßar Sa√≠da</strong>
                            <small class="d-block text-muted">Registrar sa√≠da de material</small>
                        </a>
                        
                        <a href="{{ url_for('main.almoxarifado_importar_xml') }}" class="list-group-item list-group-item-action">
                            <i class="fas fa-file-upload text-info"></i>
                            <strong>Importar XML NFe</strong>
                            <small class="d-block text-muted">Processar nota fiscal</small>
                        </a>
                        
                        <a href="{{ url_for('main.almoxarifado_produtos') }}" class="list-group-item list-group-item-action">
                            <i class="fas fa-list text-secondary"></i>
                            <strong>Ver Produtos</strong>
                            <small class="d-block text-muted">Listar todos os produtos</small>
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Alertas de Estoque -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-bell"></i> Alertas de Estoque
                    </h5>
                    <span class="badge badge-danger">{{ alertas|length }}</span>
                </div>
                <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                    {% if alertas %}
                        {% for alerta in alertas %}
                        <div class="alerta-item alerta-{{ alerta.tipo }} p-3 border-bottom">
                            <div class="d-flex align-items-start">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1">{{ alerta.titulo }}</h6>
                                    <p class="mb-0 text-muted small">{{ alerta.mensagem }}</p>
                                </div>
                                <div class="ml-2">
                                    <a href="{{ url_for('main.almoxarifado_produtos') }}?produto_id={{ alerta.produto_id }}" 
                                       class="btn btn-sm btn-outline-primary">
                                        <i class="fas fa-eye"></i>
                                    </a>
                                </div>
                            </div>
                        </div>
                        {% endfor %}
                    {% else %}
                    <div class="p-4 text-center text-muted">
                        <i class="fas fa-check-circle fa-3x mb-3"></i>
                        <p class="mb-0">Nenhum alerta no momento</p>
                        <small>Todos os produtos est√£o com estoque adequado</small>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>

        <!-- Produtos Mais Movimentados -->
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-chart-bar"></i> Mais Movimentados (30 dias)
                    </h5>
                </div>
                <div class="card-body p-0" style="max-height: 400px; overflow-y: auto;">
                    {% if produtos_mais_movimentados %}
                        {% for produto in produtos_mais_movimentados %}
                        <div class="d-flex align-items-center p-3 border-bottom">
                            <div class="flex-grow-1">
                                <h6 class="mb-1">{{ produto[0] }}</h6>
                                <div class="progress" style="height: 6px;">
                                    <div class="progress-bar bg-primary" 
                                         style="width: {{ (produto[1] / produtos_mais_movimentados[0][1] * 100) if produtos_mais_movimentados else 0 }}%"></div>
                                </div>
                            </div>
                            <div class="ml-3 text-right">
                                <strong>{{ produto[1] }}</strong>
                                <small class="d-block text-muted">unidades</small>
                            </div>
                        </div>
                        {% endfor %}
                    {% else %}
                    <div class="p-4 text-center text-muted">
                        <i class="fas fa-chart-bar fa-3x mb-3"></i>
                        <p class="mb-0">Sem movimenta√ß√µes</p>
                        <small>Nenhuma movimenta√ß√£o nos √∫ltimos 30 dias</small>
                    </div>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>

    <!-- Resumo de Atividades -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-clock"></i> Atividades de Hoje
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row text-center">
                        <div class="col-md-3">
                            <h4 class="text-primary">{{ movimentacoes_hoje }}</h4>
                            <small class="text-muted">Movimenta√ß√µes</small>
                        </div>
                        <div class="col-md-3">
                            <h4 class="text-warning">{{ nfs_pendentes }}</h4>
                            <small class="text-muted">NFes Pendentes</small>
                        </div>
                        <div class="col-md-3">
                            <h4 class="text-success">0</h4>
                            <small class="text-muted">Entradas</small>
                        </div>
                        <div class="col-md-3">
                            <h4 class="text-danger">0</h4>
                            <small class="text-muted">Sa√≠das</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Scanner -->
<div class="modal fade" id="modalScanner" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Scanner de C√≥digo de Barras</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <div id="scanner-container" style="width: 100%; height: 300px; background: #f8f9fa; border: 2px dashed #dee2e6; display: flex; align-items: center; justify-content: center;">
                            <div class="text-center">
                                <i class="fas fa-camera fa-3x text-muted mb-3"></i>
                                <p class="text-muted">Clique para ativar c√¢mera</p>
                                <button class="btn btn-primary" onclick="iniciarCamera()">
                                    <i class="fas fa-video"></i> Ativar C√¢mera
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="codigoManual">Ou digite o c√≥digo:</label>
                            <input type="text" id="codigoManual" class="form-control" 
                                   placeholder="Digite ou escaneie o c√≥digo de barras"
                                   onkeypress="if(event.key==='Enter') buscarProduto()">
                        </div>
                        
                        <button class="btn btn-success btn-block" onclick="buscarProduto()">
                            <i class="fas fa-search"></i> Buscar Produto
                        </button>
                        
                        <div id="resultado-busca" class="mt-3"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
function abrirScanner() {
    $('#modalScanner').modal('show');
}

function iniciarCamera() {
    // Implementar integra√ß√£o com c√¢mera
    // Por simplicidade, mostrar apenas input manual
    $('#scanner-container').html(`
        <video id="video" width="100%" height="300" autoplay style="border-radius: 8px;"></video>
    `);
    
    // Tentar acessar c√¢mera
    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        navigator.mediaDevices.getUserMedia({ video: true })
            .then(function(stream) {
                const video = document.getElementById('video');
                video.srcObject = stream;
                video.play();
            })
            .catch(function(err) {
                console.error('Erro ao acessar c√¢mera:', err);
                alert('Erro ao acessar c√¢mera. Use o campo manual.');
            });
    } else {
        alert('C√¢mera n√£o suportada neste navegador. Use o campo manual.');
    }
}

function buscarProduto() {
    const codigo = $('#codigoManual').val().trim();
    if (!codigo) {
        alert('Digite um c√≥digo para buscar');
        return;
    }
    
    $.get('/api/almoxarifado/buscar-produto', { termo: codigo })
        .done(function(produtos) {
            if (produtos.length > 0) {
                const produto = produtos[0];
                $('#resultado-busca').html(`
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">${produto.nome}</h6>
                            <p class="card-text">
                                <strong>C√≥digo:</strong> ${produto.codigo_interno}<br>
                                <strong>Estoque:</strong> ${produto.estoque_atual} ${produto.unidade_medida}<br>
                                <strong>Status:</strong> <span class="badge badge-${produto.status_estoque === 'OK' ? 'success' : 'warning'}">${produto.status_estoque}</span>
                            </p>
                            <div class="btn-group btn-group-sm">
                                <a href="/almoxarifado/entrada-manual?produto_id=${produto.id}" class="btn btn-success">
                                    <i class="fas fa-plus"></i> Entrada
                                </a>
                                <a href="/almoxarifado/saida-manual?produto_id=${produto.id}" class="btn btn-warning">
                                    <i class="fas fa-minus"></i> Sa√≠da
                                </a>
                            </div>
                        </div>
                    </div>
                `);
            } else {
                $('#resultado-busca').html(`
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        Produto n√£o encontrado. 
                        <a href="/almoxarifado/produto/novo?codigo_barras=${codigo}" class="alert-link">Cadastrar novo produto</a>
                    </div>
                `);
            }
        })
        .fail(function() {
            alert('Erro ao buscar produto');
        });
}

// Atualizar estat√≠sticas a cada 5 minutos
setInterval(function() {
    location.reload();
}, 300000);
</script>
{% endblock %}
```

#### **Template de Integra√ß√£o com RDO**
```html
<!-- templates/almoxarifado/rdo_materiais.html -->
{% extends "base.html" %}
{% block title %}Materiais - {{ rdo.numero_rdo }}{% endblock %}

{% block extra_css %}
<style>
    .material-item { 
        border-left: 4px solid #007bff; 
        transition: all 0.2s;
    }
    .material-item:hover { 
        background-color: #f8f9fa; 
        transform: translateX(5px);
    }
    .scanner-input {
        border: 2px solid #28a745;
        border-radius: 8px;
        font-size: 1.1em;
        padding: 12px;
    }
    .scanner-input:focus {
        border-color: #20c997;
        box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
    }
</style>
{% endblock %}

{% block content %}
<div class="container-fluid">
    <!-- Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h4><i class="fas fa-boxes"></i> Materiais - {{ rdo.numero_rdo }}</h4>
                    <p class="text-muted mb-0">
                        <strong>Obra:</strong> {{ rdo.obra.nome }} | 
                        <strong>Data:</strong> {{ rdo.data_relatorio.strftime('%d/%m/%Y') }}
                    </p>
                </div>
                <div>
                    <a href="{{ url_for('main.gestao_equipes_dashboard') }}" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Voltar para RDOs
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Lan√ßar Novo Material -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-plus"></i> Lan√ßar Material
                    </h5>
                </div>
                <div class="card-body">
                    <form id="formLancarMaterial">
                        <div class="form-group">
                            <label for="codigoScanner">C√≥digo de Barras</label>
                            <div class="input-group">
                                <input type="text" id="codigoScanner" class="form-control scanner-input" 
                                       placeholder="Escaneie ou digite o c√≥digo de barras"
                                       onkeypress="if(event.key==='Enter') buscarProdutoRDO()"
                                       autofocus>
                                <div class="input-group-append">
                                    <button class="btn btn-success" type="button" onclick="buscarProdutoRDO()">
                                        <i class="fas fa-search"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div id="produto-selecionado" style="display: none;">
                            <div class="form-group">
                                <label>Produto Selecionado</label>
                                <div id="info-produto" class="alert alert-info"></div>
                            </div>
                            
                            <div class="form-group">
                                <label for="quantidade">Quantidade *</label>
                                <div class="input-group">
                                    <input type="number" id="quantidade" class="form-control" 
                                           step="0.001" min="0.001" required>
                                    <div class="input-group-append">
                                        <span id="unidade-medida" class="input-group-text">UN</span>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label for="observacoes">Observa√ß√µes</label>
                                <textarea id="observacoes" class="form-control" rows="2" 
                                          placeholder="Observa√ß√µes sobre o uso do material..."></textarea>
                            </div>
                            
                            <button type="button" class="btn btn-success btn-block" onclick="confirmarLancamento()">
                                <i class="fas fa-check"></i> Confirmar Lan√ßamento
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Materiais Lan√ßados -->
        <div class="col-md-6 mb-4">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list"></i> Materiais Lan√ßados
                    </h5>
                    <span class="badge badge-primary">{{ materiais_lancados|length }}</span>
                </div>
                <div class="card-body p-0" style="max-height: 500px; overflow-y: auto;">
                    <div id="lista-materiais">
                        {% if materiais_lancados %}
                            {% for material in materiais_lancados %}
                            <div class="material-item p-3 border-bottom">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="flex-grow-1">
                                        <h6 class="mb-1">{{ material.produto_nome }}</h6>
                                        <p class="mb-1">
                                            <strong>Quantidade:</strong> {{ material.quantidade }} {{ material.produto_unidade }}
                                            {% if material.valor_total %}
                                            <br><strong>Valor:</strong> R$ {{ "%.2f"|format(material.valor_total) }}
                                            {% endif %}
                                        </p>
                                        <small class="text-muted">
                                            {{ material.data_lancamento }} por {{ material.usuario_nome }}
                                        </small>
                                        {% if material.observacoes %}
                                        <br><small class="text-muted">{{ material.observacoes }}</small>
                                        {% endif %}
                                    </div>
                                    <div class="ml-2">
                                        <button class="btn btn-sm btn-outline-warning" 
                                                onclick="marcarParaDevolucao({{ material.id }}, '{{ material.produto_nome }}', {{ material.quantidade }})">
                                            <i class="fas fa-undo"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            {% endfor %}
                        {% else %}
                        <div class="p-4 text-center text-muted">
                            <i class="fas fa-boxes fa-3x mb-3"></i>
                            <p class="mb-0">Nenhum material lan√ßado</p>
                            <small>Use o scanner para lan√ßar materiais</small>
                        </div>
                        {% endif %}
                    </div>
                </div>
                
                {% if materiais_lancados %}
                <div class="card-footer">
                    <button class="btn btn-warning btn-block" onclick="abrirModalDevolucao()">
                        <i class="fas fa-undo"></i> Processar Devolu√ß√µes
                    </button>
                </div>
                {% endif %}
            </div>
        </div>
    </div>
</div>

<!-- Modal de Devolu√ß√£o -->
<div class="modal fade" id="modalDevolucao" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Processar Devolu√ß√µes</h5>
                <button type="button" class="close" data-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p class="text-muted">Informe as quantidades devolvidas de cada material:</p>
                <div id="lista-devolucoes"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-warning" onclick="confirmarDevolucoes()">
                    <i class="fas fa-check"></i> Confirmar Devolu√ß√µes
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let produtoSelecionado = null;
let devolucoesPendentes = [];

function buscarProdutoRDO() {
    const codigo = $('#codigoScanner').val().trim();
    if (!codigo) {
        alert('Digite um c√≥digo para buscar');
        return;
    }
    
    $.get('/api/almoxarifado/buscar-produto', { termo: codigo })
        .done(function(produtos) {
            if (produtos.length > 0) {
                produtoSelecionado = produtos[0];
                mostrarProdutoSelecionado(produtoSelecionado);
            } else {
                alert('Produto n√£o encontrado');
                $('#produto-selecionado').hide();
            }
        })
        .fail(function() {
            alert('Erro ao buscar produto');
        });
}

function mostrarProdutoSelecionado(produto) {
    $('#info-produto').html(`
        <strong>${produto.nome}</strong><br>
        <small>C√≥digo: ${produto.codigo_interno} | Estoque: ${produto.estoque_atual} ${produto.unidade_medida}</small>
    `);
    
    $('#unidade-medida').text(produto.unidade_medida);
    $('#produto-selecionado').show();
    $('#quantidade').focus();
}

function confirmarLancamento() {
    if (!produtoSelecionado) {
        alert('Selecione um produto primeiro');
        return;
    }
    
    const quantidade = parseFloat($('#quantidade').val());
    const observacoes = $('#observacoes').val().trim();
    
    if (!quantidade || quantidade <= 0) {
        alert('Informe uma quantidade v√°lida');
        return;
    }
    
    // Verificar estoque dispon√≠vel
    if (quantidade > produtoSelecionado.estoque_atual) {
        if (!confirm(`Estoque insuficiente! Dispon√≠vel: ${produtoSelecionado.estoque_atual} ${produtoSelecionado.unidade_medida}. Continuar mesmo assim?`)) {
            return;
        }
    }
    
    $.ajax({
        url: '/api/rdo/{{ rdo.id }}/lancar-material',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            produto_id: produtoSelecionado.id,
            quantidade: quantidade,
            observacoes: observacoes
        }),
        success: function(response) {
            if (response.sucesso) {
                alert(response.message);
                location.reload(); // Recarregar para atualizar lista
            } else {
                alert('Erro: ' + response.erro);
            }
        },
        error: function(xhr) {
            const response = JSON.parse(xhr.responseText);
            alert('Erro: ' + response.erro);
        }
    });
}

function marcarParaDevolucao(materialId, produtoNome, quantidadeMaxima) {
    const quantidade = prompt(`Quantidade a devolver de "${produtoNome}" (m√°ximo: ${quantidadeMaxima}):`);
    
    if (quantidade !== null) {
        const qtd = parseFloat(quantidade);
        if (qtd > 0 && qtd <= quantidadeMaxima) {
            devolucoesPendentes.push({
                material_id: materialId,
                produto_nome: produtoNome,
                quantidade: qtd,
                quantidade_maxima: quantidadeMaxima
            });
            
            alert(`${qtd} unidades de "${produtoNome}" marcadas para devolu√ß√£o`);
        } else {
            alert('Quantidade inv√°lida');
        }
    }
}

function abrirModalDevolucao() {
    if (devolucoesPendentes.length === 0) {
        alert('Marque alguns materiais para devolu√ß√£o primeiro');
        return;
    }
    
    let html = '';
    devolucoesPendentes.forEach((item, index) => {
        html += `
            <div class="form-group">
                <label>${item.produto_nome}</label>
                <div class="input-group">
                    <input type="number" class="form-control" 
                           value="${item.quantidade}" 
                           max="${item.quantidade_maxima}"
                           min="0" step="0.001"
                           onchange="devolucoesPendentes[${index}].quantidade = parseFloat(this.value)">
                    <div class="input-group-append">
                        <button class="btn btn-outline-danger" onclick="removerDevolucao(${index})">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        `;
    });
    
    $('#lista-devolucoes').html(html);
    $('#modalDevolucao').modal('show');
}

function removerDevolucao(index) {
    devolucoesPendentes.splice(index, 1);
    abrirModalDevolucao();
}

function confirmarDevolucoes() {
    if (devolucoesPendentes.length === 0) {
        alert('Nenhuma devolu√ß√£o para processar');
        return;
    }
    
    $.ajax({
        url: '/api/rdo/{{ rdo.id }}/processar-devolucao',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({
            devolucoes: devolucoesPendentes.map(item => ({
                produto_id: item.material_id,
                quantidade: item.quantidade,
                observacoes: `Devolu√ß√£o de ${item.quantidade} unidades`
            }))
        }),
        success: function(response) {
            if (response.sucesso) {
                alert(response.message);
                devolucoesPendentes = [];
                $('#modalDevolucao').modal('hide');
                location.reload();
            } else {
                alert('Erro: ' + response.erro);
            }
        },
        error: function(xhr) {
            const response = JSON.parse(xhr.responseText);
            alert('Erro: ' + response.erro);
        }
    });
}

// Auto-focus no campo de c√≥digo quando a p√°gina carregar
$(document).ready(function() {
    $('#codigoScanner').focus();
});
</script>
{% endblock %}
```

### **PASSO 7: Atualiza√ß√£o do app.py**

```python
# ===== M√ìDULO 4: ATUALIZA√á√ïES NO APP.PY =====
# ADICIONAR no final de app.py, antes de create_all()

with app.app_context():
    db.create_all()
    
    # Criar √≠ndices para performance do M√≥dulo 4
    try:
        # √çndices para produtos
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_produto_codigo_barras ON produto(codigo_barras)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_produto_admin_ativo ON produto(admin_id, ativo)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_produto_categoria ON produto(categoria_id)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_produto_estoque_baixo ON produto(admin_id, estoque_atual, estoque_minimo)')
        
        # √çndices para movimenta√ß√µes
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_produto_data ON movimentacao_estoque(produto_id, data_movimentacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_admin_tipo ON movimentacao_estoque(admin_id, tipo_movimentacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_obra_data ON movimentacao_estoque(obra_id, data_movimentacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_funcionario_data ON movimentacao_estoque(funcionario_id, data_movimentacao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_rdo ON movimentacao_estoque(rdo_id)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_mov_nf ON movimentacao_estoque(nota_fiscal_id)')
        
        # √çndices para notas fiscais
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_nf_admin_status ON nota_fiscal(admin_id, status)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_nf_fornecedor_data ON nota_fiscal(fornecedor_id, data_emissao)')
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_nf_chave_acesso ON nota_fiscal(chave_acesso)')
        
        # √çndices para fornecedores
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_fornecedor_admin_ativo ON fornecedor(admin_id, ativo)')
        
        # √çndices para categorias
        db.engine.execute('CREATE INDEX IF NOT EXISTS idx_categoria_admin_codigo ON categoria_produto(admin_id, codigo)')
        
    except Exception as e:
        logging.warning(f"Erro ao criar √≠ndices do M√≥dulo 4: {e}")

# ADICIONAR depend√™ncias no requirements.txt (se n√£o existir, criar):
# lxml>=4.6.0
# pyzbar>=0.1.8
# python-barcode>=0.13.1
# Pillow>=8.0.0
```

### **PASSO 8: Integra√ß√£o com M√≥dulo 3 (RDO)**

```python
# ===== MODIFICAR TEMPLATE DO RDO PARA INCLUIR ABA DE MATERIAIS =====
# LOCALIZAR o template do RDO (provavelmente em templates/rdo/) e ADICIONAR:

# No template principal do RDO, ADICIONAR esta aba:
<li class="nav-item">
    <a class="nav-link" href="{{ url_for('main.rdo_materiais', rdo_id=rdo.id) }}">
        <i class="fas fa-boxes"></i> Materiais
        {% set materiais_count = rdo.movimentacoes_materiais|length %}
        {% if materiais_count > 0 %}
        <span class="badge badge-primary ml-1">{{ materiais_count }}</span>
        {% endif %}
    </a>
</li>

# OU criar um bot√£o de acesso r√°pido:
<a href="{{ url_for('main.rdo_materiais', rdo_id=rdo.id) }}" class="btn btn-outline-primary btn-sm">
    <i class="fas fa-boxes"></i> Gerenciar Materiais
</a>
```

---

## üîß INSTRU√á√ïES FINAIS DE IMPLEMENTA√á√ÉO

### **PASSO 9: Testar o M√≥dulo Completo**

**Cen√°rios de Teste:**

1. **Cadastro de Produtos:**
   - Criar categorias de produtos
   - Cadastrar produtos com c√≥digo de barras
   - Testar valida√ß√£o de c√≥digos

2. **Leitura de C√≥digo de Barras:**
   - Testar busca por c√≥digo de barras
   - Validar c√≥digos EAN-13 e EAN-8
   - Testar busca por nome

3. **Importa√ß√£o de XML:**
   - Importar XML de nota fiscal
   - Mapear produtos automaticamente
   - Processar entrada no estoque

4. **Movimenta√ß√µes:**
   - Lan√ßar entrada manual
   - Lan√ßar sa√≠da manual
   - Testar valida√ß√µes de estoque

5. **Integra√ß√£o com RDO:**
   - Acessar aba materiais do RDO
   - Lan√ßar materiais via RDO
   - Processar devolu√ß√µes

6. **Relat√≥rios e Analytics:**
   - Gerar relat√≥rios de estoque
   - Testar previs√£o de ruptura
   - Validar c√°lculos de IA

### **PASSO 10: Valida√ß√µes Cr√≠ticas**

- ‚úÖ **Integra√ß√£o Perfeita:** Funciona com sistema RDO existente (M√≥dulo 3)
- ‚úÖ **C√≥digo de Barras:** Leitura e valida√ß√£o funcionando
- ‚úÖ **XML NFe:** Importa√ß√£o autom√°tica de notas fiscais
- ‚úÖ **Rastreabilidade:** Por funcion√°rio, obra e RDO
- ‚úÖ **IA:** C√°lculos inteligentes de estoque m√≠nimo
- ‚úÖ **Performance:** Queries otimizadas com √≠ndices
- ‚úÖ **Compatibilidade:** Zero quebra do sistema existente

---

## ‚ö†Ô∏è REGRAS CR√çTICAS FINAIS

### **COMPATIBILIDADE ABSOLUTA:**
- **NUNCA** modificar classes RDO, Funcionario ou Obra existentes
- **APENAS ADICIONAR** relacionamentos onde especificado
- **MANTER** todas as funcionalidades existentes funcionando
- **USAR** sistema de autentica√ß√£o atual

### **INTEGRA√á√ÉO PERFEITA:**
- **INTEGRAR** totalmente com sistema RDO (M√≥dulo 3)
- **NOTIFICAR** cliente quando materiais forem usados (M√≥dulo 2)
- **RASTREAR** por funcion√°rio e obra automaticamente
- **MANTER** sistema multi-tenant funcionando

### **RESULTADO ESPERADO:**
M√≥dulo 4 funcionando perfeitamente com:
- ‚úÖ **Leitura de c√≥digo de barras** com c√¢mera web
- ‚úÖ **Importa√ß√£o autom√°tica** de XML de notas fiscais
- ‚úÖ **Controle completo** de entrada/sa√≠da/devolu√ß√£o
- ‚úÖ **Integra√ß√£o com RDO** - aba espec√≠fica para materiais
- ‚úÖ **Rastreabilidade total** por funcion√°rio, obra e data
- ‚úÖ **Relat√≥rios avan√ßados** com IA e analytics
- ‚úÖ **Interface mobile** para uso em campo

**üéØ M√ìDULO 4 PRONTO PARA IMPLEMENTA√á√ÉO IMEDIATA NO REPLIT!**

---

## üìä RESUMO T√âCNICO

### **Arquitetura:**
- **5 novas classes:** Produto, CategoriaProduto, Fornecedor, NotaFiscal, MovimentacaoEstoque
- **1 novo tipo de usu√°rio:** `ALMOXARIFE`
- **Integra√ß√£o total** com sistema RDO existente (M√≥dulo 3)
- **Aba espec√≠fica** nos RDOs para materiais

### **Funcionalidades:**
- **Leitura de c√≥digo de barras** com valida√ß√£o EAN-13/EAN-8
- **Importa√ß√£o autom√°tica** de XML NFe
- **Controle completo** de estoque
- **Integra√ß√£o** com RDO para lan√ßamentos
- **IA** para c√°lculos de estoque m√≠nimo

### **Performance:**
- **15+ novos √≠ndices** para otimiza√ß√£o
- **APIs otimizadas** para busca de produtos
- **Cache** de c√≥digos lidos
- **Queries eficientes**

### **Integra√ß√£o:**
- **100% compat√≠vel** com M√≥dulos 1, 2 e 3
- **Zero modifica√ß√µes** em classes cr√≠ticas
- **Aproveitamento total** do sistema RDO
- **Base s√≥lida** para pr√≥ximos m√≥dulos

**Status:** M√≥dulo 4 especificado e pronto para implementa√ß√£o! üöÄ

