# üö® PROMPT CR√çTICO: Corrigir Erro de Schema em Produ√ß√£o

## CONTEXTO DO PROBLEMA

**AMBIENTE:** Produ√ß√£o (Docker/Easypanel + PostgreSQL)  
**STATUS:** üî¥ CR√çTICO - Dashboard completamente quebrado  
**ERRO PRINCIPAL:**
```
(psycopg2.errors.UndefinedColumn) column propostas_comerciais.numero_proposta does not exist
```

**CAUSA RAIZ:** O modelo Python usa mapeamento de colunas (`db.Column('numero_proposta', ...)`) mas a migra√ß√£o n√£o criou a coluna com o nome correto no banco de dados PostgreSQL.

---

## AN√ÅLISE DO PROBLEMA

### Modelo Python (models.py linha 2243):
```python
numero = db.Column('numero_proposta', db.String(50), unique=True, nullable=False)
```

**Significado:** 
- Atributo Python: `proposta.numero`
- Coluna no banco: `numero_proposta`

### Erro em Produ√ß√£o:
```sql
SELECT propostas_comerciais.numero_proposta AS propostas_comerciais_numero_proposta
FROM propostas_comerciais
```
**Resultado:** `column propostas_comerciais.numero_proposta does not exist`

### Por que funciona em DEV mas n√£o em PROD?

| Ambiente | Banco | Comportamento |
|----------|-------|---------------|
| **DEV (Replit)** | SQLite | Cria colunas automaticamente, ignora mapeamentos |
| **PROD (Easypanel)** | PostgreSQL | **EXIGE schema exato**, falha se coluna n√£o existe |

---

## SOLU√á√ÉO COMPLETA

### MODIFICA√á√ÉO 1: Criar Migra√ß√£o 45 - Renomear Colunas de Propostas

**Arquivo:** `migrations.py`  
**Localiza√ß√£o:** Ap√≥s migra√ß√£o 44 (linha ~1950)

**Adicionar:**

```python
def _migration_45_corrigir_schema_propostas():
    """
    Migra√ß√£o 45: Corrigir schema da tabela propostas_comerciais
    
    Problema: Modelo Python usa mapeamento de colunas mas banco n√£o tem os nomes corretos
    Solu√ß√£o: Renomear colunas para match com o modelo
    """
    try:
        # Verificar se coluna 'numero' existe (nome antigo)
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'propostas_comerciais' 
            AND column_name = 'numero'
        """))
        
        if result.fetchone():
            print("DEBUG: Renomeando coluna 'numero' para 'numero_proposta'...")
            db.session.execute(text("""
                ALTER TABLE propostas_comerciais 
                RENAME COLUMN numero TO numero_proposta
            """))
            db.session.commit()
            print("‚úÖ Coluna 'numero_proposta' renomeada com sucesso")
        else:
            print("DEBUG: Coluna 'numero_proposta' j√° existe ou 'numero' n√£o encontrada")
        
        # Verificar se coluna 'assunto' existe
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'propostas_comerciais' 
            AND column_name = 'titulo'
        """))
        
        if result.fetchone():
            print("DEBUG: Renomeando coluna 'titulo' para 'assunto'...")
            db.session.execute(text("""
                ALTER TABLE propostas_comerciais 
                RENAME COLUMN titulo TO assunto
            """))
            db.session.commit()
            print("‚úÖ Coluna 'assunto' renomeada com sucesso")
        
        # Verificar se coluna 'objeto' existe
        result = db.session.execute(text("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'propostas_comerciais' 
            AND column_name = 'descricao'
        """))
        
        if result.fetchone():
            print("DEBUG: Renomeando coluna 'descricao' para 'objeto'...")
            db.session.execute(text("""
                ALTER TABLE propostas_comerciais 
                RENAME COLUMN descricao TO objeto
            """))
            db.session.commit()
            print("‚úÖ Coluna 'objeto' renomeada com sucesso")
        
        print("‚úÖ Migra√ß√£o 45 conclu√≠da: Schema de propostas corrigido")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na migra√ß√£o 45: {str(e)}")
        db.session.rollback()
        return False
```

### MODIFICA√á√ÉO 2: Registrar Migra√ß√£o 45

**Arquivo:** `migrations.py`  
**Localiza√ß√£o:** Lista `migrations_to_run` (linha ~1970)

**Adicionar:**

```python
migrations_to_run = [
    # ... migra√ß√µes existentes ...
    (44, "Adicionar jornada_semanal a funcionario", _migration_44_adicionar_jornada_semanal),
    (45, "Corrigir schema da tabela propostas_comerciais", _migration_45_corrigir_schema_propostas),  # ‚úÖ ADICIONAR
]
```

---

## MODIFICA√á√ÉO 3: Adicionar Imports Necess√°rios

**Arquivo:** `migrations.py`  
**Localiza√ß√£o:** Topo do arquivo (linha ~5)

**Verificar se existe:**

```python
from sqlalchemy import text
```

**Se N√ÉO existir, adicionar:**

```python
from sqlalchemy import text, inspect
```

---

## VALIDA√á√ÉO

### Teste 1: Verificar Migra√ß√£o em DEV

```bash
# No Replit, executar:
python3.11 pre_start.py
```

**Resultado Esperado:**
```
DEBUG: Executando migra√ß√£o 45: Corrigir schema da tabela propostas_comerciais
DEBUG: Renomeando coluna 'numero' para 'numero_proposta'...
‚úÖ Coluna 'numero_proposta' renomeada com sucesso
‚úÖ Migra√ß√£o 45 conclu√≠da: Schema de propostas corrigido
```

### Teste 2: Verificar Schema no Banco

```sql
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'propostas_comerciais' 
AND column_name IN ('numero_proposta', 'assunto', 'objeto');
```

**Resultado Esperado:**
```
 column_name      | data_type
------------------+-----------
 numero_proposta  | character varying
 assunto          | character varying
 objeto           | text
```

### Teste 3: Dashboard em Produ√ß√£o

Ap√≥s deploy, acessar dashboard e verificar:

- ‚úÖ Se√ß√£o "Propostas Comerciais" carrega sem erro
- ‚úÖ KPIs de propostas aparecem (Taxa de Convers√£o, Valor M√©dio, etc)
- ‚úÖ Logs n√£o mostram mais `UndefinedColumn`

---

## DEPLOY EM PRODU√á√ÉO

### Passo 1: Commit e Push

```bash
git add migrations.py
git commit -m "fix: Add migration 45 to fix propostas_comerciais schema

- Rename 'numero' to 'numero_proposta'
- Rename 'titulo' to 'assunto'  
- Rename 'descricao' to 'objeto'
- Fixes UndefinedColumn error in production dashboard"

git push origin main
```

### Passo 2: Deploy no Easypanel

O Easypanel vai:
1. ‚úÖ Build da imagem Docker
2. ‚úÖ Executar `docker-entrypoint.sh`
3. ‚úÖ Executar `pre_start.py`
4. ‚úÖ Aplicar migra√ß√£o 45 automaticamente
5. ‚úÖ Iniciar Gunicorn

### Passo 3: Verificar Logs

```bash
# No Easypanel, acessar logs do container
docker logs <container_name> --tail 100
```

**Procurar por:**
```
‚úÖ Migra√ß√£o 45 conclu√≠da: Schema de propostas corrigido
‚úÖ DASHBOARD: Iniciando c√°lculos do dashboard...
‚úÖ DASHBOARD: 21 funcion√°rios encontrados
‚úÖ DASHBOARD: 21 obras ativas encontradas
‚úÖ DASHBOARD: Calculando m√©tricas de propostas...
```

---

## TROUBLESHOOTING

### Problema 1: "column already exists"

**Causa:** Migra√ß√£o j√° foi executada parcialmente  
**Solu√ß√£o:** A migra√ß√£o √© idempotente, vai detectar e pular

### Problema 2: "relation propostas_comerciais does not exist"

**Causa:** Tabela n√£o foi criada  
**Solu√ß√£o:** Verificar se migra√ß√£o anterior que cria a tabela foi executada

### Problema 3: Dashboard ainda mostra erro

**Causa:** Cache do navegador ou sess√£o antiga  
**Solu√ß√£o:**
1. Fazer logout
2. Limpar cache do navegador
3. Fazer login novamente
4. Reiniciar container se necess√°rio

---

## CHECKLIST DE IMPLEMENTA√á√ÉO

- [ ] Adicionar fun√ß√£o `_migration_45_corrigir_schema_propostas()` em migrations.py
- [ ] Registrar migra√ß√£o 45 na lista `migrations_to_run`
- [ ] Verificar import de `text` do sqlalchemy
- [ ] Testar em desenvolvimento (Replit)
- [ ] Verificar schema no banco de dados
- [ ] Commit e push para GitHub
- [ ] Deploy em produ√ß√£o (Easypanel)
- [ ] Verificar logs de deploy
- [ ] Acessar dashboard e confirmar que funciona
- [ ] Verificar KPIs de propostas aparecem

---

## IMPACTO ESPERADO

### ANTES:
```
‚ùå Dashboard quebrado em produ√ß√£o
‚ùå Erro: UndefinedColumn numero_proposta
‚ùå Transa√ß√£o abortada
‚ùå Nenhuma KPI funciona
```

### DEPOIS:
```
‚úÖ Dashboard carrega completamente
‚úÖ Todas as KPIs funcionam
‚úÖ Propostas Comerciais exibe dados
‚úÖ Sem erros nos logs
```

---

## PRIORIDADE

üî¥ **CR√çTICA** - Sistema quebrado em produ√ß√£o

**Tempo Estimado:** 30 minutos (implementa√ß√£o + deploy + valida√ß√£o)

---

## OBSERVA√á√ÉO IMPORTANTE

Esta migra√ß√£o √© **segura** e **idempotente**:
- ‚úÖ Verifica se coluna existe antes de renomear
- ‚úÖ N√£o perde dados (apenas renomeia)
- ‚úÖ Pode ser executada m√∫ltiplas vezes
- ‚úÖ Rollback autom√°tico em caso de erro

Ap√≥s esta corre√ß√£o, o dashboard deve funcionar 100% em produ√ß√£o! üéØ

