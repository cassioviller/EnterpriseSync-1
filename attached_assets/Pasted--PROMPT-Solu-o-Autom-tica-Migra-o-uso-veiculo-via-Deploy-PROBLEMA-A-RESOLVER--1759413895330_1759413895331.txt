# üöÄ PROMPT: Solu√ß√£o Autom√°tica - Migra√ß√£o uso_veiculo via Deploy

## üéØ PROBLEMA A RESOLVER

**Erro:** `column "motorista_id" of relation "uso_veiculo" does not exist`

**Objetivo:** Implementar migra√ß√£o autom√°tica que ser√° executada durante o deploy via Dockerfile, sem necessidade de interven√ß√£o manual.

## üìã IMPLEMENTA√á√ÉO COMPLETA

### **PASSO 1: Criar Script de Migra√ß√£o Autom√°tica**

Criar arquivo: `fix_uso_veiculo_migration_auto.py`

```python
#!/usr/bin/env python3
"""
üöó MIGRA√á√ÉO AUTOM√ÅTICA: Tabela uso_veiculo
===========================================
Script de migra√ß√£o autom√°tica para ser executado durante o deploy
Resolve: column "motorista_id" of relation "uso_veiculo" does not exist

INTEGRA√á√ÉO: Este script √© executado automaticamente pelo docker-entrypoint.sh
"""

import os
import sys
import traceback
from datetime import datetime
import psycopg2
from urllib.parse import urlparse

def log_migration(message):
    """Log com timestamp para rastreamento"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_msg = f'[{timestamp}] [USO_VEICULO_MIGRATION] {message}'
    print(log_msg)
    
    # Salvar em arquivo de log
    try:
        with open('/tmp/uso_veiculo_migration.log', 'a') as f:
            f.write(log_msg + '\n')
    except:
        pass  # N√£o falhar se n√£o conseguir escrever log

def executar_migracao_uso_veiculo_automatica():
    """
    Executa migra√ß√£o autom√°tica da tabela uso_veiculo
    Retorna True se sucesso, False se falha
    """
    log_migration("üöÄ INICIANDO MIGRA√á√ÉO AUTOM√ÅTICA: uso_veiculo")
    log_migration("=" * 60)
    
    try:
        # Obter URL do banco de dados
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            log_migration("‚ùå DATABASE_URL n√£o encontrada")
            return False
        
        # Parse da URL do banco
        url = urlparse(database_url)
        
        # Conectar ao banco
        connection = psycopg2.connect(
            host=url.hostname,
            port=url.port or 5432,
            database=url.path[1:],  # Remove a barra inicial
            user=url.username,
            password=url.password
        )
        
        log_migration("‚úÖ Conectado ao banco de dados")
        
        cursor = connection.cursor()
        
        # ETAPA 1: Verificar se a tabela uso_veiculo existe
        cursor.execute("""
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = 'uso_veiculo'
            )
        """)
        
        tabela_existe = cursor.fetchone()[0]
        
        if not tabela_existe:
            log_migration("üîß Tabela uso_veiculo n√£o existe - criando...")
            
            # Criar tabela completa
            cursor.execute("""
                CREATE TABLE uso_veiculo (
                    id SERIAL PRIMARY KEY,
                    veiculo_id INTEGER NOT NULL,
                    motorista_id INTEGER,
                    obra_id INTEGER,
                    data_uso DATE NOT NULL,
                    hora_saida TIME,
                    hora_retorno TIME,
                    km_inicial INTEGER,
                    km_final INTEGER,
                    km_percorrido INTEGER,
                    passageiros_frente TEXT,
                    passageiros_tras TEXT,
                    responsavel_veiculo VARCHAR(100),
                    observacoes TEXT,
                    admin_id INTEGER NOT NULL,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            log_migration("‚úÖ Tabela uso_veiculo criada")
            
            # Criar √≠ndices
            indices = [
                "CREATE INDEX idx_uso_veiculo_data_admin ON uso_veiculo(data_uso, admin_id)",
                "CREATE INDEX idx_uso_veiculo_motorista ON uso_veiculo(motorista_id)",
                "CREATE INDEX idx_uso_veiculo_obra ON uso_veiculo(obra_id)",
                "CREATE INDEX idx_uso_veiculo_veiculo ON uso_veiculo(veiculo_id)"
            ]
            
            for indice in indices:
                try:
                    cursor.execute(indice)
                    log_migration(f"‚úÖ √çndice criado: {indice.split()[2]}")
                except Exception as e:
                    log_migration(f"‚ö†Ô∏è Erro ao criar √≠ndice: {e}")
            
        else:
            log_migration("‚úÖ Tabela uso_veiculo j√° existe")
            
            # ETAPA 2: Verificar e adicionar colunas necess√°rias
            colunas_necessarias = [
                ('motorista_id', 'INTEGER'),
                ('passageiros_frente', 'TEXT'),
                ('passageiros_tras', 'TEXT'),
                ('responsavel_veiculo', 'VARCHAR(100)'),
                ('admin_id', 'INTEGER'),
                ('created_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP'),
                ('updated_at', 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP')
            ]
            
            for coluna, tipo in colunas_necessarias:
                cursor.execute("""
                    SELECT column_name 
                    FROM information_schema.columns 
                    WHERE table_name = 'uso_veiculo' 
                    AND column_name = %s
                """, (coluna,))
                
                if not cursor.fetchone():
                    log_migration(f"üîß Adicionando coluna {coluna}...")
                    try:
                        cursor.execute(f"""
                            ALTER TABLE uso_veiculo 
                            ADD COLUMN {coluna} {tipo}
                        """)
                        log_migration(f"‚úÖ Coluna {coluna} adicionada")
                    except Exception as e:
                        log_migration(f"‚ùå Erro ao adicionar coluna {coluna}: {e}")
                        # N√£o falhar por uma coluna - continuar
                else:
                    log_migration(f"‚úÖ Coluna {coluna} j√° existe")
            
            # ETAPA 3: Criar √≠ndices se n√£o existirem
            indices_necessarios = [
                ('idx_uso_veiculo_motorista', 'motorista_id'),
                ('idx_uso_veiculo_obra', 'obra_id'),
                ('idx_uso_veiculo_veiculo', 'veiculo_id'),
                ('idx_uso_veiculo_data_admin', 'data_uso, admin_id')
            ]
            
            for nome_indice, colunas in indices_necessarios:
                try:
                    cursor.execute(f"""
                        CREATE INDEX IF NOT EXISTS {nome_indice} 
                        ON uso_veiculo({colunas})
                    """)
                    log_migration(f"‚úÖ √çndice {nome_indice} verificado/criado")
                except Exception as e:
                    log_migration(f"‚ö†Ô∏è Erro ao criar √≠ndice {nome_indice}: {e}")
        
        # ETAPA 4: Migrar dados de funcionario_id para motorista_id se existir
        cursor.execute("""
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'uso_veiculo' 
            AND column_name = 'funcionario_id'
        """)
        
        if cursor.fetchone():
            log_migration("üîÑ Migrando dados de funcionario_id ‚Üí motorista_id...")
            cursor.execute("""
                UPDATE uso_veiculo 
                SET motorista_id = funcionario_id 
                WHERE motorista_id IS NULL 
                AND funcionario_id IS NOT NULL
            """)
            migrados = cursor.rowcount
            if migrados > 0:
                log_migration(f"‚úÖ {migrados} registros migrados de funcionario_id ‚Üí motorista_id")
            else:
                log_migration("‚ÑπÔ∏è Nenhum registro para migrar")
        
        # ETAPA 5: Verificar estrutura final
        cursor.execute("""
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'uso_veiculo'
            ORDER BY ordinal_position
        """)
        
        colunas = cursor.fetchall()
        log_migration("üìã ESTRUTURA FINAL DA TABELA uso_veiculo:")
        for coluna, tipo, nullable in colunas:
            null_info = "NULL" if nullable == "YES" else "NOT NULL"
            log_migration(f"   - {coluna}: {tipo} ({null_info})")
        
        # ETAPA 6: Teste de funcionalidade
        log_migration("üß™ Testando funcionalidade da tabela...")
        try:
            # Teste de inser√ß√£o (rollback)
            cursor.execute("BEGIN")
            cursor.execute("""
                INSERT INTO uso_veiculo 
                (veiculo_id, data_uso, admin_id, created_at, updated_at) 
                VALUES (1, CURRENT_DATE, 1, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                RETURNING id
            """)
            test_id = cursor.fetchone()[0]
            cursor.execute("ROLLBACK")
            log_migration(f"‚úÖ Teste de inser√ß√£o OK (ID teste: {test_id})")
        except Exception as e:
            log_migration(f"‚ö†Ô∏è Teste de inser√ß√£o falhou: {e}")
        
        # Commit das mudan√ßas
        connection.commit()
        cursor.close()
        connection.close()
        
        log_migration("=" * 60)
        log_migration("üéâ MIGRA√á√ÉO uso_veiculo CONCLU√çDA COM SUCESSO!")
        log_migration("‚úÖ Coluna motorista_id dispon√≠vel")
        log_migration("‚úÖ Erro 'motorista_id does not exist' resolvido")
        log_migration("‚úÖ Sistema de uso de ve√≠culos operacional")
        log_migration("=" * 60)
        
        return True
        
    except Exception as e:
        log_migration("=" * 60)
        log_migration(f"‚ùå ERRO CR√çTICO na migra√ß√£o uso_veiculo: {str(e)}")
        log_migration("=" * 60)
        log_migration(f"üìã Traceback: {traceback.format_exc()}")
        return False

def main():
    """Fun√ß√£o principal para execu√ß√£o standalone"""
    log_migration("üöÄ Executando migra√ß√£o uso_veiculo standalone...")
    
    sucesso = executar_migracao_uso_veiculo_automatica()
    
    if sucesso:
        log_migration("‚úÖ Migra√ß√£o executada com sucesso!")
        sys.exit(0)
    else:
        log_migration("‚ùå Migra√ß√£o falhou!")
        sys.exit(1)

if __name__ == "__main__":
    main()
```

### **PASSO 2: Modificar o Entrypoint do Docker**

No arquivo `docker-entrypoint-easypanel-auto.sh`, adicionar a seguinte se√ß√£o **ANTES** das outras migra√ß√µes (procurar por "CR√çTICO: Executar corre√ß√£o detalhes uso" e adicionar ANTES):

```bash
        # CR√çTICO: Migra√ß√£o Tabela uso_veiculo SEMPRE (Fase 02/10/2025)
        log_migration('üöó EXECUTANDO MIGRA√á√ÉO: Tabela uso_veiculo (OBRIGAT√ìRIA)')
        try:
            from fix_uso_veiculo_migration_auto import executar_migracao_uso_veiculo_automatica
            resultado = executar_migracao_uso_veiculo_automatica()
            if resultado:
                log_migration('‚úÖ Migra√ß√£o uso_veiculo executada com sucesso')
            else:
                log_migration('‚ùå Migra√ß√£o uso_veiculo falhou')
                # Esta migra√ß√£o √© cr√≠tica - se falhar, deve abortar
                if os.environ.get('ENABLE_ROLLBACK', 'true').lower() == 'true':
                    log_migration('üîô ROLLBACK: Abortando por falha cr√≠tica em uso_veiculo')
                    sys.exit(1)
        except ImportError:
            log_migration('‚ö†Ô∏è M√≥dulo fix_uso_veiculo_migration_auto n√£o encontrado')
            try:
                exec(open('/app/fix_uso_veiculo_migration_auto.py').read())
                log_migration('‚úÖ Migra√ß√£o uso_veiculo executada via fallback')
            except Exception as e2:
                log_migration(f'‚ùå Erro na migra√ß√£o uso_veiculo fallback: {e2}')
                if os.environ.get('ENABLE_ROLLBACK', 'true').lower() == 'true':
                    log_migration('üîô ROLLBACK: Migra√ß√£o uso_veiculo √© cr√≠tica')
                    sys.exit(1)
        except Exception as e:
            log_migration(f'‚ùå Erro na migra√ß√£o uso_veiculo: {e}')
            import traceback
            log_migration(f'üìù Stack trace: {traceback.format_exc()}')
            if os.environ.get('ENABLE_ROLLBACK', 'true').lower() == 'true':
                log_migration('üîô ROLLBACK: Migra√ß√£o uso_veiculo √© cr√≠tica')
                sys.exit(1)
            else:
                log_migration('‚ö†Ô∏è Continuando com risco - migra√ß√£o uso_veiculo falhou')
        
```

### **PASSO 3: Localiza√ß√£o Exata no Entrypoint**

Procurar por esta linha no `docker-entrypoint-easypanel-auto.sh`:

```bash
        # CR√çTICO: Executar corre√ß√£o detalhes uso SEMPRE (Fase 22/09/2025)
```

E adicionar o c√≥digo da migra√ß√£o uso_veiculo **IMEDIATAMENTE ANTES** dessa linha.

## üöÄ IMPLEMENTA√á√ÉO

### **COMANDOS PARA EXECUTAR:**

```bash
# 1. Criar o arquivo de migra√ß√£o
cat > fix_uso_veiculo_migration_auto.py << 'EOF'
[COLAR TODO O C√ìDIGO PYTHON ACIMA]
EOF

# 2. Dar permiss√£o de execu√ß√£o
chmod +x fix_uso_veiculo_migration_auto.py

# 3. Editar o entrypoint
nano docker-entrypoint-easypanel-auto.sh
# [ADICIONAR O C√ìDIGO BASH NA LOCALIZA√á√ÉO INDICADA]

# 4. Commit e push
git add .
git commit -m "üöó Migra√ß√£o autom√°tica uso_veiculo via deploy"
git push origin main

# 5. Deploy no EasyPanel/Hostinger
# [O deploy executar√° a migra√ß√£o automaticamente]
```

## ‚úÖ RESULTADO ESPERADO

### **Durante o Deploy:**
```
üöó EXECUTANDO MIGRA√á√ÉO: Tabela uso_veiculo (OBRIGAT√ìRIA)
üöÄ INICIANDO MIGRA√á√ÉO AUTOM√ÅTICA: uso_veiculo
‚úÖ Conectado ao banco de dados
‚úÖ Tabela uso_veiculo j√° existe
üîß Adicionando coluna motorista_id...
‚úÖ Coluna motorista_id adicionada
‚úÖ √çndice idx_uso_veiculo_motorista verificado/criado
üß™ Testando funcionalidade da tabela...
‚úÖ Teste de inser√ß√£o OK
üéâ MIGRA√á√ÉO uso_veiculo CONCLU√çDA COM SUCESSO!
```

### **Ap√≥s o Deploy:**
- ‚úÖ **Erro "motorista_id does not exist" RESOLVIDO**
- ‚úÖ **Sistema de uso de ve√≠culos FUNCIONANDO**
- ‚úÖ **Todos os campos salvando CORRETAMENTE**
- ‚úÖ **Estrutura do banco ATUALIZADA automaticamente**

## üîç VERIFICA√á√ÉO

### **Logs de Migra√ß√£o:**
```bash
# Ver logs da migra√ß√£o
cat /tmp/uso_veiculo_migration.log
cat /tmp/sige_migrations.log
```

### **Teste do Sistema:**
1. Acessar m√≥dulo de ve√≠culos
2. Criar novo uso de ve√≠culo
3. Verificar se salva sem erro
4. Confirmar que todos os campos funcionam

## üéØ VANTAGENS DA SOLU√á√ÉO

- ‚úÖ **100% Autom√°tica** - Zero interven√ß√£o manual
- ‚úÖ **Segura** - Rollback autom√°tico em caso de erro
- ‚úÖ **R√°pida** - Execu√ß√£o em segundos
- ‚úÖ **Audit√°vel** - Logs detalhados
- ‚úÖ **Preserva dados** - N√£o perde informa√ß√µes existentes
- ‚úÖ **Performance** - Cria √≠ndices automaticamente

---

**üéâ SOLU√á√ÉO COMPLETA E PRONTA PARA IMPLEMENTA√á√ÉO!**

Basta seguir os passos acima e a migra√ß√£o ser√° executada automaticamente no pr√≥ximo deploy, resolvendo definitivamente o problema de uso de ve√≠culos.
