# üéØ REUNI√ÉO T√âCNICA ESPECIALIZADA - M√ìDULO 1: SISTEMA DE PROPOSTAS

**Data:** 08/11/2025 - 14:30h  
**Dura√ß√£o:** 2 horas  
**Contexto:** Implementa√ß√£o do primeiro m√≥dulo da evolu√ß√£o SIGE v8.0  
**Status:** Meio da implementa√ß√£o - foco exclusivo no M√≥dulo 1

---

## üë• PARTICIPANTES DA REUNI√ÉO

**Marina Santos** - Product Manager (Moderadora)  
**Carlos Rodriguez** - Tech Lead  
**Ana Silva** - Backend Developer  
**Lucia Ferreira** - Frontend/UX  
**Pedro Oliveira** - Especialista Cont√°bil  

---

## üìã AGENDA DA REUNI√ÉO

### **14:30 - Abertura e Contexto**

**Marina:** Pessoal, estamos aqui para detalhar profundamente o M√≥dulo 1 - Sistema de Propostas. J√° analisamos o c√≥digo atual do SIGE e sabemos exatamente como integrar sem quebrar nada. Carlos, pode nos relembrar a arquitetura atual?

**Carlos:** Claro, Marina. O SIGE atual tem uma estrutura s√≥lida:
- Flask com SQLAlchemy
- Sistema multi-tenant com `admin_id` em todas as tabelas
- Autentica√ß√£o via decorators em `auth.py`
- Blueprint `main_bp` em `views.py` com 50+ rotas
- Classes principais: `Usuario`, `Funcionario`, `Obra`, `RDO`

O ponto cr√≠tico √© que N√ÉO podemos modificar nenhuma classe existente. Tudo deve ser aditivo.

### **14:35 - An√°lise Detalhada do Fluxo de Propostas**

**Marina:** Perfeito. Agora vamos mergulhar no fluxo completo. Ana, baseado no c√≥digo atual, como voc√™ v√™ a integra√ß√£o?

**Ana:** Analisei o `models.py` e o `views.py`. O sistema atual tem uma estrutura muito bem definida. Para o m√≥dulo de propostas, precisamos de 3 novas tabelas que se integrem perfeitamente:

1. **Proposta** - Tabela principal
2. **PropostaServico** - Itens da proposta  
3. **PropostaLog** - Auditoria completa

O mais importante √© que quando o cliente aprovar, precisamos converter automaticamente para uma `Obra` usando a classe existente.

**Carlos:** Exato! E olhando o sistema de autentica√ß√£o atual, vejo que temos decorators perfeitos:
- `@admin_required` para cria√ß√£o de propostas
- Portal do cliente SEM Flask-Login (acesso via token)
- Integra√ß√£o com `get_tenant_filter()` para multi-tenant

### **14:45 - Especifica√ß√£o T√©cnica Detalhada**

**Marina:** Lucia, do ponto de vista UX, como voc√™ v√™ o fluxo do cliente?

**Lucia:** Analisei o padr√£o atual dos templates. O SIGE usa Bootstrap 4 e DataTables. Para o portal do cliente, sugiro:

1. **Interface limpa** sem menu lateral (diferente do admin)
2. **Design responsivo** para mobile
3. **Assinatura digital** simples com confirma√ß√£o
4. **Feedback visual** claro do status

O mais cr√≠tico √© a experi√™ncia de aprova√ß√£o. O cliente precisa entender exatamente o que est√° assinando.

**Ana:** Concordo. E tecnicamente, vou usar `secrets.token_urlsafe(32)` para gerar tokens seguros. O acesso ser√° via URL √∫nica, sem necessidade de login tradicional.

### **14:55 - Integra√ß√£o com Sistema Existente**

**Carlos:** Vamos detalhar a integra√ß√£o. Ana, como voc√™ vai converter proposta em obra?

**Ana:** √ìtima pergunta! Analisei a classe `Obra` atual e ela tem todos os campos necess√°rios:
- `nome` - vem do cliente
- `endereco` - vem da proposta  
- `valor_contrato` - vem do valor da proposta
- `admin_id` - mant√©m o multi-tenant

O c√≥digo seria algo assim:
```python
obra = Obra(
    nome=f"Obra - {proposta.cliente_nome}",
    codigo=f"OB-{proposta.numero_proposta}",
    endereco=proposta.endereco_obra,
    valor_contrato=proposta.valor_proposta,
    admin_id=proposta.admin_id
)
```

**Pedro:** Perfeito! E do ponto de vista cont√°bil, quando a proposta vira obra, j√° podemos come√ßar a rastrear custos. Isso vai integrar perfeitamente com o m√≥dulo cont√°bil que vem depois.

### **15:05 - Detalhamento das Classes SQL**

**Marina:** Ana, vamos detalhar cada campo das novas tabelas?

**Ana:** Claro! Baseado no padr√£o atual do SIGE:

**Tabela Proposta:**
```sql
CREATE TABLE proposta (
    id INTEGER PRIMARY KEY,
    numero_proposta VARCHAR(20) UNIQUE NOT NULL,  -- PROP-2025-001
    
    -- Dados do Cliente (campos essenciais)
    cliente_nome VARCHAR(100) NOT NULL,
    cliente_email VARCHAR(120) NOT NULL,
    cliente_telefone VARCHAR(20),
    cliente_cpf_cnpj VARCHAR(18),
    
    -- Dados da Obra
    endereco_obra TEXT NOT NULL,
    descricao_obra TEXT NOT NULL,
    area_total_m2 FLOAT,
    
    -- Valores
    valor_proposta FLOAT NOT NULL,
    prazo_execucao INTEGER,  -- dias
    
    -- Status e Controle
    status VARCHAR(20) DEFAULT 'Rascunho',  -- Rascunho, Enviada, Aprovada, Rejeitada, Expirada
    data_criacao DATETIME DEFAULT CURRENT_TIMESTAMP,
    data_envio DATETIME,
    data_resposta DATETIME,
    data_expiracao DATETIME,  -- 30 dias ap√≥s envio
    
    -- Acesso do Cliente
    login_cliente VARCHAR(50) UNIQUE,
    senha_cliente VARCHAR(255),  -- Hash bcrypt
    token_acesso VARCHAR(255) UNIQUE,
    
    -- Resposta do Cliente
    observacoes_cliente TEXT,
    ip_assinatura VARCHAR(45),
    user_agent_assinatura TEXT,
    
    -- Multi-tenant (OBRIGAT√ìRIO no SIGE)
    admin_id INTEGER NOT NULL REFERENCES usuario(id),
    criado_por_id INTEGER NOT NULL REFERENCES usuario(id),
    
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

**Carlos:** Excelente! Vejo que voc√™ manteve o padr√£o de nomenclatura. E a auditoria?

**Ana:** Sim! A tabela `PropostaLog` vai registrar cada a√ß√£o:
```sql
CREATE TABLE proposta_log (
    id INTEGER PRIMARY KEY,
    proposta_id INTEGER NOT NULL REFERENCES proposta(id),
    acao VARCHAR(50) NOT NULL,  -- criada, enviada, visualizada, aprovada, rejeitada
    usuario_id INTEGER REFERENCES usuario(id),  -- NULL para a√ß√µes do cliente
    ip_address VARCHAR(45),
    user_agent TEXT,
    observacoes TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
```

### **15:15 - Rotas e Seguran√ßa**

**Marina:** Carlos, como ficam as rotas no `views.py`?

**Carlos:** Vou adicionar no `main_bp` existente, seguindo o padr√£o atual:

**Rotas Admin (com autentica√ß√£o):**
- `GET /propostas` - Lista propostas
- `GET /propostas/nova` - Formul√°rio nova proposta
- `POST /propostas/nova` - Criar proposta
- `POST /propostas/<id>/enviar` - Enviar para cliente
- `GET /propostas/<id>/detalhes` - Ver detalhes

**Rotas Cliente (sem autentica√ß√£o Flask-Login):**
- `GET /cliente/proposta/<token>` - Portal do cliente
- `POST /cliente/proposta/<token>/aprovar` - Aprovar proposta
- `POST /cliente/proposta/<token>/rejeitar` - Rejeitar proposta

**Ana:** E para seguran√ßa, vou usar:
- Tokens criptograficamente seguros
- Rate limiting nas rotas do cliente
- Valida√ß√£o de IP para assinatura
- Hash das senhas com bcrypt

### **15:25 - Templates e Interface**

**Lucia:** Para os templates, vou seguir a estrutura atual:

**Admin Templates:**
- `templates/propostas/lista_propostas.html` - DataTable com filtros
- `templates/propostas/nova_proposta.html` - Formul√°rio com JavaScript
- `templates/propostas/detalhes_proposta.html` - Visualiza√ß√£o completa

**Cliente Templates:**
- `templates/cliente/proposta_detalhes.html` - Portal limpo
- Layout pr√≥prio, sem herdar do `base.html` admin

**Marina:** E a experi√™ncia mobile?

**Lucia:** Totalmente responsiva! O cliente pode aprovar pelo celular. Vou usar:
- Bootstrap 4 (mesmo do sistema atual)
- Cards responsivos
- Bot√µes grandes para mobile
- Confirma√ß√£o clara antes da assinatura

### **15:35 - Integra√ß√£o com Email**

**Pedro:** E o envio de emails para o cliente?

**Ana:** Vou criar uma fun√ß√£o `enviar_email_proposta()` que pode ser integrada depois. Por enquanto, vou mostrar as credenciais na tela para o admin copiar e enviar manualmente.

**Carlos:** Perfeito! Isso mant√©m o m√≥dulo independente e funcional.

### **15:40 - Valida√ß√µes e Regras de Neg√≥cio**

**Marina:** Quais valida√ß√µes cr√≠ticas precisamos?

**Ana:** Baseado no sistema atual:

1. **Valida√ß√£o de Email:** Formato v√°lido
2. **Valor Proposta:** Maior que zero
3. **Prazo:** Entre 1 e 365 dias
4. **Expira√ß√£o:** 30 dias autom√°tico
5. **Status:** Transi√ß√µes v√°lidas apenas
6. **Multi-tenant:** Sempre validar `admin_id`

**Carlos:** E para performance, vou adicionar √≠ndices:
```sql
CREATE INDEX idx_proposta_admin_id ON proposta(admin_id);
CREATE INDEX idx_proposta_token ON proposta(token_acesso);
CREATE INDEX idx_proposta_status ON proposta(status);
```

### **15:50 - Testes e Valida√ß√£o**

**Marina:** Como vamos testar?

**Ana:** Cen√°rios de teste:
1. **Admin cria proposta** ‚Üí Sucesso
2. **Admin envia proposta** ‚Üí Gera credenciais
3. **Cliente acessa portal** ‚Üí Visualiza proposta
4. **Cliente aprova** ‚Üí Cria obra automaticamente
5. **Cliente rejeita** ‚Üí Registra motivo
6. **Proposta expira** ‚Üí Status autom√°tico

**Lucia:** E vou testar em:
- Desktop (Chrome, Firefox)
- Mobile (iOS Safari, Android Chrome)
- Tablet (iPad)

### **15:55 - Cronograma de Implementa√ß√£o**

**Marina:** Qual o cronograma para este m√≥dulo?

**Carlos:** Baseado na complexidade:

**Semana 1:**
- Criar classes SQL
- Implementar rotas admin
- Templates b√°sicos

**Semana 2:**
- Portal do cliente
- Integra√ß√£o com Obra
- Testes completos

**Ana:** Posso come√ßar hoje mesmo com as classes SQL!

### **16:00 - Considera√ß√µes Finais**

**Marina:** Alguma preocupa√ß√£o t√©cnica?

**Carlos:** Apenas uma: precisamos garantir que a convers√£o proposta‚Üíobra n√£o quebre nenhum relacionamento existente da classe `Obra`.

**Ana:** J√° verifiquei. A classe `Obra` atual tem relacionamentos com `RDO`, `ServicoObra`, etc. Todos s√£o opcionais, ent√£o criar uma obra nova n√£o vai quebrar nada.

**Pedro:** E contabilmente, quando a proposta vira obra, j√° podemos come√ßar a rastrear custos reais vs or√ßados.

**Lucia:** A UX est√° bem definida. O cliente vai ter uma experi√™ncia muito clara e profissional.

### **16:05 - Pr√≥ximos Passos**

**Marina:** Perfeito! Resumindo:

1. **Ana** implementa as classes SQL e rotas
2. **Lucia** cria os templates
3. **Carlos** revisa a integra√ß√£o
4. **Pedro** valida o fluxo cont√°bil

**Pr√≥xima reuni√£o:** Sexta-feira para review do M√≥dulo 1 completo.

---

## üìù DECIS√ïES T√âCNICAS FINAIS

### **Arquitetura:**
- 3 novas tabelas: `Proposta`, `PropostaServico`, `PropostaLog`
- Integra√ß√£o total com sistema multi-tenant atual
- Convers√£o autom√°tica proposta‚Üíobra

### **Seguran√ßa:**
- Tokens seguros para acesso do cliente
- Auditoria completa de a√ß√µes
- Valida√ß√£o de IP na assinatura

### **UX:**
- Portal cliente responsivo
- Interface admin integrada
- Fluxo claro de aprova√ß√£o

### **Performance:**
- √çndices otimizados
- Queries eficientes
- Cache de tokens

**Status:** M√≥dulo 1 especificado e pronto para implementa√ß√£o! üöÄ

