# An√°lise dos C√°lculos de Horas Extras - SIGE v6.2

## üéØ PROBLEMA IDENTIFICADO

Baseado na descri√ß√£o do sistema SIGE v6.2, h√° uma quest√£o cr√≠tica nos c√°lculos de horas extras:

**SITUA√á√ÉO ATUAL**: As horas extras podem estar sendo calculadas de forma gen√©rica, sem considerar o hor√°rio espec√≠fico de cada funcion√°rio.

**PROBLEMA**: Funcion√°rios com hor√°rios diferentes (estagi√°rio, gerente, 7h12-17h, 7h-12h) podem ter c√°lculos incorretos de horas extras.

---

## üîç AN√ÅLISE T√âCNICA

### 1. **Hor√°rios Diferentes Identificados**
- **Estagi√°rio**: Provavelmente meio per√≠odo (4h/dia)
- **Gerente**: Possivelmente hor√°rio flex√≠vel ou diferenciado
- **7h12 √†s 17h**: Jornada de 8h48min (com intervalo)
- **7h √†s 12h**: Meio per√≠odo de 5h

### 2. **C√°lculo Correto de Horas Extras**
Para cada funcion√°rio, as horas extras devem ser calculadas como:
```
Horas Extras = Horas Trabalhadas - Horas do Hor√°rio Padr√£o
```

**Exemplo Pr√°tico**:
- **Funcion√°rio A** (Hor√°rio 8h/dia): Trabalhou 10h ‚Üí 2h extras
- **Funcion√°rio B** (Hor√°rio 4h/dia): Trabalhou 6h ‚Üí 2h extras
- **Funcion√°rio C** (Hor√°rio 5h/dia): Trabalhou 7h ‚Üí 2h extras

### 3. **Integra√ß√£o com Tabela HorarioTrabalho**
O sistema deve usar a tabela `HorarioTrabalho` para:
- Buscar o hor√°rio espec√≠fico do funcion√°rio
- Calcular as horas di√°rias esperadas
- Aplicar a diferen√ßa para determinar horas extras

---

## üõ†Ô∏è CORRE√á√ïES NECESS√ÅRIAS

### 1. **Engine de KPIs v4.0 - Fun√ß√£o de Horas Extras**
```python
def calcular_horas_extras_correto(funcionario_id, data_inicio, data_fim):
    # 1. Buscar hor√°rio de trabalho do funcion√°rio
    funcionario = Funcionario.query.get(funcionario_id)
    horario_trabalho = funcionario.horario_trabalho
    horas_diarias_padrao = horario_trabalho.horas_diarias
    
    # 2. Buscar registros de ponto no per√≠odo
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario_id,
        RegistroPonto.data.between(data_inicio, data_fim)
    ).all()
    
    total_horas_extras = 0
    
    for registro in registros:
        if registro.horas_trabalhadas_calculadas > horas_diarias_padrao:
            horas_extras_dia = registro.horas_trabalhadas_calculadas - horas_diarias_padrao
            total_horas_extras += horas_extras_dia
    
    return total_horas_extras
```

### 2. **C√°lculo de Custo de Horas Extras**
```python
def calcular_custo_horas_extras(funcionario_id, data_inicio, data_fim):
    funcionario = Funcionario.query.get(funcionario_id)
    horario_trabalho = funcionario.horario_trabalho
    valor_hora_normal = horario_trabalho.valor_hora or (funcionario.salario / (horario_trabalho.horas_diarias * 22))
    
    # Buscar registros com horas extras
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario_id,
        RegistroPonto.data.between(data_inicio, data_fim),
        RegistroPonto.horas_trabalhadas_calculadas > horario_trabalho.horas_diarias
    ).all()
    
    custo_total_extras = 0
    
    for registro in registros:
        horas_extras = registro.horas_trabalhadas_calculadas - horario_trabalho.horas_diarias
        
        # Aplicar percentual correto baseado no tipo
        if registro.tipo_registro == 'sabado_horas_extras':
            percentual = 1.5  # 50% adicional
        elif registro.tipo_registro in ['domingo_horas_extras', 'feriado_trabalhado']:
            percentual = 2.0  # 100% adicional
        else:
            percentual = 1.5  # Padr√£o 50%
        
        custo_extras = horas_extras * valor_hora_normal * percentual
        custo_total_extras += custo_extras
    
    return custo_total_extras
```

### 3. **Valida√ß√£o de Hor√°rios Espec√≠ficos**
```python
def validar_calculos_por_horario():
    """Fun√ß√£o para validar se os c√°lculos est√£o corretos para cada tipo de hor√°rio"""
    
    horarios = HorarioTrabalho.query.all()
    
    for horario in horarios:
        print(f"\n=== HOR√ÅRIO: {horario.nome} ===")
        print(f"Horas di√°rias: {horario.horas_diarias}h")
        print(f"Entrada: {horario.entrada}")
        print(f"Sa√≠da: {horario.saida}")
        
        funcionarios = Funcionario.query.filter_by(horario_trabalho_id=horario.id).all()
        
        for funcionario in funcionarios:
            print(f"\nFuncion√°rio: {funcionario.nome}")
            
            # Buscar √∫ltimo registro
            ultimo_registro = RegistroPonto.query.filter_by(
                funcionario_id=funcionario.id
            ).order_by(RegistroPonto.data.desc()).first()
            
            if ultimo_registro:
                horas_trabalhadas = ultimo_registro.horas_trabalhadas_calculadas
                horas_extras_calculadas = max(0, horas_trabalhadas - horario.horas_diarias)
                
                print(f"  Horas trabalhadas: {horas_trabalhadas}h")
                print(f"  Horas extras: {horas_extras_calculadas}h")
                print(f"  Correto: {horas_extras_calculadas == ultimo_registro.horas_extras_calculadas}")
```

---

## üß™ TESTES NECESS√ÅRIOS

### 1. **Teste por Tipo de Hor√°rio**
```python
def testar_calculos_por_horario():
    # Teste 1: Funcion√°rio 8h/dia trabalhando 10h
    # Resultado esperado: 2h extras
    
    # Teste 2: Estagi√°rio 4h/dia trabalhando 6h
    # Resultado esperado: 2h extras
    
    # Teste 3: Meio per√≠odo 5h/dia trabalhando 7h
    # Resultado esperado: 2h extras
    
    # Teste 4: Hor√°rio 7h12-17h (8h48min) trabalhando 10h
    # Resultado esperado: 1h12min extras
```

### 2. **Valida√ß√£o de KPIs**
- **Horas Extras**: Deve somar apenas as horas que excedem o hor√°rio padr√£o
- **Custo Horas Extras**: Deve usar valor/hora espec√≠fico do hor√°rio
- **Produtividade**: Deve ser baseada nas horas esperadas do hor√°rio espec√≠fico

---

## üìä EXEMPLO PR√ÅTICO DE CORRE√á√ÉO

### Cen√°rio: 3 Funcion√°rios com Hor√°rios Diferentes

#### **Funcion√°rio A - Hor√°rio Comercial (8h/dia)**
- Trabalhou: 10h
- Horas extras: 10h - 8h = **2h extras**
- Custo extra: 2h √ó R$ 25/h √ó 1.5 = **R$ 75,00**

#### **Funcion√°rio B - Estagi√°rio (4h/dia)**
- Trabalhou: 6h
- Horas extras: 6h - 4h = **2h extras**
- Custo extra: 2h √ó R$ 15/h √ó 1.5 = **R$ 45,00**

#### **Funcion√°rio C - Meio Per√≠odo (5h/dia)**
- Trabalhou: 7h
- Horas extras: 7h - 5h = **2h extras**
- Custo extra: 2h √ó R$ 20/h √ó 1.5 = **R$ 60,00**

---

## ‚úÖ CHECKLIST DE VERIFICA√á√ÉO

### 1. **Verificar Integra√ß√£o com HorarioTrabalho**
- [ ] Engine de KPIs busca hor√°rio espec√≠fico do funcion√°rio
- [ ] C√°lculo de horas extras usa `horas_diarias` do hor√°rio
- [ ] Valor/hora √© espec√≠fico por hor√°rio ou calculado corretamente

### 2. **Validar C√°lculos**
- [ ] Funcion√°rio com 4h/dia: extras calculadas corretamente
- [ ] Funcion√°rio com 5h/dia: extras calculadas corretamente
- [ ] Funcion√°rio com 8h/dia: extras calculadas corretamente
- [ ] Funcion√°rio com 8h48min/dia: extras calculadas corretamente

### 3. **Testar KPIs**
- [ ] KPI "Horas Extras" mostra valor correto
- [ ] KPI "Valor Horas Extras" usa percentual correto
- [ ] KPI "Produtividade" usa horas esperadas corretas
- [ ] KPI "Custo M√£o de Obra" inclui extras corretas

### 4. **Verificar Tipos de Lan√ßamento**
- [ ] S√°bado: 50% adicional aplicado corretamente
- [ ] Domingo: 100% adicional aplicado corretamente
- [ ] Feriado trabalhado: 100% adicional aplicado corretamente

---

## üéØ CONCLUS√ÉO

**PROBLEMA CR√çTICO IDENTIFICADO**: O sistema pode estar calculando horas extras de forma gen√©rica, sem considerar o hor√°rio espec√≠fico de cada funcion√°rio.

**SOLU√á√ÉO**: Integrar completamente os c√°lculos com a tabela `HorarioTrabalho`, usando as `horas_diarias` espec√≠ficas de cada funcion√°rio como base para determinar quando h√° horas extras.

**IMPACTO**: Funcion√°rios com hor√°rios reduzidos (estagi√°rios, meio per√≠odo) podem estar tendo horas extras calculadas incorretamente, afetando custos e KPIs.

**URG√äNCIA**: Alta - Afeta diretamente os custos de m√£o de obra e a precis√£o dos KPIs financeiros.

---

**Pr√≥ximo Passo**: Implementar as corre√ß√µes no Engine de KPIs v4.0 e executar testes com funcion√°rios de diferentes hor√°rios para validar os c√°lculos.

