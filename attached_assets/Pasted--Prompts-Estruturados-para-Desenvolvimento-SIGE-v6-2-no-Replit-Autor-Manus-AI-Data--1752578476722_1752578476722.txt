# Prompts Estruturados para Desenvolvimento SIGE v6.2 no Replit

**Autor:** Manus AI  
**Data:** 15 de Julho de 2025  
**Sistema:** SIGE v6.2 - Sistema Integrado de Gestão Empresarial  
**Plataforma:** Replit com PostgreSQL 16 + Flask + Python 3.11

---

## Instruções Gerais para o Replit

Antes de executar qualquer prompt específico, certifique-se de que o ambiente Replit está configurado corretamente com:

- Python 3.11 ativo
- PostgreSQL 16 em execução
- Todas as dependências instaladas (Flask, SQLAlchemy, Bootstrap 5, Chart.js)
- Variáveis de ambiente configuradas
- Estrutura de arquivos conforme documentação

---

## CATEGORIA 1: PROMPTS DE PRIORIDADE CRÍTICA

### Prompt 1.1: Verificação e Correção da Configuração de Banco de Dados

```
Analise e corrija a configuração do banco de dados PostgreSQL no sistema SIGE v6.2. 

CONTEXTO:
- Sistema Flask com SQLAlchemy
- PostgreSQL 16 no Replit
- 26 modelos de banco implementados
- Engine de KPIs v4.0 que depende de dados consistentes

TAREFAS ESPECÍFICAS:
1. Verifique se todas as 26 tabelas estão sendo criadas corretamente
2. Confirme se as chaves estrangeiras estão funcionando adequadamente
3. Teste a integridade referencial entre Funcionario -> Departamento, Funcao, HorarioTrabalho
4. Valide se os índices estão otimizados para consultas de KPIs
5. Implemente script de inicialização com dados de teste se não existir
6. Configure backup automático dos dados

CRITÉRIOS DE SUCESSO:
- Todas as tabelas criadas sem erros
- Relacionamentos funcionando corretamente
- Dados de teste carregados (pelo menos 5 funcionários, 3 obras, 2 veículos)
- Consultas de KPIs executando em menos de 2 segundos
- Script de backup configurado

DADOS DE TESTE NECESSÁRIOS:
- Funcionários: João Silva (F0099), Cássio (F0006) conforme documentação
- Obras: Pelo menos 3 centros de custo ativos
- Registros de ponto: Junho 2025 com todos os tipos de lançamento
- Horários de trabalho: Jornada padrão 8h/dia, segunda a sexta
```

### Prompt 1.2: Validação e Correção do Engine de KPIs v4.0

```
Implemente e teste completamente o Engine de KPIs v4.0 com layout 4-4-4-3 (15 indicadores).

CONTEXTO:
- Sistema deve calcular KPIs individuais por funcionário
- Layout organizado: 4 KPIs básicos, 4 analíticos, 4 financeiros, 3 resumo
- Integração obrigatória com horários de trabalho
- Separação entre faltas justificadas e não justificadas

FÓRMULAS OBRIGATÓRIAS:
1. Produtividade = (horas_trabalhadas / horas_esperadas) * 100
2. Absenteísmo = (faltas_nao_justificadas / dias_uteis) * 100  
3. Horas Perdidas = (faltas_nao_justificadas * 8) + atrasos_horas
4. Eficiência = ((horas_trabalhadas - atrasos) / horas_trabalhadas) * 100
5. Custo Mão de Obra = (horas_normais * valor_hora) + (horas_extras * valor_hora * percentual_extra)

LAYOUT OBRIGATÓRIO (4-4-4-3):
Linha 1: Horas Trabalhadas, Horas Extras, Faltas, Atrasos
Linha 2: Produtividade (%), Absenteísmo (%), Média Diária, Faltas Justificadas  
Linha 3: Custo Mão de Obra, Custo Alimentação, Custo Transporte, Outros Custos
Linha 4: Horas Perdidas, Eficiência (%), Valor Falta Justificada

VALIDAÇÃO OBRIGATÓRIA:
- Teste com funcionário João (F0099): deve retornar 88,75h trabalhadas, 18h extras
- Teste com funcionário Cássio (F0006): deve retornar 159,25h trabalhadas, 94.8% produtividade
- Todos os 15 KPIs devem ser calculados sem erro
- Interface deve exibir layout 4-4-4-3 responsivo
```

### Prompt 1.3: Implementação e Teste do Sistema de Autenticação

```
Implemente sistema de autenticação robusto com Flask-Login e controles de segurança.

REQUISITOS DE SEGURANÇA:
1. Hash seguro de senhas (bcrypt ou similar)
2. Controle de sessão com timeout
3. Proteção CSRF em todos os formulários
4. Validação de entrada em todos os campos
5. Logs de auditoria para ações críticas

FUNCIONALIDADES OBRIGATÓRIAS:
- Login/logout funcional
- Proteção de todas as rotas sensíveis
- Redirecionamento adequado após login
- Mensagens de erro claras e seguras
- Prevenção de ataques de força bruta

TESTE DE VALIDAÇÃO:
- Criar usuário de teste: admin/senha123
- Testar login com credenciais corretas e incorretas
- Verificar se rotas protegidas redirecionam para login
- Confirmar que logout limpa sessão adequadamente
- Testar proteção CSRF em formulários

CRITÉRIOS DE SUCESSO:
- Sistema de login 100% funcional
- Todas as rotas adequadamente protegidas
- Logs de auditoria funcionando
- Testes de segurança passando
```


## CATEGORIA 2: PROMPTS DE PRIORIDADE MÉDIA

### Prompt 2.1: Otimização da Interface de Usuário e Responsividade

```
Otimize a interface do usuário para garantir experiência consistente em desktop e mobile.

CONTEXTO:
- Sistema utiliza Bootstrap 5
- Múltiplos módulos com diferentes layouts
- Dashboard com gráficos Chart.js
- Tabelas com DataTables.js

TAREFAS DE OTIMIZAÇÃO:
1. Verifique responsividade em dispositivos móveis (320px a 1920px)
2. Otimize tabelas para scroll horizontal em mobile
3. Ajuste gráficos Chart.js para diferentes tamanhos de tela
4. Implemente navegação mobile-friendly
5. Teste usabilidade em touch devices
6. Otimize carregamento de assets (CSS/JS)

MÓDULOS PRIORITÁRIOS:
- Dashboard principal (gráficos e KPIs)
- Perfil do funcionário (layout 4-4-4-3)
- Listagem de funcionários (cards + tabela)
- Formulários de cadastro

CRITÉRIOS DE VALIDAÇÃO:
- Interface funcional em iPhone SE (375px)
- Gráficos legíveis em tablet (768px)
- Navegação intuitiva em touch
- Tempo de carregamento < 3 segundos
- Todos os botões acessíveis por toque
```

### Prompt 2.2: Implementação de Validações Avançadas e Tratamento de Erros

```
Implemente sistema robusto de validações e tratamento de erros em toda a aplicação.

VALIDAÇÕES OBRIGATÓRIAS:
1. CPF: Algoritmo brasileiro oficial (já implementado - verificar)
2. Datas: Validação de períodos e consistência
3. Valores monetários: Formato brasileiro (R$) e valores positivos
4. Horários: Validação de entrada/saída e intervalos
5. Duplicatas: Prevenção de registros duplicados

TRATAMENTO DE ERROS:
- Mensagens de erro claras e em português
- Logs detalhados para debugging
- Fallbacks para falhas de banco de dados
- Validação client-side e server-side
- Sanitização de inputs para prevenir XSS

ÁREAS CRÍTICAS:
- Cadastro de funcionários (CPF, datas, salários)
- Registros de ponto (horários, tipos, consistência)
- Lançamentos de alimentação (duplicatas, valores)
- Custos de veículos (valores, datas, categorias)

TESTES OBRIGATÓRIOS:
- Tentar cadastrar CPF inválido
- Inserir datas inconsistentes (saída antes da entrada)
- Testar valores negativos em campos monetários
- Verificar prevenção de registros duplicados
- Validar comportamento com campos obrigatórios vazios
```

### Prompt 2.3: Otimização de Performance e Consultas de Banco

```
Otimize performance do sistema com foco em consultas de KPIs e relatórios.

ANÁLISE DE PERFORMANCE:
1. Identifique consultas lentas (> 2 segundos)
2. Analise queries do Engine de KPIs v4.0
3. Verifique índices em tabelas principais
4. Otimize joins complexos
5. Implemente cache para consultas frequentes

OTIMIZAÇÕES PRIORITÁRIAS:
- Consultas de KPIs por funcionário
- Dashboard com dados agregados
- Relatórios por período
- Filtros por centro de custo
- Listagem de funcionários com paginação

IMPLEMENTAÇÕES NECESSÁRIAS:
- Índices compostos em (funcionario_id, data)
- Cache Redis para KPIs calculados
- Paginação em listagens grandes
- Lazy loading para dados não críticos
- Otimização de queries N+1

MÉTRICAS DE SUCESSO:
- KPIs calculados em < 1 segundo
- Dashboard carregado em < 2 segundos
- Relatórios gerados em < 5 segundos
- Listagens com paginação eficiente
- Uso de memória otimizado
```

### Prompt 2.4: Sistema de Relatórios Avançado

```
Implemente e otimize sistema de relatórios com exportação em múltiplos formatos.

TIPOS DE RELATÓRIOS OBRIGATÓRIOS:
1. Relatório de Funcionários (completo com KPIs)
2. Relatório de Custos por Centro de Custo
3. Relatório de Produtividade por Período
4. Relatório de Veículos e Custos Operacionais
5. Relatório de Alimentação por Funcionário
6. Relatório Financeiro Consolidado
7. Relatório de Absenteísmo
8. Relatório de Horas Extras
9. Relatório de Eficiência por Departamento
10. Relatório de Análise de Rentabilidade

FORMATOS DE EXPORTAÇÃO:
- PDF com formatação profissional
- Excel com múltiplas abas e fórmulas
- CSV para análise externa

FUNCIONALIDADES AVANÇADAS:
- Filtros personalizáveis (período, funcionário, obra)
- Agendamento de relatórios automáticos
- Envio por email (opcional)
- Templates personalizáveis
- Gráficos incorporados nos PDFs

VALIDAÇÃO:
- Gerar relatório de funcionários para Junho/2025
- Exportar em todos os formatos
- Verificar integridade dos dados
- Testar filtros combinados
- Validar formatação profissional
```

## CATEGORIA 3: PROMPTS DE PRIORIDADE BAIXA (MELHORIAS)

### Prompt 3.1: Implementação de Dashboard Avançado com BI

```
Desenvolva dashboard executivo avançado com recursos de Business Intelligence.

FUNCIONALIDADES AVANÇADAS:
1. Gráficos interativos com drill-down
2. Comparação de períodos (mês atual vs anterior)
3. Análise de tendências com projeções
4. Alertas automáticos para métricas críticas
5. Filtros dinâmicos e salvos
6. Exportação de dashboards

GRÁFICOS OBRIGATÓRIOS:
- Evolução de custos por mês (linha)
- Distribuição de funcionários por obra (pizza)
- Produtividade média por departamento (barras)
- Absenteísmo por período (área)
- Custos por categoria (barras empilhadas)
- Eficiência da frota (gauge)

RECURSOS INTERATIVOS:
- Zoom em gráficos temporais
- Filtros por clique em legendas
- Tooltips detalhados
- Atualização em tempo real
- Comparação lado a lado

ALERTAS AUTOMÁTICOS:
- Absenteísmo > 10%
- Custos > orçamento
- Produtividade < 80%
- Veículos em manutenção > 20%
```

### Prompt 3.2: Sistema de Notificações e Alertas

```
Implemente sistema de notificações inteligentes para gestão proativa.

TIPOS DE NOTIFICAÇÕES:
1. Alertas de Produtividade (funcionário < 70%)
2. Alertas de Absenteísmo (> 10% no mês)
3. Alertas de Orçamento (custo > 90% do orçamento)
4. Alertas de Manutenção (veículos vencidos)
5. Alertas de Documentos (vencimento CNH, exames)

CANAIS DE NOTIFICAÇÃO:
- Notificações in-app (prioritário)
- Email (opcional)
- Dashboard com badges
- Relatórios automáticos

CONFIGURAÇÕES:
- Thresholds personalizáveis por usuário
- Frequência de verificação
- Tipos de alerta por perfil
- Histórico de notificações
- Ações rápidas a partir dos alertas

IMPLEMENTAÇÃO:
- Sistema de jobs para verificação periódica
- Templates de notificação
- Interface de configuração
- Log de notificações enviadas
```

### Prompt 3.3: API REST para Integrações Externas

```
Desenvolva API REST completa para integração com sistemas externos.

ENDPOINTS OBRIGATÓRIOS:
1. /api/funcionarios - CRUD completo
2. /api/kpis/{funcionario_id} - KPIs por funcionário
3. /api/obras - Gestão de centros de custo
4. /api/ponto - Registros de ponto
5. /api/custos - Custos por categoria
6. /api/relatorios - Geração de relatórios
7. /api/dashboard - Dados do dashboard

AUTENTICAÇÃO:
- JWT tokens
- Rate limiting
- Controle de permissões por endpoint
- Logs de acesso à API

DOCUMENTAÇÃO:
- Swagger/OpenAPI
- Exemplos de uso
- SDKs em Python/JavaScript
- Postman collection

FUNCIONALIDADES:
- Paginação em listagens
- Filtros avançados
- Versionamento da API
- Webhooks para eventos críticos
- Backup/restore via API
```

### Prompt 3.4: Módulo de Configurações Avançadas

```
Implemente módulo de configurações do sistema para personalização empresarial.

CONFIGURAÇÕES EMPRESARIAIS:
1. Dados da empresa (logo, nome, CNPJ)
2. Parâmetros de cálculo (percentuais de horas extras)
3. Tipos de lançamento personalizados
4. Categorias de custos customizáveis
5. Templates de relatórios
6. Configurações de backup

CONFIGURAÇÕES DE USUÁRIO:
- Preferências de interface
- Filtros padrão salvos
- Dashboards personalizados
- Notificações por perfil
- Timezone e localização

CONFIGURAÇÕES DO SISTEMA:
- Parâmetros de performance
- Configurações de email
- Integrações externas
- Logs e auditoria
- Políticas de retenção de dados

INTERFACE:
- Abas organizadas por categoria
- Validação em tempo real
- Preview de mudanças
- Backup de configurações
- Restauração de padrões
```

## CATEGORIA 4: PROMPTS DE DEPLOYMENT E PRODUÇÃO

### Prompt 4.1: Configuração de Produção no Replit

```
Configure o sistema para ambiente de produção no Replit com todas as otimizações necessárias.

CONFIGURAÇÕES DE PRODUÇÃO:
1. Variáveis de ambiente seguras
2. Configuração SSL/HTTPS
3. Compressão de assets
4. Cache de aplicação
5. Monitoramento de recursos
6. Logs estruturados

OTIMIZAÇÕES:
- Minificação de CSS/JS
- Compressão gzip
- Cache de headers HTTP
- CDN para assets estáticos
- Otimização de imagens

SEGURANÇA:
- Headers de segurança HTTP
- Proteção contra CSRF/XSS
- Rate limiting
- Firewall de aplicação
- Backup automático

MONITORAMENTO:
- Health checks
- Métricas de performance
- Logs de erro
- Alertas de sistema
- Dashboard de monitoramento

VALIDAÇÃO:
- Teste de carga com 100 usuários simultâneos
- Verificação de segurança
- Teste de backup/restore
- Validação de SSL
- Performance em produção
```

### Prompt 4.2: Documentação Técnica Completa

```
Crie documentação técnica completa para manutenção e evolução do sistema.

DOCUMENTAÇÃO OBRIGATÓRIA:
1. Manual de Instalação e Configuração
2. Guia de Desenvolvimento
3. Documentação da API
4. Manual do Usuário
5. Guia de Troubleshooting
6. Procedimentos de Backup/Restore

CONTEÚDO TÉCNICO:
- Arquitetura do sistema
- Modelo de dados (ERD)
- Fluxos de processo
- Algoritmos de KPIs
- Configurações de deployment
- Procedimentos de manutenção

DOCUMENTAÇÃO DE USUÁRIO:
- Guia de primeiros passos
- Manual de cada módulo
- FAQ com problemas comuns
- Vídeos tutoriais (scripts)
- Glossário de termos

FORMATOS:
- Markdown para desenvolvedores
- PDF para usuários finais
- Wiki online
- Comentários no código
- Diagramas técnicos

MANUTENÇÃO:
- Versionamento da documentação
- Processo de atualização
- Revisão periódica
- Feedback dos usuários
```


## INSTRUÇÕES DE EXECUÇÃO SEQUENCIAL

### Ordem Recomendada de Execução

Para garantir o desenvolvimento eficiente e sem conflitos, execute os prompts na seguinte ordem:

**FASE 1 - FUNDAÇÃO (Crítica)**
1. Prompt 1.1: Configuração de Banco de Dados
2. Prompt 1.2: Engine de KPIs v4.0
3. Prompt 1.3: Sistema de Autenticação

**FASE 2 - OTIMIZAÇÃO (Média)**
4. Prompt 2.2: Validações e Tratamento de Erros
5. Prompt 2.3: Otimização de Performance
6. Prompt 2.1: Interface de Usuário
7. Prompt 2.4: Sistema de Relatórios

**FASE 3 - MELHORIAS (Baixa)**
8. Prompt 3.1: Dashboard Avançado
9. Prompt 3.2: Sistema de Notificações
10. Prompt 3.4: Configurações Avançadas
11. Prompt 3.3: API REST

**FASE 4 - PRODUÇÃO (Final)**
12. Prompt 4.1: Configuração de Produção
13. Prompt 4.2: Documentação Técnica

### Validação Entre Fases

Após cada fase, execute os seguintes testes de validação:

**Após Fase 1:**
- Sistema inicializa sem erros
- Login funciona corretamente
- KPIs são calculados para funcionários de teste
- Banco de dados está populado com dados de teste

**Após Fase 2:**
- Interface responsiva em mobile e desktop
- Validações funcionam em todos os formulários
- Relatórios são gerados corretamente
- Performance está dentro dos parâmetros

**Após Fase 3:**
- Dashboard avançado está funcional
- Notificações são enviadas adequadamente
- API responde corretamente
- Configurações são salvas e aplicadas

**Após Fase 4:**
- Sistema está otimizado para produção
- Documentação está completa
- Monitoramento está ativo
- Backup está configurado

## CHECKLIST DE VALIDAÇÃO FINAL

### Funcionalidades Críticas ✓

- [ ] **Autenticação**: Login/logout funcionando
- [ ] **Banco de Dados**: Todas as 26 tabelas criadas
- [ ] **KPIs**: 15 indicadores calculados corretamente
- [ ] **Layout**: 4-4-4-3 implementado e responsivo
- [ ] **Funcionários**: Cadastro completo com validação CPF
- [ ] **Ponto**: 8 tipos de lançamento funcionando
- [ ] **Centros de Custo**: Obras como unidades de controle
- [ ] **Veículos**: Gestão de frota completa
- [ ] **Alimentação**: Controle de gastos e restaurantes
- [ ] **Relatórios**: 10 tipos com exportação

### Performance e Qualidade ✓

- [ ] **Responsividade**: Funciona em mobile (375px+)
- [ ] **Performance**: KPIs calculados em < 2 segundos
- [ ] **Validações**: Todos os campos validados
- [ ] **Segurança**: Proteção CSRF e XSS implementada
- [ ] **Erros**: Tratamento adequado em toda aplicação
- [ ] **Logs**: Sistema de auditoria funcionando

### Dados de Teste ✓

- [ ] **Funcionários**: João (F0099) e Cássio (F0006) cadastrados
- [ ] **Registros**: Junho 2025 com todos os tipos
- [ ] **KPIs**: Valores conforme documentação
- [ ] **Obras**: Pelo menos 3 centros de custo
- [ ] **Veículos**: 2+ veículos com custos
- [ ] **Alimentação**: Registros de teste

### Produção ✓

- [ ] **Deployment**: Configurado no Replit
- [ ] **SSL**: HTTPS funcionando
- [ ] **Backup**: Rotina automática configurada
- [ ] **Monitoramento**: Logs e métricas ativas
- [ ] **Documentação**: Manual técnico e usuário
- [ ] **API**: Endpoints funcionais (se implementada)

## COMANDOS ÚTEIS PARA O REPLIT

### Inicialização do Ambiente
```bash
# Verificar versão do Python
python3 --version

# Instalar dependências
pip install -r requirements.txt

# Verificar PostgreSQL
pg_isready

# Criar banco de dados
createdb sige_db

# Executar migrações
python3 -c "from app import db; db.create_all()"
```

### Comandos de Desenvolvimento
```bash
# Executar aplicação em modo debug
export FLASK_ENV=development
python3 main.py

# Executar testes
python3 -m pytest tests/

# Verificar logs
tail -f logs/app.log

# Backup do banco
pg_dump sige_db > backup_$(date +%Y%m%d).sql
```

### Comandos de Produção
```bash
# Executar com Gunicorn
gunicorn --bind 0.0.0.0:5000 main:app

# Verificar status
ps aux | grep gunicorn

# Monitorar recursos
top -p $(pgrep -f gunicorn)
```

## RECURSOS DE APOIO

### Documentação de Referência
- Flask: https://flask.palletsprojects.com/
- SQLAlchemy: https://docs.sqlalchemy.org/
- Bootstrap 5: https://getbootstrap.com/docs/5.0/
- Chart.js: https://www.chartjs.org/docs/
- PostgreSQL: https://www.postgresql.org/docs/

### Ferramentas de Teste
- Postman para API testing
- Browser DevTools para frontend
- pgAdmin para banco de dados
- Lighthouse para performance

### Contatos de Suporte
- Documentação do sistema: Arquivos anexados
- Especificações técnicas: SIGE v6.2 docs
- Dados de teste: Funcionários F0099 e F0006

---

**IMPORTANTE**: Execute cada prompt completamente antes de prosseguir para o próximo. Valide os resultados conforme os critérios especificados e documente qualquer desvio ou problema encontrado.

**SUCESSO**: O sistema estará completo quando todos os itens do checklist estiverem marcados e os testes de validação passarem sem erros.

