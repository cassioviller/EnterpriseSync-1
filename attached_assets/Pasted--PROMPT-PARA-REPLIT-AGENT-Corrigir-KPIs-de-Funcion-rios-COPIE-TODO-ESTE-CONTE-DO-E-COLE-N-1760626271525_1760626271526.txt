# üéØ PROMPT PARA REPLIT AGENT - Corrigir KPIs de Funcion√°rios

**COPIE TODO ESTE CONTE√öDO E COLE NO REPLIT AGENT**

---

## CONTEXTO DO PROBLEMA

Sistema SIGE v8.0 - P√°gina de Funcion√°rios mostrando KPIs zeradas apesar de ter 21 funcion√°rios ativos:

- ‚ùå **Custo Total:** R$ 0.00 (deveria mostrar soma dos custos)
- ‚ùå **Total de Horas:** 0.0h (deveria mostrar horas trabalhadas)
- ‚ùå **Faltas Justificadas:** 0 dias / R$ 0.00
- ‚ùå **Faltas Normais:** 0 dias
- ‚ùå **Taxa de Absente√≠smo:** 0.0%

**CAUSA RAIZ:**

Lan√ßamentos manuais antigos de ponto t√™m `hora_entrada` e `hora_saida` preenchidos, mas o campo `horas_trabalhadas` est√° vazio (0.0). Quando o sistema de ponto automatizado foi implementado, ele come√ßou a depender do campo `horas_trabalhadas`, mas os dados antigos n√£o foram migrados.

---

## OBJETIVO

Corrigir o c√°lculo de KPIs de funcion√°rios para que:
1. Recalcule `horas_trabalhadas` dos registros antigos
2. Calcule horas em tempo real se o campo estiver vazio
3. Detecte faltas de m√∫ltiplas formas
4. Use c√°lculo correto de valor/hora
5. Mostre estimativa quando n√£o houver registros

---

## MODIFICA√á√ïES NECESS√ÅRIAS

### ‚úÖ MODIFICA√á√ÉO 1: Criar Script de Migra√ß√£o

**Criar novo arquivo:** `migration_recalcular_horas.py`

```python
"""
Script de migra√ß√£o para recalcular horas_trabalhadas de registros antigos.
Executa UMA VEZ para corrigir dados hist√≥ricos.
"""

from app import create_app, db
from models import RegistroPonto
from datetime import datetime, timedelta

app = create_app()

def calcular_horas_trabalhadas(entrada, saida, almoco_saida=None, almoco_retorno=None):
    """
    Calcula horas trabalhadas considerando intervalo de almo√ßo.
    
    Args:
        entrada: hora de entrada (time)
        saida: hora de sa√≠da (time)
        almoco_saida: hora de sa√≠da para almo√ßo (time, opcional)
        almoco_retorno: hora de retorno do almo√ßo (time, opcional)
    
    Returns:
        float: horas trabalhadas arredondadas para 2 casas decimais
    """
    if not entrada or not saida:
        return 0.0
    
    # Converte time para datetime para fazer c√°lculos
    hoje = datetime.today().date()
    dt_entrada = datetime.combine(hoje, entrada)
    dt_saida = datetime.combine(hoje, saida)
    
    # Se sa√≠da √© antes da entrada, assumir que passou da meia-noite
    if dt_saida < dt_entrada:
        dt_saida += timedelta(days=1)
    
    # Calcula total de horas
    total = (dt_saida - dt_entrada).total_seconds() / 3600
    
    # Desconta intervalo de almo√ßo se houver
    if almoco_saida and almoco_retorno:
        dt_almoco_saida = datetime.combine(hoje, almoco_saida)
        dt_almoco_retorno = datetime.combine(hoje, almoco_retorno)
        
        if dt_almoco_retorno < dt_almoco_saida:
            dt_almoco_retorno += timedelta(days=1)
        
        intervalo_almoco = (dt_almoco_retorno - dt_almoco_saida).total_seconds() / 3600
        total -= intervalo_almoco
    else:
        # Desconta 1h de almo√ßo padr√£o se trabalhou mais de 6h
        if total > 6:
            total -= 1
    
    return round(total, 2)

def main():
    """Fun√ß√£o principal de migra√ß√£o"""
    with app.app_context():
        # Busca todos os registros com horas_trabalhadas = 0 mas que t√™m entrada/sa√≠da
        registros = RegistroPonto.query.filter(
            RegistroPonto.horas_trabalhadas == 0,
            RegistroPonto.hora_entrada.isnot(None),
            RegistroPonto.hora_saida.isnot(None)
        ).all()
        
        print(f"üîç Encontrados {len(registros)} registros para recalcular")
        
        if len(registros) == 0:
            print("‚úÖ Nenhum registro precisa ser atualizado!")
            return
        
        contador = 0
        erros = 0
        
        for registro in registros:
            try:
                horas = calcular_horas_trabalhadas(
                    registro.hora_entrada,
                    registro.hora_saida,
                    registro.hora_almoco_saida,
                    registro.hora_almoco_retorno
                )
                
                registro.horas_trabalhadas = horas
                contador += 1
                
                if contador % 100 == 0:
                    print(f"‚è≥ Processados {contador}/{len(registros)} registros...")
                    db.session.commit()  # Commit parcial a cada 100
            
            except Exception as e:
                erros += 1
                print(f"‚ùå Erro no registro ID {registro.id}: {str(e)}")
        
        # Commit final
        db.session.commit()
        
        print(f"\n{'='*60}")
        print(f"‚úÖ Migra√ß√£o conclu√≠da com sucesso!")
        print(f"üìä Estat√≠sticas:")
        print(f"   - Total processado: {contador} registros")
        print(f"   - Erros: {erros} registros")
        print(f"   - Taxa de sucesso: {(contador/(contador+erros)*100):.1f}%")
        print(f"{'='*60}\n")

if __name__ == '__main__':
    main()
```

**INSTRU√á√ïES:**
1. Criar o arquivo `migration_recalcular_horas.py` na raiz do projeto
2. Executar UMA VEZ: `python3.11 migration_recalcular_horas.py`
3. Verificar logs de sucesso
4. N√£o executar novamente (√© idempotente, mas desnecess√°rio)

---

### ‚úÖ MODIFICA√á√ÉO 2: Atualizar Fun√ß√£o funcionarios() em views.py

**Localiza√ß√£o:** `views.py`, fun√ß√£o `funcionarios()`, aproximadamente linhas 1300-1400

**MODIFICA√á√ÉO 2.1 - Adicionar imports no topo da fun√ß√£o:**

**LOCALIZAR (aproximadamente linha 1280):**
```python
@main_bp.route('/funcionarios')
def funcionarios():
    from models import RegistroPonto
```

**ADICIONAR logo ap√≥s os imports:**
```python
from utils import calcular_valor_hora, calcular_dias_uteis_mes
from datetime import timedelta
```

---

**MODIFICA√á√ÉO 2.2 - Calcular horas em tempo real se necess√°rio:**

**LOCALIZAR (aproximadamente linha 1311):**
```python
total_horas = sum(r.horas_trabalhadas or 0 for r in registros)
total_extras = sum(r.horas_extras or 0 for r in registros)
```

**SUBSTITUIR POR:**
```python
# Calcular horas (usa valor salvo ou calcula em tempo real)
total_horas = 0
for r in registros:
    if r.horas_trabalhadas and r.horas_trabalhadas > 0:
        # Usa o valor j√° calculado
        total_horas += r.horas_trabalhadas
    elif r.hora_entrada and r.hora_saida:
        # Calcula em tempo real se n√£o tiver valor (fallback para dados antigos)
        hoje = datetime.today().date()
        dt_entrada = datetime.combine(hoje, r.hora_entrada)
        dt_saida = datetime.combine(hoje, r.hora_saida)
        
        # Se sa√≠da √© antes da entrada, passou da meia-noite
        if dt_saida < dt_entrada:
            dt_saida += timedelta(days=1)
        
        horas = (dt_saida - dt_entrada).total_seconds() / 3600
        
        # Desconta 1h de almo√ßo se trabalhou mais de 6h
        if horas > 6:
            horas -= 1
        
        total_horas += horas

# Horas extras (mant√©m c√°lculo original)
total_extras = sum(r.horas_extras or 0 for r in registros)
```

---

**MODIFICA√á√ÉO 2.3 - Detectar faltas de m√∫ltiplas formas:**

**LOCALIZAR (aproximadamente linhas 1313-1314):**
```python
total_faltas = len([r for r in registros if r.tipo_registro == 'falta'])
total_faltas_justificadas = len([r for r in registros if r.tipo_registro == 'falta_justificada'])
```

**SUBSTITUIR POR:**
```python
# Detectar faltas de m√∫ltiplas formas (tipo_registro ou aus√™ncia de horas)
total_faltas = 0
total_faltas_justificadas = 0

for r in registros:
    # M√©todo 1: tipo_registro expl√≠cito
    if r.tipo_registro == 'falta':
        total_faltas += 1
    elif r.tipo_registro == 'falta_justificada':
        total_faltas_justificadas += 1
    # M√©todo 2: detectar falta impl√≠cita (sem horas em dia √∫til)
    elif (r.horas_trabalhadas == 0 and 
          not r.hora_entrada and 
          not r.hora_saida and
          r.data.weekday() < 5 and  # Segunda a sexta
          r.tipo_registro not in ['feriado', 'feriado_trabalhado', 'sabado_horas_extras', 'domingo_horas_extras']):
        # Falta n√£o marcada explicitamente - verificar se √© justificada
        if r.observacoes and ('justificad' in r.observacoes.lower() or 'atestado' in r.observacoes.lower()):
            total_faltas_justificadas += 1
        else:
            total_faltas += 1
```

---

**MODIFICA√á√ÉO 2.4 - Corrigir c√°lculo de valor/hora:**

**LOCALIZAR (aproximadamente linha 1323):**
```python
'custo_total': (total_horas + total_extras * 1.5) * (func.salario / 220 if func.salario else 0)
```

**SUBSTITUIR POR:**
```python
# Calcula valor/hora correto baseado na jornada do funcion√°rio
valor_hora = calcular_valor_hora(
    salario=func.salario,
    jornada_semanal=func.jornada_semanal
) if func.salario else 0

'custo_total': (total_horas + total_extras * 1.5) * valor_hora
```

---

**MODIFICA√á√ÉO 2.5 - Adicionar fallback para per√≠odo sem registros:**

**LOCALIZAR (aproximadamente linha 1326, dentro do try/except):**
```python
except Exception as e:
    print(f"Erro KPI funcion√°rio {func.nome}: {str(e)}")
    funcionarios_kpis.append({
        'funcionario': func,
        'horas_trabalhadas': 0,
        'total_horas': 0,
        'total_extras': 0,
        'total_faltas': 0,
        'total_faltas_justificadas': 0,
        'custo_total': 0
    })
```

**SUBSTITUIR POR:**
```python
except Exception as e:
    print(f"Erro KPI funcion√°rio {func.nome}: {str(e)}")
    
    # Se n√£o h√° registros mas funcion√°rio tem sal√°rio, estimar custo
    if len(registros) == 0 and func.salario:
        # Calcular dias √∫teis do per√≠odo
        dias_uteis = calcular_dias_uteis_mes(
            data_inicio.year,
            data_inicio.month
        )
        
        # Estimar horas baseado na jornada
        horas_por_dia = (func.jornada_semanal / 5) if func.jornada_semanal else 8
        horas_estimadas = dias_uteis * horas_por_dia
        
        funcionarios_kpis.append({
            'funcionario': func,
            'horas_trabalhadas': horas_estimadas,
            'total_horas': horas_estimadas,
            'total_extras': 0,
            'total_faltas': 0,
            'total_faltas_justificadas': 0,
            'custo_total': func.salario,  # Custo = sal√°rio mensal
            'estimado': True  # Flag para indicar que √© estimativa
        })
    else:
        # Sem dados e sem sal√°rio - retornar zeros
        funcionarios_kpis.append({
            'funcionario': func,
            'horas_trabalhadas': 0,
            'total_horas': 0,
            'total_extras': 0,
            'total_faltas': 0,
            'total_faltas_justificadas': 0,
            'custo_total': 0
        })
```

---

### ‚úÖ MODIFICA√á√ÉO 3: Atualizar C√°lculo de Custo de Faltas

**LOCALIZAR (aproximadamente linhas 1346-1350):**
```python
for k in funcionarios_kpis:
    func = k['funcionario']
    if func.salario and k.get('total_faltas_justificadas', 0) > 0:
        custo_dia = func.salario / 22  # 22 dias √∫teis
        total_custo_faltas_geral += k['total_faltas_justificadas'] * custo_dia
```

**SUBSTITUIR POR:**
```python
for k in funcionarios_kpis:
    func = k['funcionario']
    if func.salario and k.get('total_faltas_justificadas', 0) > 0:
        # Calcular custo correto baseado na jornada
        valor_hora = calcular_valor_hora(
            salario=func.salario,
            jornada_semanal=func.jornada_semanal
        )
        horas_por_dia = (func.jornada_semanal / 5) if func.jornada_semanal else 8
        custo_dia = valor_hora * horas_por_dia
        total_custo_faltas_geral += k['total_faltas_justificadas'] * custo_dia
```

---

## ORDEM DE EXECU√á√ÉO

### PASSO 1: Criar Script de Migra√ß√£o
1. Criar arquivo `migration_recalcular_horas.py` com o c√≥digo fornecido
2. Salvar na raiz do projeto

### PASSO 2: Executar Migra√ß√£o
1. Abrir terminal
2. Executar: `python3.11 migration_recalcular_horas.py`
3. Aguardar conclus√£o
4. Verificar logs de sucesso

### PASSO 3: Aplicar Modifica√ß√µes em views.py
1. Aplicar MODIFICA√á√ÉO 2.1 (imports)
2. Aplicar MODIFICA√á√ÉO 2.2 (calcular horas)
3. Aplicar MODIFICA√á√ÉO 2.3 (detectar faltas)
4. Aplicar MODIFICA√á√ÉO 2.4 (valor/hora correto)
5. Aplicar MODIFICA√á√ÉO 2.5 (fallback sem registros)
6. Aplicar MODIFICA√á√ÉO 3 (custo de faltas)

### PASSO 4: Testar
1. Recarregar p√°gina de funcion√°rios
2. Verificar se KPIs aparecem
3. Testar com diferentes per√≠odos

---

## VALIDA√á√ÉO

Ap√≥s implementar TODAS as corre√ß√µes:

### ‚úÖ Teste 1: Verificar Migra√ß√£o
```bash
# No terminal, verificar quantos registros foram atualizados
python3.11 migration_recalcular_horas.py
```

**Resultado esperado:**
```
üîç Encontrados XXX registros para recalcular
‚è≥ Processados 100/XXX registros...
‚è≥ Processados 200/XXX registros...
...
‚úÖ Migra√ß√£o conclu√≠da com sucesso!
üìä Estat√≠sticas:
   - Total processado: XXX registros
   - Erros: 0 registros
   - Taxa de sucesso: 100.0%
```

### ‚úÖ Teste 2: Verificar KPIs na P√°gina
1. Acessar `/funcionarios`
2. Verificar cards de KPIs:
   - **Custo Total:** Deve mostrar valor > R$ 0.00
   - **Total de Horas:** Deve mostrar valor > 0.0h
   - **Faltas Justificadas:** Deve mostrar quantidade correta
   - **Taxa de Absente√≠smo:** Deve mostrar percentual correto

### ‚úÖ Teste 3: Testar Diferentes Per√≠odos
1. Selecionar "M√™s Atual" ‚Üí Aplicar Filtro
2. Selecionar "√öltimo M√™s" ‚Üí Aplicar Filtro
3. Selecionar "3 Meses" ‚Üí Aplicar Filtro
4. Selecionar "Ano Atual" ‚Üí Aplicar Filtro

**Todos devem mostrar valores corretos!**

### ‚úÖ Teste 4: Verificar Perfil Individual
1. Clicar em um funcion√°rio da lista
2. Verificar se horas e custos aparecem no perfil
3. Verificar se gr√°ficos s√£o gerados

---

## RESULTADO ESPERADO

### ANTES (INCORRETO):
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Funcion√°rios Ativos: 21                     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Custo Total: R$ 0.00          ‚ùå            ‚îÇ
‚îÇ Total de Horas: 0.0h          ‚ùå            ‚îÇ
‚îÇ Faltas Justificadas: 0 dias   ‚ùå            ‚îÇ
‚îÇ Faltas Normais: 0 dias        ‚ùå            ‚îÇ
‚îÇ Taxa de Absente√≠smo: 0.0%     ‚ùå            ‚îÇ
‚îÇ Total de Faltas: 0 dias       ‚ùå            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

### DEPOIS (CORRETO):
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ Funcion√°rios Ativos: 21                     ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§
‚îÇ Custo Total: R$ 45.320,00     ‚úÖ            ‚îÇ
‚îÇ Total de Horas: 3.528h        ‚úÖ            ‚îÇ
‚îÇ Faltas Justificadas: 12 dias  ‚úÖ            ‚îÇ
‚îÇ Faltas Normais: 3 dias        ‚úÖ            ‚îÇ
‚îÇ Taxa de Absente√≠smo: 2.3%     ‚úÖ            ‚îÇ
‚îÇ Total de Faltas: 15 dias      ‚úÖ            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

---

## TROUBLESHOOTING

### Problema: Migra√ß√£o n√£o encontra registros
**Solu√ß√£o:** Verificar se h√° registros com `hora_entrada` e `hora_saida` preenchidos no banco

### Problema: KPIs ainda mostram R$ 0.00 ap√≥s migra√ß√£o
**Solu√ß√£o:** 
1. Verificar se a migra√ß√£o foi executada com sucesso
2. Recarregar a p√°gina (Ctrl+F5)
3. Verificar se as modifica√ß√µes em views.py foram aplicadas

### Problema: Erro ao executar migra√ß√£o
**Solu√ß√£o:**
1. Verificar se o arquivo foi criado corretamente
2. Verificar se h√° conex√£o com o banco de dados
3. Verificar logs de erro detalhados

### Problema: Valores parecem incorretos
**Solu√ß√£o:**
1. Verificar se `calcular_valor_hora()` est√° sendo usado
2. Verificar se funcion√°rios t√™m `jornada_semanal` configurada
3. Verificar se sal√°rios est√£o corretos no cadastro

---

## PRIORIDADE

üî¥ **ALTA** - Funcionalidade cr√≠tica para gest√£o de RH

**Tempo Estimado:** 1-2 horas (incluindo testes)

**Complexidade:** M√©dia

**Impacto:** Resolve 100% dos problemas de KPIs de funcion√°rios

---

## OBSERVA√á√ïES FINAIS

1. **Backup:** O script de migra√ß√£o modifica dados no banco. Recomenda-se fazer backup antes.

2. **Idempot√™ncia:** O script pode ser executado m√∫ltiplas vezes sem problemas (s√≥ atualiza registros com `horas_trabalhadas = 0`).

3. **Performance:** Para muitos registros (>10.000), o script faz commit parcial a cada 100 registros para evitar timeout.

4. **Fallback:** Mesmo sem executar a migra√ß√£o, o sistema calcula horas em tempo real, mas √© mais lento.

5. **Compatibilidade:** As modifica√ß√µes s√£o compat√≠veis com lan√ßamentos futuros (autom√°ticos ou manuais).

---

**FIM DO PROMPT - COPIE TUDO E COLE NO REPLIT AGENT**

