# Prompt para o Replit: Reestruturação da Página de Funcionários e Gestão de Horários de Trabalho

Este prompt detalha as próximas etapas de implementação para o Sistema Integrado de Gestão Empresarial (SIGE) "Estruturas do Vale", focando na reestruturação da página de funcionários e na introdução de um sistema robusto de gestão de horários de trabalho. O objetivo é aprimorar a usabilidade, a visualização de dados e a precisão dos cálculos de ponto.

## 1. Modificações no Cabeçalho (Header)

**Objetivo**: Ajustar a navegação principal do sistema.

*   **`templates/base.html` ou arquivo de cabeçalho correspondente**: Localize o elemento de navegação (navbar) do cabeçalho.
    *   **Comando**: Remova completamente o link ou item de menu que faz referência a "Ponto".
    *   **Comando**: Adicione um novo link ou item de menu com o texto "Funcionários" que direcione para a rota `/funcionarios`.

## 2. Reestruturação da Página de Funcionários

**Objetivo**: Transformar a listagem tabular de funcionários em um layout de grid com cards, mantendo e aprimorando as funcionalidades internas.

*   **`routes/cadastros.py` (ou `routes/funcionarios.py` se for um blueprint separado)**:
    *   **Comando**: Certifique-se de que a rota `/funcionarios` (ou a rota de listagem de funcionários existente) esteja buscando todos os dados necessários para exibir nos cards (Nome, CPF, Função, Departamento, Status, e o novo campo de Horário de Trabalho).
*   **`templates/cadastros/funcionarios.html` (ou `templates/funcionarios/index.html`)**:
    *   **Comando**: Substitua a tabela de listagem de funcionários existente por uma estrutura de grid (utilizando CSS Grid ou Flexbox) para exibir os funcionários como cards.
    *   **Comando**: Para cada funcionário, crie um card que contenha:
        *   Nome Completo do Funcionário (em destaque).
        *   **Comando**: Garanta que a foto do funcionário no card seja quadrada (ex: utilizando CSS `aspect-ratio: 1/1;` e `object-fit: cover;`).
        *   Função.
        *   Departamento.
        *   Status (Ativo/Inativo).
        *   **Comando**: Adicione um botão ou link "Ver Perfil" em cada card que direcione para a página de perfil detalhado do funcionário (`/funcionarios/<id>`).
        *   **Comando**: Adicione um botão ou ícone para "Editar" o funcionário, que deve abrir o formulário modal de edição.
        *   **Comando**: Adicione um botão ou ícone para "Excluir" o funcionário (com confirmação).
    *   **Comando**: Mantenha as funcionalidades de pesquisa e paginação, adaptando-as para o novo layout de grid.
*   **`static/css/style.css` (ou um novo arquivo CSS para funcionários)**:
    *   **Comando**: Implemente os estilos CSS para o layout de grid, para os cards dos funcionários e para os botões/ícones dentro dos cards. Garanta que o design seja responsivo.
*   **`static/js/script.js` (ou um novo arquivo JS para funcionários)**:
    *   **Comando**: Adapte a lógica JavaScript existente para lidar com as interações dos cards (cliques nos botões de "Ver Perfil", "Editar", "Excluir").
    *   **Comando**: Garanta que o formulário modal de adição/edição de funcionários continue funcionando corretamente com o novo layout.

## 3. Cadastro de Horários de Trabalho

**Objetivo**: Criar um módulo para gerenciar horários de trabalho padrão que poderão ser atribuídos aos funcionários.

*   **`models.py`**: Crie um novo modelo (tabela) para `HorariosTrabalho`.
    *   **Comando**: Defina os campos:
        *   `id` (PRIMARY KEY, INTEGER)
        *   `nome` (TEXT, UNIQUE, NOT NULL) - Ex: "Comercial 8h-18h", "Administrativo 9h-17h"
        *   `entrada` (TEXT, NOT NULL) - Formato HH:MM
        *   `saida_almoco` (TEXT, NOT NULL) - Formato HH:MM
        *   `retorno_almoco` (TEXT, NOT NULL) - Formato HH:MM
        *   `saida` (TEXT, NOT NULL) - Formato HH:MM
        *   `dias_semana` (TEXT, NOT NULL) - Ex: "Seg,Ter,Qua,Qui,Sex" ou "1,2,3,4,5" (para dias da semana)
*   **`routes/cadastros.py` (ou um novo blueprint `routes/horarios.py`)**:
    *   **Comando**: Crie as rotas CRUD para `HorariosTrabalho`:
        *   Listagem (GET `/cadastros/horarios`)
        *   Criação (POST `/cadastros/horarios/novo`)
        *   Edição (GET/POST `/cadastros/horarios/editar/<id>`)
        *   Exclusão (POST `/cadastros/horarios/excluir/<id>`)
*   **`templates/cadastros/horarios_trabalho.html`**: Crie a página para gerenciar os horários de trabalho.
    *   **Comando**: Implemente uma tabela de listagem com Nome, Entrada, Saída Almoço, Retorno Almoço, Saída, Dias da Semana, e Ações (Editar, Excluir).
    *   **Comando**: Crie um formulário modal para adicionar/editar horários de trabalho com todos os campos definidos no modelo `HorariosTrabalho`.

## 4. Integração do Horário de Trabalho no Perfil do Funcionário

**Objetivo**: Permitir a atribuição de um horário de trabalho padrão a cada funcionário.

*   **`models.py`**: Modifique o modelo `Funcionarios`.
    *   **Comando**: Adicione um novo campo `horario_trabalho_id` (INTEGER) que será uma chave estrangeira referenciando `HorariosTrabalho.id`.
*   **`routes/cadastros.py` (ou `routes/funcionarios.py`)**:
    *   **Comando**: Ao carregar o formulário de adição/edição de funcionários, popule um dropdown (select) com os `HorariosTrabalho` disponíveis, permitindo ao usuário selecionar um horário para o funcionário.
    *   **Comando**: Ao salvar o formulário do funcionário, associe o `horario_trabalho_id` selecionado ao registro do funcionário.
*   **`templates/cadastros/funcionarios.html` (formulário modal)**:
    *   **Comando**: Adicione um campo `select` para o "Horário de Trabalho" no formulário de adição/edição de funcionários. Este campo deve ser preenchido dinamicamente com os horários cadastrados.
*   **`templates/perfil_funcionario.html`**: Na página de perfil do funcionário.
    *   **Comando**: Exiba o "Horário de Trabalho" atribuído ao funcionário, mostrando o nome do horário e seus detalhes (Entrada, Saída Almoço, Retorno Almoço, Saída, Dias da Semana).

## 5. Ajuste dos Cálculos de Ponto (Horas Extras, Absenteísmo, Atrasos)

**Objetivo**: Utilizar o horário de trabalho atribuído para cálculos mais precisos e consistentes.

*   **`routes/ponto.py` (ou a lógica de cálculo de ponto)**:
    *   **Comando**: Modifique a lógica de cálculo de "Horas Extras". Agora, ao invés de usar um horário fixo, recupere o `HorarioTrabalho` associado ao funcionário para o dia em questão. Compare as horas registradas com o horário padrão para determinar as horas extras.
    *   **Comando**: Modifique a lógica de cálculo de "Atrasos". Compare a hora de entrada registrada com a `entrada` definida no `HorarioTrabalho` do funcionário para o dia. Se a entrada registrada for posterior, registre um atraso.
    *   **Comando**: Modifique a lógica de cálculo de "Absenteísmo". Para cada dia de trabalho (conforme `dias_semana` do `HorarioTrabalho`), verifique se há um registro de ponto. Se não houver e não houver uma ocorrência justificada, registre como falta.
*   **`templates/perfil_funcionario.html` (seção de KPIs e Histórico de Ponto)**:
    *   **Comando**: Garanta que as KPIs de Horas Extras, Atrasos e Absenteísmo exibam os valores calculados com base no novo sistema de horários.
    *   **Comando**: Na tabela de Histórico de Ponto, os cálculos de Horas Trabalhadas e Horas Extras para cada registro devem agora considerar o `HorarioTrabalho` do funcionário para aquele dia.

## Próximos Passos no Replit

Siga a ordem dos módulos para garantir uma implementação estruturada. Para cada comando, foque em:

1.  **Backend**: Implementar as modificações nos modelos, rotas e lógica de cálculo no Flask.
2.  **Frontend**: Desenvolver as alterações nos templates HTML e a lógica JavaScript para a interface do usuário.
3.  **Testes**: Testar cada funcionalidade após a implementação para garantir o correto funcionamento e a integração. Verifique especialmente os cálculos de ponto com diferentes horários de trabalho.

Este roteiro detalhado deve guiar o desenvolvimento das novas funcionalidades no seu Sistema Integrado de Gestão Empresarial no Replit. Boa sorte!

