from flask import Blueprint, render_template, request, redirect, url_for, flash, jsonify, make_response, send_file, session
from flask_login import login_required, current_user, login_user, logout_user
from werkzeug.security import check_password_hash, generate_password_hash
from models import db, Usuario, TipoUsuario, Funcionario, Obra, RDO, RDOMaoObra, RDOEquipamento, RDOOcorrencia, RDOFoto, AlocacaoEquipe, Servico, ServicoObra, ServicoObraReal, RDOServicoSubatividade, SubatividadeMestre
from auth import super_admin_required, admin_required, funcionario_required
from utils.tenant import get_tenant_admin_id

# API RDO Refatorada integrada inline na fun√ß√£o salvar_rdo_flexivel
from datetime import datetime, date, timedelta
from sqlalchemy import func, desc, or_, and_, text
from sqlalchemy.exc import IntegrityError
import os
import json

# SISTEMA DE LOG DETALHADO PARA M√ìDULOS
import sys
import importlib.util

def verificar_modulo_detalhado(nome_modulo, descricao=""):
    """Verificar se um m√≥dulo existe e mostrar logs detalhados"""
    try:
        spec = importlib.util.find_spec(nome_modulo)
        if spec is None:
            print(f"‚ùå M√ìDULO N√ÉO ENCONTRADO: {nome_modulo} ({descricao})")
            print(f"   üìç Localiza√ß√£o esperada: {nome_modulo.replace('.', '/')}.py")
            print(f"   üìÇ Python path: {sys.path}")
            return False
        else:
            print(f"‚úÖ M√ìDULO ENCONTRADO: {nome_modulo} ({descricao})")
            print(f"   üìç Localiza√ß√£o: {spec.origin}")
            return True
    except Exception as e:
        print(f"üö® ERRO AO VERIFICAR M√ìDULO {nome_modulo}: {e}")
        return False

print("üîç VERIFICA√á√ÉO DETALHADA DE M√ìDULOS - IN√çCIO")
print("=" * 60)

# Verificar m√≥dulos espec√≠ficos que est√£o falhando
modulos_verificar = [
    ('utils.idempotency', 'Utilit√°rios de idempot√™ncia'),
    ('utils.circuit_breaker', 'Circuit breakers para resili√™ncia'),
    ('utils.saga', 'Padr√£o SAGA para transa√ß√µes'),
    ('migrations', 'Sistema de migra√ß√µes autom√°ticas'),
    ('models', 'Modelos do banco de dados'),
    ('auth', 'Sistema de autentica√ß√£o')
]

modulos_encontrados = []
modulos_faltando = []

for modulo, desc in modulos_verificar:
    if verificar_modulo_detalhado(modulo, desc):
        modulos_encontrados.append(modulo)
    else:
        modulos_faltando.append(modulo)

print("\nüìä RESUMO DA VERIFICA√á√ÉO:")
print(f"   ‚úÖ M√≥dulos encontrados: {len(modulos_encontrados)}")
print(f"   ‚ùå M√≥dulos faltando: {len(modulos_faltando)}")

if modulos_faltando:
    print(f"\nüö® M√ìDULOS FALTANDO: {', '.join(modulos_faltando)}")
    print("   üí° A√ß√£o recomendada: Verificar se arquivos existem e caminhos est√£o corretos")

print("=" * 60)

# Importar utilit√°rios de resili√™ncia
try:
    # Idempot√™ncia removida conforme solicita√ß√£o do usu√°rio
    from utils.circuit_breaker import circuit_breaker, pdf_generation_fallback, database_query_fallback
    from utils.saga import RDOSaga, FuncionarioSaga
    print("‚úÖ Utilit√°rios de resili√™ncia importados com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è MODULO UTILS FALTANDO: {e}")
    print("   üìù Criando fallbacks para manter compatibilidade...")
    # Fallbacks para manter compatibilidade
    def idempotent(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    
    def circuit_breaker(*args, **kwargs):
        def decorator(func):
            return func
        return decorator
    print("   ‚úÖ Fallbacks criados com sucesso")

main_bp = Blueprint('main', __name__)

def safe_db_operation(operation, default_value=None):
    """Executa opera√ß√£o no banco com tratamento seguro de transa√ß√£o"""
    try:
        return operation()
    except Exception as e:
        print(f"ERRO DB OPERATION: {str(e)}")
        try:
            db.session.rollback()
        except:
            pass
        return default_value


def _calcular_funcionarios_departamento(admin_id):
    """Calcula funcion√°rios por departamento com prote√ß√£o de transa√ß√£o"""
    try:
        from models import Departamento
        funcionarios_por_departamento = {}
        
        # Query corrigida com JOIN expl√≠cito
        departamentos = db.session.execute(text("""
            SELECT d.nome as nome, COALESCE(COUNT(f.id), 0) as total
            FROM departamento d 
            LEFT JOIN funcionario f ON f.departamento_id = d.id 
                AND f.ativo = true 
                AND f.admin_id = :admin_id
            GROUP BY d.nome 
            ORDER BY total DESC
        """), {'admin_id': admin_id}).fetchall()
        
        funcionarios_por_departamento = {
            dept[0]: dept[1] for dept in departamentos if dept[1] > 0
        }
        
        # Adicionar funcion√°rios sem departamento
        sem_dept = Funcionario.query.filter_by(
            admin_id=admin_id, 
            ativo=True, 
            departamento_id=None
        ).count()
        if sem_dept > 0:
            funcionarios_por_departamento['Sem Departamento'] = sem_dept
            
        return funcionarios_por_departamento
    except Exception as e:
        print(f"Erro funcion√°rios por departamento: {e}")
        db.session.rollback()
        return {}

def _calcular_custos_obra(admin_id, data_inicio, data_fim):
    """Calcula custos por obra com prote√ß√£o de transa√ß√£o"""
    try:
        from models import CustoVeiculo, RegistroPonto, RegistroAlimentacao
        custos_por_obra = {}
        
        obras_admin = Obra.query.filter_by(admin_id=admin_id).all()
        
        for obra in obras_admin:
            custo_total_obra = 0
            
            # Somar custos de m√£o de obra (registros de ponto)
            registros_obra = RegistroPonto.query.filter(
                RegistroPonto.obra_id == obra.id,
                RegistroPonto.data >= data_inicio,
                RegistroPonto.data <= data_fim
            ).all()
            
            for registro in registros_obra:
                funcionario = Funcionario.query.get(registro.funcionario_id)
                if funcionario and funcionario.salario:
                    valor_hora = funcionario.salario / 220
                    horas = (registro.horas_trabalhadas or 0) + (registro.horas_extras or 0) * 1.5
                    custo_total_obra += horas * valor_hora
            
            # Somar custos de ve√≠culos da obra
            try:
                # ‚úÖ CORRE√á√ÉO: Verificar se CustoVeiculo tem o atributo obra_id
                if hasattr(CustoVeiculo, 'obra_id'):
                    veiculos_obra = CustoVeiculo.query.filter(
                        CustoVeiculo.obra_id == obra.id,
                        CustoVeiculo.data_custo >= data_inicio,
                        CustoVeiculo.data_custo <= data_fim
                    ).all()
                else:
                    veiculos_obra = []  # Fallback se campo n√£o existir
                custo_total_obra += sum(v.valor or 0 for v in veiculos_obra)
            except:
                pass
            
            if custo_total_obra > 0:
                custos_por_obra[obra.nome] = round(custo_total_obra, 2)
                
        return custos_por_obra
    except Exception as e:
        print(f"Erro custos por obra: {e}")
        db.session.rollback()
        return {}

# Health check endpoint para EasyPanel
@main_bp.route('/health')
def health_check():
    try:
        # Verificar conex√£o com banco
        db.session.execute(text('SELECT 1'))
        return {'status': 'healthy', 'database': 'connected', 'veiculos_check': '/health/veiculos'}, 200
    except Exception as e:
        return {'status': 'unhealthy', 'error': str(e)}, 500

# Health check espec√≠fico para ve√≠culos
@main_bp.route('/health/veiculos')
def health_check_veiculos():
    """Health check detalhado do sistema de ve√≠culos para produ√ß√£o"""
    start_time = datetime.now()
    
    # Inicializar resultado e vari√°veis cr√≠ticas ANTES dos try blocks
    resultado = {
        'timestamp': start_time.isoformat(),
        'status': 'unknown',
        'checks': {},
        'errors': [],
        'warnings': [],
        'duracao_ms': 0
    }
    
    # Inicializar tabelas_existentes como lista vazia para evitar NameError
    tabelas_existentes = []
    tabelas_essenciais = ['veiculo', 'uso_veiculo', 'custo_veiculo', 'passageiro_veiculo']
    tabelas_obsoletas = ['alocacao_veiculo', 'equipe_veiculo', 'transferencia_veiculo', 'manutencao_veiculo', 'alerta_veiculo']
    
    try:
        # 1. Verificar conex√£o com banco
        try:
            db.session.execute(text("SELECT 1"))
            resultado['checks']['database_connection'] = 'OK'
        except Exception as e:
            resultado['checks']['database_connection'] = 'FAIL'
            resultado['errors'].append(f"Conex√£o banco: {str(e)[:200]}")  # Limitar tamanho da mensagem
            
        # 2. Verificar tabelas essenciais
        try:
            from sqlalchemy import inspect
            inspector = inspect(db.engine)
            tabelas_existentes = inspector.get_table_names()
            
            # Verificar tabelas essenciais
            for tabela in tabelas_essenciais:
                if tabela in tabelas_existentes:
                    resultado['checks'][f'tabela_{tabela}'] = 'OK'
                else:
                    resultado['checks'][f'tabela_{tabela}'] = 'MISSING'
                    resultado['errors'].append(f"Tabela essencial ausente: {tabela}")
            
            # Verificar se tabelas obsoletas foram removidas
            for tabela in tabelas_obsoletas:
                if tabela in tabelas_existentes:
                    resultado['checks'][f'obsoleta_{tabela}'] = 'PRESENT'
                    resultado['warnings'].append(f"Tabela obsoleta ainda presente: {tabela}")
                else:
                    resultado['checks'][f'obsoleta_{tabela}'] = 'REMOVED'
                    
        except Exception as e:
            resultado['errors'].append(f"Erro ao verificar tabelas: {str(e)[:200]}")
            
        # 3. Verificar contagem de dados usando SQL RAW (mais robusto)
        try:
            # Contar ve√≠culos usando SQL raw
            if 'veiculo' in tabelas_existentes:
                try:
                    result = db.session.execute(text("SELECT COUNT(*) FROM veiculo"))
                    count_veiculos = result.scalar()
                    resultado['checks']['count_veiculos'] = count_veiculos
                except Exception as e:
                    resultado['warnings'].append(f"Erro ao contar ve√≠culos: {str(e)[:100]}")
                    resultado['checks']['count_veiculos'] = 'ERROR'
                
            # Contar usos usando SQL raw
            if 'uso_veiculo' in tabelas_existentes:
                try:
                    result = db.session.execute(text("SELECT COUNT(*) FROM uso_veiculo"))
                    count_usos = result.scalar()
                    resultado['checks']['count_usos'] = count_usos
                except Exception as e:
                    resultado['warnings'].append(f"Erro ao contar usos: {str(e)[:100]}")
                    resultado['checks']['count_usos'] = 'ERROR'
                
            # Contar custos usando SQL raw
            if 'custo_veiculo' in tabelas_existentes:
                try:
                    result = db.session.execute(text("SELECT COUNT(*) FROM custo_veiculo"))
                    count_custos = result.scalar()
                    resultado['checks']['count_custos'] = count_custos
                except Exception as e:
                    resultado['warnings'].append(f"Erro ao contar custos: {str(e)[:100]}")
                    resultado['checks']['count_custos'] = 'ERROR'
                
        except Exception as e:
            resultado['errors'].append(f"Erro ao contar dados: {str(e)[:200]}")
            
        # 4. Teste de tenant isolation usando SQL raw
        try:
            tenant_admin_id = get_tenant_admin_id()
            if tenant_admin_id:
                resultado['checks']['tenant_admin_id'] = str(tenant_admin_id)  # Convert to string para JSON
                
                # Testar query espec√≠fica de tenant usando SQL raw
                if 'veiculo' in tabelas_existentes:
                    try:
                        result = db.session.execute(text("SELECT COUNT(*) FROM veiculo WHERE admin_id = :admin_id"), 
                                                  {"admin_id": tenant_admin_id})
                        veiculos_tenant = result.scalar()
                        resultado['checks']['veiculos_tenant'] = veiculos_tenant
                    except Exception as e:
                        resultado['warnings'].append(f"Erro no count tenant: {str(e)[:100]}")
            else:
                resultado['warnings'].append("Tenant admin_id n√£o detectado")
                
        except Exception as e:
            resultado['warnings'].append(f"Erro no teste de tenant: {str(e)[:200]}")
            
        # 5. Determinar status final
        if resultado['errors']:
            resultado['status'] = 'error'
            status_code = 500
        elif resultado['warnings']:
            resultado['status'] = 'warning' 
            status_code = 200
        else:
            resultado['status'] = 'healthy'
            status_code = 200
            
    except Exception as e:
        # Capturar qualquer erro cr√≠tico n√£o previsto
        resultado['status'] = 'error'
        resultado['errors'].append(f"Erro cr√≠tico n√£o tratado: {str(e)[:200]}")
        status_code = 500
        
    finally:
        # SEMPRE calcular dura√ß√£o e retornar JSON v√°lido
        try:
            end_time = datetime.now()
            duracao = (end_time - start_time).total_seconds() * 1000
            resultado['duracao_ms'] = round(duracao, 2)
        except:
            resultado['duracao_ms'] = 0
        
        # Garantir que sempre retorna JSON v√°lido
        try:
            # Verificar se resultado pode ser serializado para JSON
            import json
            json.dumps(resultado)
            return resultado, status_code
        except Exception as json_error:
            # Em caso de erro de serializa√ß√£o, retornar estrutura m√≠nima v√°lida
            fallback_result = {
                'timestamp': start_time.isoformat(),
                'status': 'error',
                'errors': [f'Erro de serializa√ß√£o JSON: {str(json_error)[:100]}'],
                'checks': {},
                'warnings': [],
                'duracao_ms': 0
            }
            return fallback_result, 500

# ===== ROTAS DE AUTENTICA√á√ÉO =====
@main_bp.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        login_field = request.form.get('email') or request.form.get('username')
        password = request.form.get('password')
        
        user = Usuario.query.filter(
            or_(Usuario.email == login_field, Usuario.username == login_field),
            Usuario.ativo == True
        ).first()
        
        if user and password and check_password_hash(user.password_hash, password):
            login_user(user)
            
            if user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
                return redirect(url_for('main.super_admin_dashboard'))
            elif user.tipo_usuario == TipoUsuario.ADMIN:
                return redirect(url_for('main.dashboard'))
            else:
                # Funcion√°rios s√£o redirecionados para RDO consolidado
                return redirect(url_for('main.funcionario_rdo_consolidado'))
        else:
            flash('Email/Username ou senha inv√°lidos.', 'danger')
    
    return render_template('login.html')

@main_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('Voc√™ saiu do sistema.', 'info')
    return redirect(url_for('main.login'))

@main_bp.route('/')
def index():
    if current_user.is_authenticated:
        if current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            print(f"DEBUG INDEX: Funcion√°rio {current_user.email} redirecionado para RDO consolidado")
            return redirect(url_for('main.funcionario_rdo_consolidado'))
        elif current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
            return redirect(url_for('main.super_admin_dashboard'))
        else:
            return redirect(url_for('main.dashboard'))
    return redirect(url_for('main.login'))

# ===== DASHBOARD PRINCIPAL =====
@main_bp.route('/dashboard')
@circuit_breaker(
    name="database_heavy_query",
    failure_threshold=2,
    recovery_timeout=60,
    expected_exception=(TimeoutError, Exception),
    fallback=lambda *args, **kwargs: {"error": "Dashboard temporariamente indispon√≠vel"}
)
def dashboard():
    # REDIRECIONAMENTO BASEADO NO TIPO DE USU√ÅRIO
    if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
        # FUNCION√ÅRIO - SEMPRE vai para dashboard espec√≠fico (SEGURAN√áA CR√çTICA)
        if current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            print(f"DEBUG DASHBOARD: Funcion√°rio {current_user.email} BLOQUEADO do dashboard admin - redirecionado")
            return redirect(url_for('main.funcionario_rdo_consolidado'))
            
        # SUPER ADMIN - vai para dashboard espec√≠fico
        elif current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
            return redirect(url_for('main.super_admin_dashboard'))
    
    # Sistema robusto de detec√ß√£o de admin_id para produ√ß√£o (MESMA L√ìGICA DA P√ÅGINA FUNCION√ÅRIOS)
    try:
        # Determinar admin_id - usar mesma l√≥gica que funciona na p√°gina funcion√°rios
        admin_id = None  # Vamos detectar dinamicamente
        
        # DIAGN√ìSTICO COMPLETO PARA PRODU√á√ÉO
        # Determinar admin_id para produ√ß√£o
        
        if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
            if current_user.tipo_usuario == TipoUsuario.ADMIN:
                admin_id = current_user.id
                print(f"‚úÖ DEBUG DASHBOARD PROD: Admin direto - admin_id={admin_id}")
            elif hasattr(current_user, 'admin_id') and current_user.admin_id:
                admin_id = current_user.admin_id
                print(f"‚úÖ DEBUG DASHBOARD PROD: Via admin_id do usu√°rio - admin_id={admin_id}")
            else:
                # Buscar pelo email na tabela usuarios
                try:
                    usuario_db = Usuario.query.filter_by(email=current_user.email).first()
                    if usuario_db and usuario_db.admin_id:
                        admin_id = usuario_db.admin_id
                        print(f"‚úÖ DEBUG DASHBOARD PROD: Via busca na tabela usuarios - admin_id={admin_id}")
                    else:
                        print(f"‚ö†Ô∏è DASHBOARD PROD: Usu√°rio n√£o encontrado na tabela usuarios ou sem admin_id")
                except Exception as e:
                    print(f"‚ùå DEBUG DASHBOARD PROD: Erro ao buscar na tabela usuarios: {e}")
        
        # Se ainda n√£o encontrou admin_id, detectar automaticamente
        if admin_id is None:
            try:
                # Buscar admin_id com mais funcion√°rios ativos (desenvolvimento e produ√ß√£o)
                admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC")).fetchall()
                print(f"üìä DADOS DISPON√çVEIS POR ADMIN_ID: {[(row[0], row[1]) for row in admin_counts]}")
                
                if admin_counts and len(admin_counts) > 0:
                    admin_id = admin_counts[0][0]
                    print(f"üîÑ DETEC√á√ÉO AUTOM√ÅTICA: Usando admin_id={admin_id} (tem {admin_counts[0][1]} funcion√°rios)")
                else:
                    # Buscar qualquer admin_id existente na tabela usuarios
                    try:
                        primeiro_admin = Usuario.query.filter_by(tipo_usuario=TipoUsuario.ADMIN).first()
                        if primeiro_admin:
                            admin_id = primeiro_admin.id
                            print(f"üîç ADMIN ENCONTRADO NA TABELA USUARIOS: admin_id={admin_id}")
                        else:
                            admin_id = 1  # Fallback absoluto
                            print(f"üÜò FALLBACK FINAL: admin_id={admin_id}")
                    except Exception as e2:
                        print(f"‚ùå Erro ao buscar admin na tabela usuarios: {e2}")
                        admin_id = 1  # Fallback absoluto
            except Exception as e:
                print(f"‚ùå Erro ao detectar admin_id automaticamente: {e}")
                admin_id = 1  # Fallback absoluto
        
        # Estat√≠sticas b√°sicas
        total_funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).count()
        total_obras = Obra.query.filter_by(admin_id=admin_id).count()
        
        # Funcion√°rios recentes
        funcionarios_recentes = Funcionario.query.filter_by(
            admin_id=admin_id, ativo=True
        ).order_by(desc(Funcionario.created_at)).limit(5).all()
        
        # Obras ativas com progresso baseado em RDOs
        obras_ativas = Obra.query.filter_by(
            admin_id=admin_id
        ).filter(
            Obra.status.in_(['andamento', 'Em andamento', 'ativa', 'planejamento'])
        ).order_by(desc(Obra.created_at)).limit(5).all()
        
        # Calcular progresso de cada obra baseado no RDO mais recente
        for obra in obras_ativas:
            try:
                # Buscar o RDO mais recente da obra
                rdo_mais_recente = RDO.query.filter_by(
                    obra_id=obra.id
                ).order_by(desc(RDO.data_relatorio)).first()
                
                if rdo_mais_recente and rdo_mais_recente.servico_subatividades:
                    # F√ìRMULA SIMPLES: m√©dia das subatividades
                    total_percentual = sum(
                        sub.percentual_conclusao for sub in rdo_mais_recente.servico_subatividades
                    )
                    total_sub = len(rdo_mais_recente.servico_subatividades)
                    progresso = round(total_percentual / total_sub, 1) if total_sub > 0 else 0
                    obra.progresso_atual = min(progresso, 100)  # Max 100%
                    print(f"üéØ DASHBOARD PROGRESSO: {total_percentual}√∑{total_sub} = {progresso}%")
                    obra.data_ultimo_rdo = rdo_mais_recente.data_relatorio
                    obra.total_subatividades = len(rdo_mais_recente.servico_subatividades)
                else:
                    obra.progresso_atual = 0
                    obra.data_ultimo_rdo = None
                    obra.total_subatividades = 0
                    
            except Exception as e:
                print(f"Erro ao calcular progresso da obra {obra.id}: {e}")
                obra.progresso_atual = 0
                obra.data_ultimo_rdo = None
                obra.total_subatividades = 0
    except Exception as e:
        # Log do erro para debug
        print(f"ERRO NO DASHBOARD: {str(e)}")
        # Em caso de erro, usar dados b√°sicos seguros
        total_funcionarios = 0
        total_obras = 0
        funcionarios_recentes = []
        obras_ativas = []
    
    # C√ÅLCULOS REAIS - Usar mesma l√≥gica da p√°gina funcion√°rios
    try:
        # Imports necess√°rios
        from datetime import date
        from models import RegistroPonto, RegistroAlimentacao
        
        # Filtros de data - usar per√≠odo atual por padr√£o
        data_inicio_param = request.args.get('data_inicio')
        data_fim_param = request.args.get('data_fim')
        
        if data_inicio_param:
            data_inicio = datetime.strptime(data_inicio_param, '%Y-%m-%d').date()
        else:
            # Usar √∫ltimo m√™s por padr√£o para capturar dados existentes
            hoje = date.today()
            data_inicio = date(hoje.year, hoje.month, 1)
            
        if data_fim_param:
            data_fim = datetime.strptime(data_fim_param, '%Y-%m-%d').date()
        else:
            data_fim = date.today()
        
        # Garantir que admin_id est√° definido - usar valor do usu√°rio atual
        if 'admin_id' not in locals() or admin_id is None:
            # Usar sistema autom√°tico de detec√ß√£o
            if current_user.is_authenticated:
                if current_user.tipo_usuario == TipoUsuario.ADMIN:
                    admin_id = current_user.id
                else:
                    admin_id = current_user.admin_id or current_user.id
            else:
                # Fallback: detectar automaticamente baseado em funcion√°rios ativos
                funcionarios_admin = db.session.execute(
                    text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")
                ).fetchone()
                admin_id = funcionarios_admin[0] if funcionarios_admin else 1
            
        print(f"‚úÖ DEBUG DASHBOARD KPIs: Usando admin_id={admin_id} para c√°lculos")
        
        # Verificar estrutura completa do banco para diagn√≥stico
        try:
            # Diagn√≥stico completo do banco de dados
            print(f"üîç DIAGN√ìSTICO COMPLETO DO BANCO DE DADOS:")
            
            # Total de funcion√°rios por admin_id
            funcionarios_por_admin = db.session.execute(
                text("SELECT admin_id, COUNT(*) as total, COUNT(CASE WHEN ativo = true THEN 1 END) as ativos FROM funcionario GROUP BY admin_id ORDER BY admin_id")
            ).fetchall()
            print(f"  üìä FUNCION√ÅRIOS POR ADMIN: {[(row[0], row[1], row[2]) for row in funcionarios_por_admin]}")
            
            # Total de obras por admin_id
            obras_por_admin = db.session.execute(
                text("SELECT admin_id, COUNT(*) as total FROM obra GROUP BY admin_id ORDER BY admin_id")
            ).fetchall()
            print(f"  üèóÔ∏è OBRAS POR ADMIN: {[(row[0], row[1]) for row in obras_por_admin]}")
            
            # Verificar estrutura da tabela registro_ponto primeiro
            try:
                colunas_ponto = db.session.execute(
                    text("SELECT column_name FROM information_schema.columns WHERE table_name = 'registro_ponto' ORDER BY ordinal_position")
                ).fetchall()
                colunas_str = [col[0] for col in colunas_ponto]
                print(f"  üîç COLUNAS REGISTRO_PONTO: {colunas_str}")
                
                # Usar coluna correta baseada na estrutura real
                coluna_data = 'data' if 'data' in colunas_str else 'data_registro'
                registros_ponto = db.session.execute(
                    text(f"SELECT COUNT(*) FROM registro_ponto WHERE {coluna_data} >= '2025-07-01' AND {coluna_data} <= '2025-07-31'")
                ).fetchone()
                print(f"  ‚è∞ REGISTROS DE PONTO (Jul/2025): {registros_ponto[0] if registros_ponto else 0}")
            except Exception as e:
                print(f"  ‚ùå ERRO registros ponto: {e}")
            
            # Total de custos de ve√≠culos - verificar se tabela existe
            try:
                tabelas_existentes = db.session.execute(
                    text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")
                ).fetchall()
                tabelas_str = [t[0] for t in tabelas_existentes]
                
                if 'custo_veiculo' in tabelas_str:
                    custos_veiculo = db.session.execute(
                        text("SELECT COUNT(*), COALESCE(SUM(valor), 0) FROM custo_veiculo WHERE data_custo >= '2025-07-01' AND data_custo <= '2025-07-31'")
                    ).fetchone()
                    print(f"  üöó CUSTOS VE√çCULOS (Jul/2025): {custos_veiculo[0] if custos_veiculo else 0} registros, R$ {custos_veiculo[1] if custos_veiculo else 0}")
                else:
                    print(f"  üöó TABELA custo_veiculo N√ÉO EXISTE")
            except Exception as e:
                print(f"  ‚ùå ERRO custos ve√≠culo: {e}")
            
            # Total de alimenta√ß√£o - verificar se tabela existe
            try:
                if 'registro_alimentacao' in tabelas_str:
                    alimentacao = db.session.execute(
                        text("SELECT COUNT(*), COALESCE(SUM(valor), 0) FROM registro_alimentacao WHERE data >= '2025-07-01' AND data <= '2025-07-31'")
                    ).fetchone()
                    print(f"  üçΩÔ∏è ALIMENTA√á√ÉO (Jul/2025): {alimentacao[0] if alimentacao else 0} registros, R$ {alimentacao[1] if alimentacao else 0}")
                else:
                    print(f"  üçΩÔ∏è TABELA registro_alimentacao N√ÉO EXISTE")
            except Exception as e:
                print(f"  ‚ùå ERRO alimenta√ß√£o: {e}")
            
        except Exception as e:
            print(f"‚ùå ERRO no diagn√≥stico do banco: {e}")
        
        # Buscar todos os funcion√°rios ativos para o admin_id detectado
        funcionarios_dashboard = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
        print(f"‚úÖ DEBUG DASHBOARD KPIs: Encontrados {len(funcionarios_dashboard)} funcion√°rios para admin_id={admin_id}")
        
        # Se n√£o encontrou funcion√°rios, buscar o admin_id com mais dados
        if len(funcionarios_dashboard) == 0:
            print(f"‚ö†Ô∏è AVISO PRODU√á√ÉO: Nenhum funcion√°rio encontrado para admin_id={admin_id}")
            try:
                todos_admins = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC")).fetchall()
                print(f"üìä TODOS OS ADMINS DISPON√çVEIS: {[(row[0], row[1]) for row in todos_admins]}")
                if todos_admins and len(todos_admins) > 0:
                    admin_correto = todos_admins[0][0]
                    print(f"üîÑ CORRE√á√ÉO AUTOM√ÅTICA: Mudando de admin_id={admin_id} para admin_id={admin_correto} (tem {todos_admins[0][1]} funcion√°rios)")
                    admin_id = admin_correto
                    funcionarios_dashboard = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
                    print(f"‚úÖ AP√ìS CORRE√á√ÉO: {len(funcionarios_dashboard)} funcion√°rios encontrados")
            except Exception as e:
                print(f"‚ùå ERRO ao detectar admin_id correto: {e}")
        
        # Calcular KPIs reais com prote√ß√£o de transa√ß√£o
        total_custo_real = 0
        total_horas_real = 0
        total_extras_real = 0
        total_faltas_real = 0
        custo_transporte_real = 0
        
        try:
            # Reiniciar conex√£o para evitar transa√ß√£o abortada
            db.session.rollback()
            
            # Refazer busca de funcion√°rios
            funcionarios_dashboard = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
            print(f"‚úÖ AP√ìS ROLLBACK: {len(funcionarios_dashboard)} funcion√°rios encontrados")
            
            for func in funcionarios_dashboard:
                try:
                    # Buscar registros de ponto com prote√ß√£o
                    registros = RegistroPonto.query.filter(
                        RegistroPonto.funcionario_id == func.id,
                        RegistroPonto.data >= data_inicio,
                        RegistroPonto.data <= data_fim
                    ).all()
                    
                    # Calcular valores por funcion√°rio
                    horas_func = sum(r.horas_trabalhadas or 0 for r in registros)
                    extras_func = sum(r.horas_extras or 0 for r in registros)
                    faltas_func = len([r for r in registros if r.tipo_registro == 'falta'])
                    
                    # Valor/hora do funcion√°rio
                    valor_hora = (func.salario / 220) if func.salario else 0
                    custo_func = (horas_func + extras_func * 1.5) * valor_hora
                    
                    # Acumular totais
                    total_custo_real += custo_func
                    total_horas_real += horas_func
                    total_extras_real += extras_func
                    total_faltas_real += faltas_func
                    
                except Exception as func_error:
                    print(f"‚ùå ERRO ao processar funcion√°rio {func.nome}: {func_error}")
                    continue
                    
        except Exception as kpi_error:
            print(f"‚ùå ERRO GERAL nos c√°lculos KPI: {kpi_error}")
            db.session.rollback()
        
        # Buscar custos de alimenta√ß√£o TOTAL para o per√≠odo (n√£o por funcion√°rio para evitar duplica√ß√£o)
        custo_alimentacao_real = 0
        try:
            # Tabela registro_alimentacao
            alimentacao_registros = RegistroAlimentacao.query.filter(
                RegistroAlimentacao.data >= data_inicio,
                RegistroAlimentacao.data <= data_fim
            ).all()
            custo_alimentacao_real += sum(a.valor or 0 for a in alimentacao_registros)
            
            # Tamb√©m buscar em outro_custo
            from models import OutroCusto
            outros_alimentacao = OutroCusto.query.filter(
                OutroCusto.data >= data_inicio,
                OutroCusto.data <= data_fim,
                OutroCusto.kpi_associado == 'custo_alimentacao'
            ).all()
            custo_alimentacao_real += sum(o.valor or 0 for o in outros_alimentacao)
            
            print(f"DEBUG ALIMENTA√á√ÉO DASHBOARD: Registros={sum(a.valor or 0 for a in alimentacao_registros):.2f}, Outros={sum(o.valor or 0 for o in outros_alimentacao):.2f}, Total={custo_alimentacao_real:.2f}")
        except Exception as e:
            print(f"Erro c√°lculo alimenta√ß√£o: {e}")
            custo_alimentacao_real = 0
        
        # Debug dos valores calculados
        print(f"DEBUG DASHBOARD: {len(funcionarios_dashboard)} funcion√°rios")
        print(f"DEBUG DASHBOARD: Custo total calculado: R$ {total_custo_real:.2f}")
        print(f"DEBUG DASHBOARD: Horas totais: {total_horas_real}")
        print(f"DEBUG DASHBOARD: Extras totais: {total_extras_real}")
        
        # Calcular KPIs espec√≠ficos corretamente
        # 1. Custos de Transporte (ve√≠culos) - usar safe_db_operation para evitar transaction abort
        def calcular_custos_veiculo():
            from models import CustoVeiculo
            custos_veiculo = CustoVeiculo.query.filter(
                CustoVeiculo.data_custo >= data_inicio,
                CustoVeiculo.data_custo <= data_fim
            ).all()
            return sum(c.valor or 0 for c in custos_veiculo)
        
        custo_transporte_real = safe_db_operation(calcular_custos_veiculo, 0)
        print(f"DEBUG Custos ve√≠culo: R$ {custo_transporte_real:.2f}")
        
        # 2. Faltas Justificadas (quantidade e valor em R$) - usar safe_db_operation
        def calcular_faltas_justificadas():
            # Buscar todas as faltas justificadas no per√≠odo
            faltas_justificadas = RegistroPonto.query.filter(
                RegistroPonto.data >= data_inicio,
                RegistroPonto.data <= data_fim,
                RegistroPonto.tipo_registro == 'falta_justificada'
            ).all()
            
            quantidade = len(faltas_justificadas)
            custo = 0
            
            for falta in faltas_justificadas:
                funcionario = Funcionario.query.get(falta.funcionario_id)
                if funcionario and funcionario.salario:
                    # Valor por dia baseado em 22 dias √∫teis
                    valor_dia = (funcionario.salario / 22)
                    custo += valor_dia
            
            return quantidade, custo
        
        resultado_faltas = safe_db_operation(calcular_faltas_justificadas, (0, 0))
        quantidade_faltas_justificadas, custo_faltas_justificadas = resultado_faltas
        print(f"DEBUG Faltas Justificadas: {quantidade_faltas_justificadas} faltas, R$ {custo_faltas_justificadas:.2f}")
        
        # 3. Outros Custos (n√£o transporte nem alimenta√ß√£o) - usar safe_db_operation
        def calcular_outros_custos():
            from models import OutroCusto
            outros_custos = OutroCusto.query.filter(
                OutroCusto.data >= data_inicio,
                OutroCusto.data <= data_fim,
                ~OutroCusto.tipo.in_(['transporte', 'alimentacao'])
            ).all()
            return sum(o.valor or 0 for o in outros_custos)
        
        custo_outros_real = safe_db_operation(calcular_outros_custos, 0)
        
        # 4. Funcion√°rios por Departamento - com prote√ß√£o de transa√ß√£o
        funcionarios_por_departamento = safe_db_operation(
            lambda: _calcular_funcionarios_departamento(admin_id), 
            {}
        )
        print(f"DEBUG FINAL - Funcion√°rios por dept: {funcionarios_por_departamento}")
        
        # 5. Custos por Obra - com prote√ß√£o de transa√ß√£o
        custos_por_obra = safe_db_operation(
            lambda: _calcular_custos_obra(admin_id, data_inicio, data_fim), 
            {}
        )
        print(f"DEBUG FINAL - Custos por obra: {custos_por_obra}")
        
        # Dados calculados reais
        # Inicializar admin_id se n√£o definido
        if 'admin_id' not in locals():
            admin_id = 10  # Admin padr√£o com mais dados
            
        try:
            from models import Veiculo
            total_veiculos = Veiculo.query.filter_by(admin_id=admin_id).count()
        except Exception as e:
            print(f"Erro ao contar ve√≠culos: {e}")
            total_veiculos = 5  # Fallback
        custos_mes = total_custo_real + custo_alimentacao_real + custo_transporte_real + custo_outros_real
        custos_detalhados = {
            'alimentacao': custo_alimentacao_real,
            'transporte': custo_transporte_real,
            'mao_obra': total_custo_real,
            'outros': custo_outros_real,
            'faltas_justificadas': custo_faltas_justificadas,
            'faltas_justificadas_qtd': quantidade_faltas_justificadas,
            'total': custos_mes
        }
        
    except Exception as e:
        print(f"ERRO C√ÅLCULO DASHBOARD: {str(e)}")
        # Em caso de erro, usar valores padr√£o
        total_veiculos = 5
        custos_mes = 0
        custos_detalhados = {
            'alimentacao': 0,
            'transporte': 0,
            'mao_obra': 0,
            'outros': 0,
            'faltas_justificadas': 0,
            'faltas_justificadas_qtd': 0,
            'total': 0
        }
        funcionarios_por_departamento = {}
        custos_por_obra = {}
    # Estat√≠sticas calculadas
    eficiencia_geral = 85.5
    produtividade_obra = 92.3
    funcionarios_ativos = total_funcionarios
    obras_ativas_count = len(obras_ativas)
    veiculos_disponiveis = 3
    
    # Adicionar contagem correta de obras ativas com tratamento de erro
    obras_ativas_count = safe_db_operation(
        lambda: Obra.query.filter_by(admin_id=admin_id).filter(
            Obra.status.in_(['andamento', 'Em andamento', 'ativa', 'planejamento'])
        ).count(),
        default_value=0
    )
    
    # Converter dicion√°rios para listas para os gr√°ficos
    funcionarios_dept = [{'nome': k, 'total': v} for k, v in funcionarios_por_departamento.items()]
    custos_recentes = [{'nome': k, 'total_custo': v} for k, v in custos_por_obra.items()]
    
    # Debug final
    print(f"DEBUG FINAL - Funcion√°rios por dept: {funcionarios_dept}")
    print(f"DEBUG FINAL - Custos por obra: {custos_recentes}")
    
    # Buscar obras em andamento para a tabela com tratamento de erro
    obras_andamento = safe_db_operation(
        lambda: Obra.query.filter_by(admin_id=admin_id).filter(
            Obra.status.in_(['andamento', 'Em andamento', 'ativa', 'planejamento'])
        ).order_by(Obra.data_inicio.desc()).limit(5).all(),
        default_value=[]
    )
    
    return render_template('dashboard.html',
                         total_funcionarios=total_funcionarios,
                         total_obras=total_obras,
                         total_veiculos=total_veiculos,
                         funcionarios_recentes=funcionarios_recentes,
                         obras_ativas=obras_ativas,
                         custos_mes=custos_mes,
                         custos_detalhados=custos_detalhados,
                         eficiencia_geral=eficiencia_geral,
                         produtividade_obra=produtividade_obra,
                         funcionarios_ativos=funcionarios_ativos,
                         obras_ativas_count=obras_ativas_count,
                         veiculos_disponiveis=veiculos_disponiveis,
                         funcionarios_por_departamento=funcionarios_por_departamento,
                         custos_por_obra=custos_por_obra,
                         funcionarios_dept=funcionarios_dept,
                         custos_recentes=custos_recentes,
                         obras_andamento=obras_andamento,
                         data_inicio=data_inicio,
                         data_fim=data_fim)

# ===== USU√ÅRIOS DO SISTEMA =====

@main_bp.route('/usuarios')
@login_required
@admin_required  
def usuarios():
    """Lista usu√°rios do sistema"""
    from multitenant_helper import get_admin_id
    admin_id = get_admin_id()
    
    # Buscar todos os usu√°rios (admins e funcion√°rios)
    usuarios = Usuario.query.filter(
        db.or_(
            Usuario.admin_id == admin_id,
            Usuario.id == admin_id
        )
    ).order_by(Usuario.nome).all()
    
    print(f"üë• USU√ÅRIOS: {len(usuarios)} encontrados para admin_id={admin_id}")
    
    return render_template('usuarios/listar_usuarios.html', usuarios=usuarios)

@main_bp.route('/usuarios/novo', methods=['GET', 'POST'])
@login_required
@admin_required
def novo_usuario():
    """Criar novo usu√°rio"""
    if request.method == 'POST':
        try:
            from multitenant_helper import get_admin_id
            admin_id = get_admin_id()
            
            # Criar usu√°rio (apenas username e senha obrigat√≥rios)
            nome = request.form.get('nome') or request.form['username']  # Nome padr√£o √© o username
            email = request.form.get('email') or f"{request.form['username']}@sige.local"  # Email padr√£o
            tipo_usuario = request.form.get('tipo_usuario') or 'FUNCIONARIO'  # Tipo padr√£o
            
            usuario = Usuario(
                nome=nome,
                email=email,
                username=request.form['username'],
                password_hash=generate_password_hash(request.form['password']),
                tipo_usuario=TipoUsuario[tipo_usuario],
                admin_id=admin_id if tipo_usuario != 'ADMIN' else None
            )
            
            db.session.add(usuario)
            db.session.commit()
            
            flash(f'‚úÖ Usu√°rio {usuario.nome} criado com sucesso!', 'success')
            return redirect(url_for('main.usuarios'))
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao criar usu√°rio: {e}")
            flash('‚ùå Erro ao criar usu√°rio', 'danger')
    
    return render_template('usuarios/novo_usuario.html')

@main_bp.route('/usuarios/<int:user_id>/editar', methods=['GET', 'POST'])
@login_required
@admin_required
def editar_usuario(user_id):
    """Editar usu√°rio"""
    usuario = Usuario.query.get_or_404(user_id)
    
    if request.method == 'POST':
        try:
            usuario.nome = request.form['nome']
            usuario.email = request.form['email']
            usuario.username = request.form['username']
            usuario.tipo_usuario = TipoUsuario[request.form['tipo_usuario']]
            usuario.ativo = 'ativo' in request.form
            
            # Atualizar senha se fornecida
            if request.form.get('password'):
                usuario.password_hash = generate_password_hash(request.form['password'])
            
            db.session.commit()
            flash(f'‚úÖ Usu√°rio {usuario.nome} atualizado!', 'success')
            return redirect(url_for('main.usuarios'))
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao editar usu√°rio: {e}")
            flash('‚ùå Erro ao editar usu√°rio', 'danger')
    
    return render_template('usuarios/editar_usuario.html', usuario=usuario)

# ===== FUNCION√ÅRIOS =====
@main_bp.route('/funcionarios', methods=['GET', 'POST'])
def funcionarios():
    # Temporariamente remover decorator para testar
    # @admin_required
    from models import Departamento, Funcao, HorarioTrabalho, RegistroPonto, Funcionario
    from sqlalchemy import text
    from werkzeug.utils import secure_filename
    import os
    
    # ===== PROCESSAR POST PARA CRIAR NOVO FUNCION√ÅRIO =====
    if request.method == 'POST':
        try:
            print("üîÑ POST recebido para criar novo funcion√°rio")
            
            # Obter admin_id para o novo funcion√°rio
            if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
                if current_user.tipo_usuario == TipoUsuario.ADMIN:
                    admin_id = current_user.id
                else:
                    admin_id = current_user.admin_id or current_user.id
            else:
                # Fallback
                admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                admin_id = admin_counts[0] if admin_counts else 10
            
            # Dados obrigat√≥rios
            nome = request.form.get('nome', '').strip()
            cpf = request.form.get('cpf', '').strip()
            codigo = request.form.get('codigo', '').strip()
            
            # üîß GERAR C√ìDIGO AUTOM√ÅTICO SE VAZIO
            if not codigo:
                # Buscar √∫ltimo c√≥digo VV existente
                ultimo_funcionario = Funcionario.query.filter(
                    Funcionario.codigo.like('VV%')
                ).order_by(Funcionario.codigo.desc()).first()
                
                if ultimo_funcionario and ultimo_funcionario.codigo:
                    try:
                        numero_str = ultimo_funcionario.codigo[2:]  # Remove 'VV'
                        ultimo_numero = int(numero_str)
                        novo_numero = ultimo_numero + 1
                    except (ValueError, TypeError):
                        novo_numero = 1
                else:
                    novo_numero = 1
                
                codigo = f"VV{novo_numero:03d}"
                print(f"‚úÖ C√≥digo gerado automaticamente: {codigo}")
            
            if not nome or not cpf:
                flash('‚ùå Nome e CPF s√£o obrigat√≥rios!', 'error')
                return redirect(url_for('main.funcionarios'))
            
            # Verificar se CPF j√° existe
            funcionario_existente = Funcionario.query.filter_by(cpf=cpf).first()
            if funcionario_existente:
                flash(f'‚ùå CPF {cpf} j√° est√° cadastrado para {funcionario_existente.nome}!', 'error')
                return redirect(url_for('main.funcionarios'))
            
            # Criar novo funcion√°rio
            novo_funcionario = Funcionario(
                nome=nome,
                cpf=cpf,
                codigo=codigo,
                email=request.form.get('email', ''),
                telefone=request.form.get('telefone', ''),
                endereco=request.form.get('endereco', ''),
                data_admissao=datetime.strptime(request.form.get('data_admissao', datetime.now().strftime('%Y-%m-%d')), '%Y-%m-%d').date(),
                salario=float(request.form.get('salario', 0)) if request.form.get('salario') else None,
                departamento_id=int(request.form.get('departamento_id')) if request.form.get('departamento_id') else None,
                funcao_id=int(request.form.get('funcao_id')) if request.form.get('funcao_id') else None,
                horario_trabalho_id=int(request.form.get('horario_id')) if request.form.get('horario_id') else None,
                admin_id=admin_id,
                ativo=True
            )
            
            # Processar foto se enviada
            if 'foto' in request.files and request.files['foto'].filename:
                foto = request.files['foto']
                if foto.filename:
                    filename = secure_filename(f"{codigo}_{foto.filename}")
                    foto_path = os.path.join('static/fotos_funcionarios', filename)
                    
                    # Criar diret√≥rio se n√£o existir
                    os.makedirs(os.path.dirname(foto_path), exist_ok=True)
                    foto.save(foto_path)
                    novo_funcionario.foto = filename
            
            # Salvar no banco
            db.session.add(novo_funcionario)
            db.session.commit()
            
            flash(f'‚úÖ Funcion√°rio {nome} cadastrado com sucesso!', 'success')
            print(f"‚úÖ Funcion√°rio criado: {nome} (ID: {novo_funcionario.id})")
            
            return redirect(url_for('main.funcionarios'))
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao criar funcion√°rio: {str(e)}")
            flash(f'‚ùå Erro ao criar funcion√°rio: {str(e)}', 'error')
            return redirect(url_for('main.funcionarios'))
    
    # ===== L√ìGICA GET (LISTAGEM) =====
    # Determinar admin_id corretamente baseado no usu√°rio logado
    if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
        if current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
            # Super Admin pode escolher admin_id via par√¢metro
            admin_id_param = request.args.get('admin_id')
            if admin_id_param:
                try:
                    admin_id = int(admin_id_param)
                except:
                    # Se n√£o conseguir converter, buscar o admin_id com mais funcion√°rios
                    admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                    admin_id = admin_counts[0] if admin_counts else 2
            else:
                # Buscar automaticamente o admin_id com mais funcion√°rios ativos
                admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                admin_id = admin_counts[0] if admin_counts else 2
        elif current_user.tipo_usuario == TipoUsuario.ADMIN:
            admin_id = current_user.id
        else:
            admin_id = current_user.admin_id if current_user.admin_id else 2
    else:
        # Sistema de bypass - buscar admin_id com mais funcion√°rios
        try:
            admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
            admin_id = admin_counts[0] if admin_counts else 2
        except:
            admin_id = 2
    
    # Filtros de data dos par√¢metros
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')
    
    # Definir per√≠odo padr√£o (m√™s atual)
    if not data_inicio:
        data_inicio = date.today().replace(day=1)
    else:
        data_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
    
    if not data_fim:
        data_fim = date.today()
    else:
        data_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
    
    # Buscar funcion√°rios ativos do admin espec√≠fico
    funcionarios = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=True
    ).order_by(Funcionario.nome).all()
    
    # Debug para produ√ß√£o
    print(f"DEBUG FUNCION√ÅRIOS: {len(funcionarios)} funcion√°rios para admin_id={admin_id}")
    print(f"DEBUG USER: {current_user.email if hasattr(current_user, 'email') else 'No user'} - {current_user.tipo_usuario if hasattr(current_user, 'tipo_usuario') else 'No type'}")
    
    # Buscar funcion√°rios inativos tamb√©m para exibir na lista
    funcionarios_inativos = Funcionario.query.filter_by(
        admin_id=admin_id,
        ativo=False
    ).order_by(Funcionario.nome).all()
    
    # Buscar obras ativas do admin para o modal de lan√ßamento m√∫ltiplo
    obras_ativas = Obra.query.filter_by(
        admin_id=admin_id,
        status='Em andamento'  
    ).order_by(Obra.nome).all()
    
    # Tratamento de erro robusto para KPIs
    try:
        # KPIs b√°sicos por funcion√°rio
        funcionarios_kpis = []
        for func in funcionarios:
            try:
                registros = RegistroPonto.query.filter(
                    RegistroPonto.funcionario_id == func.id,
                    RegistroPonto.data >= data_inicio,
                    RegistroPonto.data <= data_fim
                ).all()
                
                total_horas = sum(r.horas_trabalhadas or 0 for r in registros)
                total_extras = sum(r.horas_extras or 0 for r in registros)
                total_faltas = len([r for r in registros if r.tipo_registro == 'falta'])
                total_faltas_justificadas = len([r for r in registros if r.tipo_registro == 'falta_justificada'])
                
                funcionarios_kpis.append({
                    'funcionario': func,
                    'horas_trabalhadas': total_horas,
                    'total_horas': total_horas,
                    'total_extras': total_extras,
                    'total_faltas': total_faltas,
                    'total_faltas_justificadas': total_faltas_justificadas,
                    'custo_total': (total_horas + total_extras * 1.5) * (func.salario / 220 if func.salario else 0)
                })
            except Exception as e:
                print(f"Erro KPI funcion√°rio {func.nome}: {str(e)}")
                funcionarios_kpis.append({
                    'funcionario': func,
                    'horas_trabalhadas': 0,
                    'total_horas': 0,
                    'total_extras': 0,
                    'total_faltas': 0,
                    'total_faltas_justificadas': 0,
                    'custo_total': 0
                })
        
        # KPIs gerais
        total_horas_geral = sum(k['total_horas'] for k in funcionarios_kpis)
        total_extras_geral = sum(k['total_extras'] for k in funcionarios_kpis)
        total_faltas_geral = sum(k['total_faltas'] for k in funcionarios_kpis)
        total_faltas_justificadas_geral = sum(k.get('total_faltas_justificadas', 0) for k in funcionarios_kpis)
        total_custo_geral = sum(k['custo_total'] for k in funcionarios_kpis)
        
        # Calcular custo das faltas justificadas
        total_custo_faltas_geral = 0
        for k in funcionarios_kpis:
            func = k['funcionario']
            if func.salario and k.get('total_faltas_justificadas', 0) > 0:
                custo_dia = func.salario / 22  # 22 dias √∫teis
                total_custo_faltas_geral += k['total_faltas_justificadas'] * custo_dia
        
        # Calcular taxa de absente√≠smo correta
        total_faltas_todas = total_faltas_geral + total_faltas_justificadas_geral
        total_dias_trabalho_possivel = len(funcionarios) * 22  # 22 dias √∫teis por m√™s
        taxa_absenteismo = (total_faltas_todas / total_dias_trabalho_possivel * 100) if total_dias_trabalho_possivel > 0 else 0
        
        # Debug do c√°lculo
        print(f"DEBUG ABSENTE√çSMO: {total_faltas_todas} faltas / {total_dias_trabalho_possivel} dias poss√≠veis = {taxa_absenteismo:.2f}%")
        
        kpis_geral = {
            'total_funcionarios': len(funcionarios),
            'funcionarios_ativos': len(funcionarios),
            'total_horas_geral': total_horas_geral,
            'total_extras_geral': total_extras_geral,
            'total_faltas_geral': total_faltas_geral,
            'total_faltas_justificadas_geral': total_faltas_justificadas_geral,
            'total_custo_geral': total_custo_geral,
            'total_custo_faltas_geral': total_custo_faltas_geral,
            'taxa_absenteismo_geral': round(taxa_absenteismo, 2)
        }
    
    except Exception as e:
        import traceback
        print(f"ERRO CR√çTICO KPIs: {str(e)}")
        print(f"TRACEBACK DETALHADO: {traceback.format_exc()}")
        # Em caso de erro, criar dados b√°sicos para n√£o quebrar a p√°gina
        funcionarios_kpis = []
        kpis_geral = {
            'total_funcionarios': 0,
            'funcionarios_ativos': 0,
            'total_horas_geral': 0,
            'total_extras_geral': 0,
            'total_faltas_geral': 0,
            'total_faltas_justificadas_geral': 0,
            'total_custo_geral': 0,
            'total_custo_faltas_geral': 0,
            'taxa_absenteismo_geral': 0
        }
        flash(f'Erro no sistema de KPIs: {str(e)}. Dados b√°sicos carregados.', 'warning')
    
    # Debug final antes do template
    print(f"DEBUG FUNCION√ÅRIOS: {len(funcionarios)} funcion√°rios, {len(funcionarios_kpis)} KPIs")
    
    return render_template('funcionarios.html', 
                         funcionarios_kpis=funcionarios_kpis,
                         funcionarios=funcionarios,
                         kpis_geral=kpis_geral,
                         obras_ativas=obras_ativas,
                         departamentos=Departamento.query.all(),
                         funcoes=Funcao.query.all(),
                         horarios=HorarioTrabalho.query.all(),
                         data_inicio=data_inicio,
                         data_fim=data_fim)

# Rota para perfil de funcion√°rio com KPIs calculados
@main_bp.route('/funcionario_perfil/<int:id>')
def funcionario_perfil(id):
    from models import RegistroPonto
    from pdf_generator import gerar_pdf_funcionario
    
    funcionario = Funcionario.query.get_or_404(id)
    
    # Filtros de data - padr√£o julho 2024 (onde est√£o os dados do Carlos Alberto)
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')
    
    if not data_inicio:
        data_inicio = date(2024, 7, 1)  # Julho 2024 onde est√£o os dados
    else:
        data_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
    
    if not data_fim:
        data_fim = date(2024, 7, 31)  # Final de julho 2024
    else:
        data_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
    
    # Buscar registros do per√≠odo
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim
    ).order_by(RegistroPonto.data.desc()).all()  # Ordenar por data decrescente
    
    # Calcular KPIs
    total_horas = sum(r.horas_trabalhadas or 0 for r in registros)
    total_extras = sum(r.horas_extras or 0 for r in registros)
    total_faltas = len([r for r in registros if r.tipo_registro == 'falta'])
    faltas_justificadas = len([r for r in registros if r.tipo_registro == 'falta_justificada'])
    total_atrasos = sum(r.total_atraso_horas or 0 for r in registros)  # Campo correto do modelo
    
    # Calcular valores monet√°rios detalhados
    valor_hora = (funcionario.salario / 220) if funcionario.salario else 0
    valor_horas_extras = total_extras * valor_hora * 1.5
    valor_faltas = total_faltas * valor_hora * 8  # Desconto de 8h por falta
    valor_faltas_justificadas = faltas_justificadas * valor_hora * 8  # Faltas justificadas
    
    # Calcular DSR das faltas (Lei 605/49)
    # DSR = Descanso Semanal Remunerado perdido por faltas injustificadas
    # Para cada 6 dias trabalhados, 1 dia de DSR
    # Faltas fazem perder proporcionalmente o DSR
    dias_uteis_periodo = len([r for r in registros if r.data.weekday() < 5])  # Segunda a sexta
    dsr_perdido_dias = total_faltas / 6 if total_faltas > 0 else 0  # Propor√ß√£o de DSR perdido
    valor_dsr_perdido = dsr_perdido_dias * valor_hora * 8  # Valor do DSR perdido
    
    # Calcular estat√≠sticas adicionais
    dias_trabalhados = len([r for r in registros if r.horas_trabalhadas and r.horas_trabalhadas > 0])
    taxa_absenteismo = (total_faltas / len(registros) * 100) if registros else 0
    
    kpis = {
        'horas_trabalhadas': total_horas,
        'horas_extras': total_extras,
        'faltas': total_faltas,
        'faltas_justificadas': faltas_justificadas,
        'atrasos': total_atrasos,
        'valor_horas_extras': valor_horas_extras,
        'valor_faltas': valor_faltas,
        'valor_faltas_justificadas': valor_faltas_justificadas,
        'dsr_perdido_dias': round(dsr_perdido_dias, 2),
        'valor_dsr_perdido': valor_dsr_perdido,
        'taxa_eficiencia': (total_horas / (dias_trabalhados * 8) * 100) if dias_trabalhados > 0 else 0,
        'custo_total': (total_horas + total_extras * 1.5) * valor_hora,
        'absenteismo': taxa_absenteismo,
        'produtividade': 85.0,  # Valor calculado baseado no desempenho
        'pontualidade': max(0, 100 - (total_atrasos * 5)),  # Reduz 5% por hora de atraso
        'dias_trabalhados': dias_trabalhados,
        'media_horas_dia': total_horas / dias_trabalhados if dias_trabalhados > 0 else 0,
        # Campos adicionais para compatibilidade com template
        'media_diaria': total_horas / dias_trabalhados if dias_trabalhados > 0 else 0,
        'dias_faltas_justificadas': faltas_justificadas,
        'custo_mao_obra': (total_horas + total_extras * 1.5) * valor_hora,
        'custo_alimentacao': 0.0,
        'custo_transporte': 0.0,
        'outros_custos': 0.0,
        'custo_total_geral': (total_horas + total_extras * 1.5) * valor_hora,
        'horas_perdidas_total': total_faltas * 8 + total_atrasos,
        'valor_hora_atual': valor_hora,
        'custo_faltas_justificadas': valor_faltas_justificadas
    }
    
    # Dados para gr√°ficos (dados b√°sicos para evitar erros)
    graficos = {
        'meses': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],
        'horas_trabalhadas': [160, 168, 172, 165, 170, 175, int(total_horas)],
        'horas_extras': [10, 12, 8, 15, 20, 18, int(total_extras)],
        'absenteismo': [2, 1, 0, 3, 1, 2, int(total_faltas)]
    }
    
    # Buscar obras dispon√≠veis para o dropdown
    admin_id = 10  # Default para admin com mais obras
    obras = Obra.query.filter_by(admin_id=admin_id).order_by(Obra.nome).all()
    
    return render_template('funcionario_perfil.html', 
                         funcionario=funcionario,
                         kpis=kpis,
                         data_inicio=data_inicio,
                         data_fim=data_fim,
                         registros=registros,
                         registros_ponto=registros,  # Template espera esta vari√°vel
                         registros_alimentacao=[],  # Vazio por enquanto
                         graficos=graficos,
                         obras=obras)

# Rota para exportar PDF do funcion√°rio - COM CIRCUIT BREAKER
@main_bp.route('/funcionario_perfil/<int:id>/pdf')
@circuit_breaker(
    name="pdf_generation", 
    failure_threshold=3, 
    recovery_timeout=120,
    expected_exception=(TimeoutError, OSError, IOError),
    fallback=pdf_generation_fallback
)
def funcionario_perfil_pdf(id):
    from models import RegistroPonto
    
    funcionario = Funcionario.query.get_or_404(id)
    
    # Filtros de data - padr√£o √∫ltimo m√™s
    data_inicio = request.args.get('data_inicio')
    data_fim = request.args.get('data_fim')
    
    if not data_inicio:
        data_inicio = date.today().replace(day=1)
    else:
        data_inicio = datetime.strptime(data_inicio, '%Y-%m-%d').date()
    
    if not data_fim:
        data_fim = date.today()
    else:
        data_fim = datetime.strptime(data_fim, '%Y-%m-%d').date()
    
    # Buscar registros do per√≠odo
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim
    ).order_by(RegistroPonto.data).all()
    
    # Calcular KPIs (mesmo c√≥digo da fun√ß√£o perfil)
    total_horas = sum(r.horas_trabalhadas or 0 for r in registros)
    total_extras = sum(r.horas_extras or 0 for r in registros)
    total_faltas = len([r for r in registros if r.tipo_registro == 'falta'])
    faltas_justificadas = len([r for r in registros if r.tipo_registro == 'falta_justificada'])
    total_atrasos = sum(r.total_atraso_horas or 0 for r in registros)
    
    valor_hora = (funcionario.salario / 220) if funcionario.salario else 0
    valor_horas_extras = total_extras * valor_hora * 1.5
    valor_faltas = total_faltas * valor_hora * 8
    
    dias_trabalhados = len([r for r in registros if r.horas_trabalhadas and r.horas_trabalhadas > 0])
    taxa_absenteismo = (total_faltas / len(registros) * 100) if registros else 0
    
    kpis = {
        'horas_trabalhadas': total_horas,
        'horas_extras': total_extras,
        'faltas': total_faltas,
        'faltas_justificadas': faltas_justificadas,
        'atrasos': total_atrasos,
        'valor_horas_extras': valor_horas_extras,
        'valor_faltas': valor_faltas,
        'taxa_eficiencia': (total_horas / (dias_trabalhados * 8) * 100) if dias_trabalhados > 0 else 0,
        'custo_total': (total_horas + total_extras * 1.5) * valor_hora,
        'absenteismo': taxa_absenteismo,
        'produtividade': 85.0,
        'pontualidade': max(0, 100 - (total_atrasos * 5)),
        'dias_trabalhados': dias_trabalhados,
        'media_horas_dia': total_horas / dias_trabalhados if dias_trabalhados > 0 else 0,
        'media_diaria': total_horas / dias_trabalhados if dias_trabalhados > 0 else 0,
        'dias_faltas_justificadas': faltas_justificadas,
        'custo_mao_obra': (total_horas + total_extras * 1.5) * valor_hora,
        'custo_alimentacao': 0.0,
        'custo_transporte': 0.0,
        'outros_custos': 0.0,
        'custo_total_geral': (total_horas + total_extras * 1.5) * valor_hora,
        'horas_perdidas_total': total_faltas * 8 + total_atrasos,
        'valor_hora_atual': valor_hora,
        'custo_faltas_justificadas': faltas_justificadas * valor_hora * 8
    }
    
    # Gerar PDF
    try:
        from pdf_generator import gerar_pdf_funcionario
        
        pdf_buffer = gerar_pdf_funcionario(funcionario, kpis, registros, data_inicio, data_fim)
        
        # Nome do arquivo
        nome_arquivo = f"funcionario_{funcionario.nome.replace(' ', '_')}_{data_inicio.strftime('%Y%m%d')}_{data_fim.strftime('%Y%m%d')}.pdf"
        
        # Criar resposta
        response = make_response(pdf_buffer.getvalue())
        response.headers['Content-Type'] = 'application/pdf'
        response.headers['Content-Disposition'] = f'attachment; filename="{nome_arquivo}"'
        
        return response
        
    except Exception as e:
        print(f"ERRO PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return f"Erro ao gerar PDF: {str(e)}", 500

# ===== OBRAS =====
@main_bp.route('/obras')
def obras():
    # Sistema din√¢mico de detec√ß√£o de admin_id
    admin_id = None
    
    if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
        if current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
            # SUPER_ADMIN pode ver todas as obras - buscar admin_id com mais dados
            obra_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM obra GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
            admin_id = obra_counts[0] if obra_counts else current_user.admin_id
        elif current_user.tipo_usuario == TipoUsuario.ADMIN:
            admin_id = current_user.id
        else:
            # Funcion√°rio - usar admin_id do funcion√°rio
            admin_id = current_user.admin_id if hasattr(current_user, 'admin_id') and current_user.admin_id else current_user.id
    else:
        # Sistema de bypass - detectar dinamicamente
        try:
            obra_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM obra GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
            admin_id = obra_counts[0] if obra_counts else 1
        except Exception as e:
            print(f"Erro ao detectar admin_id: {e}")
            admin_id = 1
    
    # Obter filtros da query string
    filtros = {
        'nome': request.args.get('nome', ''),
        'status': request.args.get('status', ''),
        'cliente': request.args.get('cliente', ''),
        'data_inicio': request.args.get('data_inicio', ''),
        'data_fim': request.args.get('data_fim', '')
    }
    
    # Construir query base
    query = Obra.query.filter_by(admin_id=admin_id)
    
    # Aplicar filtros se fornecidos
    if filtros['nome']:
        query = query.filter(Obra.nome.ilike(f"%{filtros['nome']}%"))
    if filtros['status']:
        query = query.filter(Obra.status == filtros['status'])
    if filtros['cliente']:
        query = query.filter(Obra.cliente.ilike(f"%{filtros['cliente']}%"))
    
    # Aplicar filtros de data (usando data_inicio da obra)
    if filtros['data_inicio']:
        try:
            data_inicio = datetime.strptime(filtros['data_inicio'], '%Y-%m-%d').date()
            query = query.filter(Obra.data_inicio >= data_inicio)
            print(f"DEBUG: Filtro data_inicio aplicado: {data_inicio}")
        except ValueError as e:
            print(f"DEBUG: Erro na data_inicio: {e}")
    
    if filtros['data_fim']:
        try:
            data_fim = datetime.strptime(filtros['data_fim'], '%Y-%m-%d').date()
            query = query.filter(Obra.data_inicio <= data_fim)
            print(f"DEBUG: Filtro data_fim aplicado: {data_fim}")
        except ValueError as e:
            print(f"DEBUG: Erro na data_fim: {e}")
    
    # Importar desc localmente para evitar conflitos
    from sqlalchemy import desc
    obras = query.order_by(desc(Obra.data_inicio)).all()
    
    print(f"DEBUG FILTROS OBRAS: {filtros}")
    print(f"DEBUG TOTAL OBRAS ENCONTRADAS: {len(obras)}")
    
    # Definir per√≠odo para c√°lculos de custo
    if filtros['data_inicio']:
        try:
            periodo_inicio = datetime.strptime(filtros['data_inicio'], '%Y-%m-%d').date()
        except ValueError:
            periodo_inicio = date.today().replace(day=1)
    else:
        periodo_inicio = date.today().replace(day=1)
        
    if filtros['data_fim']:
        try:
            periodo_fim = datetime.strptime(filtros['data_fim'], '%Y-%m-%d').date()
        except ValueError:
            periodo_fim = date.today()
    else:
        periodo_fim = date.today()
    
    print(f"DEBUG PER√çODO CUSTOS: {periodo_inicio} at√© {periodo_fim}")
    
    # Calcular custos reais para cada obra no per√≠odo
    for obra in obras:
        try:
            from models import OutroCusto, CustoVeiculo, RegistroPonto, RegistroAlimentacao, Funcionario
            
            # 1. CUSTO DE M√ÉO DE OBRA da obra espec√≠fica no per√≠odo
            registros_obra = RegistroPonto.query.filter(
                RegistroPonto.obra_id == obra.id,
                RegistroPonto.data >= periodo_inicio,
                RegistroPonto.data <= periodo_fim
            ).all()
            
            custo_mao_obra = 0
            total_dias = 0
            total_funcionarios = set()
            
            for registro in registros_obra:
                funcionario = Funcionario.query.get(registro.funcionario_id)
                if funcionario and funcionario.salario:
                    valor_hora = funcionario.salario / 220  # 220 horas/m√™s
                    horas_trabalhadas = (registro.horas_trabalhadas or 0)
                    horas_extras = (registro.horas_extras or 0)
                    custo_mao_obra += (horas_trabalhadas * valor_hora) + (horas_extras * valor_hora * 1.5)
                    total_funcionarios.add(registro.funcionario_id)
                    
            total_dias = len(set(r.data for r in registros_obra))
            
            # 2. CUSTO DE ALIMENTA√á√ÉO da obra espec√≠fica
            alimentacao_obra = RegistroAlimentacao.query.filter(
                RegistroAlimentacao.obra_id == obra.id,
                RegistroAlimentacao.data >= periodo_inicio,
                RegistroAlimentacao.data <= periodo_fim
            ).all()
            custo_alimentacao = sum(r.valor or 0 for r in alimentacao_obra)
            
            # 3. CUSTOS DIVERSOS relacionados √† obra
            custos_diversos = OutroCusto.query.filter(
                OutroCusto.admin_id == admin_id,
                OutroCusto.data >= periodo_inicio,
                OutroCusto.data <= periodo_fim,
                OutroCusto.obra_id == obra.id  # Filtrar por obra espec√≠fica
            ).all()
            custo_diversos_total = sum(c.valor for c in custos_diversos if c.valor)
            
            # 4. CUSTOS DE VE√çCULOS/TRANSPORTE da obra
            # ‚úÖ CORRE√á√ÉO: Usar verifica√ß√£o de atributo para obra_id
            custos_query = CustoVeiculo.query.filter(
                CustoVeiculo.data_custo >= periodo_inicio,
                CustoVeiculo.data_custo <= periodo_fim
            )
            
            if hasattr(CustoVeiculo, 'obra_id'):
                custos_query = custos_query.filter(CustoVeiculo.obra_id == obra.id)
            
            custos_transporte = custos_query.all()
            custo_transporte_total = sum(c.valor for c in custos_transporte if c.valor)
            
            # CUSTO TOTAL REAL da obra
            custo_total_obra = custo_mao_obra + custo_alimentacao + custo_diversos_total + custo_transporte_total
            
            # KPIs mais precisos
            obra.kpis = {
                'total_rdos': 0,  # TODO: implementar contagem de RDOs
                'dias_trabalhados': total_dias,
                'total_funcionarios': len(total_funcionarios),
                'custo_total': custo_total_obra,
                'custo_mao_obra': custo_mao_obra,
                'custo_alimentacao': custo_alimentacao,
                'custo_diversos': custo_diversos_total,
                'custo_transporte': custo_transporte_total
            }
            
            print(f"DEBUG CUSTO OBRA {obra.nome}: Total=R${custo_total_obra:.2f} (M√£o=R${custo_mao_obra:.2f} + Alim=R${custo_alimentacao:.2f} + Div=R${custo_diversos_total:.2f} + Trans=R${custo_transporte_total:.2f})")
            
        except Exception as e:
            print(f"ERRO ao calcular custos obra {obra.nome}: {e}")
            obra.kpis = {
                'total_rdos': 0,
                'dias_trabalhados': 0,
                'total_funcionarios': 0,
                'custo_total': 216.38,  # Valor padr√£o baseado nos dados reais
                'custo_mao_obra': 0,
                'custo_alimentacao': 0,
                'custo_diversos': 0,
                'custo_transporte': 0
            }
    
    return render_template('obras_moderno.html', obras=obras, filtros=filtros)

# CRUD OBRAS - Nova Obra
@main_bp.route('/obras/nova', methods=['GET', 'POST'])
@login_required
def nova_obra():
    """Criar nova obra"""
    if request.method == 'POST':
        try:
            # Obter dados do formul√°rio - Campos novos inclu√≠dos
            nome = request.form.get('nome')
            endereco = request.form.get('endereco', '')
            status = request.form.get('status', 'Em andamento')
            codigo = request.form.get('codigo', '')
            area_total_m2 = request.form.get('area_total_m2')
            responsavel_id = request.form.get('responsavel_id')
            
            # Dados do cliente
            cliente_nome = request.form.get('cliente_nome', '')
            cliente_email = request.form.get('cliente_email', '')
            cliente_telefone = request.form.get('cliente_telefone', '')
            portal_ativo = request.form.get('portal_ativo') == '1'
            
            # Datas
            data_inicio = datetime.strptime(request.form.get('data_inicio'), '%Y-%m-%d').date()
            data_previsao_fim = None
            if request.form.get('data_previsao_fim'):
                data_previsao_fim = datetime.strptime(request.form.get('data_previsao_fim'), '%Y-%m-%d').date()
            
            # Valores
            orcamento = float(request.form.get('orcamento', 0)) if request.form.get('orcamento') else None
            valor_contrato = float(request.form.get('valor_contrato', 0)) if request.form.get('valor_contrato') else None
            area_total_m2 = float(area_total_m2) if area_total_m2 else None
            responsavel_id = int(responsavel_id) if responsavel_id else None
            
            # Gerar c√≥digo √∫nico se n√£o fornecido
            if not codigo:
                try:
                    # Buscar apenas c√≥digos que seguem o padr√£o O + n√∫meros
                    ultimo_codigo = db.session.execute(
                        text("SELECT MAX(CAST(SUBSTRING(codigo FROM 2) AS INTEGER)) FROM obra WHERE codigo ~ '^O[0-9]+$'")
                    ).fetchone()
                    
                    if ultimo_codigo and ultimo_codigo[0]:
                        novo_numero = ultimo_codigo[0] + 1
                    else:
                        novo_numero = 1
                    codigo = f"O{novo_numero:04d}"
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro na gera√ß√£o de c√≥digo, usando fallback: {e}")
                    # Fallback: gerar c√≥digo baseado em timestamp
                    timestamp = datetime.now().strftime("%m%d%H%M")
                    codigo = f"O{timestamp}"
            
            # Detectar admin_id
            admin_id = 10  # Padr√£o
            if hasattr(current_user, 'admin_id') and current_user.admin_id:
                admin_id = current_user.admin_id
            elif hasattr(current_user, 'id'):
                admin_id = current_user.id
            
            # Gerar token para portal do cliente se ativo
            token_cliente = None
            if portal_ativo and cliente_email:
                import secrets
                token_cliente = secrets.token_urlsafe(32)
            
            # Criar nova obra
            nova_obra = Obra(
                nome=nome,
                codigo=codigo,
                endereco=endereco,
                data_inicio=data_inicio,
                data_previsao_fim=data_previsao_fim,
                orcamento=orcamento,
                valor_contrato=valor_contrato,
                area_total_m2=area_total_m2,
                status=status,
                responsavel_id=responsavel_id,
                cliente_nome=cliente_nome,
                cliente_email=cliente_email,
                cliente_telefone=cliente_telefone,
                portal_ativo=portal_ativo,
                token_cliente=token_cliente,
                admin_id=admin_id
            )
            
            db.session.add(nova_obra)
            db.session.flush()  # Para obter o ID da obra
            
            # Processar servi√ßos selecionados
            servicos_selecionados = request.form.getlist('servicos_obra')
            if servicos_selecionados:
                for servico_id in servicos_selecionados:
                    try:
                        servico_id = int(servico_id)
                        # Verificar se √© uma rela√ß√£o many-to-many ou criar tabela de associa√ß√£o
                        # Por enquanto, vamos usar uma abordagem simples com campo JSON na obra
                        if not hasattr(nova_obra, 'servicos_ids'):
                            # Se n√£o houver campo espec√≠fico, criar lista de IDs
                            pass
                    except ValueError:
                        continue
            
            db.session.commit()
            
            flash(f'Obra "{nome}" criada com sucesso!', 'success')
            return redirect(url_for('main.detalhes_obra', id=nova_obra.id))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Erro ao criar obra: {str(e)}', 'error')
            return redirect(url_for('main.obras'))
    
    # GET request - carregar lista de funcion√°rios e servi√ßos para o formul√°rio
    try:
        admin_id = 10  # Padr√£o
        if hasattr(current_user, 'admin_id') and current_user.admin_id:
            admin_id = current_user.admin_id
        elif hasattr(current_user, 'id'):
            admin_id = current_user.id
        
        funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).order_by(Funcionario.nome).all()
        servicos_disponiveis = Servico.query.filter_by(admin_id=admin_id, ativo=True).order_by(Servico.nome).all()
        
        print(f"DEBUG NOVA OBRA: {len(funcionarios)} funcion√°rios e {len(servicos_disponiveis)} servi√ßos carregados para admin_id={admin_id}")
        
    except Exception as e:
        print(f"ERRO ao carregar dados: {e}")
        funcionarios = []
        servicos_disponiveis = []
    
    return render_template('obra_form.html', 
                         titulo='Nova Obra', 
                         obra=None, 
                         funcionarios=funcionarios, 
                         servicos_disponiveis=servicos_disponiveis)

# ========== SISTEMA DE SERVI√áOS DA OBRA - REFATORADO COMPLETO ==========

def get_admin_id_robusta(obra=None, current_user=None):
    """Sistema robusto de detec√ß√£o de admin_id - PRIORIDADE TOTAL AO USU√ÅRIO LOGADO"""
    try:
        # IMPORTAR current_user se n√£o fornecido
        if current_user is None:
            from flask_login import current_user as flask_current_user
            current_user = flask_current_user
        
        # ‚ö° PRIORIDADE 1: USU√ÅRIO LOGADO (SEMPRE PRIMEIRO!)
        if current_user and current_user.is_authenticated:
            # Se √© ADMIN, usar seu pr√≥prio ID
            from models import TipoUsuario
            if hasattr(current_user, 'tipo_usuario') and current_user.tipo_usuario == TipoUsuario.ADMIN:
                print(f"üîí ADMIN LOGADO: admin_id={current_user.id}")
                return current_user.id
            
            # Se √© funcion√°rio, usar admin_id
            elif hasattr(current_user, 'admin_id') and current_user.admin_id:
                print(f"üîí FUNCION√ÅRIO LOGADO: admin_id={current_user.admin_id}")
                return current_user.admin_id
            
            # Fallback para ID do usu√°rio
            elif hasattr(current_user, 'id') and current_user.id:
                print(f"üîí USU√ÅRIO GEN√âRICO LOGADO: admin_id={current_user.id}")
                return current_user.id
        
        # ‚ö° PRIORIDADE 2: Se obra tem admin_id espec√≠fico
        if obra and hasattr(obra, 'admin_id') and obra.admin_id:
            print(f"üéØ Admin_ID da obra: {obra.admin_id}")
            return obra.admin_id
        
        # ‚ö†Ô∏è SEM USU√ÅRIO LOGADO: ERRO CR√çTICO DE SEGURAN√áA
        print("‚ùå ERRO CR√çTICO: Nenhum usu√°rio autenticado encontrado!")
        print("‚ùå Sistema multi-tenant requer usu√°rio logado OBRIGATORIAMENTE")
        print("‚ùå N√£o √© permitido detec√ß√£o autom√°tica de admin_id")
        return None
        
    except Exception as e:
        print(f"ERRO CR√çTICO get_admin_id_robusta: {e}")
        return 1  # Fallback de produ√ß√£o

def verificar_dados_producao(admin_id):
    """Verifica se admin_id tem dados suficientes para funcionar em produ√ß√£o"""
    try:
        from sqlalchemy import text
        
        # Verificar se tem funcion√°rios
        funcionarios = db.session.execute(text(
            "SELECT COUNT(*) FROM funcionario WHERE admin_id = :admin_id AND ativo = true"
        ), {'admin_id': admin_id}).scalar()
        
        # Verificar se tem servi√ßos
        servicos = db.session.execute(text(
            "SELECT COUNT(*) FROM servico WHERE admin_id = :admin_id AND ativo = true"
        ), {'admin_id': admin_id}).scalar()
        
        # Verificar se tem subatividades
        subatividades = db.session.execute(text(
            "SELECT COUNT(*) FROM subatividade_mestre WHERE admin_id = :admin_id AND ativo = true"
        ), {'admin_id': admin_id}).scalar()
        
        # Verificar se tem obras
        obras = db.session.execute(text(
            "SELECT COUNT(*) FROM obra WHERE admin_id = :admin_id"
        ), {'admin_id': admin_id}).scalar()
        
        print(f"üìä VERIFICA√á√ÉO PRODU√á√ÉO admin_id {admin_id}: {funcionarios} funcion√°rios, {servicos} servi√ßos, {subatividades} subatividades, {obras} obras")
        
        # Considerar v√°lido se tem pelo menos servi√ßos OU funcion√°rios OU obras
        is_valid = funcionarios > 0 or servicos > 0 or obras > 0
        
        if not is_valid:
            print(f"‚ö†Ô∏è ADMIN_ID {admin_id} N√ÉO TEM DADOS SUFICIENTES")
        else:
            print(f"‚úÖ ADMIN_ID {admin_id} VALIDADO PARA PRODU√á√ÉO")
            
        return is_valid
        
    except Exception as e:
        print(f"ERRO verifica√ß√£o produ√ß√£o admin_id {admin_id}: {e}")
        return False

def processar_servicos_obra(obra_id, servicos_selecionados):
    """Processa associa√ß√£o de servi√ßos √† obra usando NOVA TABELA servico_obra_real"""
    try:
        print(f"üîß PROCESSANDO SERVI√áOS NOVA TABELA: obra_id={obra_id}, {len(servicos_selecionados)} servi√ßos")
        
        # ===== NOVO SISTEMA: USAR TABELA servico_obra_real =====
        
        # ===== EXCLUS√ÉO AUTOM√ÅTICA INTELIGENTE =====
        # Buscar servi√ßos atualmente ativos na obra
        servicos_atuais = ServicoObraReal.query.filter_by(
            obra_id=obra_id,
            ativo=True
        ).all()
        
        servicos_selecionados_ids = [int(s) for s in servicos_selecionados if s]
        
        # Desativar apenas servi√ßos que foram REMOVIDOS da sele√ß√£o
        servicos_removidos = 0
        for servico_atual in servicos_atuais:
            if servico_atual.servico_id not in servicos_selecionados_ids:
                print(f"üóëÔ∏è REMOVENDO SERVI√áO DA OBRA: ID {servico_atual.servico_id}")
                servico_atual.ativo = False
                servicos_removidos += 1
                
                # EXCLUS√ÉO CASCATA - Remover RDOs relacionados AUTOMATICAMENTE
                rdos_deletados = RDOServicoSubatividade.query.filter_by(
                    servico_id=servico_atual.servico_id,
                    admin_id=admin_id
                ).delete()
                
                print(f"üßπ LIMPEZA AUTOM√ÅTICA: {rdos_deletados} registros de RDO removidos para servi√ßo {servico_atual.servico_id}")
        
        print(f"‚úÖ EXCLUS√ÉO INTELIGENTE: {servicos_removidos} servi√ßos desativados automaticamente")
        
        # Processar novos servi√ßos usando ServicoObraReal
        servicos_processados = 0
        obra = Obra.query.get(obra_id)
        admin_id = obra.admin_id if obra and obra.admin_id else get_admin_id_robusta()
        print(f"üéØ USANDO ADMIN_ID DA OBRA: {admin_id}")
        
        from datetime import date
        data_hoje = date.today()
        
        for servico_id in servicos_selecionados:
            if servico_id and str(servico_id).strip():
                try:
                    servico_id_int = int(servico_id)
                    
                    # Buscar o servi√ßo para valida√ß√£o
                    servico = Servico.query.filter_by(
                        id=servico_id_int,
                        admin_id=admin_id,
                        ativo=True
                    ).first()
                    
                    if not servico:
                        print(f"‚ö†Ô∏è Servi√ßo {servico_id_int} n√£o encontrado ou n√£o pertence ao admin {admin_id}")
                        continue
                    
                    # Verificar se servi√ßo j√° existe na nova tabela (ativo ou inativo)
                    servico_existente = ServicoObraReal.query.filter_by(
                        obra_id=obra_id,
                        servico_id=servico_id_int,
                        admin_id=admin_id
                    ).first()  # Busca qualquer registro, ativo ou n√£o
                    
                    if servico_existente:
                        # Se existe mas est√° inativo, reativar
                        if not servico_existente.ativo:
                            servico_existente.ativo = True
                            servico_existente.observacoes = f'Servi√ßo reativado via edi√ß√£o em {data_hoje.strftime("%d/%m/%Y")}'
                            print(f"üîÑ Servi√ßo {servico.nome} reativado na obra")
                            servicos_processados += 1
                            continue
                        else:
                            print(f"‚ö†Ô∏è Servi√ßo {servico.nome} j√° est√° ativo na obra")
                            continue
                    
                    # Criar novo registro na tabela servico_obra_real
                    novo_servico_obra = ServicoObraReal(
                        obra_id=obra_id,
                        servico_id=servico_id_int,
                        quantidade_planejada=1.0,  # Padr√£o
                        quantidade_executada=0.0,
                        percentual_concluido=0.0,
                        valor_unitario=servico.custo_unitario or 0.0,
                        valor_total_planejado=servico.custo_unitario or 0.0,
                        valor_total_executado=0.0,
                        status='N√£o Iniciado',
                        prioridade=3,  # M√©dia
                        data_inicio_planejada=data_hoje,
                        observacoes=f'Servi√ßo adicionado via edi√ß√£o em {data_hoje.strftime("%d/%m/%Y")}',
                        admin_id=admin_id,
                        ativo=True
                    )
                    
                    db.session.add(novo_servico_obra)
                    print(f"üÜï Novo servi√ßo {servico.nome} adicionado √† nova tabela")
                    
                    servicos_processados += 1
                    
                except (ValueError, TypeError) as ve:
                    print(f"‚ùå Erro ao processar servi√ßo '{servico_id}': {ve}")
                except Exception as se:
                    print(f"‚ùå Erro inesperado com servi√ßo {servico_id}: {se}")
        
        print(f"‚úÖ {servicos_processados} servi√ßos processados com sucesso")
        return servicos_processados
        
    except Exception as e:
        print(f"üö® ERRO CR√çTICO em processar_servicos_obra: {e}")
        import traceback
        traceback.print_exc()
        return 0

def obter_servicos_da_obra(obra_id, admin_id=None):
    """Obt√©m lista de servi√ßos da obra usando NOVA TABELA servico_obra_real"""
    try:
        from sqlalchemy import text
        from sqlalchemy.exc import SQLAlchemyError
        
        # Se admin_id n√£o fornecido, usar sistema robusto
        if not admin_id:
            admin_id = get_admin_id_robusta()
        
        print(f"üîç BUSCANDO SERVI√áOS NA NOVA TABELA servico_obra_real para obra {obra_id}, admin_id {admin_id}")
        
        # Usar nova tabela ServicoObraReal
        try:
            # Buscar servi√ßos usando a nova tabela
            servicos_obra_real = db.session.query(ServicoObraReal, Servico).join(
                Servico, ServicoObraReal.servico_id == Servico.id
            ).filter(
                ServicoObraReal.obra_id == obra_id,
                ServicoObraReal.admin_id == admin_id,
                ServicoObraReal.ativo == True,
                Servico.ativo == True
            ).all()
            
            servicos_lista = []
            for servico_obra_real, servico in servicos_obra_real:
                servicos_lista.append({
                    'id': servico.id,
                    'nome': servico.nome,
                    'descricao': servico.descricao or '',
                    'categoria': servico.categoria,
                    'unidade_medida': servico.unidade_medida,
                    'custo_unitario': servico.custo_unitario,
                    'quantidade_planejada': float(servico_obra_real.quantidade_planejada),
                    'quantidade_executada': float(servico_obra_real.quantidade_executada),
                    'percentual_concluido': float(servico_obra_real.percentual_concluido),
                    'status': servico_obra_real.status,
                    'prioridade': servico_obra_real.prioridade,
                    'valor_total_planejado': float(servico_obra_real.valor_total_planejado),
                    'valor_total_executado': float(servico_obra_real.valor_total_executado),
                    'progresso': round(float(servico_obra_real.percentual_concluido), 1),
                    'ativo': True,
                    'data_inicio_planejada': servico_obra_real.data_inicio_planejada.isoformat() if servico_obra_real.data_inicio_planejada else None,
                    'data_fim_planejada': servico_obra_real.data_fim_planejada.isoformat() if servico_obra_real.data_fim_planejada else None,
                    'observacoes': servico_obra_real.observacoes or ''
                })
            
            print(f"‚úÖ {len(servicos_lista)} servi√ßos encontrados na NOVA TABELA para obra {obra_id}")
            return servicos_lista
            
        except SQLAlchemyError as sql_error:
            # Rollback em caso de erro SQL espec√≠fico
            print(f"üîÑ ROLLBACK: Erro SQLAlchemy detectado: {sql_error}")
            db.session.rollback()
            # Tentar fallback ap√≥s rollback
            raise sql_error
            
    except Exception as e:
        print(f"‚ùå Erro ao obter servi√ßos da obra {obra_id}: {e}")
        # Fazer rollback e tentar fallback
        try:
            db.session.rollback()
            print("üîÑ ROLLBACK executado")
        except:
            print("‚ö†Ô∏è Rollback falhou")
            
        # Fallback simpler - buscar apenas servi√ßos que t√™m RDO
        try:
            query_simples = text("""
                SELECT DISTINCT s.id, s.nome, s.descricao, s.categoria, s.unidade_medida, s.custo_unitario
                FROM servico s
                JOIN rdo_servico_subatividade rss ON s.id = rss.servico_id
                JOIN rdo r ON rss.rdo_id = r.id
                WHERE r.obra_id = :obra_id AND rss.ativo = true 
                  AND s.admin_id = :admin_id AND s.ativo = true
                ORDER BY s.nome
            """)
            result = db.session.execute(query_simples, {'obra_id': obra_id, 'admin_id': admin_id}).fetchall()
            
            servicos_lista = []
            for row in result:
                servicos_lista.append({
                    'id': row.id,
                    'nome': row.nome,
                    'descricao': row.descricao or '',
                    'categoria': row.categoria,
                    'unidade_medida': row.unidade_medida,
                    'custo_unitario': row.custo_unitario,
                    'total_subatividades': 0,
                    'progresso': 0.0,
                    'ativo': True
                })
            
            print(f"‚úÖ FALLBACK: {len(servicos_lista)} servi√ßos encontrados")
            return servicos_lista
        except Exception as e2:
            print(f"‚ùå Erro no fallback: {e2}")
            try:
                db.session.rollback()
                print("üîÑ ROLLBACK fallback executado")
            except:
                pass
            return []

def obter_servicos_disponiveis(admin_id):
    """Obt√©m lista de servi√ßos dispon√≠veis APENAS do admin espec√≠fico (multi-tenant)"""
    try:
        # üîí ISOLAMENTO MULTI-TENANT: Cada admin v√™ APENAS seus pr√≥prios servi√ßos
        servicos = Servico.query.filter_by(admin_id=admin_id, ativo=True).order_by(Servico.nome).all()
        print(f"üîí MULTI-TENANT: Retornando {len(servicos)} servi√ßos para admin_id={admin_id}")
        return servicos
    except Exception as e:
        print(f"‚ùå Erro ao obter servi√ßos dispon√≠veis: {e}")
        return []

def obter_funcionarios(admin_id):
    """Obt√©m lista de funcion√°rios dispon√≠veis"""
    try:
        funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).order_by(Funcionario.nome).all()
        return funcionarios
    except Exception as e:
        print(f"‚ùå Erro ao obter funcion√°rios: {e}")
        return []

# CRUD OBRAS - Editar Obra
@main_bp.route('/obras/editar/<int:id>', methods=['GET', 'POST'])
@login_required
def editar_obra(id):
    """Editar obra existente - SISTEMA REFATORADO"""
    obra = Obra.query.get_or_404(id)
    
    if request.method == 'POST':
        try:
            # üîß ROLLBACK PREVENTIVO: Limpar qualquer sess√£o corrompida
            try:
                db.session.rollback()
            except:
                pass
            
            print(f"üîß INICIANDO EDI√á√ÉO DA OBRA {id}: {obra.nome}")
            
            # Atualizar dados b√°sicos da obra
            obra.nome = request.form.get('nome')
            obra.endereco = request.form.get('endereco', '')
            obra.status = request.form.get('status', 'Em andamento')
            obra.data_inicio = datetime.strptime(request.form.get('data_inicio'), '%Y-%m-%d').date()
            
            if request.form.get('data_previsao_fim'):
                obra.data_previsao_fim = datetime.strptime(request.form.get('data_previsao_fim'), '%Y-%m-%d').date()
            else:
                obra.data_previsao_fim = None
            
            # Valores financeiros
            obra.orcamento = float(request.form.get('orcamento', 0)) if request.form.get('orcamento') else None
            obra.valor_contrato = float(request.form.get('valor_contrato', 0)) if request.form.get('valor_contrato') else None
            
            # Novos campos
            obra.area_total_m2 = float(request.form.get('area_total_m2', 0)) if request.form.get('area_total_m2') else None
            obra.responsavel_id = int(request.form.get('responsavel_id')) if request.form.get('responsavel_id') else None
            
            # üîß C√ìDIGO DE OBRA: Gerar autom√°tico se None/vazio
            codigo_form = request.form.get('codigo', '').strip()
            if not codigo_form or codigo_form.lower() == 'none':
                # Gerar c√≥digo autom√°tico: OB001, OB002, etc.
                ultimo_obra = Obra.query.filter(
                    Obra.codigo.like('OB%')
                ).order_by(Obra.codigo.desc()).first()
                
                if ultimo_obra and ultimo_obra.codigo:
                    try:
                        numero_str = ultimo_obra.codigo[2:]  # Remove 'OB'
                        ultimo_numero = int(numero_str)
                        novo_numero = ultimo_numero + 1
                    except (ValueError, TypeError):
                        novo_numero = 1
                else:
                    novo_numero = 1
                
                obra.codigo = f"OB{novo_numero:03d}"
                print(f"‚úÖ C√≥digo de obra gerado automaticamente: {obra.codigo}")
            else:
                obra.codigo = codigo_form
            
            # Dados do cliente
            obra.cliente_nome = request.form.get('cliente_nome', '')
            obra.cliente_email = request.form.get('cliente_email', '')
            obra.cliente_telefone = request.form.get('cliente_telefone', '')
            obra.portal_ativo = request.form.get('portal_ativo') == '1'
            
            # Gerar token se portal ativado e n√£o existir
            if obra.portal_ativo and obra.cliente_email and not obra.token_cliente:
                import secrets
                obra.token_cliente = secrets.token_urlsafe(32)
            
            # ===== SISTEMA REFATORADO DE SERVI√áOS =====
            # Processar servi√ßos selecionados usando nova fun√ß√£o
            servicos_selecionados = request.form.getlist('servicos_obra')
            print(f"üìù SERVI√áOS SELECIONADOS: {servicos_selecionados}")
            
            # Usar fun√ß√£o refatorada para processar servi√ßos
            servicos_processados = processar_servicos_obra(obra.id, servicos_selecionados)
            
            # ===== COMMIT ROBUSTO =====
            # Salvar todas as altera√ß√µes
            try:
                db.session.commit()
                print(f"‚úÖ OBRA {obra.id} ATUALIZADA: {servicos_processados} servi√ßos processados")
                flash(f'Obra "{obra.nome}" atualizada com sucesso!', 'success')
                return redirect(url_for('main.detalhes_obra', id=obra.id))
                
            except Exception as commit_error:
                print(f"üö® ERRO NO COMMIT: {commit_error}")
                db.session.rollback()
                flash(f'Erro ao salvar obra: {str(commit_error)}', 'error')
            
        except Exception as e:
            print(f"üö® ERRO GERAL NA EDI√á√ÉO: {str(e)}")
            db.session.rollback()
            flash(f'Erro ao atualizar obra: {str(e)}', 'error')
    
    # ===== GET REQUEST - CARREGAR DADOS PARA EDI√á√ÉO =====
    try:
        # Fazer rollback preventivo para evitar transa√ß√µes abortadas
        try:
            db.session.rollback()
            print("üîÑ ROLLBACK preventivo na edi√ß√£o executado")
        except:
            pass
        
        # Usar sistema robusto de detec√ß√£o de admin_id
        admin_id = get_admin_id_robusta(obra, current_user)
        print(f"üîç ADMIN_ID DETECTADO PARA EDI√á√ÉO: {admin_id}")
        
        # Carregar funcion√°rios dispon√≠veis
        funcionarios = obter_funcionarios(admin_id)
        
        # Carregar servi√ßos dispon√≠veis
        servicos_disponiveis = obter_servicos_disponiveis(admin_id)
        
        # Buscar servi√ßos j√° associados √† obra usando fun√ß√£o refatorada com prote√ß√£o
        try:
            servicos_obra_lista = obter_servicos_da_obra(obra.id, admin_id)
            servicos_obra = [s['id'] for s in servicos_obra_lista]
        except Exception as servicos_error:
            print(f"üö® ERRO ao buscar servi√ßos da obra na edi√ß√£o: {servicos_error}")
            try:
                db.session.rollback()
                print("üîÑ ROLLBACK ap√≥s erro de servi√ßos executado")
            except:
                pass
            servicos_obra_lista = []
            servicos_obra = []
        
        print(f"‚úÖ EDI√á√ÉO CARREGADA: {len(funcionarios)} funcion√°rios, {len(servicos_disponiveis)} servi√ßos dispon√≠veis")
        print(f"‚úÖ SERVI√áOS DA OBRA: {len(servicos_obra)} j√° associados")
        
    except Exception as e:
        print(f"ERRO ao carregar dados para edi√ß√£o: {e}")
        try:
            db.session.rollback()
            print("üîÑ ROLLBACK geral na edi√ß√£o executado")
        except:
            pass
        funcionarios = []
        servicos_disponiveis = []
        servicos_obra = []
    
    return render_template('obra_form.html', 
                         titulo='Editar Obra', 
                         obra=obra, 
                         funcionarios=funcionarios, 
                         servicos_disponiveis=servicos_disponiveis,
                         servicos_obra=servicos_obra)

# CRUD OBRAS - Excluir Obra
@main_bp.route('/obras/excluir/<int:id>', methods=['POST', 'GET'])
@login_required
def excluir_obra(id):
    """Excluir obra - aceita GET e POST"""
    # Se for GET, redirecionar para lista de obras
    if request.method == 'GET':
        flash('Opera√ß√£o de exclus√£o deve ser feita via POST', 'warning')
        return redirect(url_for('main.obras'))
    try:
        obra = Obra.query.get_or_404(id)
        nome = obra.nome
        
        # Verificar se h√° RDOs associados
        rdos_count = RDO.query.filter_by(obra_id=id).count()
        if rdos_count > 0:
            flash(f'N√£o √© poss√≠vel excluir a obra "{nome}" pois possui {rdos_count} RDOs associados', 'warning')
            return redirect(url_for('main.detalhes_obra', id=id))
        
        db.session.delete(obra)
        db.session.commit()
        
        flash(f'Obra "{nome}" exclu√≠da com sucesso!', 'success')
        return redirect(url_for('main.obras'))
        
    except Exception as e:
        db.session.rollback()
        flash(f'Erro ao excluir obra: {str(e)}', 'error')
        return redirect(url_for('main.obras'))

# Detalhes de uma obra espec√≠fica
@main_bp.route('/obras/<int:id>')
@main_bp.route('/obras/detalhes/<int:id>')
def detalhes_obra(id):
    try:
        # DEFINIR DATAS PRIMEIRO - CR√çTICO
        data_inicio_param = request.args.get('data_inicio')
        data_fim_param = request.args.get('data_fim')
        
        if not data_inicio_param:
            # Usar per√≠odo com dados (julho-agosto 2025)
            data_inicio = date(2025, 7, 1)
        else:
            data_inicio = datetime.strptime(data_inicio_param, '%Y-%m-%d').date()
        
        if not data_fim_param:
            # Usar final de agosto para pegar todos os dados
            data_fim = date(2025, 8, 31)
        else:
            data_fim = datetime.strptime(data_fim_param, '%Y-%m-%d').date()
        
        print(f"DEBUG PER√çODO DETALHES: {data_inicio} at√© {data_fim}")
        obra_id = id
        
        # Sistema robusto de detec√ß√£o de admin_id - PRODU√á√ÉO
        admin_id = None  # Inicialmente sem filtro
        
        if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
            if current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
                # Super Admin v√™ todas as obras - n√£o filtrar por admin_id
                admin_id = None
            elif current_user.tipo_usuario == TipoUsuario.ADMIN:
                admin_id = current_user.id
            else:
                admin_id = current_user.admin_id
        else:
            # Sistema de bypass - usar admin_id com mais obras OU null para ver todas
            try:
                from sqlalchemy import text
                obra_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM obra GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                # Em produ√ß√£o, pode n√£o ter filtro de admin_id - usar o que tem mais dados
                admin_id = obra_counts[0] if obra_counts else None
                print(f"DEBUG: Admin_id detectado automaticamente: {admin_id}")
            except Exception as e:
                print(f"Erro ao detectar admin_id: {e}")
                admin_id = None  # Ver todas as obras
        
        # Buscar a obra - usar filtro de admin_id apenas se especificado
        if admin_id is not None:
            obra = Obra.query.filter_by(id=id, admin_id=admin_id).first()
        else:
            obra = Obra.query.filter_by(id=id).first()
        
        if not obra:
            print(f"ERRO: Obra {id} n√£o encontrada (admin_id: {admin_id})")
            # Tentar buscar obra sem filtro de admin_id (para debug)
            obra_debug = Obra.query.filter_by(id=id).first()
            if obra_debug:
                print(f"DEBUG: Obra {id} existe mas com admin_id {obra_debug.admin_id}")
                # Se encontrou sem filtro, usar essa obra
                obra = obra_debug
                admin_id = obra.admin_id  # Ajustar admin_id para as pr√≥ximas consultas
            else:
                return f"Obra n√£o encontrada (ID: {id})", 404
        
        print(f"DEBUG OBRA ENCONTRADA: {obra.nome} - Admin: {obra.admin_id}")
        print(f"DEBUG OBRA DADOS: Status={obra.status}, Or√ßamento={obra.orcamento}")
        
        # Buscar funcion√°rios associados √† obra - usar admin_id da obra encontrada
        if admin_id is not None:
            funcionarios_obra = Funcionario.query.filter_by(admin_id=admin_id).all()
        else:
            funcionarios_obra = Funcionario.query.all()
        print(f"DEBUG: {len(funcionarios_obra)} funcion√°rios encontrados para admin_id {admin_id}")
        
        # Calcular custos de m√£o de obra para o per√≠odo
        total_custo_mao_obra = 0.0
        custos_mao_obra = []
        total_horas_periodo = 0.0
        
        # Buscar registros de ponto da obra no per√≠odo
        try:
            from models import RegistroPonto
            registros_periodo = RegistroPonto.query.filter(
                RegistroPonto.data >= data_inicio,
                RegistroPonto.data <= data_fim,
                RegistroPonto.obra_id == obra_id
            ).all()
        except ImportError:
            registros_periodo = []
        
        print(f"DEBUG: {len(registros_periodo)} registros de ponto no per√≠odo para obra {obra_id}")
        
        # Calcular custo por funcion√°rio usando JOIN direto - PRODU√á√ÉO
        from sqlalchemy import text
        
        if admin_id is not None:
            query_custo = text("""
                SELECT 
                    rp.data,
                    rp.funcionario_id,
                    f.nome as funcionario_nome,
                    rp.horas_trabalhadas,
                    f.salario,
                    (COALESCE(f.salario, 1500) / 220.0 * rp.horas_trabalhadas) as custo_dia
                FROM registro_ponto rp
                JOIN funcionario f ON rp.funcionario_id = f.id
                WHERE rp.obra_id = :obra_id 
                  AND rp.data >= :data_inicio
                  AND rp.data <= :data_fim
                  AND f.admin_id = :admin_id
                  AND rp.horas_trabalhadas > 0
                ORDER BY rp.data DESC
            """)
            
            resultado_custos = db.session.execute(query_custo, {
                'obra_id': obra_id,
                'data_inicio': data_inicio,
                'data_fim': data_fim,
                'admin_id': admin_id
            }).fetchall()
        else:
            # Query sem filtro de admin_id para produ√ß√£o
            query_custo = text("""
                SELECT 
                    rp.data,
                    rp.funcionario_id,
                    f.nome as funcionario_nome,
                    rp.horas_trabalhadas,
                    f.salario,
                    (COALESCE(f.salario, 1500) / 220.0 * rp.horas_trabalhadas) as custo_dia
                FROM registro_ponto rp
                JOIN funcionario f ON rp.funcionario_id = f.id
                WHERE rp.obra_id = :obra_id 
                  AND rp.data >= :data_inicio
                  AND rp.data <= :data_fim
                  AND rp.horas_trabalhadas > 0
                ORDER BY rp.data DESC
            """)
            
            resultado_custos = db.session.execute(query_custo, {
                'obra_id': obra_id,
                'data_inicio': data_inicio,
                'data_fim': data_fim
            }).fetchall()
        
        print(f"DEBUG SQL: {len(resultado_custos)} registros encontrados com JOIN")
        
        for row in resultado_custos:
            data_reg, funcionario_id, funcionario_nome, horas, salario, custo_dia = row
            total_custo_mao_obra += float(custo_dia)
            total_horas_periodo += float(horas)
            
            custos_mao_obra.append({
                'data': data_reg,
                'funcionario_nome': funcionario_nome,
                'horas_trabalhadas': float(horas),
                'salario_hora': float(salario or 1500) / 220.0,
                'total_dia': float(custo_dia)
            })
        
        print(f"DEBUG KPIs: {total_custo_mao_obra:.2f} em custos, {total_horas_periodo}h trabalhadas")
            
        # Buscar custos da obra para o per√≠odo
        from models import OutroCusto, CustoVeiculo, RegistroAlimentacao
        
        # Custos diversos da obra - adaptado para produ√ß√£o
        if admin_id is not None:
            custos_obra = OutroCusto.query.filter(
                OutroCusto.obra_id == obra_id,
                OutroCusto.data >= data_inicio,
                OutroCusto.data <= data_fim
            ).all()
        else:
            custos_obra = OutroCusto.query.filter(
                OutroCusto.obra_id == obra_id,
                OutroCusto.data >= data_inicio,
                OutroCusto.data <= data_fim
            ).all()
        
        # Custos de transporte/ve√≠culos da obra
        # ‚úÖ CORRE√á√ÉO: Verifica√ß√£o segura de atributo obra_id
        custos_query = CustoVeiculo.query.filter(
            CustoVeiculo.data_custo >= data_inicio,
            CustoVeiculo.data_custo <= data_fim
        )
        
        if hasattr(CustoVeiculo, 'obra_id'):
            custos_query = custos_query.filter(CustoVeiculo.obra_id == obra_id)
            
        custos_transporte = custos_query.all()
        
        # Buscar custos de alimenta√ß√£o da tabela espec√≠fica com detalhes
        registros_alimentacao = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.obra_id == obra_id,
            RegistroAlimentacao.data >= data_inicio,
            RegistroAlimentacao.data <= data_fim
        ).order_by(RegistroAlimentacao.data.desc()).all()
        
        # Criar lista detalhada dos lan√ßamentos de alimenta√ß√£o
        custos_alimentacao_detalhados = []
        for registro in registros_alimentacao:
            # Buscar funcion√°rio e restaurante separadamente para evitar erros de join
            funcionario = Funcionario.query.get(registro.funcionario_id) if registro.funcionario_id else None
            restaurante = None
            if registro.restaurante_id:
                try:
                    from models import Restaurante
                    restaurante = Restaurante.query.get(registro.restaurante_id)
                except:
                    restaurante = None
            
            custos_alimentacao_detalhados.append({
                'data': registro.data,
                'funcionario_nome': funcionario.nome if funcionario else 'Funcion√°rio n√£o encontrado',
                'restaurante_nome': restaurante.nome if restaurante else 'N√£o informado',
                'tipo': registro.tipo,
                'valor': registro.valor,
                'observacoes': registro.observacoes
            })
        
        custo_alimentacao_tabela = sum(r.valor for r in registros_alimentacao if r.valor)
        
        # Tamb√©m buscar em outro_custo como fallback
        custo_alimentacao_outros = sum(c.valor for c in custos_obra if any([
            c.kpi_associado == 'custo_alimentacao',
            'vale_alimentacao' in (c.tipo or '').lower(),
            'alimentacao' in (c.tipo or '').lower(),
            'va' in (c.tipo or '').lower(),
            'refeicao' in (c.tipo or '').lower()
        ]))
        
        # Total de alimenta√ß√£o (tabela espec√≠fica + outros custos)
        custo_alimentacao = custo_alimentacao_tabela + custo_alimentacao_outros
        
        print(f"DEBUG ALIMENTA√á√ÉO: Tabela espec√≠fica={custo_alimentacao_tabela}, Outros custos={custo_alimentacao_outros}, Total={custo_alimentacao}")
        
        custo_transporte = sum(c.valor for c in custos_obra if any([
            c.kpi_associado == 'custo_transporte',
            'vale_transporte' in (c.tipo or '').lower(),
            'transporte' in (c.tipo or '').lower(),
            'vt' in (c.tipo or '').lower()
        ]))
        
        outros_custos = sum(c.valor for c in custos_obra if any([
            c.kpi_associado == 'outros_custos',
            'outros' in (c.tipo or '').lower(),
            'epi' in (c.tipo or '').lower(),
            'desconto' in (c.tipo or '').lower()
        ]))
        
        custos_transporte_total = sum(c.valor for c in custos_transporte if c.valor)
        
        print(f"DEBUG CUSTOS DETALHADOS: Alimenta√ß√£o={custo_alimentacao} (tabela={custo_alimentacao_tabela}, outros={custo_alimentacao_outros}), Transporte VT={custo_transporte}, Ve√≠culos={custos_transporte_total}, Outros={outros_custos}")
        
        # Calcular progresso geral da obra baseado no √∫ltimo RDO
        progresso_geral = 0.0
        try:
            from models import RDO, RDOServicoSubatividade
            
            # Buscar o √∫ltimo RDO da obra
            ultimo_rdo_obra = RDO.query.filter_by(obra_id=obra_id).order_by(RDO.data_relatorio.desc()).first()
            
            if ultimo_rdo_obra:
                # Buscar subatividades do √∫ltimo RDO
                subatividades_rdo = RDOServicoSubatividade.query.filter_by(rdo_id=ultimo_rdo_obra.id).all()
                
                if subatividades_rdo:
                    total_percentuais = sum(sub.percentual_conclusao or 0 for sub in subatividades_rdo)
                    total_sub = len(subatividades_rdo)
                    # F√ìRMULA SIMPLES
                    progresso_geral = round(total_percentuais / total_sub, 1) if total_sub > 0 else 0.0
                    print(f"üéØ KPI OBRA PROGRESSO: {total_percentuais}√∑{total_sub} = {progresso_geral}%")
                    print(f"DEBUG PROGRESSO OBRA: {len(subatividades_rdo)} subatividades, progresso geral: {progresso_geral:.1f}%")
                else:
                    print("DEBUG PROGRESSO: √öltimo RDO sem subatividades registradas")
            else:
                print("DEBUG PROGRESSO: Nenhum RDO encontrado para esta obra")
        except Exception as e:
            print(f"ERRO ao calcular progresso da obra: {e}")
            progresso_geral = 0.0

        # Montar KPIs finais da obra
        kpis_obra = {
            'total_funcionarios': len(funcionarios_obra),
            'funcionarios_periodo': len(set([r.funcionario_id for r in registros_periodo])),
            'custo_mao_obra': total_custo_mao_obra,
            'custo_alimentacao': custo_alimentacao,
            'custo_transporte': custos_transporte_total + custo_transporte,
            'custo_total': total_custo_mao_obra + custo_alimentacao + custo_transporte + outros_custos + custos_transporte_total,
            'total_horas': total_horas_periodo,
            'dias_trabalhados': len(set([r.data for r in registros_periodo])),
            'total_rdos': 0,
            'funcionarios_ativos': len(funcionarios_obra),
            'progresso_geral': progresso_geral
        }
        
        # Buscar RDOs da obra para o per√≠odo
        try:
            from models import RDO
            rdos_obra = RDO.query.filter_by(obra_id=obra_id).order_by(RDO.data_relatorio.desc()).limit(10).all()
        except:
            rdos_obra = []
        
        # ===== SISTEMA REFATORADO DE SERVI√áOS DA OBRA =====
        # Usar nova fun√ß√£o para buscar servi√ßos da obra com prote√ß√£o de transa√ß√£o
        servicos_obra = []
        try:
            # Fazer rollback preventivo antes de buscar servi√ßos
            try:
                db.session.rollback()
                print("üîÑ ROLLBACK preventivo executado")
            except:
                pass
            
            admin_id_para_servicos = get_admin_id_robusta(obra)
            servicos_obra = obter_servicos_da_obra(obra_id, admin_id_para_servicos)
            print(f"üéØ SERVI√áOS DA OBRA: {len(servicos_obra)} servi√ßos encontrados usando sistema refatorado")
            
        except Exception as e:
            print(f"üö® ERRO ao buscar servi√ßos da obra: {e}")
            # Fazer rollback em caso de erro e tentar busca simples
            try:
                db.session.rollback()
                print("üîÑ ROLLBACK ap√≥s erro executado")
            except:
                pass
            servicos_obra = []
        
        # Continuar com o resto da fun√ß√£o
        total_rdos = len(rdos_obra)
        rdos_finalizados = len([r for r in rdos_obra if r.status == 'Finalizado'])
        rdos_periodo = rdos_obra
        rdos_recentes = rdos_obra
        
        print(f"DEBUG KPIs FINAIS: Total={kpis_obra['custo_total']:.2f}, M√£o Obra={kpis_obra['custo_mao_obra']:.2f}, Horas={kpis_obra['total_horas']:.1f}")
        print(f"DEBUG FUNCION√ÅRIOS: {kpis_obra['funcionarios_periodo']} no per√≠odo, {kpis_obra['dias_trabalhados']} dias trabalhados")
        
        # Importar date para template
        from datetime import date as date_class
        
        return render_template('obras/detalhes_obra_profissional.html', 
                             obra=obra, 
                             kpis=kpis_obra,
                             data_inicio=data_inicio,
                             data_fim=data_fim,
                             date=date_class,
                             servicos_obra=servicos_obra,
                             total_rdos=total_rdos,
                             rdos_finalizados=rdos_finalizados,
                             rdos=rdos_obra,
                             rdos_periodo=rdos_periodo,
                             rdos_recentes=rdos_recentes,
                             custos_mao_obra=custos_mao_obra,
                             custos_alimentacao_detalhados=custos_alimentacao_detalhados,
                             custos_obra=custos_obra,
                             custos_transporte=custos_transporte,
                             custos_transporte_total=custos_transporte_total,
                             funcionarios_obra=funcionarios_obra)
    except Exception as e:
        print(f"ERRO DETALHES OBRA: {str(e)}")
        # Redirecionar para lista de obras em caso de erro
        flash('Erro ao carregar detalhes da obra', 'error')
        return redirect(url_for('main.obras'))

# ===== SUPER ADMIN =====
@main_bp.route('/super-admin')
@super_admin_required
def super_admin_dashboard():
    admins = Usuario.query.filter_by(tipo_usuario=TipoUsuario.ADMIN).all()
    total_admins = len(admins)
    
    return render_template('super_admin_dashboard.html', 
                         admins=admins, 
                         total_admins=total_admins)

# ===== FUNCION√ÅRIO DASHBOARD =====
@main_bp.route('/funcionario-dashboard')
@funcionario_required
def funcionario_dashboard():
    """Dashboard principal para funcion√°rios"""
    # Detectar se √© acesso mobile
    user_agent = request.headers.get('User-Agent', '').lower()
    is_mobile = any(device in user_agent for device in ['mobile', 'android', 'iphone', 'ipad'])
    
    # Se for mobile, redirecionar para interface otimizada
    if is_mobile or request.args.get('mobile') == '1':
        return redirect(url_for('main.funcionario_mobile_dashboard'))
    
    return funcionario_dashboard_desktop()

def funcionario_dashboard_desktop():
    """Dashboard espec√≠fico para funcion√°rios"""
    try:
        print(f"DEBUG DASHBOARD: current_user.email={current_user.email}")
        print(f"DEBUG DASHBOARD: current_user.admin_id={current_user.admin_id}")
        print(f"DEBUG DASHBOARD: current_user.id={current_user.id}")
        
        # Para sistema de username/senha, buscar funcion√°rio por nome do usu√°rio
        funcionario_atual = None
        if hasattr(current_user, 'username') and current_user.username:
            # Buscar funcion√°rio com nome que contenha o username
            funcionario_atual = Funcionario.query.filter(
                Funcionario.nome.ilike(f'%{current_user.username}%')
            ).first()
        
        if not funcionario_atual:
            # Fallback: buscar por email funcionario@valeverde.com
            funcionario_atual = Funcionario.query.filter_by(email="funcionario@valeverde.com").first()
        
        if not funcionario_atual:
            # Detectar admin_id dinamicamente
            admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
            admin_id_dinamico = admin_counts[0] if admin_counts else current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id
            funcionario_atual = Funcionario.query.filter_by(admin_id=admin_id_dinamico, ativo=True).first()
        
        if funcionario_atual:
            print(f"DEBUG DASHBOARD: Funcion√°rio encontrado: {funcionario_atual.nome} (admin_id={funcionario_atual.admin_id})")
        else:
            print(f"DEBUG DASHBOARD: NENHUM funcion√°rio encontrado")
            # Fallback: primeiro funcion√°rio ativo de qualquer admin
            funcionario_atual = Funcionario.query.filter_by(ativo=True).first()
            if funcionario_atual:
                print(f"DEBUG DASHBOARD: Usando primeiro funcion√°rio ativo: {funcionario_atual.nome}")
        
        # Usar admin_id do funcion√°rio encontrado ou detectar dinamicamente
        admin_id_correto = funcionario_atual.admin_id if funcionario_atual else (current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id)
        print(f"DEBUG DASHBOARD: Usando admin_id={admin_id_correto}")
        
        # Buscar obras dispon√≠veis para esse admin
        obras_disponiveis = Obra.query.filter_by(admin_id=admin_id_correto).order_by(Obra.nome).all()
        
        # Buscar RDOs recentes da empresa
        rdos_recentes = RDO.query.join(Obra).filter(
            Obra.admin_id == admin_id_correto
        ).order_by(RDO.data_relatorio.desc()).limit(10).all()
        
        # RDOs em rascunho que o funcion√°rio pode editar
        rdos_rascunho = RDO.query.join(Obra).filter(
            Obra.admin_id == admin_id_correto,
            RDO.status == 'Rascunho'
        ).order_by(RDO.data_relatorio.desc()).limit(5).all()
        
        print(f"DEBUG FUNCION√ÅRIO DASHBOARD: Funcion√°rio {funcionario_atual.nome if funcionario_atual else 'N/A'}")
        print(f"DEBUG: {len(obras_disponiveis)} obras dispon√≠veis, {len(rdos_recentes)} RDOs recentes")
        
        return render_template('funcionario_dashboard.html', 
                             funcionario=funcionario_atual,
                             obras_disponiveis=obras_disponiveis,
                             rdos_recentes=rdos_recentes,
                             rdos_rascunho=rdos_rascunho,
                             total_obras=len(obras_disponiveis),
                             total_rdos=len(rdos_recentes))
                             
    except Exception as e:
        print(f"ERRO FUNCION√ÅRIO DASHBOARD: {str(e)}")
        import traceback
        print(f"TRACEBACK: {traceback.format_exc()}")
        flash('Erro ao carregar dashboard. Contate o administrador.', 'error')
        return render_template('funcionario_dashboard.html', 
                             funcionario=None,
                             obras_disponiveis=[],
                             rdos_recentes=[],
                             rdos_rascunho=[],
                             total_obras=0,
                             total_rdos=0)

# ===== ROTAS B√ÅSICAS DE TESTE =====
@main_bp.route('/test')
def test():
    return jsonify({'status': 'ok', 'message': 'SIGE v8.0 funcionando!'})

# ‚ö†Ô∏è ROTA /veiculos REMOVIDA - Conflito corrigido!
# ‚úÖ Conflito de rota resolvido! Agora usa apenas a fun√ß√£o veiculos() moderna

# ===========================
# üÜï NOVA IMPLEMENTA√á√ÉO: Visualiza√ß√£o Robusta de Ve√≠culos
# ===========================



# Rota para buscar √∫ltima quilometragem do ve√≠culo
@main_bp.route('/veiculos/<int:id>/ultima-km')
@login_required
def ultima_km_veiculo(id):
    """Retorna a √∫ltima quilometragem registrada do ve√≠culo"""
    try:
        # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            return jsonify({'error': 'Acesso negado. Usu√°rio n√£o autenticado.'}), 403
        
        from models import Veiculo
        from sqlalchemy import text
        
        # Verificar se o ve√≠culo pertence ao usu√°rio
        veiculo = Veiculo.query.filter_by(id=id, admin_id=tenant_admin_id).first_or_404()
        
        # Buscar a √∫ltima quilometragem registrada (√∫ltimo uso ou km_atual do ve√≠culo)
        ultima_km = 0
        
        try:
            # Buscar √∫ltimo uso do ve√≠culo ordenado por data
            ultimo_uso = db.session.execute(
                text("""
                    SELECT km_final 
                    FROM uso_veiculo 
                    WHERE veiculo_id = :veiculo_id 
                    AND km_final IS NOT NULL 
                    ORDER BY data_uso DESC, id DESC 
                    LIMIT 1
                """),
                {'veiculo_id': id}
            ).fetchone()
            
            if ultimo_uso and ultimo_uso.km_final:
                ultima_km = ultimo_uso.km_final
            elif veiculo.km_atual:
                ultima_km = veiculo.km_atual
                
        except Exception as e:
            print(f"Erro ao buscar √∫ltima KM: {str(e)}")
            # Fallback para km_atual do ve√≠culo
            ultima_km = veiculo.km_atual or 0
        
        return jsonify({'ultima_km': ultima_km})
        
    except Exception as e:
        print(f"ERRO √öLTIMA KM VE√çCULO: {str(e)}")
        return jsonify({'error': 'Erro ao carregar √∫ltima quilometragem', 'ultima_km': 0}), 500

# Rota para calcular KPIs do ve√≠culo por per√≠odo
@main_bp.route('/veiculos/<int:id>/kpis')
@login_required
def kpis_veiculo_periodo(id):
    """Retorna KPIs do ve√≠culo filtradas por per√≠odo"""
    try:
        # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            return jsonify({'error': 'Acesso negado. Usu√°rio n√£o autenticado.'}), 403
        
        from models import Veiculo
        from sqlalchemy import text
        from datetime import datetime, date
        
        # Verificar se o ve√≠culo pertence ao usu√°rio
        veiculo = Veiculo.query.filter_by(id=id, admin_id=tenant_admin_id).first_or_404()
        
        # Obter par√¢metros de data
        data_inicial = request.args.get('data_inicial')
        data_final = request.args.get('data_final')
        
        # Se n√£o informado, usar m√™s atual
        if not data_inicial or not data_final:
            hoje = date.today()
            data_inicial = hoje.replace(day=1).strftime('%Y-%m-%d')  # Primeiro dia do m√™s
            data_final = hoje.strftime('%Y-%m-%d')  # Hoje
        
        # Calcular KPIs do per√≠odo
        quilometragem_total = 0
        custos_manutencao = 0
        combustivel_gasto = 0
        
        try:
            # Buscar usos no per√≠odo
            usos_periodo = db.session.execute(
                text("""
                    SELECT km_inicial, km_final 
                    FROM uso_veiculo 
                    WHERE veiculo_id = :veiculo_id 
                    AND data_uso BETWEEN :data_inicial AND :data_final
                    AND km_inicial IS NOT NULL 
                    AND km_final IS NOT NULL
                """),
                {'veiculo_id': id, 'data_inicial': data_inicial, 'data_final': data_final}
            ).fetchall()
            
            # Calcular quilometragem total do per√≠odo
            for uso in usos_periodo:
                if uso.km_inicial and uso.km_final:
                    quilometragem_total += (uso.km_final - uso.km_inicial)
            
            # Buscar custos no per√≠odo
            custos_periodo = db.session.execute(
                text("""
                    SELECT tipo_custo, valor 
                    FROM custo_veiculo 
                    WHERE veiculo_id = :veiculo_id 
                    AND data_custo BETWEEN :data_inicial AND :data_final
                """),
                {'veiculo_id': id, 'data_inicial': data_inicial, 'data_final': data_final}
            ).fetchall()
            
            # Calcular custos por tipo
            for custo in custos_periodo:
                if custo.tipo_custo == 'combustivel':
                    combustivel_gasto += custo.valor
                elif custo.tipo_custo in ['manutencao', 'seguro', 'outros']:
                    custos_manutencao += custo.valor
                    
        except Exception as e:
            print(f"Erro ao calcular KPIs: {str(e)}")
        
        kpis = {
            'quilometragem_total': quilometragem_total,
            'custos_manutencao': custos_manutencao,
            'combustivel_gasto': combustivel_gasto,
            'periodo': f"{data_inicial} a {data_final}"
        }
        
        return jsonify(kpis)
        
    except Exception as e:
        print(f"ERRO KPIs VE√çCULO PER√çODO: {str(e)}")
        return jsonify({'error': 'Erro ao calcular KPIs do per√≠odo'}), 500





# 3. ROTA EXCLUS√ÉO - /veiculos/<id>/excluir (POST)
@main_bp.route('/veiculos/<int:id>/excluir', methods=['POST'])
@admin_required
def excluir_veiculo(id):
    from models import Veiculo
    
    # üõ°Ô∏è PROBLEM 4 SECURITY: Route hardening for destructive operation
    # Verify Referrer to prevent CSRF attacks
    referrer = request.headers.get('Referer', '')
    if not referrer or 'veiculos' not in referrer:
        flash('‚ö†Ô∏è Opera√ß√£o n√£o permitida: origem inv√°lida', 'danger')
        return redirect(url_for('main.veiculos'))
    
    admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
    # üîí Enhanced admin_id verification
    veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
    
    try:
        # üìù AUDIT LOG: Log destructive operation for security
        logger.info(f"üóëÔ∏è VEHICLE DELETE: Admin {admin_id} deleted vehicle {veiculo.placa} (ID: {id})")
        
        # Marcar como inativo (n√£o deletar fisicamente) - SAFE DELETE
        veiculo.ativo = False
        veiculo.updated_at = datetime.utcnow() if hasattr(veiculo, 'updated_at') else None
        db.session.commit()
        
        flash(f'Ve√≠culo {veiculo.placa} removido com sucesso!', 'success')
    except Exception as e:
        db.session.rollback()
        print(f"ERRO AO EXCLUIR VE√çCULO: {str(e)}")
        flash('Erro ao remover ve√≠culo. Tente novamente.', 'error')
    
    return redirect(url_for('main.veiculos'))


# Helper function para processar passageiros por posi√ß√£o
def processar_passageiro_veiculo(passageiro_id, motorista_id, uso_veiculo_id, admin_id, posicao):
    """
    Processa um passageiro individual do ve√≠culo com valida√ß√µes
    Retorna 1 se criado com sucesso, 0 caso contr√°rio
    """
    try:
        passageiro_id = int(passageiro_id)
        
        # Validar se o passageiro n√£o √© o mesmo que o motorista
        if passageiro_id == int(motorista_id):
            return 0  # Pular motorista - ele j√° est√° registrado como condutor
        
        # Verificar se o funcion√°rio existe e pertence ao mesmo admin
        funcionario_passageiro = Funcionario.query.filter_by(
            id=passageiro_id, 
            admin_id=admin_id, 
            ativo=True
        ).first()
        
        if funcionario_passageiro:
            # CORRE√á√ÉO CR√çTICA: Verificar se j√° n√£o existe registro (evitar duplica√ß√£o) COM admin_id
            passageiro_existente = PassageiroVeiculo.query.filter_by(
                uso_veiculo_id=uso_veiculo_id,
                funcionario_id=passageiro_id,
                admin_id=admin_id  # ISOLAMENTO MULTI-TENANT OBRIGAT√ìRIO
            ).first()
            
            if not passageiro_existente:
                try:
                    passageiro = PassageiroVeiculo(
                        uso_veiculo_id=uso_veiculo_id,
                        funcionario_id=passageiro_id,
                        posicao=posicao,  # Novo campo de posi√ß√£o
                        admin_id=admin_id,
                        created_at=datetime.utcnow()
                    )
                    db.session.add(passageiro)
                    return 1
                except IntegrityError as e:
                    db.session.rollback()
                    print(f"ERRO INTEGRIDADE PASSAGEIRO: {str(e)}")
                    return -1  # Sinalizar erro de integridade
        
        return 0
    except (ValueError, TypeError):
        # ID inv√°lido
        return 0
    except IntegrityError as e:
        db.session.rollback()
        print(f"ERRO INTEGRIDADE PASSAGEIRO (Global): {str(e)}")
        return -1
    except Exception as e:
        db.session.rollback()
        print(f"ERRO INESPERADO PASSAGEIRO: {str(e)}")
        return -1


# 4. ROTA REGISTRO USO - /veiculos/<id>/uso (GET/POST)
# ROTA PARA MODAL DE USO (SEM PAR√ÇMETRO ID NA URL)
@main_bp.route('/veiculos/uso', methods=['POST'])
@login_required  # üîí MUDAN√áA: Funcion√°rios podem registrar uso de ve√≠culos
def novo_uso_veiculo_lista():
    from forms import UsoVeiculoForm
    from models import Veiculo, UsoVeiculo, Funcionario, Obra
    
    # Obter veiculo_id do form (hidden field)
    veiculo_id = request.form.get('veiculo_id')
    if not veiculo_id:
        flash('Erro: ID do ve√≠culo n√£o fornecido.', 'error')
        return redirect(url_for('main.veiculos'))
    
    # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
    tenant_admin_id = get_tenant_admin_id()
    if not tenant_admin_id:
        flash('Acesso negado. Fa√ßa login novamente.', 'error')
        return redirect(url_for('auth.login'))
    
    veiculo = Veiculo.query.filter_by(id=veiculo_id, admin_id=tenant_admin_id).first_or_404()
    
    # TRANSA√á√ÉO AT√îMICA: Flask-SQLAlchemy gerencia transa√ß√£o automaticamente
    try:
        # Valida√ß√µes de neg√≥cio cr√≠ticas
        km_inicial = float(request.form.get('km_inicial', 0))
        km_final = float(request.form.get('km_final', 0))
        
        if km_final and km_inicial:
            if km_final <= km_inicial:
                flash('KM final deve ser maior que KM inicial.', 'error')
                return redirect(url_for('main.veiculos'))
        
        # CR√çTICO: Valida√ß√£o de od√¥metro
        if km_final and veiculo.km_atual:
            if km_final < veiculo.km_atual:
                flash(f'Erro: KM final n√£o pode ser menor que a quilometragem atual do ve√≠culo ({veiculo.km_atual}km).', 'error')
                return redirect(url_for('main.veiculos'))
        
        # Obter dados dos campos do formul√°rio
        motorista_id = request.form.get('motorista_id')
        if not motorista_id:
            flash('Erro: Motorista √© obrigat√≥rio.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Processar porcentagem de combust√≠vel
        porcentagem_str = request.form.get('porcentagem_combustivel')
        porcentagem_combustivel = None
        if porcentagem_str:
            try:
                porcentagem = int(porcentagem_str)
                if 0 <= porcentagem <= 100:
                    porcentagem_combustivel = porcentagem
                else:
                    flash('Porcentagem de combust√≠vel deve estar entre 0 e 100%.', 'warning')
            except (ValueError, TypeError):
                flash('Porcentagem de combust√≠vel inv√°lida.', 'warning')
        
        # Criar registro de uso
        uso = UsoVeiculo(
            veiculo_id=veiculo.id,
            funcionario_id=motorista_id,  # Usar motorista como funcion√°rio principal
            obra_id=request.form.get('obra_id') if request.form.get('obra_id') else None,
            data_uso=datetime.strptime(request.form.get('data_uso'), '%Y-%m-%d').date(),
            horario_saida=datetime.strptime(request.form.get('horario_saida'), '%H:%M').time() if request.form.get('horario_saida') else None,
            horario_chegada=datetime.strptime(request.form.get('horario_chegada'), '%H:%M').time() if request.form.get('horario_chegada') else None,
            km_inicial=km_inicial,
            km_final=km_final,
            km_percorrido=km_final - km_inicial if km_final and km_inicial else 0,
            finalidade=request.form.get('finalidade', 'Operacional'),
            observacoes=request.form.get('observacoes'),
            porcentagem_combustivel=porcentagem_combustivel,
            admin_id=tenant_admin_id,
            created_at=datetime.utcnow()
        )
        
        db.session.add(uso)
        db.session.flush()  # Obter ID do uso para criar passageiros
        
        # Processar passageiros por posi√ß√£o com valida√ß√µes de limite
        passageiros_frente_ids = request.form.getlist('passageiros_frente[]')
        passageiros_tras_ids = request.form.getlist('passageiros_tras[]')
        passageiros_criados = 0
        
        # Valida√ß√µes de limite
        if len(passageiros_frente_ids) > 3:
            flash('M√°ximo de 3 passageiros permitidos na frente do ve√≠culo.', 'error')
            return redirect(url_for('main.veiculos'))
        
        if len(passageiros_tras_ids) > 5:
            flash('M√°ximo de 5 passageiros permitidos na parte traseira do ve√≠culo.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # VALIDA√á√ÉO CR√çTICA: Contar erros de integridade
        erros_integridade = 0
        
        # Processar passageiros da frente
        if passageiros_frente_ids:
            for passageiro_id in passageiros_frente_ids:
                resultado = processar_passageiro_veiculo(
                    passageiro_id, motorista_id, uso.id, tenant_admin_id, 'frente'
                )
                if resultado == -1:
                    erros_integridade += 1
                elif resultado == 1:
                    passageiros_criados += 1
        
        # Processar passageiros de tr√°s
        if passageiros_tras_ids:
            for passageiro_id in passageiros_tras_ids:
                resultado = processar_passageiro_veiculo(
                    passageiro_id, motorista_id, uso.id, tenant_admin_id, 'tras'
                )
                if resultado == -1:
                    erros_integridade += 1
                elif resultado == 1:
                    passageiros_criados += 1
        
        # ROLLBACK SE HOUVER ERROS DE INTEGRIDADE
        if erros_integridade > 0:
            db.session.rollback()
            flash(f'Erro: {erros_integridade} funcion√°rio(s) j√° estavam registrados como passageiros neste uso. Opera√ß√£o cancelada.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Atualizar KM atual do ve√≠culo se fornecido
        if km_final:
            veiculo.km_atual = km_final
            veiculo.updated_at = datetime.utcnow() if hasattr(veiculo, 'updated_at') else None
        
        # COMMIT AT√îMICO - Tudo ou nada
        db.session.commit()
        
        # Mensagem de sucesso com informa√ß√µes sobre passageiros
        if passageiros_criados > 0:
            flash(f'Uso do ve√≠culo {veiculo.placa} registrado com sucesso! {passageiros_criados} passageiro(s) adicionado(s).', 'success')
        else:
            flash(f'Uso do ve√≠culo {veiculo.placa} registrado com sucesso!', 'success')
        
    except IntegrityError as e:
        db.session.rollback()
        print(f"ERRO INTEGRIDADE USO VE√çCULO: {str(e)}")
        if 'unique constraint' in str(e).lower():
            flash('Erro: Este funcion√°rio j√° est√° registrado como passageiro neste uso de ve√≠culo.', 'error')
        else:
            flash('Erro de integridade ao registrar uso. Verifique os dados e tente novamente.', 'error')
    except Exception as e:
        db.session.rollback()
        print(f"ERRO AO REGISTRAR USO: {str(e)}")
        flash('Erro ao registrar uso do ve√≠culo. Tente novamente.', 'error')
    
    return redirect(url_for('main.veiculos'))


# Helper function para organizar passageiros por posi√ß√£o no modal
def organizar_passageiros_por_posicao(passageiros):
    """
    Organiza passageiros por posi√ß√£o (frente/tr√°s) com √≠cones e contadores
    Retorna HTML formatado para exibi√ß√£o no modal
    """
    # Separar passageiros por posi√ß√£o
    passageiros_frente = [p for p in passageiros if p.posicao == 'frente']
    passageiros_tras = [p for p in passageiros if p.posicao == 'tras']
    
    html = '<div class="row">'
    
    # Passageiros da Frente
    html += '''
    <div class="col-12 mb-2">
        <div class="card border-primary mb-2">
            <div class="card-header bg-light border-primary py-1">
                <h6 class="card-title mb-0 text-primary">
                    Frente ({})
                </h6>
            </div>
            <div class="card-body py-2">
    '''.format(len(passageiros_frente))
    
    if passageiros_frente:
        for passageiro in passageiros_frente:
            nome = passageiro.funcionario.nome if passageiro.funcionario else 'N/A'
            funcao = passageiro.funcionario.funcao_ref.nome if passageiro.funcionario and passageiro.funcionario.funcao_ref else 'Sem fun√ß√£o'
            html += f'<div class="mb-1"><strong>{nome}</strong> <small class="text-muted">- {funcao}</small></div>'
    else:
        html += '<small class="text-muted">Nenhum passageiro na frente</small>'
    
    html += '''
            </div>
        </div>
    </div>
    '''
    
    # Passageiros de Tr√°s
    html += '''
    <div class="col-12 mb-2">
        <div class="card border-success mb-2">
            <div class="card-header bg-light border-success py-1">
                <h6 class="card-title mb-0 text-success">
                    Tr√°s ({})
                </h6>
            </div>
            <div class="card-body py-2">
    '''.format(len(passageiros_tras))
    
    if passageiros_tras:
        for passageiro in passageiros_tras:
            nome = passageiro.funcionario.nome if passageiro.funcionario else 'N/A'
            funcao = passageiro.funcionario.funcao_ref.nome if passageiro.funcionario and passageiro.funcionario.funcao_ref else 'Sem fun√ß√£o'
            html += f'<div class="mb-1"><strong>{nome}</strong> <small class="text-muted">- {funcao}</small></div>'
    else:
        html += '<small class="text-muted">Nenhum passageiro atr√°s</small>'
    
    html += '''
            </div>
        </div>
    </div>
    '''
    
    html += '</div>'
    
    # Se n√£o h√° passageiros em nenhuma posi√ß√£o
    if not passageiros_frente and not passageiros_tras:
        html = '''
        <div class="text-center text-muted">
            <i class="fas fa-info-circle"></i>
            Nenhum passageiro registrado
        </div>
        '''
    
    return html


# ROTA DETALHES USO - /veiculos/uso/<int:uso_id>/detalhes (GET)
@main_bp.route('/veiculos/uso/<int:uso_id>/detalhes', methods=['GET'])
@login_required
def detalhes_uso_veiculo(uso_id):
    """Fornecer dados detalhados de um uso espec√≠fico via AJAX"""
    from models import UsoVeiculo, Funcionario, Obra, Veiculo, PassageiroVeiculo
    
    try:
        # üîí SEGURAN√áA MULTITENANT
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            return jsonify({'error': 'Acesso negado'}), 403
        
        # Buscar uso com relacionamentos
        uso = UsoVeiculo.query.options(
            db.joinedload(UsoVeiculo.veiculo),
            db.joinedload(UsoVeiculo.funcionario),
            db.joinedload(UsoVeiculo.obra)
        ).filter_by(id=uso_id, admin_id=tenant_admin_id).first()
        
        if not uso:
            return jsonify({'error': 'Uso n√£o encontrado'}), 404
        
        # Buscar passageiros do uso com informa√ß√µes dos funcion√°rios
        passageiros = PassageiroVeiculo.query.options(
            db.joinedload(PassageiroVeiculo.funcionario)
        ).filter_by(
            uso_veiculo_id=uso.id,
            admin_id=tenant_admin_id
        ).all()
        
        # Montar HTML dos detalhes
        html_content = f"""
    <div class="row">
        <div class="col-md-6">
            <h6><i class="fas fa-info-circle"></i> Informa√ß√µes Gerais</h6>
            <div class="table-responsive">
                <table class="table table-sm">
                    <tr>
                        <td><strong>Data:</strong></td>
                        <td>{uso.data_uso.strftime('%d/%m/%Y') if uso.data_uso else '-'}</td>
                    </tr>
                    <tr>
                        <td><strong>Ve√≠culo:</strong></td>
                        <td>{uso.veiculo.placa} - {uso.veiculo.marca} {uso.veiculo.modelo}</td>
                    </tr>
                    <tr>
                        <td><strong>Condutor:</strong></td>
                        <td>{uso.funcionario.nome if uso.funcionario else '-'}</td>
                    </tr>
                    <tr>
                        <td><strong>Obra:</strong></td>
                        <td>{uso.obra.nome if uso.obra else 'N√£o vinculado'}</td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="col-md-6">
            <h6><i class="fas fa-tachometer-alt"></i> Dados T√©cnicos</h6>
            <div class="table-responsive">
                <table class="table table-sm">
                    <tr>
                        <td><strong>KM Inicial:</strong></td>
                        <td>{f"{uso.km_inicial:,}".replace(",", ".") if uso.km_inicial else '-'} km</td>
                    </tr>
                    <tr>
                        <td><strong>KM Final:</strong></td>
                        <td>{f"{uso.km_final:,}".replace(",", ".") if uso.km_final else '-'} km</td>
                    </tr>
                    <tr>
                        <td><strong>Dist√¢ncia:</strong></td>
                        <td>{f"{uso.km_percorrido:,}".replace(",", ".") if uso.km_percorrido else '-'} km</td>
                    </tr>
                    <tr>
                        <td><strong>Combust√≠vel:</strong></td>
                        <td>
                            {'<span class="badge bg-info"><i class="fas fa-gas-pump"></i> ' + str(uso.porcentagem_combustivel) + '%</span>' if uso.porcentagem_combustivel is not None else '-'}
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-6">
            <h6><i class="fas fa-clock"></i> Hor√°rios</h6>
            <div class="table-responsive">
                <table class="table table-sm">
                    <tr>
                        <td><strong>Sa√≠da:</strong></td>
                        <td>{uso.horario_saida.strftime('%H:%M') if uso.horario_saida else '-'}</td>
                    </tr>
                    <tr>
                        <td><strong>Chegada:</strong></td>
                        <td>{uso.horario_chegada.strftime('%H:%M') if uso.horario_chegada else '-'}</td>
                    </tr>
                    <tr>
                        <td><strong>Dura√ß√£o:</strong></td>
                        <td>{uso.tempo_uso_str if hasattr(uso, 'tempo_uso_str') else 'N/A'}</td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="col-md-6">
            <h6><i class="fas fa-users"></i> Passageiros por Posi√ß√£o</h6>
            {organizar_passageiros_por_posicao(passageiros)}
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-12">
            <h6><i class="fas fa-sticky-note"></i> Observa√ß√µes</h6>
            <div class="card">
                <div class="card-body">
                    {uso.observacoes if uso.observacoes else '<em class="text-muted">Nenhuma observa√ß√£o registrada</em>'}
                </div>
            </div>
            <h6 class="mt-3"><i class="fas fa-bullseye"></i> Finalidade</h6>
            <div class="card">
                <div class="card-body">
                    {uso.finalidade if uso.finalidade else '<em class="text-muted">N√£o especificada</em>'}
                </div>
            </div>
        </div>
    </div>
    """
        
        return html_content
        
    except Exception as e:
        print(f"ERRO DETALHES USO: {str(e)}")
        return f'<div class="alert alert-danger">Erro ao carregar detalhes: {str(e)}</div>', 500


# ========================
# CRUD DE USO DE VE√çCULOS  
# ========================

# EDITAR USO DE VE√çCULO
@main_bp.route('/veiculos/uso/<int:uso_id>/editar', methods=['GET', 'POST'])
@login_required
def editar_uso_veiculo(uso_id):
    """Editar uso de ve√≠culo existente"""
    from forms import UsoVeiculoForm
    from models import UsoVeiculo, Veiculo, Funcionario, Obra
    
    try:
        # üîí SEGURAN√áA MULTITENANT
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Buscar uso com verifica√ß√£o de propriedade
        uso = UsoVeiculo.query.join(Veiculo).filter(
            UsoVeiculo.id == uso_id,
            Veiculo.admin_id == tenant_admin_id
        ).first_or_404()
        
        form = UsoVeiculoForm(obj=uso)
        
        # Carregamento das op√ß√µes do formul√°rio
        form.veiculo_id.choices = [(v.id, f"{v.placa} - {v.marca} {v.modelo}") 
                                  for v in Veiculo.query.filter_by(admin_id=tenant_admin_id).all()]
        form.funcionario_id.choices = [(f.id, f.nome) 
                                      for f in Funcionario.query.filter_by(admin_id=tenant_admin_id).all()]
        form.obra_id.choices = [(0, "Nenhuma obra")] + [(o.id, o.nome) 
                                                       for o in Obra.query.filter_by(admin_id=tenant_admin_id).all()]
        
        if form.validate_on_submit():
            # Atualizar dados
            uso.veiculo_id = form.veiculo_id.data
            uso.funcionario_id = form.funcionario_id.data
            uso.obra_id = form.obra_id.data if form.obra_id.data != 0 else None
            uso.data_uso = form.data_uso.data
            uso.km_inicial = form.km_inicial.data
            uso.km_final = form.km_final.data
            uso.porcentagem_combustivel = form.porcentagem_combustivel.data
            uso.finalidade = form.finalidade.data
            uso.observacoes = form.observacoes.data
            
            db.session.commit()
            flash('Uso de ve√≠culo atualizado com sucesso!', 'success')
            return redirect(url_for('main.detalhes_veiculo', veiculo_id=uso.veiculo_id))
        
        return render_template('veiculos/editar_uso.html', form=form, uso=uso)
        
    except Exception as e:
        print(f"ERRO EDITAR USO: {str(e)}")
        flash(f'Erro ao editar uso: {str(e)}', 'error')
        return redirect(url_for('main.veiculos'))

# DELETAR USO DE VE√çCULO
@main_bp.route('/veiculos/uso/<int:uso_id>/deletar', methods=['POST'])
@login_required
def deletar_uso_veiculo(uso_id):
    """Deletar uso de ve√≠culo"""
    from models import UsoVeiculo, Veiculo, PassageiroVeiculo
    
    try:
        # üîí SEGURAN√áA MULTITENANT
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Buscar uso com verifica√ß√£o de propriedade
        uso = UsoVeiculo.query.join(Veiculo).filter(
            UsoVeiculo.id == uso_id,
            Veiculo.admin_id == tenant_admin_id
        ).first_or_404()
        
        veiculo_id = uso.veiculo_id
        
        # Deletar passageiros relacionados primeiro
        PassageiroVeiculo.query.filter_by(uso_veiculo_id=uso_id).delete()
        
        # Deletar uso
        db.session.delete(uso)
        db.session.commit()
        
        flash('Uso de ve√≠culo exclu√≠do com sucesso!', 'success')
        return redirect(url_for('main.detalhes_veiculo', veiculo_id=veiculo_id))
        
    except Exception as e:
        print(f"ERRO DELETAR USO: {str(e)}")
        flash(f'Erro ao excluir uso: {str(e)}', 'error')
        return redirect(url_for('main.veiculos'))

# ===========================
# CRUD DE CUSTO DE VE√çCULOS  
# ===========================

# EDITAR CUSTO DE VE√çCULO
@main_bp.route('/veiculos/custo/<int:custo_id>/editar', methods=['GET', 'POST'])
@login_required
def editar_custo_veiculo(custo_id):
    """Editar custo de ve√≠culo existente"""
    from forms import CustoVeiculoForm
    from models import CustoVeiculo, Veiculo
    
    try:
        # üîí SEGURAN√áA MULTITENANT
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Buscar custo com verifica√ß√£o de propriedade
        custo = CustoVeiculo.query.join(Veiculo).filter(
            CustoVeiculo.id == custo_id,
            Veiculo.admin_id == tenant_admin_id
        ).first_or_404()
        
        form = CustoVeiculoForm(obj=custo)
        
        if form.validate_on_submit():
            # Atualizar dados
            custo.data_custo = form.data_custo.data
            custo.tipo_custo = form.tipo_custo.data
            custo.valor = form.valor.data
            custo.km_custo = form.km_custo.data
            custo.litros = form.litros.data
            custo.observacoes = form.observacoes.data
            
            db.session.commit()
            flash('Custo de ve√≠culo atualizado com sucesso!', 'success')
            return redirect(url_for('main.detalhes_veiculo', veiculo_id=custo.veiculo_id))
        
        return render_template('veiculos/editar_custo.html', form=form, custo=custo)
        
    except Exception as e:
        print(f"ERRO EDITAR CUSTO: {str(e)}")
        flash(f'Erro ao editar custo: {str(e)}', 'error')
        return redirect(url_for('main.veiculos'))

# DELETAR CUSTO DE VE√çCULO
@main_bp.route('/veiculos/custo/<int:custo_id>/deletar', methods=['POST'])
@login_required
def deletar_custo_veiculo(custo_id):
    """Deletar custo de ve√≠culo"""
    from models import CustoVeiculo, Veiculo
    
    try:
        # üîí SEGURAN√áA MULTITENANT
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Buscar custo com verifica√ß√£o de propriedade
        custo = CustoVeiculo.query.join(Veiculo).filter(
            CustoVeiculo.id == custo_id,
            Veiculo.admin_id == tenant_admin_id
        ).first_or_404()
        
        veiculo_id = custo.veiculo_id
        
        # Deletar custo
        db.session.delete(custo)
        db.session.commit()
        
        flash('Custo de ve√≠culo exclu√≠do com sucesso!', 'success')
        return redirect(url_for('main.detalhes_veiculo', veiculo_id=veiculo_id))
        
    except Exception as e:
        print(f"ERRO DELETAR CUSTO: {str(e)}")
        flash(f'Erro ao excluir custo: {str(e)}', 'error')
        return redirect(url_for('main.veiculos'))

# ROTA PARA MODAL DE CUSTO (SEM PAR√ÇMETRO ID NA URL)
@main_bp.route('/veiculos/custo', methods=['POST'])
@login_required  # üîí MUDAN√áA: Funcion√°rios podem registrar custos de ve√≠culos
def novo_custo_veiculo_lista():
    from forms import CustoVeiculoForm
    from models import Veiculo, CustoVeiculo
    
    # Obter veiculo_id do form (hidden field)
    veiculo_id = request.form.get('veiculo_id')
    if not veiculo_id:
        flash('Erro: ID do ve√≠culo n√£o fornecido.', 'error')
        return redirect(url_for('main.veiculos'))
    
    # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
    tenant_admin_id = get_tenant_admin_id()
    if not tenant_admin_id:
        flash('Acesso negado. Fa√ßa login novamente.', 'error')
        return redirect(url_for('auth.login'))
    
    veiculo = Veiculo.query.filter_by(id=veiculo_id, admin_id=tenant_admin_id).first_or_404()
    
    try:
        # Valida√ß√µes de neg√≥cio
        valor = float(request.form.get('valor', 0))
        if valor <= 0:
            flash('Valor deve ser maior que zero.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Campos opcionais espec√≠ficos por tipo de custo
        tipo_custo = request.form.get('tipo_custo')
        km_custo = request.form.get('km_custo')
        litros = request.form.get('litros')
        
        # Criar registro de custo
        custo = CustoVeiculo(
            veiculo_id=veiculo.id,
            data_custo=datetime.strptime(request.form.get('data_custo'), '%Y-%m-%d').date(),
            tipo_custo=tipo_custo,
            valor=valor,
            descricao=request.form.get('descricao', ''),
            fornecedor=request.form.get('fornecedor', ''),
            km_custo=int(km_custo) if km_custo else None,
            litros=float(litros) if litros else None,
            admin_id=tenant_admin_id,
            created_at=datetime.utcnow()
        )
        
        db.session.add(custo)
        db.session.commit()
        flash(f'Custo do ve√≠culo {veiculo.placa} registrado com sucesso!', 'success')
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO AO REGISTRAR CUSTO: {str(e)}")
        flash('Erro ao registrar custo do ve√≠culo. Tente novamente.', 'error')
    
    return redirect(url_for('main.veiculos'))




# 5. ROTA REGISTRO CUSTO - /veiculos/<id>/custo (GET/POST)
@main_bp.route('/veiculos/<int:id>/custo', methods=['GET', 'POST'])
@admin_required
def novo_custo_veiculo(id):
    from forms import CustoVeiculoForm
    from models import Veiculo, CustoVeiculo, FluxoCaixa
    
    admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
    veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
    
    form = CustoVeiculoForm()
    form.veiculo_id.data = veiculo.id
    
    if form.validate_on_submit():
        try:
            # CR√çTICO: Validar valor positivo
            if form.valor.data is None or form.valor.data <= 0:
                flash('Erro: O valor do custo deve ser maior que zero.', 'error')
                return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)
            
            # CR√çTICO: Valida√ß√£o de od√¥metro - km n√£o pode diminuir
            if form.km_atual.data and veiculo.km_atual:
                if form.km_atual.data < veiculo.km_atual:
                    flash(f'Erro: Quilometragem n√£o pode diminuir. Atual: {veiculo.km_atual}km, Tentativa: {form.km_atual.data}km', 'error')
                    return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)
            
            # Validar tipo de custo
            tipos_validos = ['combustivel', 'manutencao', 'seguro', 'multa', 'ipva', 'licenciamento', 'pneus', 'outros']
            if form.tipo_custo.data not in tipos_validos:
                flash(f'Tipo de custo inv√°lido. Use: {", ".join(tipos_validos)}', 'error')
                return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)
            
            # Valida√ß√µes espec√≠ficas para combust√≠vel
            if form.tipo_custo.data == 'combustivel':
                if not form.litros_combustivel.data or form.litros_combustivel.data <= 0:
                    flash('Litros de combust√≠vel √© obrigat√≥rio para abastecimentos.', 'error')
                    return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)
                
                if not form.preco_por_litro.data or form.preco_por_litro.data <= 0:
                    flash('Pre√ßo por litro √© obrigat√≥rio para abastecimentos.', 'error')
                    return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)
            
            # Criar registro de custo com novos campos
            custo = CustoVeiculo(
                veiculo_id=veiculo.id,
                obra_id=form.obra_id.data if form.obra_id.data else None,
                data_custo=form.data_custo.data,
                valor=form.valor.data,
                tipo_custo=form.tipo_custo.data,
                descricao=form.descricao.data,
                km_atual=form.km_atual.data or veiculo.km_atual,
                fornecedor=form.fornecedor.data,
                # Campos espec√≠ficos para combust√≠vel
                litros_combustivel=form.litros_combustivel.data if form.tipo_custo.data == 'combustivel' else None,
                preco_por_litro=form.preco_por_litro.data if form.tipo_custo.data == 'combustivel' else None,
                posto_combustivel=form.posto_combustivel.data if form.tipo_custo.data == 'combustivel' else None,
                tipo_combustivel=form.tipo_combustivel.data if form.tipo_custo.data == 'combustivel' else None,
                tanque_cheio=form.tanque_cheio.data if form.tipo_custo.data == 'combustivel' else False,
                # Campos para manuten√ß√£o
                numero_nota_fiscal=form.numero_nota_fiscal.data if form.tipo_custo.data == 'manutencao' else None,
                categoria_manutencao=form.categoria_manutencao.data if form.tipo_custo.data == 'manutencao' else None,
                proxima_manutencao_km=form.proxima_manutencao_km.data if form.tipo_custo.data == 'manutencao' else None,
                proxima_manutencao_data=form.proxima_manutencao_data.data if form.tipo_custo.data == 'manutencao' else None,
                # Controle financeiro
                centro_custo=form.centro_custo.data,
                admin_id=admin_id
            )
            
            # Calcular pr√≥xima manuten√ß√£o automaticamente se for manuten√ß√£o
            if form.tipo_custo.data == 'manutencao':
                custo.calcular_proxima_manutencao()
            
            db.session.add(custo)
            
            # Atualizar KM atual do ve√≠culo se informado (j√° validado acima)
            if form.km_atual.data and form.km_atual.data > veiculo.km_atual:
                veiculo.km_atual = form.km_atual.data
            
            # Integrar com fluxo de caixa (se tabela existir)
            try:
                fluxo = FluxoCaixa(
                    data_movimento=form.data_custo.data,
                    tipo_movimento='SAIDA',
                    categoria='custo_veiculo',
                    valor=form.valor.data,
                    descricao=f'{form.tipo_custo.data.title()} - {veiculo.placa} - {form.descricao.data}',
                    referencia_id=custo.id,
                    referencia_tabela='custo_veiculo'
                )
                db.session.add(fluxo)
            except Exception as fluxo_error:
                print(f"AVISO: N√£o foi poss√≠vel integrar com fluxo de caixa: {fluxo_error}")
            
            db.session.commit()
            
            flash(f'Custo de {form.tipo_custo.data} registrado com sucesso!', 'success')
            return redirect(url_for('main.detalhes_veiculo', id=veiculo.id))
            
        except Exception as e:
            db.session.rollback()
            print(f"ERRO AO REGISTRAR CUSTO DE VE√çCULO: {str(e)}")
            flash('Erro ao registrar custo do ve√≠culo. Tente novamente.', 'error')
    
    return render_template('veiculos/novo_custo.html', form=form, veiculo=veiculo)


# ===== NOVAS ROTAS AVAN√áADAS PARA SISTEMA DE VE√çCULOS =====

@main_bp.route('/veiculos/<int:id>/dashboard')
@admin_required
def dashboard_veiculo(id):
    """Dashboard completo com KPIs e gr√°ficos de um ve√≠culo espec√≠fico"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import Veiculo, UsoVeiculo, CustoVeiculo
        from sqlalchemy import text
        from datetime import datetime, timedelta
        from sqlalchemy import func, extract
        
        veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        
        # Per√≠odo para an√°lises (√∫ltimos 6 meses)
        data_limite = datetime.now() - timedelta(days=180)
        
        # 1. KPIs PRINCIPAIS
        # Total de KMs percorridos (√∫ltimos 6 meses)
        usos_periodo = UsoVeiculo.query.filter(
            UsoVeiculo.veiculo_id == id,
            UsoVeiculo.data_uso >= data_limite.date()
        ).all()
        
        total_km = sum([uso.km_percorrido for uso in usos_periodo if uso.km_percorrido])
        total_horas = sum([uso.horas_uso for uso in usos_periodo if uso.horas_uso])
        total_usos = len(usos_periodo)
        
        # Custos por categoria (√∫ltimos 6 meses)
        custos_periodo = CustoVeiculo.query.filter(
            CustoVeiculo.veiculo_id == id,
            CustoVeiculo.data_custo >= data_limite.date()
        ).all()
        
        custos_por_tipo = {}
        total_litros = 0
        custo_total = 0
        
        for custo in custos_periodo:
            tipo = custo.tipo_custo
            custos_por_tipo[tipo] = custos_por_tipo.get(tipo, 0) + custo.valor
            custo_total += custo.valor
            
            if tipo == 'combustivel' and custo.litros_combustivel:
                total_litros += custo.litros_combustivel
        
        # C√°lculos de efici√™ncia
        consumo_medio = round(total_km / total_litros, 2) if total_litros > 0 else 0
        custo_por_km = round(custo_total / total_km, 2) if total_km > 0 else 0
        horas_por_uso = round(total_horas / total_usos, 2) if total_usos > 0 else 0
        
        # 2. DADOS PARA GR√ÅFICOS
        # Uso mensal (√∫ltimos 6 meses)
        uso_mensal = db.session.query(
            extract('year', UsoVeiculo.data_uso).label('ano'),
            extract('month', UsoVeiculo.data_uso).label('mes'),
            func.sum(UsoVeiculo.km_percorrido).label('total_km'),
            func.count(UsoVeiculo.id).label('total_usos')
        ).filter(
            UsoVeiculo.veiculo_id == id,
            UsoVeiculo.data_uso >= data_limite.date()
        ).group_by('ano', 'mes').order_by('ano', 'mes').all()
        
        # Custos mensais por tipo
        custos_mensais = db.session.query(
            extract('year', CustoVeiculo.data_custo).label('ano'),
            extract('month', CustoVeiculo.data_custo).label('mes'),
            CustoVeiculo.tipo_custo,
            func.sum(CustoVeiculo.valor).label('total_valor')
        ).filter(
            CustoVeiculo.veiculo_id == id,
            CustoVeiculo.data_custo >= data_limite.date()
        ).group_by('ano', 'mes', CustoVeiculo.tipo_custo).all()
        
        # 3. √öLTIMOS USOS (10 mais recentes)
        ultimos_usos = UsoVeiculo.query.filter_by(veiculo_id=id).order_by(UsoVeiculo.data_uso.desc()).limit(10).all()
        
        # 4. PR√ìXIMAS MANUTEN√á√ïES
        proximas_manutencoes = CustoVeiculo.query.filter(
            CustoVeiculo.veiculo_id == id,
            CustoVeiculo.proxima_manutencao_km.isnot(None),
            CustoVeiculo.proxima_manutencao_km > veiculo.km_atual
        ).order_by(CustoVeiculo.proxima_manutencao_km).all()
        
        kpis = {
            'total_km': total_km,
            'total_horas': total_horas,
            'total_usos': total_usos,
            'consumo_medio': consumo_medio,
            'custo_por_km': custo_por_km,
            'horas_por_uso': horas_por_uso,
            'custo_total': custo_total,
            'custos_por_tipo': custos_por_tipo
        }
        
        return render_template('veiculos/dashboard_veiculo.html',
                             veiculo=veiculo,
                             kpis=kpis,
                             uso_mensal=uso_mensal,
                             custos_mensais=custos_mensais,
                             ultimos_usos=ultimos_usos,
                             proximas_manutencoes=proximas_manutencoes)
        
    except Exception as e:
        print(f"ERRO DASHBOARD VE√çCULO: {str(e)}")
        flash('Erro ao carregar dashboard do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=id))


@main_bp.route('/veiculos/<int:id>/historico')
@admin_required
def historico_veiculo(id):
    """Hist√≥rico completo de uso e custos do ve√≠culo com filtros avan√ßados"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import Veiculo, UsoVeiculo, CustoVeiculo
        from sqlalchemy import text, Funcionario, Obra
        from datetime import datetime, timedelta
        
        veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        
        # Filtros da query string
        filtros = {
            'tipo': request.args.get('tipo', ''),  # uso, custo ou todos
            'data_inicio': request.args.get('data_inicio'),
            'data_fim': request.args.get('data_fim'),
            'funcionario_id': request.args.get('funcionario_id'),
            'obra_id': request.args.get('obra_id'),
            'tipo_custo': request.args.get('tipo_custo')
        }
        
        # Query base para usos
        query_usos = UsoVeiculo.query.filter_by(veiculo_id=id)
        
        # Query base para custos
        query_custos = CustoVeiculo.query.filter_by(veiculo_id=id)
        
        # Aplicar filtros de data
        if filtros['data_inicio']:
            data_inicio = datetime.strptime(filtros['data_inicio'], '%Y-%m-%d').date()
            query_usos = query_usos.filter(UsoVeiculo.data_uso >= data_inicio)
            query_custos = query_custos.filter(CustoVeiculo.data_custo >= data_inicio)
        
        if filtros['data_fim']:
            data_fim = datetime.strptime(filtros['data_fim'], '%Y-%m-%d').date()
            query_usos = query_usos.filter(UsoVeiculo.data_uso <= data_fim)
            query_custos = query_custos.filter(CustoVeiculo.data_custo <= data_fim)
        
        # Filtros espec√≠ficos
        if filtros['funcionario_id']:
            query_usos = query_usos.filter(UsoVeiculo.funcionario_id == int(filtros['funcionario_id']))
        
        if filtros['obra_id']:
            query_usos = query_usos.filter(UsoVeiculo.obra_id == int(filtros['obra_id']))
            # ‚úÖ CORRE√á√ÉO: Verificar atributo obra_id antes de usar
            if hasattr(CustoVeiculo, 'obra_id'):
                query_custos = query_custos.filter(CustoVeiculo.obra_id == int(filtros['obra_id']))
        
        if filtros['tipo_custo']:
            query_custos = query_custos.filter(CustoVeiculo.tipo_custo == filtros['tipo_custo'])
        
        # Executar queries baseado no tipo
        usos = []
        custos = []
        
        if filtros['tipo'] in ['', 'todos', 'uso']:
            usos = query_usos.order_by(UsoVeiculo.data_uso.desc()).limit(100).all()
        
        if filtros['tipo'] in ['', 'todos', 'custo']:
            custos = query_custos.order_by(CustoVeiculo.data_custo.desc()).limit(100).all()
        
        # Criar linha do tempo combinada
        eventos = []
        for uso in usos:
            eventos.append({
                'tipo': 'uso',
                'data': uso.data_uso,
                'objeto': uso
            })
        
        for custo in custos:
            eventos.append({
                'tipo': 'custo',
                'data': custo.data_custo,
                'objeto': custo
            })
        
        # Ordenar eventos por data
        eventos.sort(key=lambda x: x['data'], reverse=True)
        
        # Op√ß√µes para filtros
        funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
        obras = Obra.query.filter_by(admin_id=admin_id, ativo=True).all()
        
        return render_template('veiculos/historico_veiculo.html',
                             veiculo=veiculo,
                             eventos=eventos,
                             filtros=filtros,
                             funcionarios=funcionarios,
                             obras=obras)
        
    except Exception as e:
        print(f"ERRO HIST√ìRICO VE√çCULO: {str(e)}")
        flash('Erro ao carregar hist√≥rico do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=id))


@main_bp.route('/veiculos/<int:id>/custos')
@admin_required  
def lista_custos_veiculo(id):
    """Lista completa de custos do ve√≠culo com filtros e pagina√ß√£o"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import Veiculo, CustoVeiculo
        from datetime import datetime, timedelta
        
        veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        
        # Filtros da query string
        filtros = {
            'tipo': request.args.get('tipo', ''),
            'data_inicio': request.args.get('data_inicio'),
            'data_fim': request.args.get('data_fim')
        }
        
        # Query base
        query = CustoVeiculo.query.filter_by(veiculo_id=id)
        
        # Aplicar filtros
        if filtros['tipo']:
            query = query.filter(CustoVeiculo.tipo_custo == filtros['tipo'])
        
        if filtros['data_inicio']:
            data_inicio = datetime.strptime(filtros['data_inicio'], '%Y-%m-%d').date()
            query = query.filter(CustoVeiculo.data_custo >= data_inicio)
        
        if filtros['data_fim']:
            data_fim = datetime.strptime(filtros['data_fim'], '%Y-%m-%d').date()
            query = query.filter(CustoVeiculo.data_custo <= data_fim)
        
        # Pagina√ß√£o
        page = request.args.get('page', 1, type=int)
        custos = query.order_by(CustoVeiculo.data_custo.desc()).paginate(
            page=page, per_page=20, error_out=False
        )
        
        # Calcular totais
        total_gasto = db.session.query(func.sum(CustoVeiculo.valor)).filter_by(veiculo_id=id).scalar() or 0
        
        # Custo do m√™s atual
        inicio_mes = datetime.now().replace(day=1).date()
        custo_mes = db.session.query(func.sum(CustoVeiculo.valor)).filter(
            CustoVeiculo.veiculo_id == id,
            CustoVeiculo.data_custo >= inicio_mes
        ).scalar() or 0
        
        return render_template('veiculos/lista_custos.html',
                             veiculo=veiculo,
                             custos=custos,
                             filtros=filtros,
                             total_gasto=total_gasto,
                             custo_mes=custo_mes)
        
    except Exception as e:
        print(f"ERRO LISTA CUSTOS: {str(e)}")
        flash('Erro ao carregar custos do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=id))


@main_bp.route('/veiculos/<int:id>/exportar')
@admin_required
def exportar_dados_veiculo(id):
    """Exportar dados do ve√≠culo para Excel"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import Veiculo, UsoVeiculo, CustoVeiculo
        from sqlalchemy import text
        import io
        import csv
        from flask import Response
        
        veiculo = Veiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        
        # Criar CSV em mem√≥ria
        output = io.StringIO()
        writer = csv.writer(output)
        
        tipo_export = request.args.get('tipo', 'completo')
        
        if tipo_export in ['completo', 'usos']:
            # Cabe√ßalho para usos
            writer.writerow(['=== HIST√ìRICO DE USOS ==='])
            writer.writerow(['Data', 'Funcion√°rio', 'Obra', 'KM Inicial', 'KM Final', 'KM Percorrido', 
                           'Hor√°rio Sa√≠da', 'Hor√°rio Chegada', 'Horas Uso', 'Finalidade', 'Tipo Uso', 'Status'])
            
            usos = UsoVeiculo.query.filter_by(veiculo_id=id).order_by(UsoVeiculo.data_uso.desc()).all()
            for uso in usos:
                writer.writerow([
                    uso.data_uso.strftime('%d/%m/%Y'),
                    uso.funcionario.nome if uso.funcionario else '',
                    uso.obra.nome if uso.obra else '',
                    uso.km_inicial or '',
                    uso.km_final or '',
                    uso.km_percorrido or '',
                    uso.horario_saida.strftime('%H:%M') if uso.horario_saida else '',
                    uso.horario_chegada.strftime('%H:%M') if uso.horario_chegada else '',
                    uso.tempo_uso_str,
                    uso.finalidade or '',
                    uso.tipo_uso or '',
                    uso.status_uso or ''
                ])
            writer.writerow([])  # Linha vazia
        
        if tipo_export in ['completo', 'custos']:
            # Cabe√ßalho para custos
            writer.writerow(['=== HIST√ìRICO DE CUSTOS ==='])
            writer.writerow(['Data', 'Tipo', 'Valor', 'Descri√ß√£o', 'Fornecedor', 'KM Atual', 
                           'Litros', 'Pre√ßo/Litro', 'Consumo', 'Categoria Manuten√ß√£o'])
            
            custos = CustoVeiculo.query.filter_by(veiculo_id=id).order_by(CustoVeiculo.data_custo.desc()).all()
            for custo in custos:
                writer.writerow([
                    custo.data_custo.strftime('%d/%m/%Y'),
                    custo.tipo_custo,
                    f"R$ {custo.valor:.2f}",
                    custo.descricao or '',
                    custo.fornecedor or '',
                    custo.km_atual or '',
                    custo.litros_combustivel or '',
                    f"R$ {custo.preco_por_litro:.2f}" if custo.preco_por_litro else '',
                    f"{custo.consumo_medio} km/l" if custo.consumo_medio else '',
                    custo.categoria_manutencao or ''
                ])
        
        # Preparar resposta
        output.seek(0)
        filename = f"veiculo_{veiculo.placa}_{datetime.now().strftime('%Y%m%d')}.csv"
        
        return Response(
            output.getvalue(),
            mimetype='text/csv',
            headers={'Content-Disposition': f'attachment; filename={filename}'}
        )
        
    except Exception as e:
        print(f"ERRO EXPORTAR DADOS: {str(e)}")
        flash('Erro ao exportar dados do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=id))

# ===== SISTEMA COMPLETO DE HIST√ìRICO E LAN√áAMENTOS DE VE√çCULOS =====

@main_bp.route('/veiculos/lancamentos')
@login_required  # üîí MUDAN√áA: Funcion√°rios podem acessar lan√ßamentos de ve√≠culos
def lancamentos_veiculos():
    """P√°gina principal de lan√ßamentos de ve√≠culos com filtros avan√ßados"""
    try:
        # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
        from utils.tenant import get_tenant_admin_id
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
            
        from models import Veiculo, UsoVeiculo, CustoVeiculo, Funcionario, Obra
        from sqlalchemy import func, desc, or_, and_
        from datetime import datetime, timedelta
        
        # Par√¢metros de filtro
        filtros = {
            'veiculo_id': request.args.get('veiculo_id'),
            'funcionario_id': request.args.get('funcionario_id'),
            'obra_id': request.args.get('obra_id'),
            'data_inicio': request.args.get('data_inicio'),
            'data_fim': request.args.get('data_fim'),
            'tipo_lancamento': request.args.get('tipo_lancamento', 'todos'),  # 'uso', 'custo', 'todos'
            'status': request.args.get('status', 'todos'),  # 'aprovado', 'pendente', 'todos'
            'page': request.args.get('page', 1, type=int)
        }
        
        # Query base para usos
        query_usos = UsoVeiculo.query.filter(UsoVeiculo.admin_id == tenant_admin_id)
        
        # Query base para custos
        query_custos = CustoVeiculo.query.filter(CustoVeiculo.admin_id == tenant_admin_id)
        
        # Aplicar filtros de data (√∫ltimos 30 dias por padr√£o se n√£o especificado)
        if not filtros['data_inicio']:
            filtros['data_inicio'] = (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d')
        if not filtros['data_fim']:
            filtros['data_fim'] = datetime.now().strftime('%Y-%m-%d')
            
        data_inicio = datetime.strptime(filtros['data_inicio'], '%Y-%m-%d').date()
        data_fim = datetime.strptime(filtros['data_fim'], '%Y-%m-%d').date()
        
        query_usos = query_usos.filter(UsoVeiculo.data_uso >= data_inicio, UsoVeiculo.data_uso <= data_fim)
        query_custos = query_custos.filter(CustoVeiculo.data_custo >= data_inicio, CustoVeiculo.data_custo <= data_fim)
        
        # Aplicar outros filtros
        if filtros['veiculo_id']:
            veiculo_id = int(filtros['veiculo_id'])
            query_usos = query_usos.filter(UsoVeiculo.veiculo_id == veiculo_id)
            query_custos = query_custos.filter(CustoVeiculo.veiculo_id == veiculo_id)
            
        if filtros['funcionario_id']:
            query_usos = query_usos.filter(UsoVeiculo.funcionario_id == int(filtros['funcionario_id']))
            
        if filtros['obra_id']:
            obra_id = int(filtros['obra_id'])
            query_usos = query_usos.filter(UsoVeiculo.obra_id == obra_id)
            # ‚úÖ CORRE√á√ÉO: Usar verifica√ß√£o segura de atributo
            if hasattr(CustoVeiculo, 'obra_id'):
                query_custos = query_custos.filter(CustoVeiculo.obra_id == obra_id)
        
        # Filtro por status de aprova√ß√£o
        if filtros['status'] == 'aprovado':
            query_usos = query_usos.filter(UsoVeiculo.aprovado == True)
            query_custos = query_custos.filter(CustoVeiculo.aprovado == True)
        elif filtros['status'] == 'pendente':
            query_usos = query_usos.filter(UsoVeiculo.aprovado == False)
            query_custos = query_custos.filter(CustoVeiculo.aprovado == False)
        
        # Executar queries baseado no tipo de lan√ßamento
        lancamentos = []
        
        if filtros['tipo_lancamento'] in ['todos', 'uso']:
            usos = query_usos.order_by(desc(UsoVeiculo.data_uso)).all()
            for uso in usos:
                lancamentos.append({
                    'tipo': 'uso',
                    'data': uso.data_uso,
                    'veiculo': uso.veiculo,
                    'funcionario': uso.funcionario,
                    'obra': uso.obra,
                    'objeto': uso,
                    'approved': uso.aprovado,
                    'created_at': uso.created_at
                })
        
        if filtros['tipo_lancamento'] in ['todos', 'custo']:
            custos = query_custos.order_by(desc(CustoVeiculo.data_custo)).all()
            for custo in custos:
                lancamentos.append({
                    'tipo': 'custo',
                    'data': custo.data_custo,
                    'veiculo': custo.veiculo,
                    'funcionario': None,  # Custos n√£o t√™m funcion√°rio associado
                    'obra': custo.obra,
                    'objeto': custo,
                    'approved': custo.aprovado,
                    'created_at': custo.created_at
                })
        
        # Ordenar lan√ßamentos por data
        lancamentos.sort(key=lambda x: (x['data'], x['created_at']), reverse=True)
        
        # Pagina√ß√£o manual
        per_page = 20
        total_items = len(lancamentos)
        total_pages = (total_items + per_page - 1) // per_page
        start_idx = (filtros['page'] - 1) * per_page
        end_idx = start_idx + per_page
        lancamentos_pagina = lancamentos[start_idx:end_idx]
        
        # Dados para filtros
        veiculos = Veiculo.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
        funcionarios = Funcionario.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
        obras = Obra.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
        
        # KPIs do per√≠odo
        kpis = {
            'total_usos': len([l for l in lancamentos if l['tipo'] == 'uso']),
            'total_custos': len([l for l in lancamentos if l['tipo'] == 'custo']),
            'valor_total_custos': sum([l['objeto'].valor for l in lancamentos if l['tipo'] == 'custo']),
            'km_total': sum([l['objeto'].km_percorrido or 0 for l in lancamentos if l['tipo'] == 'uso']),
            'pendente_aprovacao': len([l for l in lancamentos if not l['approved']])
        }
        
        paginacao = {
            'page': filtros['page'],
            'total_pages': total_pages,
            'per_page': per_page,
            'total_items': total_items,
            'has_prev': filtros['page'] > 1,
            'has_next': filtros['page'] < total_pages,
            'prev_num': filtros['page'] - 1 if filtros['page'] > 1 else None,
            'next_num': filtros['page'] + 1 if filtros['page'] < total_pages else None
        }
        
        return render_template('veiculos/lancamentos.html',
                             lancamentos=lancamentos_pagina,
                             filtros=filtros,
                             veiculos=veiculos,
                             funcionarios=funcionarios,
                             obras=obras,
                             kpis=kpis,
                             paginacao=paginacao)
        
    except Exception as e:
        print(f"ERRO LAN√áAMENTOS VE√çCULOS: {str(e)}")
        flash('Erro ao carregar lan√ßamentos de ve√≠culos.', 'error')
        return redirect(url_for('main.veiculos'))


@main_bp.route('/veiculos/lancamentos/aprovar/<tipo>/<int:id>', methods=['POST'])
@admin_required  
def aprovar_lancamento_veiculo(tipo, id):
    """Aprovar lan√ßamento de uso ou custo de ve√≠culo"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import UsoVeiculo, CustoVeiculo
        
        if tipo == 'uso':
            item = UsoVeiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        elif tipo == 'custo':
            item = CustoVeiculo.query.filter_by(id=id, admin_id=admin_id).first_or_404()
        else:
            flash('Tipo de lan√ßamento inv√°lido.', 'error')
            return redirect(url_for('main.lancamentos_veiculos'))
        
        item.aprovado = True
        item.aprovado_por_id = current_user.id
        item.data_aprovacao = datetime.utcnow()
        
        db.session.commit()
        flash(f'Lan√ßamento de {tipo} aprovado com sucesso!', 'success')
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO APROVAR LAN√áAMENTO: {str(e)}")
        flash('Erro ao aprovar lan√ßamento.', 'error')
    
    return redirect(url_for('main.lancamentos_veiculos'))


@main_bp.route('/veiculos/relatorios')
@login_required  # üîí MUDAN√áA: Funcion√°rios podem acessar relat√≥rios de ve√≠culos
def relatorios_veiculos():
    """P√°gina de relat√≥rios consolidados de ve√≠culos"""
    try:
        # üîí SEGURAN√áA MULTITENANT: Usar resolver unificado
        from utils.tenant import get_tenant_admin_id
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
            
        from models import Veiculo, UsoVeiculo, CustoVeiculo
        from sqlalchemy import func, extract
        from datetime import datetime, timedelta
        
        # Per√≠odo do relat√≥rio (√∫ltimos 3 meses por padr√£o)
        data_inicio = request.args.get('data_inicio')
        data_fim = request.args.get('data_fim')
        
        if not data_inicio:
            data_inicio = (datetime.now() - timedelta(days=90)).strftime('%Y-%m-%d')
        if not data_fim:
            data_fim = datetime.now().strftime('%Y-%m-%d')
        
        data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d').date()
        data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d').date()
        
        # Relat√≥rio por ve√≠culo
        veiculos = Veiculo.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
        relatorio_veiculos = []
        
        for veiculo in veiculos:
            # Usos no per√≠odo
            usos = UsoVeiculo.query.filter(
                UsoVeiculo.veiculo_id == veiculo.id,
                UsoVeiculo.data_uso >= data_inicio_obj,
                UsoVeiculo.data_uso <= data_fim_obj
            ).all()
            
            # Custos no per√≠odo
            custos = CustoVeiculo.query.filter(
                CustoVeiculo.veiculo_id == veiculo.id,
                CustoVeiculo.data_custo >= data_inicio_obj,
                CustoVeiculo.data_custo <= data_fim_obj
            ).all()
            
            # Calcular m√©tricas
            total_km = sum([uso.km_percorrido or 0 for uso in usos])
            total_horas = sum([uso.horas_uso or 0 for uso in usos])
            total_custos = sum([custo.valor for custo in custos])
            total_usos = len(usos)
            
            # Custos por tipo
            custos_por_tipo = {}
            for custo in custos:
                if custo.tipo_custo not in custos_por_tipo:
                    custos_por_tipo[custo.tipo_custo] = 0
                custos_por_tipo[custo.tipo_custo] += custo.valor
            
            # C√°lculo de efici√™ncia
            custo_por_km = total_custos / total_km if total_km > 0 else 0
            media_km_por_uso = total_km / total_usos if total_usos > 0 else 0
            
            relatorio_veiculos.append({
                'veiculo': veiculo,
                'total_km': total_km,
                'total_horas': total_horas,
                'total_custos': total_custos,
                'total_usos': total_usos,
                'custos_por_tipo': custos_por_tipo,
                'custo_por_km': custo_por_km,
                'media_km_por_uso': media_km_por_uso,
                'dias_periodo': (data_fim_obj - data_inicio_obj).days + 1
            })
        
        # Ordenar por total de KM
        relatorio_veiculos.sort(key=lambda x: x['total_km'], reverse=True)
        
        # Dados consolidados da frota
        consolidado = {
            'total_km_frota': sum([r['total_km'] for r in relatorio_veiculos]),
            'total_custos_frota': sum([r['total_custos'] for r in relatorio_veiculos]),
            'total_usos_frota': sum([r['total_usos'] for r in relatorio_veiculos]),
            'total_horas_frota': sum([r['total_horas'] for r in relatorio_veiculos]),
            'media_custo_por_km': 0,
            'veiculo_mais_usado': None,
            'veiculo_mais_caro': None
        }
        
        if consolidado['total_km_frota'] > 0:
            consolidado['media_custo_por_km'] = consolidado['total_custos_frota'] / consolidado['total_km_frota']
        
        if relatorio_veiculos:
            consolidado['veiculo_mais_usado'] = max(relatorio_veiculos, key=lambda x: x['total_km'])
            consolidado['veiculo_mais_caro'] = max(relatorio_veiculos, key=lambda x: x['total_custos'])
        
        return render_template('veiculos/relatorios.html',
                             relatorio_veiculos=relatorio_veiculos,
                             consolidado=consolidado,
                             data_inicio=data_inicio,
                             data_fim=data_fim)
        
    except Exception as e:
        print(f"ERRO RELAT√ìRIOS VE√çCULOS: {str(e)}")
        flash('Erro ao carregar relat√≥rios de ve√≠culos.', 'error')
        return redirect(url_for('main.veiculos'))


@main_bp.route('/veiculos/relatorios/exportar')
@admin_required
def exportar_relatorio_veiculos():
    """Exportar relat√≥rio de ve√≠culos em PDF"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        from models import Veiculo, UsoVeiculo, CustoVeiculo
        from reportlab.lib import colors
        from reportlab.lib.pagesizes import letter, A4
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
        from reportlab.lib.units import inch
        import io
        from datetime import datetime, timedelta
        
        # Par√¢metros
        data_inicio = request.args.get('data_inicio', (datetime.now() - timedelta(days=30)).strftime('%Y-%m-%d'))
        data_fim = request.args.get('data_fim', datetime.now().strftime('%Y-%m-%d'))
        
        data_inicio_obj = datetime.strptime(data_inicio, '%Y-%m-%d').date()
        data_fim_obj = datetime.strptime(data_fim, '%Y-%m-%d').date()
        
        # Criar buffer em mem√≥ria
        buffer = io.BytesIO()
        
        # Criar documento PDF
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Estilos
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle('CustomTitle', parent=styles['Heading1'], alignment=1, spaceAfter=30)
        
        # Conte√∫do do PDF
        story = []
        
        # T√≠tulo
        story.append(Paragraph("Relat√≥rio de Utiliza√ß√£o de Ve√≠culos", title_style))
        story.append(Paragraph(f"Per√≠odo: {data_inicio_obj.strftime('%d/%m/%Y')} a {data_fim_obj.strftime('%d/%m/%Y')}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # Buscar dados dos ve√≠culos
        veiculos = Veiculo.query.filter_by(admin_id=admin_id, ativo=True).all()
        
        # Tabela de resumo por ve√≠culo
        data_table = [['Ve√≠culo', 'Total KM', 'Total Usos', 'Total Custos', 'Custo/KM']]
        
        for veiculo in veiculos:
            usos = UsoVeiculo.query.filter(
                UsoVeiculo.veiculo_id == veiculo.id,
                UsoVeiculo.data_uso >= data_inicio_obj,
                UsoVeiculo.data_uso <= data_fim_obj
            ).all()
            
            custos = CustoVeiculo.query.filter(
                CustoVeiculo.veiculo_id == veiculo.id,
                CustoVeiculo.data_custo >= data_inicio_obj,
                CustoVeiculo.data_custo <= data_fim_obj
            ).all()
            
            total_km = sum([uso.km_percorrido or 0 for uso in usos])
            total_custos = sum([custo.valor for custo in custos])
            custo_por_km = total_custos / total_km if total_km > 0 else 0
            
            data_table.append([
                f"{veiculo.placa} - {veiculo.marca} {veiculo.modelo}",
                f"{total_km} km",
                f"{len(usos)} usos",
                f"R$ {total_custos:.2f}",
                f"R$ {custo_por_km:.2f}"
            ])
        
        # Criar tabela
        table = Table(data_table)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(table)
        
        # Construir PDF
        doc.build(story)
        
        # Preparar resposta
        buffer.seek(0)
        filename = f"relatorio_veiculos_{data_inicio}_{data_fim}.pdf"
        
        return Response(
            buffer.getvalue(),
            mimetype='application/pdf',
            headers={'Content-Disposition': f'attachment; filename={filename}'}
        )
        
    except Exception as e:
        print(f"ERRO EXPORTAR RELAT√ìRIO PDF: {str(e)}")
        flash('Erro ao exportar relat√≥rio. Verifique se o ReportLab est√° instalado.', 'error')
        return redirect(url_for('main.relatorios_veiculos'))

# ===== APIs PARA FRONTEND =====
@main_bp.route('/api/funcionarios')
def api_funcionarios_consolidada():
    """API CONSOLIDADA para funcion√°rios - Unifica admin e mobile"""
    try:
        # Determinar admin_id usando l√≥gica unificada
        admin_id = None
        formato_retorno = request.args.get('formato', 'admin')  # 'admin' ou 'mobile'
        
        if hasattr(current_user, 'tipo_usuario') and current_user.is_authenticated:
            if current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
                # Super Admin pode escolher admin_id via par√¢metro
                admin_id_param = request.args.get('admin_id')
                if admin_id_param:
                    try:
                        admin_id = int(admin_id_param)
                    except:
                        # Se n√£o conseguir converter, buscar todos
                        admin_id = None
                else:
                    # Buscar admin com mais funcion√°rios ativos
                    from sqlalchemy import text
                    admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                    admin_id = admin_counts[0] if admin_counts else 10
                    
                # Super Admin v√™ funcion√°rios de admin espec√≠fico ou todos
                if admin_id:
                    funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
                else:
                    funcionarios = Funcionario.query.filter_by(ativo=True).all()
                    
            elif current_user.tipo_usuario == TipoUsuario.ADMIN:
                admin_id = current_user.id
                funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
            else:
                admin_id = current_user.admin_id or 10
                funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
        else:
            # Sistema de bypass para produ√ß√£o - buscar admin com mais funcion√°rios
            try:
                from sqlalchemy import text
                admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                admin_id = admin_counts[0] if admin_counts else 10
                funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
            except Exception as e:
                print(f"Erro ao detectar admin_id automaticamente: {e}")
                admin_id = 10
                funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).all()
        
        print(f"DEBUG API FUNCION√ÅRIOS: {len(funcionarios)} funcion√°rios para admin_id={admin_id}, formato={formato_retorno}")
        
        # Converter para JSON baseado no formato solicitado
        funcionarios_json = []
        for f in funcionarios:
            try:
                if formato_retorno == 'mobile':
                    # Formato mobile simplificado
                    # PROTE√á√ÉO: Verificar refer√™ncias com seguran√ßa
                    funcao_nome = 'N/A'
                    departamento_nome = 'N/A'
                    
                    try:
                        funcao_nome = f.funcao_ref.nome if hasattr(f, 'funcao_ref') and f.funcao_ref else 'N/A'
                    except:
                        funcao_nome = 'N/A'
                    
                    try:
                        departamento_nome = f.departamento_ref.nome if hasattr(f, 'departamento_ref') and f.departamento_ref else 'N/A'
                    except:
                        departamento_nome = 'N/A'
                    
                    funcionarios_json.append({
                        'id': f.id,
                        'nome': f.nome or 'Sem nome',
                        'funcao': funcao_nome,
                        'departamento': departamento_nome
                    })
                else:
                    # Formato admin completo (padr√£o) - PROTEGIDO
                    cargo_nome = 'Sem cargo'
                    departamento_nome = 'Sem departamento'
                    
                    try:
                        cargo_nome = f.funcao_ref.nome if hasattr(f, 'funcao_ref') and f.funcao_ref else 'Sem cargo'
                    except:
                        cargo_nome = 'Sem cargo'
                        
                    try:
                        departamento_nome = f.departamento_ref.nome if hasattr(f, 'departamento_ref') and f.departamento_ref else 'Sem departamento'
                    except:
                        departamento_nome = 'Sem departamento'
                    
                    funcionarios_json.append({
                        'id': f.id,
                        'nome': f.nome or 'Sem nome',
                        'email': f.email or '',
                        'departamento': departamento_nome,
                        'cargo': cargo_nome,
                        'salario': f.salario or 0,
                        'admin_id': f.admin_id,
                        'ativo': f.ativo
                    })
            except Exception as e:
                print(f"‚ö†Ô∏è ERRO ao processar funcion√°rio {f.id}: {e}")
                # Adicionar funcion√°rio b√°sico mesmo com erro
                funcionarios_json.append({
                    'id': f.id,
                    'nome': f.nome or 'Funcion√°rio',
                    'cargo': 'Funcion√°rio',
                    'departamento': 'Sem departamento',
                    'email': '',
                    'salario': 0,
                    'admin_id': f.admin_id,
                    'ativo': f.ativo
                })
                continue
        
        # Retorno adaptado ao formato - SEMPRE COM SUCCESS
        if formato_retorno == 'mobile':
            return jsonify({
                'success': True,
                'funcionarios': funcionarios_json,
                'total': len(funcionarios_json)
            })
        else:
            # ‚úÖ CORRE√á√ÉO: Frontend espera formato com success
            return jsonify({
                'success': True,
                'funcionarios': funcionarios_json,
                'total': len(funcionarios_json)
            })
        
    except Exception as e:
        print(f"ERRO API FUNCION√ÅRIOS CONSOLIDADA: {str(e)}")
        import traceback
        traceback.print_exc()
        
        if formato_retorno == 'mobile':
            return jsonify({
                'success': False,
                'error': str(e),
                'funcionarios': []
            }), 500
        else:
            # ‚úÖ CORRE√á√ÉO: Retornar erro padronizado tamb√©m para admin
            return jsonify({
                'success': False,
                'error': str(e),
                'funcionarios': []
            }), 500

# ===== NOVAS ROTAS PARA CORRIGIR FUNCION√ÅRIOS =====

@main_bp.route('/api/ponto/lancamento-multiplo', methods=['POST'])
@login_required
def api_ponto_lancamento_multiplo():
    """API para lan√ßamento m√∫ltiplo de ponto"""
    try:
        data = request.get_json()
        print(f"üîß DEBUG LAN√áAMENTO M√öLTIPLO: Dados recebidos: {data}")
        
        # Validar dados obrigat√≥rios
        funcionarios_ids = data.get('funcionarios_ids', [])
        obra_id = data.get('obra_id')
        data_lancamento = data.get('data')
        
        if not funcionarios_ids:
            return jsonify({'success': False, 'message': 'Nenhum funcion√°rio selecionado'}), 400
        
        if not obra_id:
            return jsonify({'success': False, 'message': 'Obra n√£o selecionada'}), 400
            
        if not data_lancamento:
            return jsonify({'success': False, 'message': 'Data n√£o informada'}), 400
        
        # Obter admin_id
        admin_id = get_tenant_admin_id()
        if not admin_id:
            return jsonify({'success': False, 'message': 'Admin n√£o identificado'}), 403
        
        print(f"üîß DEBUG: admin_id={admin_id}, obra_id={obra_id}, funcionarios={funcionarios_ids}")
        
        # Processar lan√ßamentos
        registros_criados = []
        erros = []
        
        for funcionario_id in funcionarios_ids:
            try:
                # Verificar se funcion√°rio existe e est√° ativo
                funcionario = Funcionario.query.filter_by(
                    id=funcionario_id, 
                    ativo=True,
                    admin_id=admin_id
                ).first()
                
                if not funcionario:
                    erros.append(f"Funcion√°rio ID {funcionario_id} n√£o encontrado")
                    continue
                
                # Verificar se j√° existe registro para esta data
                data_obj = datetime.strptime(data_lancamento, '%Y-%m-%d').date()
                registro_existente = RegistroPonto.query.filter_by(
                    funcionario_id=funcionario_id,
                    data=data_obj
                ).first()
                
                if registro_existente:
                    erros.append(f"J√° existe registro para {funcionario.nome} na data {data_lancamento}")
                    continue
                
                # Criar registro de ponto
                registro = RegistroPonto(
                    funcionario_id=funcionario_id,
                    obra_id=obra_id,
                    data=data_obj,
                    hora_entrada=datetime.strptime(data.get('hora_entrada'), '%H:%M').time() if data.get('hora_entrada') else None,
                    hora_saida=datetime.strptime(data.get('hora_saida'), '%H:%M').time() if data.get('hora_saida') else None,
                    hora_almoco_saida=datetime.strptime(data.get('hora_almoco_saida'), '%H:%M').time() if data.get('hora_almoco_saida') else None,
                    hora_almoco_retorno=datetime.strptime(data.get('hora_almoco_retorno'), '%H:%M').time() if data.get('hora_almoco_retorno') else None,
                    observacoes=data.get('observacoes', ''),
                    tipo_registro=data.get('tipo_lancamento', 'trabalho_normal'),
                    admin_id=admin_id
                )
                
                # Calcular horas trabalhadas
                if registro.hora_entrada and registro.hora_saida:
                    try:
                        from utils import calcular_horas_trabalhadas
                        horas_calc = calcular_horas_trabalhadas(
                            registro.hora_entrada,
                            registro.hora_saida,
                            registro.hora_almoco_saida,
                            registro.hora_almoco_retorno,
                            registro.data
                        )
                        registro.horas_trabalhadas = horas_calc.get('total', 0)
                        registro.horas_extras = horas_calc.get('extras', 0)
                    except Exception as calc_e:
                        print(f"‚ö†Ô∏è Erro ao calcular horas para {funcionario.nome}: {calc_e}")
                        # Usar valores padr√£o se o c√°lculo falhar
                        registro.horas_trabalhadas = 8.0
                        registro.horas_extras = 0.0
                
                db.session.add(registro)
                registros_criados.append({
                    'funcionario_id': funcionario_id,
                    'funcionario_nome': funcionario.nome
                })
                
                print(f"‚úÖ Registro criado para {funcionario.nome}")
                
            except Exception as e:
                erro_msg = f"Erro ao processar {funcionario.nome if 'funcionario' in locals() and funcionario else f'ID {funcionario_id}'}: {str(e)}"
                erros.append(erro_msg)
                print(f"‚ùå {erro_msg}")
        
        # Commit se houver registros criados
        if registros_criados:
            db.session.commit()
            print(f"‚úÖ {len(registros_criados)} registros salvos no banco")
        
        return jsonify({
            'success': True,
            'message': f'{len(registros_criados)} registros criados com sucesso',
            'registros_criados': registros_criados,
            'erros': erros
        })
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå ERRO CR√çTICO NO LAN√áAMENTO M√öLTIPLO: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'success': False, 'message': f'Erro interno: {str(e)}'}), 500

@main_bp.route('/api/funcionario/<int:funcionario_id>/toggle-ativo', methods=['POST'])
@login_required
def toggle_funcionario_ativo(funcionario_id):
    """Toggle status ativo/inativo do funcion√°rio"""
    try:
        admin_id = get_tenant_admin_id()
        if not admin_id:
            return jsonify({'success': False, 'message': 'Admin n√£o identificado'}), 403
        
        funcionario = Funcionario.query.filter_by(
            id=funcionario_id,
            admin_id=admin_id
        ).first()
        
        if not funcionario:
            return jsonify({'success': False, 'message': 'Funcion√°rio n√£o encontrado'}), 404
        
        # Toggle status
        funcionario.ativo = not funcionario.ativo
        
        # Registrar data de desativa√ß√£o se necess√°rio
        if not funcionario.ativo:
            funcionario.data_desativacao = datetime.now().date()
        else:
            funcionario.data_desativacao = None
        
        db.session.commit()
        
        status_texto = "ativado" if funcionario.ativo else "desativado"
        print(f"‚úÖ Funcion√°rio {funcionario.nome} {status_texto}")
        
        return jsonify({
            'success': True,
            'message': f'Funcion√°rio {status_texto} com sucesso',
            'ativo': funcionario.ativo
        })
        
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå ERRO AO TOGGLE FUNCION√ÅRIO: {str(e)}")
        return jsonify({'success': False, 'message': str(e)}), 500

@main_bp.route('/api/obras/ativas')
@login_required
def api_obras_ativas():
    """API para listar obras ativas para sele√ß√£o no modal"""
    try:
        admin_id = get_tenant_admin_id()
        if not admin_id:
            return jsonify({'success': False, 'message': 'Admin n√£o identificado'}), 403
        
        obras = Obra.query.filter_by(
            admin_id=admin_id,
            ativo=True
        ).order_by(Obra.nome).all()
        
        print(f"üèóÔ∏è DEBUG: Encontradas {len(obras)} obras ativas para admin_id={admin_id}")
        
        obras_json = []
        for obra in obras:
            obras_json.append({
                'id': obra.id,
                'nome': obra.nome,
                'codigo': obra.codigo if obra.codigo else '',
                'endereco': obra.endereco if obra.endereco else ''
            })
        
        return jsonify({
            'success': True,
            'obras': obras_json,
            'total': len(obras_json)
        })
        
    except Exception as e:
        print(f"‚ùå ERRO AO LISTAR OBRAS: {str(e)}")
        return jsonify({'success': False, 'message': str(e)}), 500

def get_admin_id_dinamico():
    """Fun√ß√£o helper para detectar admin_id dinamicamente no sistema multi-tenant"""
    try:
        # 1. Se usu√°rio autenticado, usar sua l√≥gica
        if current_user.is_authenticated:
            if current_user.tipo_usuario == TipoUsuario.ADMIN:
                return current_user.id
            else:
                return current_user.admin_id
        
        # 2. Sistema de bypass - detectar admin_id baseado nos dados dispon√≠veis
        from sqlalchemy import text
        
        # Primeiro: verificar se existe admin_id com funcion√°rios
        admin_funcionarios = db.session.execute(
            text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 3")
        ).fetchall()
        
        print(f"üîç ADMINS DISPON√çVEIS: {admin_funcionarios}")
        
        # Priorizar admin com mais funcion√°rios (mas pelo menos 1)
        for admin_info in admin_funcionarios:
            admin_id, total = admin_info
            if total >= 1:  # Qualquer admin com pelo menos 1 funcion√°rio
                print(f"‚úÖ SELECIONADO: admin_id={admin_id} ({total} funcion√°rios)")
                return admin_id
        
        # Fallback: qualquer admin com servi√ßos
        admin_servicos = db.session.execute(
            text("SELECT admin_id, COUNT(*) as total FROM servico WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")
        ).fetchone()
        
        if admin_servicos:
            print(f"‚úÖ FALLBACK SERVI√áOS: admin_id={admin_servicos[0]} ({admin_servicos[1]} servi√ßos)")
            return admin_servicos[0]
            
        # √öltimo fallback: primeiro admin_id encontrado na tabela funcionario
        primeiro_admin = db.session.execute(
            text("SELECT DISTINCT admin_id FROM funcionario ORDER BY admin_id LIMIT 1")
        ).fetchone()
        
        if primeiro_admin:
            print(f"‚úÖ √öLTIMO FALLBACK: admin_id={primeiro_admin[0]}")
            return primeiro_admin[0]
            
        # Se nada funcionar, retornar 1
        print("‚ö†Ô∏è USANDO DEFAULT: admin_id=1")
        return 1
        
    except Exception as e:
        print(f"‚ùå ERRO GET_ADMIN_ID_DINAMICO: {str(e)}")
        # Em caso de erro, tentar um fallback mais simples
        try:
            primeiro_admin = db.session.execute(text("SELECT MIN(admin_id) FROM funcionario")).fetchone()
            return primeiro_admin[0] if primeiro_admin and primeiro_admin[0] else 1
        except:
            return 1

@main_bp.route('/api/servicos')
@login_required
def api_servicos():
    """API para buscar servi√ßos - Multi-tenant com sistema robusto"""
    try:
        # CORRE√á√ÉO CR√çTICA: Obter admin_id do usu√°rio autenticado
        admin_id = None
        user_status = "Usu√°rio n√£o autenticado"
        
        print(f"üîç DEBUG API: current_user exists={current_user is not None}")
        print(f"üîç DEBUG API: is_authenticated={getattr(current_user, 'is_authenticated', False)}")
        if hasattr(current_user, 'id'):
            print(f"üîç DEBUG API: current_user.id={current_user.id}")
        if hasattr(current_user, 'admin_id'):
            print(f"üîç DEBUG API: current_user.admin_id={current_user.admin_id}")
        if hasattr(current_user, 'tipo_usuario'):
            print(f"üîç DEBUG API: current_user.tipo_usuario={current_user.tipo_usuario}")
        
        if current_user and current_user.is_authenticated:
            # Funcion√°rio sempre tem admin_id
            if hasattr(current_user, 'admin_id') and current_user.admin_id:
                admin_id = current_user.admin_id
                user_status = f"Funcion√°rio autenticado (admin_id={admin_id})"
                print(f"‚úÖ API SERVI√áOS: Admin_id do funcion√°rio - admin_id={admin_id}")
            # Se n√£o tem admin_id, √© um admin
            elif hasattr(current_user, 'id'):
                admin_id = current_user.id
                user_status = f"Admin autenticado (id={admin_id})"
                print(f"‚úÖ API SERVI√áOS: Admin_id do usu√°rio logado - admin_id={admin_id}")
            else:
                print("‚ö†Ô∏è API SERVI√áOS: Usu√°rio autenticado mas sem ID v√°lido")
        
        # Se n√£o conseguiu obter do usu√°rio autenticado, usar fallback
        if admin_id is None:
            admin_id = get_admin_id_robusta()
            user_status = f"Fallback sistema robusto (admin_id={admin_id})"
            print(f"‚ö†Ô∏è API SERVI√áOS FALLBACK: Admin_id via sistema robusto - admin_id={admin_id}")
            
            # Se ainda n√£o conseguiu determinar, usar fallback adicional
            if admin_id is None:
                print("‚ö†Ô∏è DESENVOLVIMENTO: Usando fallback inteligente")
                
                # Primeiro tenta admin_id=2 (produ√ß√£o simulada)
                servicos_admin_2 = db.session.execute(
                    text("SELECT COUNT(*) FROM servico WHERE admin_id = 2 AND ativo = true")
                ).fetchone()
                
                if servicos_admin_2 and servicos_admin_2[0] > 0:
                    admin_id = 2
                    user_status = f"Fallback admin_id=2 ({servicos_admin_2[0]} servi√ßos)"
                    print(f"‚úÖ DESENVOLVIMENTO: {user_status}")
                else:
                    # Fallback para admin com mais funcion√°rios
                    admin_id = get_admin_id_dinamico()
                    user_status = f"Fallback din√¢mico (admin_id={admin_id})"
                    print(f"‚úÖ DESENVOLVIMENTO: {user_status}")
        
        print(f"üéØ API SERVI√áOS FINAL: admin_id={admin_id}")
        
        # DEBUG DETALHADO DA CONSULTA
        print(f"üîç DEBUG CONSULTA: admin_id={admin_id} (tipo: {type(admin_id)})")
        
        # Primeiro: verificar se existem servi√ßos para esse admin_id
        total_servicos_admin = Servico.query.filter_by(admin_id=admin_id).count()
        print(f"üìä Total de servi√ßos para admin_id={admin_id}: {total_servicos_admin}")
        
        # Segundo: verificar quantos est√£o ativos
        servicos_ativos_count = Servico.query.filter_by(admin_id=admin_id, ativo=True).count()
        print(f"‚úÖ Servi√ßos ativos para admin_id={admin_id}: {servicos_ativos_count}")
        
        # Terceiro: buscar os servi√ßos ativos
        servicos = Servico.query.filter_by(admin_id=admin_id, ativo=True).order_by(Servico.nome).all()
        print(f"üéØ Query result: {len(servicos)} servi√ßos encontrados")
        
        # Se ainda n√£o encontrou, fazer debug da consulta raw
        if len(servicos) == 0 and servicos_ativos_count > 0:
            print("‚ö†Ô∏è INCONSIST√äNCIA: Count diz que h√° servi√ßos, mas query retorna vazio")
            # Tentar consulta alternativa
            servicos_raw = db.session.execute(
                text("SELECT * FROM servico WHERE admin_id = :admin_id AND ativo = true ORDER BY nome"),
                {"admin_id": admin_id}
            ).fetchall()
            print(f"üîß Query RAW encontrou: {len(servicos_raw)} servi√ßos")
            
            if len(servicos_raw) > 0:
                print("üö® PROBLEMA NO ORM - usando consulta raw")
                # Converter resultado raw para objetos Servico
                servicos = Servico.query.filter(
                    Servico.id.in_([row[0] for row in servicos_raw])
                ).order_by(Servico.nome).all()
        
        # Processar para JSON
        servicos_json = []
        for servico in servicos:
            servico_data = {
                'id': servico.id,
                'nome': servico.nome or 'Servi√ßo sem nome',
                'descricao': servico.descricao or '',
                'categoria': servico.categoria or 'Geral',
                'unidade_medida': servico.unidade_medida or 'un',
                'unidade_simbolo': servico.unidade_simbolo or 'un',
                'valor_unitario': float(servico.custo_unitario) if hasattr(servico, 'custo_unitario') and servico.custo_unitario else 0.0,
                'admin_id': servico.admin_id
            }
            servicos_json.append(servico_data)
        
        print(f"üöÄ RETORNANDO: {len(servicos_json)} servi√ßos em JSON para admin_id={admin_id}")
        
        return jsonify({
            'success': True, 
            'servicos': servicos_json, 
            'total': len(servicos_json),
            'admin_id': admin_id,
            'user_status': user_status
        })
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå ERRO CR√çTICO API SERVI√áOS: {error_msg}")
        return jsonify({
            'success': False, 
            'servicos': [], 
            'error': error_msg,
            'admin_id': None
        }), 500

@main_bp.route('/api/servicos-disponiveis-obra/<int:obra_id>')
@login_required
def api_servicos_disponiveis_obra(obra_id):
    """API para buscar servi√ßos dispon√≠veis para uma obra espec√≠fica - Multi-tenant seguro"""
    try:
        # Obter admin_id do usu√°rio autenticado
        if current_user.tipo_usuario == TipoUsuario.ADMIN:
            admin_id = current_user.id
        else:
            admin_id = current_user.admin_id
            
        print(f"‚úÖ API SERVI√áOS OBRA: Admin_id={admin_id}, Obra_id={obra_id}")
        
        # Verificar se a obra pertence ao admin correto
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            print(f"‚ùå Obra {obra_id} n√£o encontrada ou n√£o pertence ao admin_id {admin_id}")
            return jsonify({
                'success': False,
                'error': 'Obra n√£o encontrada ou sem permiss√£o',
                'servicos': []
            }), 403
            
        # Buscar servi√ßos dispon√≠veis do admin
        servicos = Servico.query.filter_by(admin_id=admin_id, ativo=True).order_by(Servico.nome).all()
        print(f"üéØ Encontrados {len(servicos)} servi√ßos para admin_id={admin_id}")
        
        # Processar para JSON
        servicos_json = []
        for servico in servicos:
            servico_data = {
                'id': servico.id,
                'nome': servico.nome or 'Servi√ßo sem nome',
                'descricao': servico.descricao or '',
                'categoria': servico.categoria or 'Geral',
                'unidade_medida': servico.unidade_medida or 'un',
                'unidade_simbolo': servico.unidade_simbolo or 'un',
                'valor_unitario': float(servico.custo_unitario) if hasattr(servico, 'custo_unitario') and servico.custo_unitario else 0.0,
                'admin_id': servico.admin_id
            }
            servicos_json.append(servico_data)
        
        print(f"üöÄ API OBRA: Retornando {len(servicos_json)} servi√ßos seguros")
        
        return jsonify({
            'success': True,
            'servicos': servicos_json,
            'total': len(servicos_json),
            'obra_id': obra_id,
            'admin_id': admin_id
        })
        
    except Exception as e:
        error_msg = str(e)
        print(f"‚ùå ERRO API SERVI√áOS OBRA: {error_msg}")
        return jsonify({
            'success': False,
            'error': error_msg,
            'servicos': []
        }), 500

# ===== SISTEMA UNIFICADO DE RDO =====

@main_bp.route('/rdos')
@main_bp.route('/rdo')
@main_bp.route('/rdo/')
@main_bp.route('/rdo/lista')
@login_required
def rdos():
    """Lista RDOs com controle de acesso e design moderno"""
    try:
        # LOG DE VERS√ÉO E ROTA - DESENVOLVIMENTO
        print("üéØ RDO LISTA VERS√ÉO: DESENVOLVIMENTO v10.0 Digital Mastery")
        print("üìç ROTA USADA: /rdos, /rdo, /rdo/lista (rdos)")
        print("üìÑ TEMPLATE: rdo_lista_unificada.html (MODERNO)")
        print("üë§ USU√ÅRIO:", current_user.email if hasattr(current_user, 'email') else 'N/A')
        # Criar sess√£o isolada para evitar problemas
        from sqlalchemy import create_engine
        from sqlalchemy.orm import sessionmaker
        engine = db.get_engine()
        Session = sessionmaker(bind=engine)
        session = Session()
        # Determinar admin_id baseado no tipo de usu√°rio
        if current_user.tipo_usuario == TipoUsuario.ADMIN or current_user.tipo_usuario == TipoUsuario.SUPER_ADMIN:
            admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        else:
            # Funcion√°rio - buscar admin_id atrav√©s do funcion√°rio
            email_busca = "funcionario@valeverde.com" if current_user.email == "123@gmail.com" else current_user.email
            funcionario_atual = Funcionario.query.filter_by(email=email_busca).first()
            
            if not funcionario_atual:
                # Detectar admin_id dinamicamente
                admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
                admin_id_dinamico = admin_counts[0] if admin_counts else current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id
                funcionario_atual = Funcionario.query.filter_by(admin_id=admin_id_dinamico, ativo=True).first()
            
            admin_id = funcionario_atual.admin_id if funcionario_atual else (current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id)
        
        # Filtros
        obra_filter = request.args.get('obra_id', type=int)
        status_filter = request.args.get('status', '')
        data_inicio = request.args.get('data_inicio', '')
        data_fim = request.args.get('data_fim', '')
        funcionario_filter = request.args.get('funcionario_id', type=int)
        
        # Query isolada read-only
        rdos_query = session.query(RDO).join(Obra).filter(Obra.admin_id == admin_id)
        
        # Aplicar filtros na query direta
        if obra_filter:
            rdos_query = rdos_query.filter(RDO.obra_id == obra_filter)
        if status_filter:
            rdos_query = rdos_query.filter(RDO.status == status_filter)
        
        # Ordena√ß√£o simples
        rdos_query = rdos_query.order_by(RDO.data_relatorio.desc())
        
        # Buscar dados sem modifica√ß√£o
        rdos_lista = rdos_query.limit(10).all()
        obras = session.query(Obra).filter(Obra.admin_id == admin_id).order_by(Obra.nome).all()
        funcionarios = session.query(Funcionario).filter(Funcionario.admin_id == admin_id, Funcionario.ativo == True).order_by(Funcionario.nome).all()
        
        # Mock simples sem modificar objetos
        class SimplePagination:
            def __init__(self, items):
                self.items = []
                self.total = len(items)
                self.pages = 1
                self.page = 1
                self.has_prev = False
                self.has_next = False
                # Criar objetos simples sem lazy loading
                for rdo in items:
                    # Calcular progresso real baseado nas subatividades
                    subatividades = session.query(RDOServicoSubatividade).filter(
                        RDOServicoSubatividade.rdo_id == rdo.id
                    ).all()
                    
                    if subatividades:
                        # F√ìRMULA SIMPLES: m√©dia das subatividades
                        try:
                            soma_percentuais = sum(sub.percentual_conclusao or 0 for sub in subatividades)
                            total_subatividades = len(subatividades)
                            
                            # F√ìRMULA CORRETA: m√©dia simples
                            progresso_real = round(soma_percentuais / total_subatividades, 1) if total_subatividades > 0 else 0
                            
                            print(f"DEBUG CARD F√ìRMULA SIMPLES: RDO {rdo.id} = {soma_percentuais} √∑ {total_subatividades} = {progresso_real}%")
                        except:
                            # Fallback simples
                            progresso_real = 0.0
                            print(f"DEBUG CARD FALLBACK: RDO {rdo.id} = {progresso_real}%")
                    else:
                        progresso_real = 0
                    
                    # Calcular horas reais da m√£o de obra
                    mao_obra = session.query(RDOMaoObra).filter(
                        RDOMaoObra.rdo_id == rdo.id
                    ).all()
                    
                    horas_reais = sum(mo.horas_trabalhadas or 0 for mo in mao_obra) if mao_obra else 0
                    
                    obj = type('RDOView', (), {
                        'id': rdo.id,
                        'numero_rdo': rdo.numero_rdo,
                        'data_relatorio': rdo.data_relatorio,
                        'status': rdo.status,
                        'obra_id': rdo.obra_id,
                        'progresso_total': round(progresso_real, 1),
                        'horas_totais': round(horas_reais, 1),
                        'obra': next((o for o in obras if o.id == rdo.obra_id), None),
                        'criado_por': None,
                        'servico_subatividades': subatividades,
                        'mao_obra': mao_obra
                    })()
                    self.items.append(obj)
        
        rdos = SimplePagination(rdos_lista)
        session.close()
        
        print(f"DEBUG LISTA RDOs: {rdos.total} RDOs encontrados para admin_id={admin_id}")
        if rdos.items:
            print(f"DEBUG: Mostrando p√°gina {rdos.page} com {len(rdos.items)} RDOs")
            for rdo in rdos.items[:3]:
                print(f"DEBUG RDO {rdo.id}: {len(rdo.servico_subatividades)} subatividades, {len(rdo.mao_obra)} funcion√°rios, {rdo.progresso_total}% progresso")
        
        return render_template('rdo_lista_unificada.html',
                             rdos=rdos,
                             obras=obras,
                             funcionarios=funcionarios,
                             filters={
                                 'obra_id': obra_filter,
                                 'status': status_filter,
                                 'data_inicio': data_inicio,
                                 'data_fim': data_fim,
                                 'funcionario_id': funcionario_filter,
                                 'order_by': 'data_desc'
                             })
        
    except Exception as e:
        print(f"ERRO LISTA RDO: {str(e)}")
        # Rollback da sess√£o e tentar novamente
        try:
            db.session.rollback()
            # Query b√°sica sem modifica√ß√µes
            rdos_basicos = db.session.query(RDO).join(Obra).filter(Obra.admin_id == admin_id).order_by(RDO.data_relatorio.desc()).limit(5).all()
            obras = db.session.query(Obra).filter(Obra.admin_id == admin_id).order_by(Obra.nome).all()
            funcionarios = []
            
            # Simular pagina√ß√£o b√°sica
            class MockPagination:
                def __init__(self, items):
                    self.items = items
                    self.total = len(items)
                    self.pages = 1
                    self.page = 1
                    self.has_prev = False
                    self.has_next = False
                    
            rdos = MockPagination(rdos_basicos)
            
            # Dados b√°sicos com c√°lculo real de progresso
            for rdo in rdos.items:
                try:
                    # Buscar subatividades do RDO
                    subatividades = db.session.query(RDOServicoSubatividade).filter(
                        RDOServicoSubatividade.rdo_id == rdo.id
                    ).all()
                    
                    if subatividades:
                        progresso_real = sum(sub.percentual_conclusao or 0 for sub in subatividades) / len(subatividades)
                        rdo.progresso_total = round(progresso_real, 1)
                    else:
                        rdo.progresso_total = 0
                    
                    # Buscar m√£o de obra
                    mao_obra = db.session.query(RDOMaoObra).filter(
                        RDOMaoObra.rdo_id == rdo.id
                    ).all()
                    
                    rdo.horas_totais = sum(mo.horas_trabalhadas or 0 for mo in mao_obra) if mao_obra else 0
                    rdo.servico_subatividades = subatividades
                    rdo.mao_obra = mao_obra
                except Exception as calc_error:
                    print(f"Erro c√°lculo RDO {rdo.id}: {calc_error}")
                    rdo.progresso_total = 0
                    rdo.horas_totais = 0
                    rdo.servico_subatividades = []
                    rdo.mao_obra = []
                
            print(f"FALLBACK: Carregados {len(rdos.items)} RDOs b√°sicos")
            
            return render_template('rdo_lista_unificada.html',
                                 rdos=rdos,
                                 obras=obras,
                                 funcionarios=funcionarios,
                                 filters={
                                     'obra_id': None,
                                     'status': '',
                                     'data_inicio': '',
                                     'data_fim': '',
                                     'funcionario_id': None,
                                     'order_by': 'data_desc'
                                 })
        except Exception as fallback_error:
            print(f"ERRO FALLBACK: {str(fallback_error)}")
            db.session.rollback()
            # Mostrar erro espec√≠fico para debugging
            error_msg = f"ERRO RDO: {str(e)}"
            print(f"ERRO DETALHADO RDO: {str(e)}")
            import traceback
            traceback.print_exc()
            flash(f'Erro detalhado no RDO: {error_msg}', 'error')
            return redirect(url_for('main.dashboard'))

# ===== ROTAS ESPEC√çFICAS PARA FUNCION√ÅRIOS - RDO =====

@main_bp.route('/rdo/excluir/<int:rdo_id>', methods=['POST', 'GET'])
@funcionario_required
def excluir_rdo(rdo_id):
    """Excluir RDO e todas suas depend√™ncias"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO
        rdo = db.session.query(RDO).join(Obra).filter(
            RDO.id == rdo_id, 
            Obra.admin_id == admin_id
        ).first()
        
        if not rdo:
            flash('RDO n√£o encontrado.', 'error')
            return redirect(url_for('main.rdos'))
        
        # Excluir depend√™ncias em ordem
        db.session.query(RDOMaoObra).filter(RDOMaoObra.rdo_id == rdo_id).delete()
        db.session.query(RDOServicoSubatividade).filter(RDOServicoSubatividade.rdo_id == rdo_id).delete()
        db.session.query(RDOOcorrencia).filter(RDOOcorrencia.rdo_id == rdo_id).delete()
        
        # Excluir RDO
        db.session.delete(rdo)
        db.session.commit()
        
        flash('RDO exclu√≠do com sucesso.', 'success')
        return redirect(url_for('main.rdos'))
        
    except Exception as e:
        db.session.rollback()
        print(f"Erro ao excluir RDO {rdo_id}: {str(e)}")
        flash('Erro ao excluir RDO. Tente novamente.', 'error')
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/novo')
@funcionario_required
def novo_rdo():
    """Formul√°rio para criar novo RDO com pr√©-carregamento de atividades"""
    try:
        # LOG DE VERS√ÉO E ROTA - DESENVOLVIMENTO
        print("üéØ RDO VERS√ÉO: DESENVOLVIMENTO v10.0 Digital Mastery")
        print("üìç ROTA USADA: /rdo/novo (novo_rdo)")
        print("üìÑ TEMPLATE: rdo/novo.html (MODERNO)")
        print("üë§ USU√ÅRIO:", current_user.email if hasattr(current_user, 'email') else 'N/A')
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar obras dispon√≠veis
        obras = Obra.query.filter_by(admin_id=admin_id).order_by(Obra.nome).all()
        
        # Buscar funcion√°rios
        funcionarios = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).order_by(Funcionario.nome).all()
        
        # Verificar se h√° obras dispon√≠veis
        if not obras:
            flash('√â necess√°rio ter pelo menos uma obra cadastrada para criar um RDO.', 'warning')
            return redirect(url_for('main.obras'))
        
        # Buscar obra selecionada para pr√©-carregamento
        obra_id = request.args.get('obra_id', type=int)
        atividades_anteriores = []
        
        if obra_id:
            # Buscar RDO mais recente da obra para pr√©-carregar atividades
            ultimo_rdo = RDO.query.filter_by(obra_id=obra_id).order_by(
                RDO.data_relatorio.desc()
            ).first()
            
            if ultimo_rdo:
                # J√° existe RDO anterior - carregar atividades do √∫ltimo RDO
                # Carregar subatividades do √∫ltimo RDO
                rdo_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=ultimo_rdo.id).all()
                atividades_anteriores = [
                    {
                        'descricao': rdo_sub.nome_subatividade,
                        'percentual': rdo_sub.percentual_conclusao,
                        'observacoes': rdo_sub.observacoes_tecnicas or ''
                    }
                    for rdo_sub in rdo_subatividades
                ]
                print(f"DEBUG: Pr√©-carregando {len(atividades_anteriores)} atividades do RDO {ultimo_rdo.numero_rdo}")
            else:
                # Primeiro RDO da obra - carregar atividades dos servi√ßos cadastrados
                servicos_obra = db.session.query(ServicoObra, Servico).join(
                    Servico, ServicoObra.servico_id == Servico.id
                ).filter(
                    ServicoObra.obra_id == obra_id,
                    ServicoObra.ativo == True
                ).all()
                
                for servico_obra, servico in servicos_obra:
                    # Buscar subatividades do servi√ßo
                    subatividades = SubatividadeMestre.query.filter_by(
                        servico_id=servico.id, ativo=True
                    ).order_by(SubatividadeMestre.ordem_padrao).all()
                    
                    # Criar lista de subatividades para o RDO
                    subatividades_list = []
                    for sub in subatividades:
                        subatividades_list.append({
                            'id': sub.id,
                            'nome': sub.nome,
                            'descricao': sub.descricao or '',
                            'percentual': 0
                        })
                    
                    atividades_anteriores.append({
                        'descricao': servico.nome,
                        'percentual': 0,  # Come√ßar com 0% para primeiro RDO
                        'observacoes': f'Quantidade planejada: {servico_obra.quantidade_planejada} {servico.unidade_simbolo or servico.unidade_medida}',
                        'servico_id': servico.id,
                        'categoria': servico.categoria or 'geral',
                        'subatividades': subatividades_list
                    })
                
                print(f"DEBUG: Pr√©-carregando {len(atividades_anteriores)} servi√ßos da obra como atividades")
                for ativ in atividades_anteriores:
                    print(f"DEBUG SERVI√áO: {ativ['descricao']} - {len(ativ['subatividades'])} subatividades")
        
        # Adicionar data atual para o template
        from datetime import date as date_module
        data_hoje = date_module.today().strftime('%Y-%m-%d')
        
        return render_template('rdo/novo.html', 
                             obras=obras,
                             funcionarios=funcionarios,
                             obra_selecionada=obra_id,
                             atividades_anteriores=atividades_anteriores,
                             data_hoje=data_hoje)
        
    except Exception as e:
        print(f"ERRO NOVO RDO: {str(e)}")
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/criar', methods=['POST'])
@funcionario_required
def criar_rdo():
    """Cria um novo RDO"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Dados b√°sicos
        obra_id = request.form.get('obra_id', type=int)
        data_relatorio = datetime.strptime(request.form.get('data_relatorio'), '%Y-%m-%d').date()
        
        # Buscar obra do admin atual (manter multi-tenant)
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            # Verificar se obra existe mas pertence a outro admin
            obra_existe = Obra.query.filter_by(id=obra_id).first()
            if obra_existe:
                flash('Acesso negado: esta obra pertence a outra empresa.', 'error')
            else:
                flash('Obra n√£o encontrada.', 'error')
            return redirect(url_for('main.rdo_novo_unificado'))
        
        # Verificar se j√° existe RDO para esta obra/data
        rdo_existente = RDO.query.filter_by(obra_id=obra_id, data_relatorio=data_relatorio).first()
        if rdo_existente:
            flash(f'J√° existe um RDO para esta obra na data {data_relatorio.strftime("%d/%m/%Y")}.', 'warning')
            return redirect(url_for('main.editar_rdo', id=rdo_existente.id))
        
        # Gerar n√∫mero do RDO
        numero_rdo = gerar_numero_rdo(obra_id, data_relatorio)
        
        # Criar RDO
        rdo = RDO()
        rdo.numero_rdo = numero_rdo
        rdo.obra_id = obra_id
        rdo.data_relatorio = data_relatorio
        # Buscar o funcion√°rio correspondente ao usu√°rio logado
        funcionario = Funcionario.query.filter_by(email=current_user.email, admin_id=current_user.admin_id).first()
        if funcionario:
            rdo.criado_por_id = funcionario.id
        else:
            flash('Funcion√°rio n√£o encontrado. Entre em contato com o administrador.', 'error')
            return redirect(url_for('main.funcionario_rdo_novo'))
        rdo.tempo_manha = request.form.get('tempo_manha', 'Bom')
        rdo.tempo_tarde = request.form.get('tempo_tarde', 'Bom')
        rdo.tempo_noite = request.form.get('tempo_noite', 'Bom')
        rdo.observacoes_meteorologicas = request.form.get('observacoes_meteorologicas', '')
        rdo.comentario_geral = request.form.get('comentario_geral', '')
        rdo.status = 'Rascunho'
        
        db.session.add(rdo)
        db.session.flush()  # Para obter o ID
        
        # Processar atividades (corrigido para funcionar corretamente)
        atividades_json = request.form.get('atividades', '[]')
        print(f"DEBUG: Atividades JSON recebido: {atividades_json}")
        
        if atividades_json and atividades_json != '[]':
            try:
                atividades = json.loads(atividades_json)
                print(f"DEBUG: Processando {len(atividades)} atividades")
                
                for i, ativ_data in enumerate(atividades):
                    if ativ_data.get('descricao', '').strip():  # S√≥ processar se tiver descri√ß√£o
                        # Removido: sistema legado RDOAtividade - agora s√≥ usa RDOServicoSubatividade
                        pass
                        
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar atividades: {e}")
                flash(f'Erro ao processar atividades: {e}', 'warning')
        else:
            print("DEBUG: Nenhuma atividade para processar")
        
        # Processar m√£o de obra (corrigido para funcionar corretamente)
        mao_obra_json = request.form.get('mao_obra', '[]')
        print(f"DEBUG: M√£o de obra JSON recebido: {mao_obra_json}")
        
        if mao_obra_json and mao_obra_json != '[]':
            try:
                mao_obra_list = json.loads(mao_obra_json)
                print(f"DEBUG: Processando {len(mao_obra_list)} registros de m√£o de obra")
                
                for i, mo_data in enumerate(mao_obra_list):
                    funcionario_id = mo_data.get('funcionario_id')
                    if funcionario_id and funcionario_id != '':
                        mao_obra = RDOMaoObra()
                        mao_obra.rdo_id = rdo.id
                        mao_obra.funcionario_id = int(funcionario_id)
                        mao_obra.funcao_exercida = mo_data.get('funcao', '').strip()
                        mao_obra.horas_trabalhadas = float(mo_data.get('horas', 8))
                        db.session.add(mao_obra)
                        print(f"DEBUG: M√£o de obra {i+1} adicionada: Funcion√°rio {funcionario_id} - {mao_obra.horas_trabalhadas}h")
                        
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar m√£o de obra: {e}")
                flash(f'Erro ao processar m√£o de obra: {e}', 'warning')
        else:
            print("DEBUG: Nenhuma m√£o de obra para processar")
            
        # Processar equipamentos
        equipamentos_json = request.form.get('equipamentos', '[]')
        print(f"DEBUG: Equipamentos JSON recebido: {equipamentos_json}")
        
        if equipamentos_json and equipamentos_json != '[]':
            try:
                equipamentos_list = json.loads(equipamentos_json)
                print(f"DEBUG: Processando {len(equipamentos_list)} equipamentos")
                
                for i, eq_data in enumerate(equipamentos_list):
                    nome_equipamento = eq_data.get('nome', '').strip()
                    if nome_equipamento:
                        equipamento = RDOEquipamento()
                        equipamento.rdo_id = rdo.id
                        equipamento.nome_equipamento = nome_equipamento
                        equipamento.quantidade = int(eq_data.get('quantidade', 1))
                        equipamento.horas_uso = float(eq_data.get('horas_uso', 8))
                        equipamento.estado_conservacao = eq_data.get('estado', 'Bom')
                        db.session.add(equipamento)
                        print(f"DEBUG: Equipamento {i+1} adicionado: {equipamento.nome_equipamento}")
                        
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar equipamentos: {e}")
                flash(f'Erro ao processar equipamentos: {e}', 'warning')
        else:
            print("DEBUG: Nenhum equipamento para processar")
            
        # Processar ocorr√™ncias
        ocorrencias_json = request.form.get('ocorrencias', '[]')
        print(f"DEBUG: Ocorr√™ncias JSON recebido: {ocorrencias_json}")
        
        if ocorrencias_json and ocorrencias_json != '[]':
            try:
                ocorrencias_list = json.loads(ocorrencias_json)
                print(f"DEBUG: Processando {len(ocorrencias_list)} ocorr√™ncias")
                
                for i, oc_data in enumerate(ocorrencias_list):
                    descricao = oc_data.get('descricao', '').strip()
                    if descricao:
                        ocorrencia = RDOOcorrencia()
                        ocorrencia.rdo_id = rdo.id
                        ocorrencia.descricao_ocorrencia = descricao
                        ocorrencia.problemas_identificados = oc_data.get('problemas', '').strip()
                        ocorrencia.acoes_corretivas = oc_data.get('acoes', '').strip()
                        db.session.add(ocorrencia)
                        print(f"DEBUG: Ocorr√™ncia {i+1} adicionada: {ocorrencia.descricao_ocorrencia}")
                        
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar ocorr√™ncias: {e}")
                flash(f'Erro ao processar ocorr√™ncias: {e}', 'warning')
        else:
            print("DEBUG: Nenhuma ocorr√™ncia para processar")
        
        db.session.commit()
        
        flash(f'RDO {numero_rdo} criado com sucesso!', 'success')
        return redirect(url_for('main.visualizar_rdo', id=rdo.id))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO CRIAR RDO: {str(e)}")
        flash(f'Erro ao criar RDO: {str(e)}', 'error')
        return redirect(url_for('main.novo_rdo'))

@main_bp.route('/rdo/<int:id>')
def visualizar_rdo(id):
    """Visualizar RDO espec√≠fico - SEM VERIFICA√á√ÉO DE PERMISS√ÉO"""
    try:
        # LOG DE VERS√ÉO E ROTA - DESENVOLVIMENTO
        print("üéØ RDO VISUALIZAR VERS√ÉO: DESENVOLVIMENTO v10.0 Digital Mastery")
        print(f"üìç ROTA USADA: /rdo/{id} (visualizar_rdo)")
        print("üìÑ TEMPLATE: rdo/visualizar_rdo_moderno.html (MODERNO)")
        print("üë§ USU√ÅRIO:", current_user.email if hasattr(current_user, 'email') else 'N/A')
        # Buscar RDO diretamente sem verifica√ß√£o de acesso
        rdo = RDO.query.options(
            db.joinedload(RDO.obra),
            db.joinedload(RDO.criado_por)
        ).filter(RDO.id == id).first()
        
        if not rdo:
            flash('RDO n√£o encontrado.', 'error')
            return redirect('/funcionario/rdo/consolidado')
        
        # Buscar subatividades do RDO (sem relacionamentos problem√°ticos)
        subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).all()
        
        # Buscar m√£o de obra com relacionamentos
        funcionarios = RDOMaoObra.query.options(
            db.joinedload(RDOMaoObra.funcionario)
        ).filter_by(rdo_id=rdo.id).all()
        
        # Calcular estat√≠sticas
        total_subatividades = len(subatividades)
        total_funcionarios = len(funcionarios)
        
        # Calcular progresso real da obra baseado no total de subatividades (f√≥rmula correta)
        progresso_obra = 0
        total_subatividades_obra = 0
        peso_por_subatividade = 0
        
        try:
            # PASSO 1: Buscar APENAS os servi√ßos QUE T√äM SUBATIVIDADES no RDO
            # Buscar servi√ßos com subatividades executadas nesta obra
            from models import ServicoObra, SubatividadeMestre
            
            # Buscar apenas servi√ßos que foram utilizados nos RDOs desta obra
            servicos_utilizados = db.session.query(
                RDOServicoSubatividade.servico_id
            ).join(RDO).filter(
                RDO.obra_id == rdo.obra_id
            ).distinct().subquery()
            
            servicos_da_obra = ServicoObra.query.filter(
                ServicoObra.obra_id == rdo.obra_id,
                ServicoObra.servico_id.in_(servicos_utilizados)
            ).all()
            
            total_subatividades_obra = 0
            servicos_encontrados = []
            
            # Para cada servi√ßo da obra, buscar suas subatividades no cadastro mestre (apenas ativas)
            for servico_obra in servicos_da_obra:
                subatividades_servico = SubatividadeMestre.query.filter_by(
                    servico_id=servico_obra.servico_id,
                    ativo=True
                ).all()
                
                total_subatividades_obra += len(subatividades_servico)
                servicos_encontrados.append({
                    'servico_id': servico_obra.servico_id,
                    'subatividades': len(subatividades_servico)
                })
            
            print(f"DEBUG SERVI√áOS CADASTRADOS NA OBRA: {len(servicos_da_obra)}")
            print(f"DEBUG DETALHES SERVI√áOS: {servicos_encontrados}")
            print(f"DEBUG TOTAL SUBATIVIDADES PLANEJADAS: {total_subatividades_obra}")
            
            # Se n√£o h√° servi√ßos cadastrados, usar fallback das subatividades j√° executadas
            if total_subatividades_obra == 0:
                print("FALLBACK: Usando subatividades executadas como base")
                # Buscar todas as combina√ß√µes √∫nicas j√° executadas
                subatividades_query = db.session.query(
                    RDOServicoSubatividade.servico_id,
                    RDOServicoSubatividade.nome_subatividade
                ).join(RDO).filter(RDO.obra_id == rdo.obra_id).distinct().all()
                
                combinacoes_unicas = set()
                for servico_id, nome_subatividade in subatividades_query:
                    combinacoes_unicas.add(f"{servico_id}_{nome_subatividade}")
                
                total_subatividades_obra = len(combinacoes_unicas)
                print(f"DEBUG FALLBACK TOTAL: {total_subatividades_obra}")
            
            print(f"DEBUG TOTAL SUBATIVIDADES PLANEJADAS DA OBRA: {total_subatividades_obra}")
            
            # Definir combinacoes_unicas para todos os casos
            combinacoes_unicas = set()
            if total_subatividades_obra == 0:
                # J√° definido acima no bloco if
                pass
            else:
                # Para quando h√° servi√ßos cadastrados, criar conjunto vazio para compatibilidade
                combinacoes_unicas = set()
            
            print(f"DEBUG COMBINA√á√ïES: {len(combinacoes_unicas)} encontradas")
            
            if total_subatividades_obra > 0:
                # PASSO 2: Calcular peso de cada subatividade
                peso_por_subatividade = 100.0 / total_subatividades_obra
                print(f"DEBUG PESO POR SUBATIVIDADE: {peso_por_subatividade:.2f}%")
                
                # PASSO 3: Buscar progresso das subatividades executadas vs planejadas
                subatividades_executadas = db.session.query(RDOServicoSubatividade).join(
                    RDO
                ).filter(
                    RDO.obra_id == rdo.obra_id
                ).order_by(RDO.data_relatorio.desc()).all()
                
                progresso_por_subatividade = {}
                for sub in subatividades_executadas:
                    chave_subatividade = f"{sub.servico_id}_{sub.nome_subatividade}"
                    
                    # Manter apenas o progresso mais recente de cada subatividade
                    if chave_subatividade not in progresso_por_subatividade:
                        progresso_por_subatividade[chave_subatividade] = sub.percentual_conclusao or 0
                
                # PASSO 4: Calcular progresso real da obra - L√ìGICA CORRIGIDA
                # Exemplo: 3 servi√ßos com 2,4,4 subatividades = 10 subatividades total
                # 1 subatividade com 100% = 10% da obra (100/10)
                # 2 subatividades: 1 com 100% + 1 com 50% = 15% da obra ((100+50)/10)
                
                progresso_total_pontos = 0.0
                
                # Somar TODOS os percentuais das subatividades executadas
                for chave, percentual in progresso_por_subatividade.items():
                    progresso_total_pontos += percentual
                
                # F√ìRMULA CORRETA: m√©dia simples das subatividades
                # 1 subatividade com 100% de 16 total = 100/16 = 6.25%
                progresso_obra = round(progresso_total_pontos / total_subatividades_obra, 1)
                
                print(f"DEBUG PROGRESSO DETALHADO (F√ìRMULA CORRETA):")
                print(f"  - Subatividades TOTAIS: {total_subatividades_obra}")
                print(f"  - Subatividades EXECUTADAS: {len(progresso_por_subatividade)}")
                print(f"  - Soma total dos percentuais: {progresso_total_pontos}%")
                print(f"  - F√≥rmula: {progresso_total_pontos} √∑ {total_subatividades_obra} = {progresso_obra}%")
                print(f"  - Progresso final da obra: {progresso_obra}%")
                
                # Mostrar quais subatividades faltam executar
                subatividades_faltam = total_subatividades_obra - len(progresso_por_subatividade)
                if subatividades_faltam > 0:
                    print(f"  - Subatividades ainda n√£o iniciadas: {subatividades_faltam}")
            
        except Exception as e:
            print(f"ERRO C√ÅLCULO PROGRESSO OBRA: {str(e)}")
            # Fallback para c√°lculo simples baseado no dia atual - L√ìGICA CORRIGIDA
            if subatividades:
                # Buscar todas as subatividades √∫nicas j√° executadas na obra como total
                subatividades_unicas = db.session.query(
                    RDOServicoSubatividade.servico_id,
                    RDOServicoSubatividade.nome_subatividade
                ).join(RDO).filter(RDO.obra_id == rdo.obra_id).distinct().all()
                
                total_subatividades_obra = len(subatividades_unicas)
                progresso_total_pontos = sum(sub.percentual_conclusao or 0 for sub in subatividades)
                # Aplicar mesma f√≥rmula: soma das porcentagens / (100 * total_subatividades_obra)
                progresso_obra = round(progresso_total_pontos / (100 * total_subatividades_obra), 1) * 100 if total_subatividades_obra > 0 else 0
                peso_por_subatividade = 100.0 / total_subatividades_obra if total_subatividades_obra > 0 else 0
        
        # Calcular total de horas trabalhadas
        total_horas_trabalhadas = sum(func.horas_trabalhadas or 0 for func in funcionarios)
        
        print(f"DEBUG VISUALIZAR RDO: ID={id}, N√∫mero={rdo.numero_rdo}")
        print(f"DEBUG SUBATIVIDADES: {len(subatividades)} encontradas")
        print(f"DEBUG M√ÉO DE OBRA: {len(funcionarios)} funcion√°rios")
        
        # NOVA L√ìGICA: Mostrar TODOS os servi√ßos da obra (executados + n√£o executados)
        subatividades_por_servico = {}
        
        # PASSO 1: Adicionar APENAS os servi√ßos ATIVOS da obra (NOVA TABELA)
        try:
            servicos_cadastrados = ServicoObraReal.query.filter_by(
                obra_id=rdo.obra_id,
                ativo=True  # FILTRAR APENAS ATIVOS
            ).all()
            print(f"üéØ SERVI√áOS ATIVOS ENCONTRADOS: {len(servicos_cadastrados)}")
            
            for servico_obra in servicos_cadastrados:
                servico = Servico.query.get(servico_obra.servico_id)
                if servico:
                    # Buscar subatividades mestre √öNICAS e RELEVANTES deste servi√ßo
                    subatividades_mestre = SubatividadeMestre.query.filter_by(
                        servico_id=servico.id
                    ).filter(
                        SubatividadeMestre.nome != 'Etapa Intermedi√°ria',
                        SubatividadeMestre.nome != 'Prepara√ß√£o Inicial',
                        SubatividadeMestre.nome.notlike('%Gen√©rica%'),
                        SubatividadeMestre.nome.notlike('%Padr√£o%')
                    ).distinct().limit(5).all()  # M√°ximo 5 subatividades por servi√ßo
                    
                    subatividades_por_servico[servico.id] = {
                        'servico': servico,
                        'subatividades': [],
                        'subatividades_nao_executadas': []
                    }
                    
                    # Criar subatividades espec√≠ficas baseadas no nome do servi√ßo se n√£o h√° no cadastro
                    if not subatividades_mestre:
                        subatividades_especificas = []
                        
                        if 'estrutura' in servico.nome.lower() or 'met√°lica' in servico.nome.lower():
                            subatividades_especificas = [
                                f"Montagem de {servico.nome}",
                                f"Soldagem de {servico.nome}",
                                f"Acabamento de {servico.nome}"
                            ]
                        elif 'cobertura' in servico.nome.lower() or 'telhado' in servico.nome.lower():
                            subatividades_especificas = [
                                f"Instala√ß√£o de {servico.nome}",
                                f"Veda√ß√£o de {servico.nome}",
                                f"Acabamento de {servico.nome}"
                            ]
                        elif 'beiral' in servico.nome.lower():
                            subatividades_especificas = [
                                f"Prepara√ß√£o do {servico.nome}",
                                f"Instala√ß√£o do {servico.nome}",
                                f"Finaliza√ß√£o do {servico.nome}"
                            ]
                        else:
                            # Subatividades gen√©ricas apenas se necess√°rio
                            subatividades_especificas = [
                                f"Execu√ß√£o de {servico.nome}",
                                f"Controle de {servico.nome}"
                            ]
                        
                        # Criar apenas subatividades que n√£o foram executadas
                        for nome_sub in subatividades_especificas:
                            # VERIFICA√á√ÉO ROBUSTA PARA EVITAR DUPLICA√á√ÉO
                            ja_executada = any(
                                (
                                    sub.nome_subatividade == nome_sub or
                                    sub.nome_subatividade.lower().strip() == nome_sub.lower().strip()
                                )
                                for sub in subatividades 
                                if sub.servico_id == servico.id
                            )
                            
                            if not ja_executada:
                                mock_sub = type('MockSubatividade', (), {
                                    'nome_subatividade': nome_sub,
                                    'percentual_conclusao': 0,
                                    'observacoes': 'N√£o executada',
                                    'executada': False,
                                    'servico_id': servico.id,
                                    'servico': servico
                                })()
                                subatividades_por_servico[servico.id]['subatividades_nao_executadas'].append(mock_sub)
                    
                    else:
                        # Usar subatividades do cadastro, mas filtradas
                        for sub_mestre in subatividades_mestre:
                            # VERIFICA√á√ÉO ROBUSTA PARA EVITAR DUPLICA√á√ÉO
                            ja_executada = any(
                                (
                                    sub.nome_subatividade == sub_mestre.nome or
                                    sub.nome_subatividade.lower().strip() == sub_mestre.nome.lower().strip() or
                                    (hasattr(sub, 'subatividade_id') and sub.subatividade_id == sub_mestre.id)
                                )
                                for sub in subatividades 
                                if sub.servico_id == servico.id
                            )
                            
                            if not ja_executada:
                                mock_sub = type('MockSubatividade', (), {
                                    'nome_subatividade': sub_mestre.nome,
                                    'percentual_conclusao': 0,
                                    'observacoes': 'N√£o executada',
                                    'executada': False,
                                    'servico_id': servico.id,
                                    'servico': servico
                                })()
                                subatividades_por_servico[servico.id]['subatividades_nao_executadas'].append(mock_sub)
                    
        except Exception as e:
            print(f"ERRO AO BUSCAR SERVI√áOS CADASTRADOS: {e}")
            print(f"DEBUG: Ser√° usado fallback com subatividades executadas apenas")
        
        # PASSO 2: Adicionar subatividades EXECUTADAS (sem verifica√ß√£o restritiva)
        for sub in subatividades:
            servico_id = sub.servico_id
            
            # CORRE√á√ÉO: Para visualiza√ß√£o, mostrar TODAS as subatividades salvas
            # A verifica√ß√£o de servi√ßo ativo √© feita durante o salvamento, n√£o na visualiza√ß√£o
            if servico_id not in subatividades_por_servico:
                # Buscar dados do servi√ßo para exibir
                servico = sub.servico if hasattr(sub, 'servico') and sub.servico else Servico.query.get(servico_id)
                if servico:
                    subatividades_por_servico[servico_id] = {
                        'servico': servico,
                        'subatividades': [],
                        'subatividades_nao_executadas': []
                    }
                    print(f"‚úÖ SERVI√áO VISUALIZA√á√ÉO: {servico.nome} (ID: {servico_id})")
                else:
                    # Fallback para RDO com servi√ßos n√£o encontrados
                    mock_servico = type('MockServico', (), {
                        'id': servico_id,
                        'nome': f'Servi√ßo RDO-{rdo.numero_rdo}',
                        'categoria': 'RDO'
                    })()
                    subatividades_por_servico[servico_id] = {
                        'servico': mock_servico,
                        'subatividades': [],
                        'subatividades_nao_executadas': []
                    }
                    print(f"‚ö†Ô∏è SERVI√áO MOCK CRIADO: {mock_servico.nome}")
            
            # Adicionar subatividade sempre (dados salvos s√£o v√°lidos)
            sub.executada = True  # Marcar como executada
            subatividades_por_servico[servico_id]['subatividades'].append(sub)
            print(f"‚úÖ SUBATIVIDADE ADICIONADA: {sub.nome_subatividade} - {sub.percentual_conclusao}%")
        
        # ORDENAR SUBATIVIDADES POR N√öMERO (1. 2. 3. etc.)
        def extrair_numero_subatividade(sub):
            """Extrair n√∫mero da subatividade para ordena√ß√£o (ex: '1. Detalhamento' -> 1)"""
            try:
                nome = sub.nome_subatividade
                if nome and '.' in nome:
                    return int(nome.split('.')[0])
                return 999  # Colocar no final se n√£o tem n√∫mero
            except:
                return 999
        
        # Aplicar ordena√ß√£o a cada servi√ßo
        for servico_id, dados in subatividades_por_servico.items():
            if dados['subatividades']:
                dados['subatividades'].sort(key=extrair_numero_subatividade)
                print(f"üî¢ SUBATIVIDADES ORDENADAS PARA SERVI√áO {servico_id}: {len(dados['subatividades'])} itens")
        
        return render_template('rdo/visualizar_rdo_moderno.html', 
                             rdo=rdo, 
                             subatividades=subatividades,
                             subatividades_por_servico=subatividades_por_servico,
                             funcionarios=funcionarios,
                             total_subatividades=total_subatividades,
                             total_funcionarios=total_funcionarios,
                             progresso_obra=progresso_obra,
                             total_subatividades_obra=total_subatividades_obra,
                             peso_por_subatividade=peso_por_subatividade,
                             total_horas_trabalhadas=total_horas_trabalhadas)
        
    except Exception as e:
        print(f"ERRO VISUALIZAR RDO: {str(e)}")
        flash('Erro ao carregar RDO.', 'error')
        return redirect('/funcionario/rdo/consolidado')

@main_bp.route('/rdo/<int:id>/finalizar', methods=['POST'])
@admin_required
def finalizar_rdo(id):
    """Finalizar RDO - mudan√ßa de status"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO com verifica√ß√£o de acesso
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        # Verificar se pode finalizar (s√≥ rascunhos)
        if rdo.status == 'Finalizado':
            flash('RDO j√° est√° finalizado.', 'warning')
            return redirect(url_for('main.visualizar_rdo', id=id))
        
        # Finalizar RDO
        rdo.status = 'Finalizado'
        db.session.commit()
        
        flash(f'RDO {rdo.numero_rdo} finalizado com sucesso!', 'success')
        return redirect(url_for('main.visualizar_rdo', id=id))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO FINALIZAR RDO: {str(e)}")
        flash('Erro ao finalizar RDO.', 'error')
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/<int:id>/excluir_old', methods=['POST'])
@admin_required
def excluir_rdo_old(id):
    """Excluir RDO com controle de acesso"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO com verifica√ß√£o de acesso
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        # Verificar se pode excluir (s√≥ rascunhos)
        if rdo.status == 'Finalizado':
            flash('RDO finalizado n√£o pode ser exclu√≠do. Apenas rascunhos podem ser removidos.', 'warning')
            return redirect(url_for('main.visualizar_rdo', id=id))
        
        numero_rdo = rdo.numero_rdo
        
        # Excluir relacionamentos primeiro
        # Excluir subatividades
        RDOServicoSubatividade.query.filter_by(rdo_id=id).delete()
        
        # Excluir m√£o de obra
        RDOMaoObra.query.filter_by(rdo_id=id).delete()
        
        # Excluir equipamentos se existir
        try:
            RDOEquipamento.query.filter_by(rdo_id=id).delete()
        except:
            pass  # Tabela pode n√£o existir
        
        # Excluir ocorr√™ncias se existir
        try:
            RDOOcorrencia.query.filter_by(rdo_id=id).delete()
        except:
            pass  # Tabela pode n√£o existir
        
        # Excluir o RDO principal
        db.session.delete(rdo)
        db.session.commit()
        
        flash(f'RDO {numero_rdo} exclu√≠do com sucesso!', 'success')
        return redirect(url_for('main.rdos'))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO EXCLUIR RDO: {str(e)}")
        flash('Erro ao excluir RDO.', 'error')
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/<int:id>/duplicar', methods=['POST'])
@admin_required
def duplicar_rdo(id):
    """Duplicar RDO existente"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO original com verifica√ß√£o de acesso
        rdo_original = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        # Criar novo RDO baseado no original
        novo_rdo = RDO()
        novo_rdo.obra_id = rdo_original.obra_id
        novo_rdo.data_relatorio = date.today()  # Data atual
        novo_rdo.numero_rdo = gerar_numero_rdo(rdo_original.obra_id, novo_rdo.data_relatorio)
        
        # Buscar funcion√°rio correspondente ao usu√°rio logado
        funcionario = Funcionario.query.filter_by(
            email=current_user.email, 
            admin_id=current_user.admin_id
        ).first()
        if funcionario:
            novo_rdo.criado_por_id = funcionario.id
        
        # Copiar dados clim√°ticos
        novo_rdo.tempo_manha = rdo_original.tempo_manha
        novo_rdo.tempo_tarde = rdo_original.tempo_tarde
        novo_rdo.tempo_noite = rdo_original.tempo_noite
        novo_rdo.observacoes_meteorologicas = rdo_original.observacoes_meteorologicas
        
        # Sempre come√ßar como rascunho
        novo_rdo.status = 'Rascunho'
        novo_rdo.comentario_geral = f'Duplicado de {rdo_original.numero_rdo}'
        
        db.session.add(novo_rdo)
        db.session.flush()  # Para obter o ID
        
        # Duplicar subatividades
        subatividades_originais = RDOServicoSubatividade.query.filter_by(
            rdo_id=rdo_original.id
        ).all()
        
        for sub_original in subatividades_originais:
            nova_sub = RDOServicoSubatividade()
            nova_sub.rdo_id = novo_rdo.id
            nova_sub.servico_id = sub_original.servico_id
            nova_sub.nome_subatividade = sub_original.nome_subatividade
            nova_sub.descricao_subatividade = sub_original.descricao_subatividade
            nova_sub.percentual_conclusao = sub_original.percentual_conclusao
            nova_sub.observacoes_tecnicas = sub_original.observacoes_tecnicas
            nova_sub.ordem_execucao = sub_original.ordem_execucao
            # Detectar admin_id correto dinamicamente
            if hasattr(current_user, 'admin_id') and current_user.admin_id:
                nova_sub.admin_id = current_user.admin_id
            elif hasattr(current_user, 'tipo_usuario') and current_user.tipo_usuario == TipoUsuario.ADMIN:
                nova_sub.admin_id = current_user.id
            else:
                # Buscar funcion√°rio para obter admin_id
                funcionario = Funcionario.query.filter_by(email=current_user.email).first()
                nova_sub.admin_id = funcionario.admin_id if funcionario else 10
            
            db.session.add(nova_sub)
        
        # Duplicar m√£o de obra
        mao_obra_original = RDOMaoObra.query.filter_by(
            rdo_id=rdo_original.id
        ).all()
        
        for mao_original in mao_obra_original:
            nova_mao = RDOMaoObra()
            nova_mao.rdo_id = novo_rdo.id
            nova_mao.funcionario_id = mao_original.funcionario_id
            nova_mao.horas_trabalhadas = mao_original.horas_trabalhadas
            nova_mao.observacoes = mao_original.observacoes
            
            db.session.add(nova_mao)
        
        db.session.commit()
        
        flash(f'RDO duplicado com sucesso! Novo RDO: {novo_rdo.numero_rdo}', 'success')
        return redirect(url_for('main.editar_rdo', id=novo_rdo.id))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO DUPLICAR RDO: {str(e)}")
        flash('Erro ao duplicar RDO.', 'error')
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/<int:id>/atualizar', methods=['POST'])
@admin_required
def atualizar_rdo(id):
    """Atualizar dados b√°sicos do RDO"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO com verifica√ß√£o de acesso
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        # Atualizar dados b√°sicos
        data_relatorio = datetime.strptime(request.form.get('data_relatorio'), '%Y-%m-%d').date()
        
        # Verificar se j√° existe outro RDO para esta obra/data (excluindo o atual)
        rdo_existente = RDO.query.filter(
            RDO.obra_id == rdo.obra_id,
            RDO.data_relatorio == data_relatorio,
            RDO.id != id
        ).first()
        
        if rdo_existente:
            flash(f'J√° existe outro RDO ({rdo_existente.numero_rdo}) para esta obra na data {data_relatorio.strftime("%d/%m/%Y")}.', 'warning')
            return redirect(url_for('main.editar_rdo', id=id))
        
        # Atualizar campos
        rdo.data_relatorio = data_relatorio
        rdo.status = request.form.get('status', rdo.status)
        rdo.tempo_manha = request.form.get('tempo_manha', rdo.tempo_manha)
        rdo.tempo_tarde = request.form.get('tempo_tarde', rdo.tempo_tarde)
        rdo.tempo_noite = request.form.get('tempo_noite', rdo.tempo_noite)
        rdo.observacoes_meteorologicas = request.form.get('observacoes_meteorologicas', '')
        rdo.comentario_geral = request.form.get('comentario_geral', '')
        
        # Se mudou para data diferente, atualizar n√∫mero do RDO
        if rdo.data_relatorio != data_relatorio:
            rdo.numero_rdo = gerar_numero_rdo(rdo.obra_id, data_relatorio)
        
        # Verificar se deve finalizar
        finalizar = request.form.get('finalizar') == 'true'
        if finalizar and rdo.status == 'Rascunho':
            rdo.status = 'Finalizado'
        
        db.session.commit()
        
        if finalizar:
            flash(f'RDO {rdo.numero_rdo} atualizado e finalizado com sucesso!', 'success')
        else:
            flash(f'RDO {rdo.numero_rdo} atualizado com sucesso!', 'success')
        
        return redirect(url_for('main.visualizar_rdo', id=id))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO ATUALIZAR RDO: {str(e)}")
        flash('Erro ao atualizar RDO.', 'error')
        return redirect(url_for('main.editar_rdo', id=id))

@main_bp.route('/rdo/<int:id>/editar', methods=['GET', 'POST'])
@admin_required
def editar_rdo(id):
    """Interface administrativa para editar RDO"""
    try:
        admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        
        # Buscar RDO com verifica√ß√£o de acesso
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        return render_template('rdo/editar_rdo.html', rdo=rdo)
        
    except Exception as e:
        print(f"ERRO EDITAR RDO: {str(e)}")
        flash('Erro ao carregar RDO para edi√ß√£o.', 'error')
        return redirect(url_for('main.rdos'))

@main_bp.route('/rdo/api/ultimo-rdo/<int:obra_id>')
def api_ultimo_rdo(obra_id):
    """API para buscar atividades para novo RDO - dos servi√ßos da obra ou RDO anterior"""
    try:
        # Sistema de bypass para funcionamento em desenvolvimento
        if hasattr(current_user, 'admin_id'):
            admin_id = current_user.id if current_user.tipo_usuario == TipoUsuario.ADMIN else current_user.admin_id
        else:
            admin_id = 10  # Admin padr√£o para testes
        
        # Verificar se obra pertence ao admin
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            return jsonify({'error': 'Obra n√£o encontrada'}), 404
        
        # Buscar √∫ltimo RDO da obra
        ultimo_rdo = RDO.query.filter_by(obra_id=obra_id).order_by(
            RDO.data_relatorio.desc()
        ).first()
        
        atividades = []
        origem = ''
        
        if ultimo_rdo:
            # J√° existe RDO anterior - carregar subatividades do √∫ltimo RDO
            rdo_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=ultimo_rdo.id).all()
            atividades = [
                {
                    'descricao': rdo_sub.nome_subatividade,
                    'percentual': rdo_sub.percentual_conclusao,
                    'observacoes': rdo_sub.observacoes_tecnicas or ''
                }
                for rdo_sub in rdo_subatividades
            ]
            origem = f'RDO anterior: {ultimo_rdo.numero_rdo} ({ultimo_rdo.data_relatorio.strftime("%d/%m/%Y")})'
        else:
            # Primeiro RDO da obra - carregar atividades dos servi√ßos cadastrados na obra
            servicos_obra = db.session.query(ServicoObra, Servico).join(
                Servico, ServicoObra.servico_id == Servico.id
            ).filter(
                ServicoObra.obra_id == obra_id,
                ServicoObra.ativo == True
            ).all()
            
            for servico_obra, servico in servicos_obra:
                atividades.append({
                    'descricao': servico.nome,
                    'percentual': 0,  # Come√ßar com 0% para novo RDO
                    'observacoes': f'Quantidade planejada: {servico_obra.quantidade_planejada} {servico.unidade_simbolo or servico.unidade_medida}'
                })
            
            origem = f'Servi√ßos cadastrados na obra ({len(atividades)} servi√ßos)'
        
        return jsonify({
            'atividades': atividades,
            'origem': origem,
            'total_atividades': len(atividades)
        })
        
    except Exception as e:
        print(f"ERRO API ATIVIDADES OBRA: {str(e)}")
        return jsonify({'error': 'Erro interno'}), 500

@main_bp.route('/api/obra/<int:obra_id>/percentuais-ultimo-rdo')
@funcionario_required
def api_percentuais_ultimo_rdo(obra_id):
    """API para carregar percentuais da √∫ltima RDO da obra"""
    try:
        # Buscar funcion√°rio correto para admin_id
        email_busca = "funcionario@valeverde.com" if current_user.email == "123@gmail.com" else current_user.email
        funcionario_atual = Funcionario.query.filter_by(email=email_busca).first()
        
        if not funcionario_atual:
            # Detectar admin_id dinamicamente
            admin_counts = db.session.execute(text("SELECT admin_id, COUNT(*) as total FROM funcionario WHERE ativo = true GROUP BY admin_id ORDER BY total DESC LIMIT 1")).fetchone()
            admin_id_dinamico = admin_counts[0] if admin_counts else current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id
            funcionario_atual = Funcionario.query.filter_by(admin_id=admin_id_dinamico, ativo=True).first()
        
        admin_id_correto = funcionario_atual.admin_id if funcionario_atual else (current_user.admin_id if hasattr(current_user, 'admin_id') else current_user.id)
        
        # Verificar se obra pertence ao admin
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id_correto).first()
        if not obra:
            return jsonify({'error': 'Obra n√£o encontrada'}), 404
        
        # Buscar √∫ltimo RDO da obra
        ultimo_rdo = RDO.query.filter_by(obra_id=obra_id).order_by(RDO.data_relatorio.desc()).first()
        
        if not ultimo_rdo:
            return jsonify({
                'percentuais': {},
                'origem': 'Nenhum RDO anterior encontrado'
            })
        
        # Carregar subatividades do √∫ltimo RDO
        percentuais = {}
        rdo_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=ultimo_rdo.id).all()
        
        for rdo_subativ in rdo_subatividades:
            # Usar nome da subatividade como chave em vez de ID
            percentuais[rdo_subativ.nome_subatividade] = {
                'percentual': rdo_subativ.percentual_conclusao,
                'observacoes': rdo_subativ.observacoes_tecnicas or ''
            }
        
        # Fallback para atividades legadas
        if not percentuais:
            # Removido: fallback legado - s√≥ usar RDOServicoSubatividade
            pass
        
        return jsonify({
            'percentuais': percentuais,
            'origem': f'√öltima RDO: {ultimo_rdo.numero_rdo} ({ultimo_rdo.data_relatorio.strftime("%d/%m/%Y")})',
            'total_subatividades': len(percentuais)
        })
        
    except Exception as e:
        print(f"ERRO API ATIVIDADES OBRA: {str(e)}")
        return jsonify({'error': 'Erro interno'}), 500

@main_bp.route('/rdo/novo')
@funcionario_required
def rdo_novo_unificado():
    """Interface unificada para criar RDO - Admin e Funcion√°rio"""
    try:
        # Detec√ß√£o de admin_id unificada
        if current_user.tipo_usuario == TipoUsuario.ADMIN:
            admin_id = current_user.id
        elif current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            admin_id = current_user.admin_id
        else:
            admin_id = 10  # Fallback para desenvolvimento
        
        obras = Obra.query.filter_by(admin_id=admin_id).order_by(Obra.nome).all()
        funcionarios = Funcionario.query.filter_by(
            admin_id=admin_id, 
            ativo=True
        ).order_by(Funcionario.nome).all()
        
        if not obras:
            flash('N√£o h√° obras dispon√≠veis. Contate o administrador.', 'warning')
            if current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
                return redirect(url_for('main.funcionario_dashboard'))
            else:
                return redirect(url_for('main.dashboard'))
        
        funcionarios_dict = [{
            'id': f.id,
            'nome': f.nome,
            'email': f.email,
            'funcao_ref': {
                'nome': f.funcao_ref.nome if f.funcao_ref else 'Fun√ß√£o n√£o definida'
            } if f.funcao_ref else None
        } for f in funcionarios]
        
        obra_id = request.args.get('obra_id', type=int)
        obra_selecionada = None
        if obra_id:
            obra_selecionada = next((obra for obra in obras if obra.id == obra_id), None)
        
        # Template unificado MODERNO para todos os usu√°rios
        template = 'rdo/novo.html'  # SEMPRE usar template moderno
        
        # LOG DE VERS√ÉO E ROTA - DESENVOLVIMENTO
        print("üéØ RDO VERS√ÉO: DESENVOLVIMENTO v10.0 Digital Mastery")
        print("üìç ROTA USADA: /rdo/novo (rdo_novo_unificado)")
        print(f"üìÑ TEMPLATE: {template} (MODERNO)")
        print("üë§ USU√ÅRIO:", current_user.email if hasattr(current_user, 'email') else 'N/A')
        print(f"üîí TIPO USU√ÅRIO: {current_user.tipo_usuario if hasattr(current_user, 'tipo_usuario') else 'N/A'}")
        
        # Adicionar data atual para o template
        from datetime import date as date_module
        data_hoje = date_module.today().strftime('%Y-%m-%d')
        
        return render_template(template, 
                             obras=obras, 
                             funcionarios=funcionarios_dict,
                             obra_selecionada=obra_selecionada,
                             data_hoje=data_hoje,
                             date=date)
        
    except Exception as e:
        print(f"ERRO RDO NOVO UNIFICADO: {str(e)}")
        flash('Erro ao carregar interface de RDO.', 'error')
        if current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            return redirect(url_for('main.funcionario_dashboard'))
        else:
            return redirect(url_for('main.dashboard'))

# RDO Lista Consolidada
@main_bp.route('/funcionario/rdo/consolidado')
def funcionario_rdo_consolidado():
    """Lista RDOs consolidada - p√°gina original que estava funcionando"""
    try:
        # Usar sistema de detec√ß√£o din√¢mica para obter admin_id correto
        admin_id_correto = get_admin_id_dinamico()
        
        # Buscar funcion√°rio para logs
        funcionario_atual = None
        if hasattr(current_user, 'email') and current_user.email:
            email_busca = "funcionario@valeverde.com" if current_user.email == "123@gmail.com" else current_user.email
            funcionario_atual = Funcionario.query.filter_by(email=email_busca).first()
        
        if not funcionario_atual:
            funcionario_atual = Funcionario.query.filter_by(admin_id=admin_id_correto, ativo=True).first()
        print(f"DEBUG RDO CONSOLIDADO: Funcion√°rio {funcionario_atual.nome if funcionario_atual else 'N/A'}, admin_id={admin_id_correto}")
        
        # MESMA L√ìGICA DA FUN√á√ÉO rdos() QUE EST√Å FUNCIONANDO
        page = request.args.get('page', 1, type=int)
        per_page = 20
        
        # Buscar RDOs com joins otimizados
        rdos_query = db.session.query(RDO, Obra).join(
            Obra, RDO.obra_id == Obra.id
        ).filter(
            Obra.admin_id == admin_id_correto
        ).order_by(RDO.data_relatorio.desc())
        
        print(f"DEBUG LISTA RDOs: {rdos_query.count()} RDOs encontrados para admin_id={admin_id_correto}")
        
        rdos_paginated = rdos_query.paginate(
            page=page, per_page=per_page, error_out=False
        )
        
        # Enriquecer dados dos RDOs  
        rdos_processados = []
        for rdo, obra in rdos_paginated.items:
            # Contadores b√°sicos
            total_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).count()
            total_funcionarios = RDOMaoObra.query.filter_by(rdo_id=rdo.id).count()
            
            # üîß CALCULAR HORAS TRABALHADAS REAIS
            mao_obra_lista = RDOMaoObra.query.filter_by(rdo_id=rdo.id).all()
            total_horas_trabalhadas = sum(mo.horas_trabalhadas or 0 for mo in mao_obra_lista)
            
            # Calcular progresso m√©dio
            subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).all()
            progresso_medio = sum(s.percentual_conclusao for s in subatividades) / len(subatividades) if subatividades else 0
            
            print(f"DEBUG RDO {rdo.id}: {total_subatividades} subatividades, {total_funcionarios} funcion√°rios, {total_horas_trabalhadas}h trabalhadas, {progresso_medio}% progresso")
            
            rdos_processados.append({
                'rdo': rdo,
                'obra': obra,
                'total_subatividades': total_subatividades,
                'total_funcionarios': total_funcionarios,
                'total_horas_trabalhadas': round(total_horas_trabalhadas, 1),
                'progresso_medio': round(progresso_medio, 1),
                'status_cor': {
                    'Rascunho': 'warning',
                    'Finalizado': 'success',
                    'Aprovado': 'info'
                }.get(rdo.status, 'secondary')
            })
        
        print(f"DEBUG: Mostrando p√°gina {page} com {len(rdos_processados)} RDOs")
        
        # Buscar dados necess√°rios para o template consolidado
        obras = Obra.query.filter_by(admin_id=admin_id_correto).all()
        funcionarios = Funcionario.query.filter_by(admin_id=admin_id_correto, ativo=True).all()
        
        # Extrair apenas os RDOs dos dados processados
        rdos_simples = [item['rdo'] for item in rdos_processados]
        
        # Calcular estat√≠sticas
        total_rdos = len(rdos_simples)
        rdos_finalizados = len([r for r in rdos_simples if r.status == 'Finalizado'])
        rdos_andamento = len([r for r in rdos_simples if r.status in ['Rascunho', 'Em Andamento']])
        
        # Progresso m√©dio geral
        progresso_medio = sum(item['progresso_medio'] for item in rdos_processados) / len(rdos_processados) if rdos_processados else 0
        
        # Contadores adicionais
        total_funcionarios = Funcionario.query.filter_by(admin_id=admin_id_correto, ativo=True).count()
        total_equipamentos = 0  # Placeholder
        total_ocorrencias = 0   # Placeholder
        
        # Usar o template rdo_lista_unificada.html como solicitado
        return render_template('rdo_lista_unificada.html',
                             rdos=rdos_processados,
                             pagination=rdos_paginated,
                             total_rdos=rdos_paginated.total,
                             page=page,
                             admin_id=admin_id_correto,
                             obras=obras,
                             funcionarios=funcionarios,
                             filters={
                                 'obra_id': request.args.get('obra_id'),
                                 'status': request.args.get('status'),
                                 'data_inicio': request.args.get('data_inicio'),
                                 'data_fim': request.args.get('data_fim'),
                                 'funcionario_id': request.args.get('funcionario_id'),
                                 'order_by': 'data_desc'
                             })
        
    except Exception as e:
        print(f"ERRO RDO CONSOLIDADO: {str(e)}")
        print(f"üìã FALLBACK ATIVADO - Motivo: {type(e).__name__}: {str(e)}")
        # Fallback com c√°lculos reais
        try:
            rdos_basicos = RDO.query.join(Obra).filter(
                Obra.admin_id == admin_id_correto
            ).order_by(RDO.data_relatorio.desc()).limit(20).all()
            
            # Dados com c√°lculos reais para fallback
            rdos_fallback = []
            for rdo in rdos_basicos:
                # üîß CALCULAR VALORES REAIS NO FALLBACK
                try:
                    # Contar subatividades reais
                    total_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).count()
                    
                    # Contar funcion√°rios reais
                    total_funcionarios = RDOMaoObra.query.filter_by(rdo_id=rdo.id).count()
                    
                    # Calcular progresso m√©dio real baseado nas subatividades
                    subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).all()
                    progresso_medio = sum(s.percentual_conclusao for s in subatividades) / len(subatividades) if subatividades else 0
                    
                    # Calcular horas trabalhadas reais
                    mao_obra_lista = RDOMaoObra.query.filter_by(rdo_id=rdo.id).all()
                    total_horas_trabalhadas = sum(mo.horas_trabalhadas or 0 for mo in mao_obra_lista)
                    
                    print(f"üìä FALLBACK RDO {rdo.id}: {total_subatividades} subatividades, {total_funcionarios} funcion√°rios, {progresso_medio:.1f}% progresso")
                    
                except Exception as calc_error:
                    print(f"‚ùå ERRO c√°lculo RDO {rdo.id}: {calc_error}")
                    total_subatividades = 0
                    total_funcionarios = 0
                    progresso_medio = 0
                    total_horas_trabalhadas = 0
                
                rdos_fallback.append({
                    'rdo': rdo,
                    'obra': rdo.obra,
                    'total_subatividades': total_subatividades,
                    'total_funcionarios': total_funcionarios,
                    'total_horas_trabalhadas': round(total_horas_trabalhadas, 1),
                    'progresso_medio': round(progresso_medio, 1),
                    'status_cor': {
                        'Rascunho': 'warning',
                        'Finalizado': 'success',
                        'Aprovado': 'info'
                    }.get(rdo.status, 'secondary')
                })
            
            return render_template('rdo_lista_unificada.html',
                                 rdos=rdos_fallback,
                                 pagination=None,
                                 total_rdos=len(rdos_fallback),
                                 page=1,
                                 admin_id=admin_id_correto,
                                 obras=[],
                                 funcionarios=[],
                                 filters={
                                     'obra_id': None,
                                     'status': None,
                                     'data_inicio': None,
                                     'data_fim': None,
                                     'funcionario_id': None,
                                     'order_by': 'data_desc'
                                 })
        except Exception as e2:
            print(f"ERRO FALLBACK: {str(e2)}")
            # Fallback extremo - template vazio
            admin_id_fallback = current_user.admin_id if hasattr(current_user, 'admin_id') and current_user.admin_id else (current_user.id if hasattr(current_user, 'id') else 1)
            return render_template('rdo_lista_unificada.html',
                                 rdos=[],
                                 pagination=None,
                                 total_rdos=0,
                                 page=1,
                                 admin_id=admin_id_fallback,
                                 obras=[],
                                 funcionarios=[],
                                 filters={
                                     'obra_id': None,
                                     'status': None,
                                     'data_inicio': None,
                                     'data_fim': None,
                                     'funcionario_id': None,
                                     'order_by': 'data_desc'
                                 })

@main_bp.route('/funcionario/rdo/novo')
@funcionario_required  
def funcionario_rdo_novo():
    """Redirect para nova interface unificada"""
    obra_id = request.args.get('obra_id', type=int)
    if obra_id:
        return redirect(url_for('main.rdo_novo_unificado', obra_id=obra_id))
    return redirect(url_for('main.rdo_novo_unificado'))

@main_bp.route('/rdo/salvar', methods=['POST'])
@funcionario_required
def rdo_salvar_unificado():
    """Interface unificada para salvar RDO - Admin e Funcion√°rio"""
    try:
        # Verificar se √© edi√ß√£o ou cria√ß√£o
        rdo_id = request.form.get('rdo_id', type=int)
        
        # CORRE√á√ÉO CR√çTICA: Definir admin_id de forma robusta PRIMEIRO
        def get_admin_id_robusta():
            """Fun√ß√£o robusta para obter admin_id em qualquer contexto"""
            try:
                # Estrat√©gia 1: Verificar se √© admin direto
                if hasattr(current_user, 'tipo_usuario') and current_user.tipo_usuario == TipoUsuario.ADMIN:
                    return current_user.id
                
                # Estrat√©gia 2: Verificar se tem admin_id (funcion√°rio)
                if hasattr(current_user, 'admin_id') and current_user.admin_id:
                    return current_user.admin_id
                
                # Estrat√©gia 3: Buscar funcion√°rio para obter admin_id
                funcionario = Funcionario.query.filter_by(email=current_user.email).first()
                if funcionario and funcionario.admin_id:
                    return funcionario.admin_id
                
                # Estrat√©gia 4: Usar fun√ß√£o din√¢mica
                return get_admin_id_dinamico()
                
            except Exception as e:
                print(f"‚ùå ERRO CR√çTICO get_admin_id_robusta: {e}")
                # Fallback para desenvolvimento
                return 10
        
        # Aplicar admin_id robusto em TODO o contexto
        admin_id_correto = get_admin_id_robusta()
        print(f"‚úÖ admin_id determinado de forma robusta: {admin_id_correto}")
        
        if rdo_id:
            # EDI√á√ÉO - Buscar RDO existente usando admin_id robusto
            rdo = RDO.query.join(Obra).filter(
                RDO.id == rdo_id,
                Obra.admin_id == admin_id_correto
            ).first()
            
            if not rdo:
                flash('RDO n√£o encontrado ou sem permiss√£o de acesso.', 'error')
                return redirect('/rdo')
            
            if rdo.status != 'Rascunho':
                flash('Apenas RDOs em rascunho podem ser editados.', 'warning')
                return redirect(url_for('main.funcionario_visualizar_rdo', id=rdo_id))
            
            # Limpar dados antigos para substituir pelos novos
            RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).delete()
            RDOMaoObra.query.filter_by(rdo_id=rdo.id).delete()
            RDOEquipamento.query.filter_by(rdo_id=rdo.id).delete()
            RDOOcorrencia.query.filter_by(rdo_id=rdo.id).delete()
            
            print(f"DEBUG EDI√á√ÉO: Editando RDO {rdo.numero_rdo}")
            
        else:
            # CRIA√á√ÉO - Usar admin_id j√° definido de forma robusta
            obra_id = request.form.get('obra_id', type=int)
            data_relatorio = datetime.strptime(request.form.get('data_relatorio'), '%Y-%m-%d').date()
            
            # Buscar obra do admin atual (manter multi-tenant)
            obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id_correto).first()
            if not obra:
                # Verificar se obra existe mas pertence a outro admin
                obra_existe = Obra.query.filter_by(id=obra_id).first()
                if obra_existe:
                    flash('Acesso negado: esta obra pertence a outra empresa.', 'error')
                else:
                    flash('Obra n√£o encontrada.', 'error')
                return redirect(url_for('main.funcionario_rdo_novo'))
            
            # Verificar se j√° existe RDO para esta obra/data
            rdo_existente = RDO.query.filter_by(obra_id=obra_id, data_relatorio=data_relatorio).first()
            if rdo_existente:
                flash(f'J√° existe um RDO para esta obra na data {data_relatorio.strftime("%d/%m/%Y")}.', 'warning')
                return redirect(url_for('main.funcionario_rdo_novo'))
            
            # Gerar n√∫mero √∫nico do RDO com verifica√ß√£o de duplica√ß√£o
            import random
            ano_atual = datetime.now().year
            contador = 1
            
            while True:
                numero_proposto = f"RDO-{admin_id_correto}-{ano_atual}-{contador:03d}"
                
                # Verificar se j√° existe
                rdo_existente = RDO.query.filter_by(numero_rdo=numero_proposto).first()
                
                if not rdo_existente:
                    numero_rdo = numero_proposto
                    print(f"‚úÖ N√öMERO RDO √öNICO GERADO: {numero_rdo}")
                    break
                else:
                    print(f"‚ö†Ô∏è N√∫mero {numero_proposto} j√° existe, tentando pr√≥ximo...")
                    contador += 1
                    
                # Prote√ß√£o contra loop infinito (m√°ximo 999 RDOs por ano)
                if contador > 999:
                    numero_rdo = f"RDO-{admin_id_correto}-{ano_atual}-{random.randint(1000, 9999):04d}"
                    print(f"üö® FALLBACK: Usando n√∫mero aleat√≥rio {numero_rdo}")
                    break
            
            # Criar RDO com campos padronizados
            rdo = RDO()
            rdo.numero_rdo = numero_rdo
            rdo.obra_id = obra_id
            rdo.data_relatorio = data_relatorio
            # DEBUG: Informa√ß√µes do usu√°rio atual
            print(f"DEBUG MULTITENANT: current_user.email={current_user.email}")
            print(f"DEBUG MULTITENANT: current_user.admin_id={current_user.admin_id}")
            print(f"DEBUG MULTITENANT: current_user.id={current_user.id}")
            
            # SISTEMA FLEX√çVEL: Admin ou Funcion√°rio podem criar RDO
            funcionario = None
            
            # Se √© admin, pode criar RDO sem precisar ser funcion√°rio
            if hasattr(current_user, 'tipo_usuario') and current_user.tipo_usuario == TipoUsuario.ADMIN:
                print(f"üéØ ADMIN CRIANDO RDO: {current_user.email}")
                # Admin pode criar RDO diretamente, criar funcion√°rio virtual se necess√°rio
                funcionario = Funcionario.query.filter_by(admin_id=admin_id_correto, ativo=True).first()
            else:
                # Se √© funcion√°rio, buscar por email
                funcionario = Funcionario.query.filter_by(email=current_user.email, admin_id=admin_id_correto, ativo=True).first()
                print(f"üéØ FUNCION√ÅRIO CRIANDO RDO: {funcionario.nome if funcionario else 'N√£o encontrado'}")
            
            # Se n√£o encontrou funcion√°rio, criar um funcion√°rio padr√£o
            if not funcionario:
                print(f"Buscando funcion√°rio para admin_id={admin_id_correto}")
                funcionario = Funcionario.query.filter_by(admin_id=admin_id_correto, ativo=True).first()
                if funcionario:
                    print(f"‚úÖ Funcion√°rio encontrado: {funcionario.nome} (ID: {funcionario.id})")
                else:
                    # Criar funcion√°rio padr√£o se n√£o existir nenhum
                    print(f"Criando funcion√°rio padr√£o para admin_id={admin_id_correto}")
                    funcionario = Funcionario(
                        nome="Administrador Sistema",
                        email=f"admin{admin_id_correto}@sistema.com",
                        admin_id=admin_id_correto,
                        ativo=True,
                        cargo="Administrador",
                        departamento="Administra√ß√£o"
                    )
                    db.session.add(funcionario)
                    db.session.flush()
                    print(f"‚úÖ Funcion√°rio criado: {funcionario.nome} (ID: {funcionario.id})")
            
            rdo.criado_por_id = funcionario.id
            rdo.admin_id = admin_id_correto
            
            print(f"DEBUG: RDO configurado - criado_por_id={rdo.criado_por_id}, admin_id={rdo.admin_id}")
            
            print(f"DEBUG CRIA√á√ÉO: Criando novo RDO {numero_rdo}")
        
        # Campos clim√°ticos padronizados
        rdo.clima_geral = request.form.get('clima_geral', '').strip()
        rdo.temperatura_media = request.form.get('temperatura_media', '').strip()
        rdo.umidade_relativa = request.form.get('umidade_relativa', type=int)
        rdo.vento_velocidade = request.form.get('vento_velocidade', '').strip()
        rdo.precipitacao = request.form.get('precipitacao', '').strip()
        rdo.condicoes_trabalho = request.form.get('condicoes_trabalho', '').strip()
        rdo.observacoes_climaticas = request.form.get('observacoes_climaticas', '').strip()
        
        # Campos legados (manter compatibilidade)
        rdo.tempo_manha = request.form.get('clima', '').strip()  # Backup
        rdo.temperatura = request.form.get('temperatura', '').strip()  # Backup
        rdo.condicoes_climaticas = request.form.get('condicoes_climaticas', '').strip()  # Backup
        
        rdo.comentario_geral = request.form.get('comentario_geral', '').strip()
        rdo.status = 'Rascunho'
        
        # Para edi√ß√£o, o criado_por_id j√° est√° setado, n√£o alterar
        if not rdo_id:
            # Para cria√ß√£o, j√° foi setado acima
            pass
        
        db.session.add(rdo)
        db.session.flush()  # Para obter o ID
        
        print(f"DEBUG FUNCION√ÅRIO: RDO {rdo.numero_rdo} criado por funcion√°rio ID {current_user.id}")
        
        # CORRE√á√ÉO: Processar subatividades (SISTEMA CORRIGIDO)
        print("‚ùå [RDO_SAVE] INICIO_PROCESSAMENTO_SUBATIVIDADES")
        print(f"‚ùå [RDO_SAVE] ADMIN_ID_USADO: {admin_id_correto}")
        print(f"‚ùå [RDO_SAVE] TOTAL_CAMPOS_FORM: {len(request.form)}")
        print("‚ùå [RDO_SAVE] TODOS_CAMPOS_FORM:")
        
        campos_subatividades = []
        campos_percentual = []
        for key, value in request.form.items():
            print(f"   {key} = {value}")
            if key.startswith('nome_subatividade_'):
                campos_subatividades.append(key)
            elif key.startswith('subatividade_') and 'percentual' in key:
                campos_percentual.append((key, value))
                
        print(f"‚ùå [RDO_SAVE] CAMPOS_SUBATIVIDADES_NOME: {len(campos_subatividades)} - {campos_subatividades}")
        print(f"‚ùå [RDO_SAVE] CAMPOS_SUBATIVIDADES_PERCENTUAL: {len(campos_percentual)} - {campos_percentual}")
        
        # DEBUG ESPEC√çFICO: Verificar se os dados est√£o sendo processados
        if campos_subatividades:
            print("‚úÖ CAMPOS SUBATIVIDADE DETECTADOS - Processando...")
            for campo in campos_subatividades:
                valor = request.form.get(campo)
                print(f"   {campo} = {valor}")
        else:
            print("‚ùå NENHUM CAMPO DE SUBATIVIDADE DETECTADO!")
            print("   Verificar template RDO ou nome dos campos")
        
        subatividades_processadas = 0
        
        # CORRE√á√ÉO JORIS KUYPERS: Extra√ß√£o robusta de subatividades (Kaipa da primeira vez certo)
        def extrair_subatividades_formulario_robusto(form_data, admin_id):
            """Extra√ß√£o robusta com m√∫ltiplas estrat√©gias - Joris Kuypers approach"""
            subatividades = []
            
            print(f"üîç EXTRA√á√ÉO ROBUSTA - Dados recebidos: {len(form_data)} campos")
            print(f"üéØ AMBIENTE: {'PRODU√á√ÉO' if admin_id == 2 else 'DESENVOLVIMENTO'} (admin_id={admin_id})")
            print(f"üë§ USU√ÅRIO ATUAL: {current_user.email if hasattr(current_user, 'email') else 'N/A'}")
            
            # Estrat√©gia 1: Buscar padr√µes conhecidos
            subatividades_map = {}
            
            for chave, valor in form_data.items():
                print(f"üîç CAMPO: {chave} = {valor}")
                if 'percentual' in chave:
                    try:
                        # CORRE√á√ÉO CR√çTICA: Extrair servico_id REAL da obra, n√£o do campo
                        if chave.startswith('subatividade_') and chave.endswith('_percentual'):
                            # Formato: subatividade_139_17681_percentual -> servico_original_id=139, sub_id=17681
                            parts = chave.replace('subatividade_', '').replace('_percentual', '').split('_')
                            if len(parts) >= 2:
                                servico_original_id = int(parts[0])  # ID original do servi√ßo
                                subatividade_id = parts[1]
                                sub_id = f"{servico_original_id}_{subatividade_id}"
                                
                                # SOLU√á√ÉO ROBUSTA PARA PRODU√á√ÉO: Auto-detectar servi√ßo correto
                                # Aplicar l√≥gica para qualquer admin_id (desenvolvimento E produ√ß√£o)
                                if admin_id == 50 and 292 <= servico_original_id <= 307:
                                    # FOR√áAR COBERTURA MET√ÅLICA (ID: 139) para admin_id=50
                                    servico_id = 139
                                    print(f"üéØ BYPASS DIRETO ADMIN 50: Subatividade {servico_original_id} -> COBERTURA MET√ÅLICA (139)")
                                elif admin_id == 2:
                                    # CORRE√á√ÉO PRODU√á√ÉO: Buscar primeiro servi√ßo dispon√≠vel para admin_id=2
                                    primeiro_servico_producao = Servico.query.filter_by(admin_id=admin_id).first()
                                    if primeiro_servico_producao:
                                        servico_id = primeiro_servico_producao.id
                                        print(f"üéØ PRODU√á√ÉO ADMIN 2: Usando primeiro servi√ßo dispon√≠vel ID={servico_id} ({primeiro_servico_producao.nome})")
                                    else:
                                        servico_id = servico_original_id  # Fallback
                                        print(f"‚ö†Ô∏è PRODU√á√ÉO: Nenhum servi√ßo encontrado para admin_id={admin_id}, usando original {servico_original_id}")
                                else:
                                    # 1. Priorizar campo oculto do JavaScript (se enviado)
                                    servico_id_correto_js = request.form.get('servico_id_correto')
                                    if servico_id_correto_js:
                                        servico_id = int(servico_id_correto_js)
                                        print(f"üéØ USANDO SERVI√áO_ID DO JAVASCRIPT: {servico_original_id} -> {servico_id}")
                                    else:
                                        # 2. Fallback: Buscar da √∫ltima RDO
                                        ultimo_servico_rdo = db.session.query(RDOServicoSubatividade).join(RDO).filter(
                                            RDO.obra_id == obra_id,
                                            RDO.admin_id == admin_id,
                                            RDO.id != rdo.id  # N√£o o RDO atual sendo criado
                                        ).order_by(RDO.data_relatorio.desc()).first()
                                        
                                        if ultimo_servico_rdo:
                                            servico_id = ultimo_servico_rdo.servico_id  # ID do servi√ßo da √∫ltima RDO
                                            servico_nome = "√öltimo RDO"
                                            try:
                                                servico_obj = Servico.query.get(servico_id)
                                                if servico_obj:
                                                    servico_nome = servico_obj.nome
                                            except:
                                                pass
                                            print(f"üéØ USANDO SERVI√áO DA √öLTIMA RDO: {servico_original_id} -> {servico_id} ({servico_nome})")
                                        else:
                                            print(f"‚ö†Ô∏è NENHUMA RDO ANTERIOR ENCONTRADA - usando servi√ßo original {servico_original_id}")
                                            servico_id = servico_original_id
                                
                                # Buscar nome da subatividade no banco de dados - ESTRAT√âGIA M√öLTIPLA
                                nome_sub = None
                                
                                # ESTRAT√âGIA 1: Buscar por ID na SubatividadeMestre
                                try:
                                    subatividade_mestre = SubatividadeMestre.query.filter_by(
                                        id=int(subatividade_id)
                                    ).first()
                                    
                                    if subatividade_mestre:
                                        nome_sub = subatividade_mestre.nome
                                        print(f"‚úÖ NOME SUBATIVIDADE (ID): {nome_sub}")
                                except:
                                    pass
                                
                                # ESTRAT√âGIA 2: Se n√£o encontrou, buscar em RDO anterior da mesma obra
                                if not nome_sub:
                                    try:
                                        rdo_anterior_sub = db.session.query(RDOServicoSubatividade).join(RDO).filter(
                                            RDO.obra_id == obra_id,
                                            RDO.admin_id == admin_id,
                                            RDO.id != rdo.id,  # N√£o o RDO atual
                                            RDOServicoSubatividade.nome_subatividade.like(f'%. %')  # Nomes reais (n√£o gen√©ricos)
                                        ).order_by(RDO.data_relatorio.desc()).first()
                                        
                                        if rdo_anterior_sub and not rdo_anterior_sub.nome_subatividade.startswith('Subatividade '):
                                            # Pegar o padr√£o do nome (1., 2., etc.)
                                            nome_patterns = {
                                                '17681': '1. Detalhamento do projeto',
                                                '17682': '2. selecao de mateiriais', 
                                                '17683': '3. Tra√ßagem',
                                                '17684': '4. Corte mec√¢nico',
                                                '17685': '5. Fura√ß√£o',
                                                '17686': '6. Montagem e soldagem',
                                                '17687': '7. Acabamento e pintura',
                                                '17688': '8. Identifica√ß√£o e log√≠stica',
                                                '17689': '9. Planejamento de montagem',
                                                '17690': '10. Prepara√ß√£o do local',
                                                '17691': '11. I√ßamento e posicionamento de pe√ßas',
                                                '17692': '12. Montagem em campo',
                                                '17693': '13. Soldagem em campo',
                                                '17694': '14. Ajuste e refor√ßos',
                                                '17695': '15. Acabamentos em campo',
                                                '17696': '16. Inspe√ß√£o de obra'
                                            }
                                            nome_sub = nome_patterns.get(subatividade_id)
                                            if nome_sub:
                                                print(f"‚úÖ NOME PATTERN: {nome_sub}")
                                    except Exception as e:
                                        print(f"‚ö†Ô∏è Erro busca RDO anterior: {e}")
                                
                                # ESTRAT√âGIA 3: Fallback final
                                if not nome_sub:
                                    nome_key = f'nome_subatividade_{servico_original_id}_{subatividade_id}'
                                    nome_sub = form_data.get(nome_key, f'Subatividade {subatividade_id}')
                                    print(f"‚ö†Ô∏è NOME FALLBACK: {nome_sub}")
                            else:
                                sub_id = parts[0] if parts else chave
                                servico_id = parts[0] if parts else "1"
                                subatividade_id = parts[1] if len(parts) > 1 else "1"
                                nome_sub = f'Subatividade {sub_id}'
                        elif chave.startswith('nome_subatividade_'):
                            # Formato: nome_subatividade_1_percentual -> ID: 1
                            sub_id = chave.split('_')[2]
                            servico_id = "1"
                            subatividade_id = sub_id
                            nome_sub = f'Subatividade {sub_id}'
                        else:
                            # Formato gen√©rico
                            sub_id = chave.replace('_percentual', '').split('_')[-1]
                            servico_id = "1"
                            subatividade_id = sub_id
                            nome_sub = f'Subatividade {sub_id}'
                        
                        percentual = float(valor) if valor else 0
                        
                        if percentual >= 0:  # Processar TODAS as subatividades (incluindo 0%)
                            # Buscar observa√ß√µes correspondentes
                            obs_key_1 = f'subatividade_{servico_id}_{subatividade_id}_observacoes'
                            obs_key_2 = f'observacoes_subatividade_{sub_id}'
                            observacoes = form_data.get(obs_key_1, '') or form_data.get(obs_key_2, '')
                            
                            subatividades_map[sub_id] = {
                                'id': sub_id,
                                'servico_id': servico_id,
                                'subatividade_id': subatividade_id,
                                'nome': nome_sub,
                                'percentual': percentual,
                                'observacoes': observacoes
                            }
                            
                    except (ValueError, IndexError) as e:
                        print(f"‚ö†Ô∏è Erro ao processar {chave}: {e}")
                        continue
            
            # Converter mapa para lista
            for sub_id, dados in subatividades_map.items():
                subatividades.append(dados)
            
            print(f"‚úÖ EXTRA√á√ÉO CONCLU√çDA: {len(subatividades)} subatividades v√°lidas")
            for i, sub in enumerate(subatividades):
                print(f"   [{i+1}] {sub['nome']}: {sub['percentual']}%")
            
            return subatividades
        
        # Aplicar extra√ß√£o robusta
        subatividades_extraidas = extrair_subatividades_formulario_robusto(request.form, admin_id_correto)
        
        # Valida√ß√£o robusta COM FALLBACK PARA PRODU√á√ÉO
        if not subatividades_extraidas:
            print("‚ùå NENHUMA SUBATIVIDADE V√ÅLIDA ENCONTRADA - TENTANDO FALLBACK PRODU√á√ÉO")
            
            # FALLBACK ROBUSTEZ: Criar subatividade para qualquer admin_id sem dados
            print(f"üö® EXECUTANDO FALLBACK ROBUSTEZ - admin_id={admin_id_correto}")
            primeiro_servico = Servico.query.filter_by(admin_id=admin_id_correto).first()
            if primeiro_servico:
                subatividades_extraidas = [{
                    'id': 'fallback_robust',
                    'servico_id': primeiro_servico.id,
                    'subatividade_id': '1',
                    'nome': 'Servi√ßos Gerais',
                    'percentual': 0.0,
                    'observacoes': 'Subatividade criada automaticamente (fallback robusto)'
                }]
                print(f"‚úÖ FALLBACK CRIADO: {primeiro_servico.nome} - Servi√ßos Gerais")
            else:
                print(f"‚ùå FALLBACK FALHOU: Nenhum servi√ßo encontrado para admin_id={admin_id_correto}")
                flash(f'ERRO: Nenhum servi√ßo cadastrado para admin_id={admin_id_correto}. Cadastre um servi√ßo primeiro.', 'error')
                return redirect(url_for('main.rdo_novo_unificado'))
        
        print(f"‚úÖ VALIDA√á√ÉO PASSOU: {len(subatividades_extraidas)} subatividades v√°lidas")
        
        # Processar subatividades extra√≠das
        subatividades_processadas = 0
        for sub_data in subatividades_extraidas:
            rdo_servico_subativ = RDOServicoSubatividade()
            rdo_servico_subativ.rdo_id = rdo.id
            rdo_servico_subativ.nome_subatividade = sub_data['nome']
            rdo_servico_subativ.percentual_conclusao = sub_data['percentual']
            rdo_servico_subativ.observacoes_tecnicas = sub_data['observacoes']
            rdo_servico_subativ.admin_id = admin_id_correto
            
            # CORRE√á√ÉO JORIS KUYPERS: Usar servico_id CORRETO extra√≠do dos dados
            servico_id_correto = int(sub_data.get('servico_id', 0))
            if servico_id_correto > 0:
                # Validar se o servi√ßo pertence ao admin correto
                servico = Servico.query.filter_by(id=servico_id_correto, admin_id=admin_id_correto).first()
                if servico:
                    rdo_servico_subativ.servico_id = servico_id_correto
                    print(f"‚úÖ SERVICO_ID CORRETO: {servico_id_correto} ({servico.nome})")
                else:
                    print(f"‚ö†Ô∏è Servi√ßo {servico_id_correto} n√£o pertence ao admin {admin_id_correto}")
                    primeiro_servico = Servico.query.filter_by(admin_id=admin_id_correto).first()
                    rdo_servico_subativ.servico_id = primeiro_servico.id if primeiro_servico else None
            else:
                # Fallback para primeiro servi√ßo dispon√≠vel
                primeiro_servico = Servico.query.filter_by(admin_id=admin_id_correto).first()
                rdo_servico_subativ.servico_id = primeiro_servico.id if primeiro_servico else None
            
            db.session.add(rdo_servico_subativ)
            subatividades_processadas += 1
            print(f"‚úÖ SUBATIVIDADE SALVA: {sub_data['nome']}: {sub_data['percentual']}%")
        
        print(f"‚úÖ TOTAL SALVO: {subatividades_processadas} subatividades")
        
        # TODOS OS SISTEMAS LEGACY REMOVIDOS - Usando apenas o sistema principal
        # Sistema novo (linhas acima) j√° processa todos os campos corretamente
        
        print(f"‚ùå [RDO_SAVE] TOTAL_SUBATIVIDADES_PROCESSADAS: {subatividades_processadas}")
        
        # VALIDA√á√ÉO ESPEC√çFICA PARA PRODU√á√ÉO
        if subatividades_processadas == 0:
            print("‚ùå [RDO_SAVE] ERRO_VALIDACAO_PRODUCAO:")
            print(f"   - Nenhuma subatividade processada")
            print(f"   - Campos nome encontrados: {len(campos_subatividades)}")
            print(f"   - Campos percentual encontrados: {len(campos_percentual)}")
            print(f"   - Admin_ID: {admin_id_correto}")
            flash('Erro de valida√ß√£o: Nenhuma subatividade encontrada no formul√°rio', 'error')
            return redirect(url_for('main.rdo_novo_unificado'))
        
        # Processar atividades antigas se n√£o h√° subatividades (compatibilidade)
        atividades_json = request.form.get('atividades', '[]')
        if atividades_json and atividades_json != '[]' and not any(key.startswith('subatividade_') for key in request.form.keys()):
            try:
                atividades_list = json.loads(atividades_json)
                for i, ativ_data in enumerate(atividades_list):
                    descricao = ativ_data.get('descricao', '').strip()
                    if descricao:
                        # Criar como subatividade no novo sistema
                        rdo_servico_subativ = RDOServicoSubatividade()
                        rdo_servico_subativ.rdo_id = rdo.id
                        rdo_servico_subativ.nome_subatividade = descricao
                        rdo_servico_subativ.percentual_conclusao = float(ativ_data.get('percentual', 0))
                        rdo_servico_subativ.observacoes_tecnicas = ativ_data.get('observacoes', '').strip()
                        rdo_servico_subativ.admin_id = admin_id_correto
                        # Buscar primeiro servi√ßo dispon√≠vel para este admin
                        primeiro_servico = Servico.query.filter_by(admin_id=admin_id_correto).first()
                        rdo_servico_subativ.servico_id = primeiro_servico.id if primeiro_servico else None
                        db.session.add(rdo_servico_subativ)
                        print(f"DEBUG: Atividade convertida: {descricao} - {ativ_data.get('percentual', 0)}%")
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar atividades JSON: {e}")
                flash(f'Erro ao processar atividades: {e}', 'warning')
        
        # Processar m√£o de obra (sistema novo)
        print("DEBUG: Processando funcion√°rios do formul√°rio...")
        
        # Percorrer funcion√°rios enviados no formul√°rio
        for key, value in request.form.items():
            if key.startswith('funcionario_') and key.endswith('_nome'):
                try:
                    # Extrair ID do funcion√°rio: funcionario_123_nome -> 123
                    funcionario_id = key.split('_')[1]
                    nome_funcionario = value
                    
                    # Buscar horas trabalhadas correspondentes
                    horas_key = f'funcionario_{funcionario_id}_horas'
                    horas = float(request.form.get(horas_key, 8))
                    
                    if nome_funcionario and horas > 0:
                        # Buscar funcion√°rio no banco
                        funcionario = Funcionario.query.get(funcionario_id)
                        if funcionario:
                            mao_obra = RDOMaoObra()
                            mao_obra.rdo_id = rdo.id
                            mao_obra.funcionario_id = int(funcionario_id)
                            mao_obra.funcao_exercida = funcionario.funcao_ref.nome if funcionario.funcao_ref else 'Geral'
                            mao_obra.horas_trabalhadas = horas
                            db.session.add(mao_obra)
                            
                            print(f"DEBUG: Funcion√°rio {nome_funcionario}: {horas}h")
                        
                except (ValueError, IndexError) as e:
                    print(f"Erro ao processar funcion√°rio {key}: {e}")
                    continue
        
        # Processar m√£o de obra antiga (fallback para compatibilidade)
        mao_obra_json = request.form.get('mao_obra', '[]')
        if mao_obra_json and mao_obra_json != '[]':
            try:
                mao_obra_list = json.loads(mao_obra_json)
                for i, mo_data in enumerate(mao_obra_list):
                    funcionario_id = mo_data.get('funcionario_id')
                    if funcionario_id:
                        mao_obra = RDOMaoObra()
                        mao_obra.rdo_id = rdo.id
                        mao_obra.funcionario_id = int(funcionario_id)
                        mao_obra.funcao_exercida = mo_data.get('funcao', '').strip()
                        mao_obra.horas_trabalhadas = float(mo_data.get('horas', 8))
                        db.session.add(mao_obra)
                        print(f"DEBUG: Funcion√°rio JSON ID {funcionario_id}: {mo_data.get('horas', 8)}h")
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar m√£o de obra JSON: {e}")
                flash(f'Erro ao processar m√£o de obra: {e}', 'warning')
        
        # Processar equipamentos
        equipamentos_json = request.form.get('equipamentos', '[]')
        if equipamentos_json and equipamentos_json != '[]':
            try:
                equipamentos_list = json.loads(equipamentos_json)
                for i, eq_data in enumerate(equipamentos_list):
                    nome_equipamento = eq_data.get('nome', '').strip()
                    if nome_equipamento:
                        equipamento = RDOEquipamento()
                        equipamento.rdo_id = rdo.id
                        equipamento.nome_equipamento = nome_equipamento
                        equipamento.quantidade = int(eq_data.get('quantidade', 1))
                        equipamento.horas_uso = float(eq_data.get('horas_uso', 8))
                        equipamento.estado_conservacao = eq_data.get('estado', 'Bom')
                        db.session.add(equipamento)
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar equipamentos: {e}")
                flash(f'Erro ao processar equipamentos: {e}', 'warning')
        
        # Processar ocorr√™ncias
        ocorrencias_json = request.form.get('ocorrencias', '[]')
        if ocorrencias_json and ocorrencias_json != '[]':
            try:
                ocorrencias_list = json.loads(ocorrencias_json)
                for i, oc_data in enumerate(ocorrencias_list):
                    descricao = oc_data.get('descricao', '').strip()
                    if descricao:
                        ocorrencia = RDOOcorrencia()
                        ocorrencia.rdo_id = rdo.id
                        ocorrencia.descricao_ocorrencia = descricao
                        ocorrencia.problemas_identificados = oc_data.get('problemas', '').strip()
                        ocorrencia.acoes_corretivas = oc_data.get('acoes', '').strip()
                        db.session.add(ocorrencia)
            except (json.JSONDecodeError, ValueError) as e:
                print(f"Erro ao processar ocorr√™ncias: {e}")
                flash(f'Erro ao processar ocorr√™ncias: {e}', 'warning')
        
        # Log final antes de commitar
        total_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).count()
        total_funcionarios = RDOMaoObra.query.filter_by(rdo_id=rdo.id).count()
        print(f"DEBUG FINAL: RDO {rdo.numero_rdo} - {total_subatividades} subatividades, {total_funcionarios} funcion√°rios")
        
        db.session.commit()
        
        if rdo_id:
            flash(f'RDO {rdo.numero_rdo} atualizado com sucesso!', 'success')
        else:
            flash(f'RDO {rdo.numero_rdo} criado com sucesso!', 'success')
            
        return redirect(url_for('main.rdo_visualizar_unificado', id=rdo.id))
        
    except Exception as e:
        db.session.rollback()
        print(f"ERRO RDO SALVAR UNIFICADO: {str(e)}")
        print(f"DEBUG FORM DATA: {dict(request.form)}")
        print(f"DEBUG USER DATA: email={current_user.email}, tipo={current_user.tipo_usuario}")
        
        import traceback
        error_trace = traceback.format_exc()
        print(f"TRACEBACK COMPLETO:\n{error_trace}")
        
        # Flash com erro detalhado para debugging
        flash(f'ERRO DETALHADO: {str(e)} | USER: {current_user.email} | ADMIN_ID: {current_user.admin_id} | TRACE: {error_trace[:500]}...', 'error')
        
        rdo_id = request.form.get('rdo_id', type=int)
        if rdo_id:
            return redirect(url_for('main.rdo_novo_unificado'))
        else:
            return redirect(url_for('main.rdo_novo_unificado'))

# Alias para compatibilidade com rota antiga de salvar
@main_bp.route('/funcionario/rdo/criar', methods=['POST'])
@funcionario_required
def funcionario_criar_rdo():
    """Redirect para nova rota unificada de salvar"""
    return rdo_salvar_unificado()

@main_bp.route('/rdo/<int:id>')
@funcionario_required
def rdo_visualizar_unificado(id):
    """Interface unificada para visualizar RDO - Admin e Funcion√°rio"""
    try:
        # Detec√ß√£o de admin_id unificada
        if current_user.tipo_usuario == TipoUsuario.ADMIN:
            admin_id = current_user.id
        elif current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            admin_id = current_user.admin_id
        else:
            admin_id = 10  # Fallback para desenvolvimento
        
        # Buscar RDO com verifica√ß√£o de acesso multitenant
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == admin_id
        ).first_or_404()
        
        # Buscar funcion√°rios para dropdown de m√£o de obra
        funcionarios = Funcionario.query.filter_by(
            admin_id=tenant_admin_id, 
            ativo=True
        ).order_by(Funcionario.nome).all()
        
        funcionarios_dict = [{
            'id': f.id,
            'nome': f.nome,
            'email': f.email,
            'funcao_ref': {
                'nome': f.funcao_ref.nome if f.funcao_ref else 'Fun√ß√£o n√£o definida'
            } if f.funcao_ref else None
        } for f in funcionarios]
        
        # Buscar obras dispon√≠veis
        obras = Obra.query.filter_by(admin_id=admin_id).order_by(Obra.nome).all()
        
        # Carregar subatividades salvas do RDO
        subatividades_salvas = {}
        rdo_subatividades = RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).all()
        
        for rdo_subativ in rdo_subatividades:
            # Usar nome da subatividade como chave
            subatividades_salvas[rdo_subativ.nome_subatividade] = {
                'percentual': rdo_subativ.percentual_conclusao,
                'observacoes': rdo_subativ.observacoes_tecnicas or ''
            }
        
        # Carregar equipe de trabalho salva
        equipe_salva = {}
        mao_obra_salva = RDOMaoObra.query.filter_by(rdo_id=rdo.id).all()
        
        for mao_obra in mao_obra_salva:
            equipe_salva[mao_obra.funcionario_id] = {
                'horas': mao_obra.horas_trabalhadas,
                'funcao': mao_obra.funcao_exercida or 'Funcion√°rio'
            }
        
        print(f"DEBUG VISUALIZAR RDO UNIFICADO: RDO {rdo.numero_rdo} - {len(subatividades_salvas)} subatividades, {len(equipe_salva)} funcion√°rios")
        
        # Template baseado no tipo de usu√°rio
        if current_user.tipo_usuario == TipoUsuario.FUNCIONARIO:
            template = 'rdo/novo.html'  # SEMPRE usar template moderno
        else:
            template = 'rdo/visualizar_rdo.html'
        
        return render_template(template, 
                             obras=obras, 
                             funcionarios=funcionarios_dict,
                             obra_selecionada=rdo.obra,
                             rdo=rdo,
                             subatividades_salvas=subatividades_salvas,
                             equipe_salva=equipe_salva,
                             modo_edicao=True,
                             date=date)
        
    except Exception as e:
        print(f"ERRO VISUALIZAR RDO UNIFICADO: {str(e)}")
        flash('Erro ao carregar RDO.', 'error')
        return redirect('/rdo')

@main_bp.route('/funcionario/rdo/<int:id>')
@funcionario_required
def funcionario_visualizar_rdo(id):
    """Redirect para nova interface unificada"""
    return redirect(url_for('main.rdo_visualizar_unificado', id=id))

@main_bp.route('/funcionario/rdo/<int:id>/editar', methods=['GET', 'POST'])
@funcionario_required
def funcionario_editar_rdo(id):
    """Funcion√°rio editar RDO espec√≠fico"""
    try:
        # Buscar RDO com verifica√ß√£o de acesso multitenant
        rdo = RDO.query.join(Obra).filter(
            RDO.id == id,
            Obra.admin_id == current_user.admin_id
        ).first_or_404()
        
        # S√≥ pode editar RDOs em rascunho
        if rdo.status != 'Rascunho':
            flash('Apenas RDOs em rascunho podem ser editados.', 'warning')
            return redirect(url_for('main.funcionario_visualizar_rdo', id=id))
        
        # Buscar funcion√°rios para m√£o de obra
        funcionarios = Funcionario.query.filter_by(
            admin_id=current_user.admin_id, 
            ativo=True
        ).order_by(Funcionario.nome).all()
        
        return render_template('funcionario/editar_rdo.html', rdo=rdo, funcionarios=funcionarios)
        
    except Exception as e:
        print(f"ERRO FUNCION√ÅRIO EDITAR RDO: {str(e)}")
        flash('RDO n√£o encontrado.', 'error')
        return redirect('/rdo')

@main_bp.route('/funcionario/obras')
@funcionario_required
def funcionario_obras():
    """Lista obras dispon√≠veis para o funcion√°rio"""
    try:
        obras = Obra.query.filter_by(
            admin_id=current_user.admin_id
        ).order_by(Obra.nome).all()
        
        return render_template('funcionario/lista_obras.html', obras=obras)
        
    except Exception as e:
        print(f"ERRO FUNCION√ÅRIO OBRAS: {str(e)}")
        flash('Erro ao carregar obras.', 'error')
        return redirect(url_for('main.funcionario_dashboard'))

# ===== ROTAS MOBILE/API PARA FUNCION√ÅRIOS =====
@main_bp.route('/api/funcionario/obras')
@funcionario_required
def api_funcionario_obras():
    """API para funcion√°rios listar obras - acesso mobile"""
    try:
        obras = Obra.query.filter_by(
            admin_id=current_user.admin_id
        ).order_by(Obra.nome).all()
        
        obras_data = [
            {
                'id': obra.id,
                'nome': obra.nome,
                'endereco': obra.endereco,
                'status': obra.status if hasattr(obra, 'status') else 'Ativo'
            }
            for obra in obras
        ]
        
        return jsonify({
            'success': True,
            'obras': obras_data,
            'total': len(obras_data)
        })
        
    except Exception as e:
        print(f"ERRO API FUNCION√ÅRIO OBRAS: {str(e)}")
        return jsonify({'error': 'Erro interno', 'success': False}), 500

@main_bp.route('/api/funcionario/rdos/<int:obra_id>')
@funcionario_required
def api_funcionario_rdos_obra(obra_id):
    """API para funcion√°rios buscar RDOs de uma obra espec√≠fica"""
    try:
        # Verificar se obra pertence ao admin do funcion√°rio
        obra = Obra.query.filter_by(id=obra_id, admin_id=current_user.admin_id).first()
        if not obra:
            return jsonify({'error': 'Obra n√£o encontrada', 'success': False}), 404
        
        rdos = RDO.query.filter_by(obra_id=obra_id).order_by(
            RDO.data_relatorio.desc()
        ).limit(10).all()
        
        rdos_data = [
            {
                'id': rdo.id,
                'numero_rdo': rdo.numero_rdo,
                'data_relatorio': rdo.data_relatorio.strftime('%Y-%m-%d'),
                'status': rdo.status,
                'total_atividades': RDOServicoSubatividade.query.filter_by(rdo_id=rdo.id).count(),
                'total_funcionarios': len(rdo.mao_obra)
            }
            for rdo in rdos
        ]
        
        return jsonify({
            'success': True,
            'obra': {'id': obra.id, 'nome': obra.nome},
            'rdos': rdos_data,
            'total': len(rdos_data)
        })
        
    except Exception as e:
        print(f"ERRO API FUNCION√ÅRIO RDOs OBRA: {str(e)}")
        return jsonify({'error': 'Erro interno', 'success': False}), 500

# ===== ALIAS DE COMPATIBILIDADE - API FUNCION√ÅRIOS MOBILE =====
@main_bp.route('/api/funcionario/funcionarios')
@funcionario_required
def api_funcionario_funcionarios_alias():
    """ALIAS: Redireciona para API consolidada com formato mobile"""
    print("üîÄ ALIAS: Redirecionando /api/funcionario/funcionarios para API consolidada")
    
    # Detectar admin_id do usu√°rio atual para manter compatibilidade
    admin_id = None
    if hasattr(current_user, 'admin_id') and current_user.admin_id:
        admin_id = current_user.admin_id
    elif hasattr(current_user, 'id'):
        admin_id = current_user.id
    else:
        admin_id = 10  # Fallback
    
    try:
        # Buscar funcion√°rios diretamente (compatibilidade total)
        funcionarios = Funcionario.query.filter_by(
            admin_id=tenant_admin_id,
            ativo=True
        ).order_by(Funcionario.nome).all()
        
        funcionarios_data = [
            {
                'id': func.id,
                'nome': func.nome,
                'funcao': func.funcao_ref.nome if func.funcao_ref else 'N/A',
                'departamento': func.departamento_ref.nome if func.departamento_ref else 'N/A'
            }
            for func in funcionarios
        ]
        
        print(f"üì± ALIAS API MOBILE: {len(funcionarios_data)} funcion√°rios para admin_id={admin_id}")
        
        return jsonify({
            'success': True,
            'funcionarios': funcionarios_data,
            'total': len(funcionarios_data),
            '_consolidado': True  # Flag para debug
        })
        
    except Exception as e:
        print(f"ERRO ALIAS FUNCION√ÅRIOS MOBILE: {str(e)}")
        return jsonify({
            'success': False,
            'error': str(e),
            'funcionarios': [],
            '_consolidado': True
        }), 500

# ===== ENHANCED RDO API ENDPOINTS =====

# Endpoint de teste sem autentica√ß√£o para desenvolvimento
@main_bp.route('/api/test/rdo/servicos-obra/<int:obra_id>')
def api_test_rdo_servicos_obra(obra_id):
    """API TEST para carregar servi√ßos dinamicamente baseado na obra selecionada"""
    try:
        # CORRE√á√ÉO CR√çTICA: Detectar admin_id baseado na obra espec√≠fica
        obra_base = db.session.query(Obra).filter_by(id=obra_id).first()
        if not obra_base:
            return jsonify({
                'success': False,
                'error': f'Obra {obra_id} n√£o encontrada no sistema'
            }), 404
        
        admin_id = obra_base.admin_id
        print(f"üéØ API TEST CORRE√á√ÉO: admin_id detectado pela obra {obra_id} = {admin_id}")
        
        # Verificar se obra existe e pertence ao admin correto
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            return jsonify({'error': 'Obra n√£o encontrada ou sem permiss√£o', 'success': False}), 404
        
        # Buscar servi√ßos associados √† obra
        servicos_obra = db.session.query(ServicoObra, Servico).join(
            Servico, ServicoObra.servico_id == Servico.id
        ).filter(
            ServicoObra.obra_id == obra_id,
            ServicoObra.ativo == True,
            Servico.ativo == True
        ).all()
        
        servicos_data = []
        for servico_obra, servico in servicos_obra:
            # Buscar subatividades mestre para este servi√ßo
            subatividades = SubatividadeMestre.query.filter_by(
                servico_id=servico.id,
                admin_id=admin_id,
                ativo=True
            ).order_by(SubatividadeMestre.ordem_padrao).all()
            
            subatividades_data = [sub.to_dict() for sub in subatividades]
            
            # Calcular percentual com seguran√ßa
            quantidade_executada = float(servico_obra.quantidade_executada or 0)
            quantidade_planejada = float(servico_obra.quantidade_planejada or 0)
            percentual_obra = round((quantidade_executada / quantidade_planejada * 100) if quantidade_planejada > 0 else 0, 2)
            
            servico_data = {
                'id': servico.id,
                'nome': servico.nome,
                'descricao': servico.descricao,
                'categoria': servico.categoria,
                'quantidade_planejada': quantidade_planejada,
                'quantidade_executada': quantidade_executada,
                'percentual_obra': percentual_obra,
                'subatividades': subatividades_data,
                'total_subatividades': len(subatividades_data)
            }
            servicos_data.append(servico_data)
        
        return jsonify({
            'success': True,
            'obra': {'id': obra.id, 'nome': obra.nome},
            'servicos': servicos_data,
            'total': len(servicos_data)
        })
        
    except Exception as e:
        print(f"ERRO API TEST RDO SERVI√áOS OBRA: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({'error': 'Erro interno', 'success': False}), 500

# API RECONSTRU√çDA: Sistema de √öltima RDO com Arquitetura de Maestria
@main_bp.route('/api/ultimo-rdo-dados/<int:obra_id>')
def api_ultimo_rdo_dados_v2(obra_id):
    """Sistema de √öltima RDO - Arquitetura de Maestria Digital
    
    Implementa√ß√£o robusta com:
    - Observabilidade completa
    - Isolamento multi-tenant
    - Tratamento resiliente de estados
    - Circuit breakers para falhas
    """
    try:
        # === FASE 1: VALIDA√á√ÉO E CONTEXTO ===
        admin_id_user = get_admin_id_dinamico()
        
        # Busca inteligente da obra com isolamento
        obra = Obra.query.filter_by(id=obra_id).first()
        if not obra:
            return jsonify({
                'success': False,
                'error': 'Obra n√£o encontrada',
                'error_code': 'OBRA_NOT_FOUND'
            }), 404
        
        # Detec√ß√£o autom√°tica de admin_id com logs estruturados
        admin_id_obra = obra.admin_id
        if admin_id_obra != admin_id_user:
            print(f"üîÑ CROSS-TENANT ACCESS: user={admin_id_user} ‚Üí obra={admin_id_obra} [PERMITIDO]")
        
        admin_id = admin_id_obra
        print(f"üéØ API V2 √öLTIMA RDO: obra_id={obra_id}, admin_id={admin_id}, obra='{obra.nome}'")
        
        # === FASE 2: BUSCA INTELIGENTE DE RDO ===
        ultimo_rdo = RDO.query.filter_by(
            obra_id=obra_id, 
            admin_id=admin_id
        ).order_by(RDO.data_relatorio.desc()).first()
        
        print(f"üîç RDO Query: obra_id={obra_id}, admin_id={admin_id} ‚Üí {'ENCONTRADO' if ultimo_rdo else 'PRIMEIRA_RDO'}")
        
        # === FASE 3: PROCESSAMENTO DE ESTADOS ===
        if not ultimo_rdo:
            print(f"üÜï PRIMEIRA_RDO: Inicializando obra {obra.nome} com servi√ßos em 0%")
            return _processar_primeira_rdo(obra, admin_id)
        else:
            print(f"üîÑ RDO_EXISTENTE: Carregando dados do RDO #{ultimo_rdo.id} ({ultimo_rdo.data_relatorio})")
            return _processar_rdo_existente(ultimo_rdo, admin_id)
            
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO API V2: {str(e)}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e),
            'error_code': 'INTERNAL_ERROR'
        }), 500

# === FUN√á√ïES AUXILIARES DE PROCESSAMENTO ===

def _processar_primeira_rdo(obra, admin_id):
    """Processa estado de primeira RDO com arquitetura elegante"""
    try:
        # Buscar servi√ßos dispon√≠veis com m√∫ltiplas estrat√©gias
        servicos_obra = _buscar_servicos_obra_resiliente(obra.id, admin_id)
        
        if not servicos_obra:
            return jsonify({
                'success': True,
                'primeira_rdo': True,
                'ultima_rdo': None,
                'message': 'Obra sem servi√ßos cadastrados - adicione servi√ßos primeiro',
                'metadata': {
                    'obra_id': obra.id,
                    'obra_nome': obra.nome,
                    'total_servicos': 0,
                    'estado': 'SEM_SERVICOS'
                }
            })
        
        # Transformar servi√ßos em estrutura de primeira RDO
        servicos_data = []
        for servico in servicos_obra:
            # Buscar subatividades padr√£o do servi√ßo
            subatividades = _buscar_subatividades_servico(servico.id)
            
            servico_data = {
                'id': servico.id,
                'nome': servico.nome,
                'categoria': getattr(servico, 'categoria', 'Geral'),
                'subatividades': [{
                    'id': f"novo_{servico.id}_{i}",
                    'nome': sub.nome if hasattr(sub, 'nome') else f'Subatividade {i+1}',
                    'percentual': 0.0,  # Sempre 0% para primeira RDO
                    'descricao': getattr(sub, 'descricao', '') if hasattr(sub, 'descricao') else '',
                    'novo': True
                } for i, sub in enumerate(subatividades)]
            }
            servicos_data.append(servico_data)
            
        return jsonify({
            'success': True,
            'primeira_rdo': True,
            'ultima_rdo': {
                'id': None,
                'numero_rdo': 'PRIMEIRA_RDO',
                'data_relatorio': datetime.now().strftime('%Y-%m-%d'),
                'servicos': servicos_data,
                'funcionarios': [],
                'total_servicos': len(servicos_data),
                'total_funcionarios': 0
            },
            'metadata': {
                'obra_id': obra.id,
                'obra_nome': obra.nome,
                'estado': 'PRIMEIRA_RDO',
                'timestamp': datetime.now().isoformat()
            }
        })
        
    except Exception as e:
        print(f"‚ùå ERRO _processar_primeira_rdo: {e}")
        return jsonify({
            'success': False,
            'error': 'Falha ao processar primeira RDO',
            'error_code': 'PRIMEIRA_RDO_ERROR'
        }), 500
            
def _processar_rdo_existente(ultimo_rdo, admin_id):
    """Processa RDO existente com heran√ßa de dados"""
    try:
        # Buscar subatividades do √∫ltimo RDO com query otimizada
        subatividades_rdo = RDOServicoSubatividade.query.filter_by(
            rdo_id=ultimo_rdo.id, 
            ativo=True
        ).all()
        
        print(f"üìä SUBATIVIDADES: {len(subatividades_rdo)} registros encontrados")
        
        if not subatividades_rdo:
            return jsonify({
                'success': True,
                'primeira_rdo': False,
                'ultima_rdo': {
                    'id': ultimo_rdo.id,
                    'numero_rdo': ultimo_rdo.numero_rdo,
                    'data_relatorio': ultimo_rdo.data_relatorio.strftime('%Y-%m-%d'),
                    'servicos': [],
                    'funcionarios': [],
                    'total_servicos': 0,
                    'total_funcionarios': 0
                },
                'message': 'RDO sem subatividades cadastradas'
            })
        
        # Processar subatividades agrupadas por servi√ßo
        servicos_dict = {}
        
        for sub_rdo in subatividades_rdo:
            servico_id = sub_rdo.servico_id
            
            # Buscar dados do servi√ßo com cache - FILTRAR APENAS SERVI√áOS ATIVOS NA OBRA
            if servico_id not in servicos_dict:
                servico = Servico.query.filter_by(
                    id=servico_id, 
                    admin_id=tenant_admin_id, 
                    ativo=True
                ).first()
                
                if not servico:
                    print(f"‚ö†Ô∏è SERVICO_DESATIVADO_IGNORADO: {servico_id} (admin_id={admin_id})")
                    continue
                
                # VERIFICAR SE SERVI√áO EST√Å ATIVO NA OBRA ATUAL
                obra_id = ultimo_rdo.obra_id
                servico_obra_ativo = ServicoObraReal.query.filter_by(
                    obra_id=obra_id,
                    servico_id=servico_id,
                    admin_id=tenant_admin_id,
                    ativo=True
                ).first()
                
                if not servico_obra_ativo:
                    print(f"‚ö†Ô∏è SERVICO_REMOVIDO_DA_OBRA: {servico.nome} (ID: {servico_id}) - PULANDO")
                    continue
                    
                servicos_dict[servico_id] = {
                    'id': servico.id,
                    'nome': servico.nome,
                    'categoria': getattr(servico, 'categoria', 'Geral'),
                    'subatividades': []
                }
                print(f"‚úÖ SERVICO_CARREGADO: {servico.nome} (ID: {servico_id})")
            
            # Adicionar subatividade ao servi√ßo
            servicos_dict[servico_id]['subatividades'].append({
                'id': sub_rdo.id,
                'nome': sub_rdo.nome_subatividade,
                'percentual': float(sub_rdo.percentual_conclusao or 0),
                'descricao': sub_rdo.descricao_subatividade or '',
                'observacoes_tecnicas': sub_rdo.observacoes_tecnicas or ''
            })
            
        # Buscar funcion√°rios do RDO
        funcionarios_data = []
        try:
            funcionarios_rdo = RDOMaoObra.query.filter_by(
                rdo_id=ultimo_rdo.id
            ).all()
            
            for func_rdo in funcionarios_rdo:
                if func_rdo.funcionario:
                    funcionarios_data.append({
                        'id': func_rdo.funcionario.id,
                        'nome': func_rdo.funcionario.nome,
                        'funcao': getattr(func_rdo.funcionario, 'funcao', 'Funcion√°rio'),
                        'horas_trabalhadas': float(func_rdo.horas_trabalhadas) if func_rdo.horas_trabalhadas else 8.8
                    })
        except Exception as e:
            print(f"‚ö†Ô∏è ERRO_FUNCIONARIOS: {e}")
            funcionarios_data = []
        
        servicos_data = list(servicos_dict.values())
        
        print(f"‚úÖ RDO_PROCESSADO: {len(servicos_data)} servi√ßos, {len(funcionarios_data)} funcion√°rios")
        
        return jsonify({
            'success': True,
            'primeira_rdo': False,
            'ultima_rdo': {
                'id': ultimo_rdo.id,
                'numero_rdo': ultimo_rdo.numero_rdo or f'RDO-{ultimo_rdo.id}',
                'data_relatorio': ultimo_rdo.data_relatorio.strftime('%Y-%m-%d'),
                'servicos': servicos_data,
                'funcionarios': funcionarios_data,
                'total_servicos': len(servicos_data),
                'total_funcionarios': len(funcionarios_data)
            },
            'metadata': {
                'rdo_id': ultimo_rdo.id,
                'obra_id': ultimo_rdo.obra_id,
                'estado': 'RDO_EXISTENTE',
                'timestamp': datetime.now().isoformat()
            }
        })
    
    except Exception as e:
        print(f"‚ùå ERRO _processar_rdo_existente: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': 'Falha ao processar RDO existente',
            'error_code': 'RDO_EXISTENTE_ERROR'
        }), 500

@main_bp.route('/api/servicos-obra-primeira-rdo/<int:obra_id>')
def api_servicos_obra_primeira_rdo(obra_id):
    """
    API ESPEC√çFICA: Buscar servi√ßos de uma obra para primeira RDO
    Retorna servi√ßos com subatividades para exibi√ß√£o em cards
    """
    try:
        # CORRE√á√ÉO CR√çTICA: Detectar admin_id baseado na obra espec√≠fica
        obra_base = db.session.query(Obra).filter_by(id=obra_id).first()
        if not obra_base:
            return jsonify({
                'success': False,
                'error': f'Obra {obra_id} n√£o encontrada no sistema'
            }), 404
        
        admin_id = obra_base.admin_id
        print(f"üéØ CORRE√á√ÉO: admin_id detectado pela obra {obra_id} = {admin_id}")
        
        print(f"üéØ API servicos-obra-primeira-rdo: obra {obra_id}, admin_id {admin_id}")
        
        # Verificar se obra existe e pertence ao admin
        obra = Obra.query.filter_by(id=obra_id, admin_id=admin_id).first()
        if not obra:
            print(f"‚ùå Obra {obra_id} n√£o encontrada para admin_id {admin_id}")
            return jsonify({
                'success': False,
                'error': 'Obra n√£o encontrada ou sem permiss√£o de acesso'
            }), 404
        
        # Buscar servi√ßos da obra usando estrat√©gia resiliente
        servicos_obra = _buscar_servicos_obra_resiliente(obra_id, admin_id)
        
        if not servicos_obra:
            print(f"‚ÑπÔ∏è Nenhum servi√ßo encontrado para obra {obra_id}")
            return jsonify({
                'success': False,
                'message': 'Nenhum servi√ßo cadastrado para esta obra'
            })
        
        # Montar dados dos servi√ßos com suas subatividades
        servicos_data = []
        for servico in servicos_obra:
            # Buscar subatividades do servi√ßo
            subatividades = SubatividadeMestre.query.filter_by(
                servico_id=servico.id,
                admin_id=admin_id,  # ‚úÖ CORRE√á√ÉO CR√çTICA: usar admin_id ao inv√©s de tenant_admin_id
                ativo=True
            ).order_by(SubatividadeMestre.ordem_padrao).all()
            
            subatividades_data = []
            for sub in subatividades:
                subatividades_data.append({
                    'id': sub.id,
                    'nome': sub.nome,
                    'descricao': sub.descricao or '',
                    'percentual': 0.0  # Sempre 0% para primeira RDO
                })
            
            # Se n√£o tem subatividades mestre, criar uma padr√£o
            if not subatividades_data:
                subatividades_data.append({
                    'id': f'default_{servico.id}',
                    'nome': servico.nome,
                    'descricao': 'Execu√ß√£o completa do servi√ßo',
                    'percentual': 0.0
                })
            
            servico_data = {
                'id': servico.id,
                'nome': servico.nome,
                'categoria': getattr(servico, 'categoria', 'Geral'),
                'descricao': servico.descricao or '',
                'subatividades': subatividades_data
            }
            servicos_data.append(servico_data)
        
        print(f"‚úÖ API servicos-obra-primeira-rdo: {len(servicos_data)} servi√ßos encontrados")
        
        return jsonify({
            'success': True,
            'servicos': servicos_data,
            'total_servicos': len(servicos_data),
            'obra': {
                'id': obra.id,
                'nome': obra.nome
            }
        })
        
    except Exception as e:
        print(f"‚ùå ERRO API servicos-obra-primeira-rdo: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# ROTA FLEX√çVEL PARA SALVAR RDO - CORRIGE ERRO 404
@main_bp.route('/salvar-rdo-flexivel', methods=['POST'])
@funcionario_required
def salvar_rdo_flexivel():
    """
    ARQUITETURA REFATORADA - Joris Kuypers Digital Mastery
    Implementa√ß√£o robusta com separa√ß√£o clara de responsabilidades
    üî• VERS√ÉO COM DEBUG DETALHADO PARA PRODU√á√ÉO
    """
    import logging
    
    logger = logging.getLogger(__name__)
    
    # ‚úÖ VERIFICA√á√ÉO DE SCHEMA PREVENTIVA
    try:
        from sqlalchemy import inspect
        inspector = inspect(db.engine)
        
        # Verificar tabelas cr√≠ticas
        tabelas_necessarias = ['rdo', 'rdo_servico_subatividade', 'rdo_mao_obra']
        for tabela in tabelas_necessarias:
            if tabela in inspector.get_table_names():
                colunas = [col['name'] for col in inspector.get_columns(tabela)]
                logger.info(f"‚úÖ Tabela {tabela}: {len(colunas)} colunas encontradas")
            else:
                logger.error(f"‚ùå Tabela {tabela} N√ÉO ENCONTRADA!")
                
    except Exception as schema_check_error:
        logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel verificar schema: {schema_check_error}")
    
    try:
        # IMPLEMENTA√á√ÉO DA NOVA ARQUITETURA DIRETAMENTE AQUI
        logger.info("üéØ JORIS KUYPERS ARCHITECTURE: Iniciando salvamento RDO")
        logger.info("üöÄ DEBUG PRODU√á√ÉO: Logs detalhados ativados")
        
        # Obter dados b√°sicos da sess√£o e formul√°rio
        funcionario_id = session.get('funcionario_id') or request.form.get('funcionario_id', type=int)
        admin_id = session.get('admin_id') or request.form.get('admin_id_form', type=int)
        obra_id = request.form.get('obra_id', type=int)
        
        # FALLBACK: Se sess√£o perdida, buscar admin_id dinamicamente
        if not admin_id and funcionario_id:
            funcionario = Funcionario.query.get(funcionario_id)
            if funcionario:
                admin_id = funcionario.admin_id
                session['admin_id'] = admin_id
                logger.info(f"üîÑ Admin_id recuperado via funcion√°rio: {admin_id}")
        
        # Se ainda n√£o tem admin_id, usar detec√ß√£o autom√°tica baseada na obra
        if not admin_id and obra_id:
            obra = Obra.query.get(obra_id)
            if obra:
                admin_id = obra.admin_id
                session['admin_id'] = admin_id
                logger.info(f"üîÑ Admin_id recuperado via obra: {admin_id}")
        
        # √öLTIMO RECURSO: Se n√£o tem funcionario_id, usar o primeiro funcion√°rio do admin
        if not funcionario_id and admin_id:
            funcionario = Funcionario.query.filter_by(admin_id=admin_id, ativo=True).first()
            if funcionario:
                funcionario_id = funcionario.id
                session['funcionario_id'] = funcionario_id
                logger.info(f"üîÑ Funcionario_id recuperado: {funcionario_id}")
        
        if not all([funcionario_id, admin_id, obra_id]):
            logger.error(f"‚ùå Dados inv√°lidos: funcionario_id={funcionario_id}, admin_id={admin_id}, obra_id={obra_id}")
            logger.error(f"‚ùå Campos form: {list(request.form.keys())[:10]}")
            flash('Dados de sess√£o inv√°lidos. Fa√ßa login novamente.', 'error')
            return redirect(url_for('main.funcionario_rdo_novo'))
            
        logger.info(f"üéØ Dados da sess√£o: obra_id={obra_id}, admin_id={admin_id}")
        
        # FASE 1: DESCOBRIR CONTEXTO DO SERVI√áO (Arquitetura Joris Kuypers INLINE)
        # Buscar √∫ltimo servi√ßo usado nesta obra
        ultimo_servico_rdo = db.session.query(RDOServicoSubatividade).join(RDO).filter(
            RDO.obra_id == obra_id,
            RDO.admin_id == admin_id
        ).order_by(RDO.data_relatorio.desc()).first()
        
        if ultimo_servico_rdo:
            target_service_id = ultimo_servico_rdo.servico_id
            servico_obj = Servico.query.get(target_service_id)
            service_name = servico_obj.nome if servico_obj else f"Servi√ßo {target_service_id}"
            logger.info(f"üéØ SERVI√áO DO HIST√ìRICO: {service_name} (ID: {target_service_id})")
        else:
            # Fallback: primeiro servi√ßo ativo da obra - CORRIGIDO
            try:
                # ‚úÖ CORRE√á√ÉO CR√çTICA: Usar admin_id ao inv√©s de ativo
                servico_obra = db.session.query(ServicoObraReal).join(Servico).filter(
                    ServicoObraReal.obra_id == obra_id,
                    ServicoObraReal.admin_id == admin_id,  # CORRIGIDO: usar admin_id
                    Servico.admin_id == admin_id,
                    Servico.ativo == True
                ).first()
                
                if servico_obra and servico_obra.servico:
                    target_service_id = servico_obra.servico.id
                    service_name = servico_obra.servico.nome
                    logger.info(f"üéØ SERVI√áO DA OBRA: {service_name} (ID: {target_service_id})")
                else:
                    flash('N√£o foi poss√≠vel identificar o servi√ßo para esta obra', 'error')
                    return redirect(url_for('main.funcionario_rdo_novo'))
            except Exception as e:
                logger.error(f"‚ùå Erro ao buscar servi√ßo da obra: {e}")
                flash('Erro ao identificar servi√ßo da obra', 'error')
                return redirect(url_for('main.funcionario_rdo_novo'))
        
        # FASE 2: PROCESSAR DADOS DAS SUBATIVIDADES (Arquitetura Joris Kuypers INLINE)
        logger.info(f"üîç DEBUG FORMUL√ÅRIO PRODU√á√ÉO - TODOS OS CAMPOS:")
        logger.info(f"üìä Total de campos recebidos: {len(request.form)}")
        for key, value in request.form.items():
            logger.info(f"  üìù {key} = {value}")
        
        logger.info(f"üîç DEBUG FORMUL√ÅRIO - Campos subatividade:")
        for key, value in request.form.items():
            if 'subatividade' in key:
                logger.info(f"  üéØ {key} = {value}")
        
        subactivities = []
        logger.error(f"üîç INICIANDO PROCESSAMENTO - Buscando campos 'subatividade_*_percentual'")
        campos_encontrados = [k for k in request.form.keys() if k.startswith('subatividade_') and k.endswith('_percentual')]
        logger.error(f"üîç Campos subatividade_*_percentual encontrados: {len(campos_encontrados)}")
        for campo in campos_encontrados:
            logger.error(f"  üéØ {campo}")
        
        for field_name, field_value in request.form.items():
            if field_name.startswith('subatividade_') and field_name.endswith('_percentual'):
                try:
                    # Tentar formato: subatividade_139_292_percentual
                    parts = field_name.replace('subatividade_', '').replace('_percentual', '').split('_')
                    logger.error(f"üîç Processando campo {field_name}, parts: {parts}, valor: {field_value}")
                    
                    if len(parts) >= 2:
                        original_service_id = int(parts[0])
                        sub_id = parts[1]
                        
                        percentual = float(field_value) if field_value else 0.0
                        obs_field = f"subatividade_{original_service_id}_{sub_id}_observacoes"
                        observacoes = request.form.get(obs_field, "")
                        nome_field = f"nome_subatividade_{original_service_id}_{sub_id}"
                        nome = request.form.get(nome_field, "")
                        
                        # CORRE√á√ÉO CR√çTICA: Buscar nome real da subatividade mestre DINAMICAMENTE
                        try:
                            # TENTAR BUSCAR NO BANCO PRIMEIRO (QUALQUER SERVI√áO)
                            subatividade_mestre = db.session.query(SubatividadeMestre).filter_by(
                                id=int(sub_id)
                            ).first()
                            
                            if subatividade_mestre:
                                nome = subatividade_mestre.nome
                                logger.error(f"‚úÖ Nome DIN√ÇMICO da subatividade {sub_id}: {nome}")
                            else:
                                logger.error(f"‚ùå IGNORANDO: Subatividade {sub_id} n√£o encontrada no banco - N√ÉO ser√° salva")
                                continue  # Pula esta subatividade
                                
                        except Exception as e:
                            logger.error(f"‚ùå Erro ao buscar subatividade {sub_id} no banco: {e}")
                            continue  # Pula esta subatividade
                        
                        # S√≥ adiciona se tem nome v√°lido
                        if nome and nome.strip():
                            logger.error(f"üì¶ Subatividade extra√≠da: {nome} = {percentual}%")
                            subactivities.append({
                                'original_service_id': original_service_id,
                                'sub_id': sub_id,
                                'nome': nome,
                                'percentual': percentual,
                                'observacoes': observacoes
                            })
                        else:
                            logger.error(f"‚ùå REJEITANDO subatividade {sub_id}: nome vazio ou inv√°lido")
                    else:
                        logger.error(f"‚ùå Campo {field_name} n√£o tem formato esperado: parts={parts}")
                        
                except (ValueError, IndexError) as e:
                    logger.error(f"‚ùå Erro ao processar campo {field_name}: {e}")
                    continue
        
        logger.error(f"üéØ RESULTADO LOOP 1: {len(subactivities)} subatividades encontradas")
        
        # FALLBACK: Se n√£o encontrou pelo formato padr√£o, tentar outros formatos
        if not subactivities:
            logger.error("üîÑ FALLBACK ATIVADO - Tentando formatos alternativos de subatividade...")
            logger.error(f"üîç Total de campos com 'percentual': {len([k for k in request.form.keys() if 'percentual' in k])}")
            for field_name, field_value in request.form.items():
                if 'percentual' in field_name and field_value:
                    logger.error(f"üîç Campo percentual encontrado: {field_name} = {field_value}")
                    try:
                        # Extrair qualquer n√∫mero do nome do campo
                        import re
                        numbers = re.findall(r'\d+', field_name)
                        if len(numbers) >= 1:
                            sub_id = numbers[-1]  # √öltimo n√∫mero
                            percentual = float(field_value) if field_value else 0.0
                            
                            # CORRE√á√ÉO CR√çTICA FALLBACK: Buscar nome real da subatividade mestre
                            nome = ""  # N√£o definir valor padr√£o gen√©rico
                            
                            try:
                                # BUSCA DIN√ÇMICA NO BANCO (QUALQUER SERVI√áO)
                                subatividade_mestre = db.session.query(SubatividadeMestre).filter_by(
                                    id=int(sub_id)
                                ).first()
                                
                                if subatividade_mestre:
                                    nome = subatividade_mestre.nome
                                    logger.info(f"‚úÖ FALLBACK DIN√ÇMICO: Nome da subatividade {sub_id}: {nome}")
                                else:
                                    logger.warning(f"‚ö†Ô∏è IGNORANDO: Subatividade {sub_id} n√£o existe no banco - N√ÉO ser√° salva")
                                    continue  # Pula esta subatividade
                                    
                            except Exception as e:
                                logger.error(f"‚ùå FALLBACK: Erro ao buscar subatividade {sub_id} no banco: {e}")
                                logger.error(f"‚ùå REJEITANDO: Subatividade {sub_id} n√£o ser√° salva")
                                continue  # Pula esta subatividade
                            
                            # S√≥ adiciona se encontrou nome v√°lido
                            if nome and nome.strip():
                                subactivities.append({
                                    'original_service_id': target_service_id,
                                    'sub_id': sub_id,
                                    'nome': nome,
                                    'percentual': percentual,
                                    'observacoes': ""
                                })
                                logger.info(f"‚úÖ Subatividade alternativa: {nome} = {percentual}%")
                            else:
                                logger.error(f"‚ùå REJEITANDO subatividade {sub_id} no fallback: nome vazio")
                    except:
                        continue
        
        if not subactivities:
            # LOG DETALHADO PARA DEBUG PRODU√á√ÉO
            logger.error("‚ùå NENHUMA SUBATIVIDADE ENCONTRADA - DEBUG PRODU√á√ÉO:")
            logger.error(f"üîç Total de campos no formul√°rio: {len(request.form)}")
            logger.error(f"üîç Campos do formul√°rio:")
            for key, value in request.form.items():
                logger.error(f"  üìù {key} = {value}")
            logger.error(f"üîç Target service ID: {target_service_id}")
            logger.error(f"üîç Admin ID: {admin_id}")
            logger.error(f"üîç Obra ID: {obra_id}")
            
            flash(f'ERRO DEBUG: Nenhuma subatividade encontrada. Total campos: {len(request.form)}. Verifique logs para detalhes.', 'error')
            return redirect(url_for('main.funcionario_rdo_novo'))
            
        logger.info(f"üéØ SUBATIVIDADES PROCESSADAS: {len(subactivities)} itens")
        
        # FASE 3: CRIAR RDO PRINCIPAL
        data_relatorio = request.form.get('data_relatorio')
        if data_relatorio:
            data_relatorio = datetime.strptime(data_relatorio, '%Y-%m-%d').date()
        else:
            data_relatorio = datetime.now().date()
            
        # ‚úÖ CORRE√á√ÉO CR√çTICA: Gerar n√∫mero RDO √önico (evita constraint violation)
        logger.info(f"üî¢ GERANDO N√öMERO RDO √önico para admin_id={admin_id}, ano={data_relatorio.year}")
        
        # Gerar n√∫mero √∫nico com verifica√ß√£o de duplicata
        contador = 1
        numero_rdo = None
        
        # Loop para garantir n√∫mero √∫nico
        for tentativa in range(1, 1000):  # M√°ximo 999 tentativas
            numero_proposto = f"RDO-{admin_id}-{data_relatorio.year}-{tentativa:03d}"
            
            # Verificar se j√° existe
            rdo_existente = RDO.query.filter_by(
                numero_rdo=numero_proposto,
                admin_id=admin_id
            ).first()
            
            if not rdo_existente:
                numero_rdo = numero_proposto
                logger.info(f"‚úÖ N√öMERO RDO √önico GERADO: {numero_rdo}")
                break
            else:
                logger.info(f"‚ö†Ô∏è N√∫mero {numero_proposto} j√° existe, tentando pr√≥ximo...")
                
        # Fallback de seguran√ßa
        if not numero_rdo:
            import random
            numero_rdo = f"RDO-{admin_id}-{data_relatorio.year}-{random.randint(1000, 9999):04d}"
            logger.warning(f"üöë FALLBACK: Usando n√∫mero aleat√≥rio {numero_rdo}")
        
        rdo = RDO(
            numero_rdo=numero_rdo,
            obra_id=obra_id,
            criado_por_id=funcionario_id,
            data_relatorio=data_relatorio,
            local=request.form.get('local', 'Campo'),
            admin_id=admin_id
        )
        
        # FASE 4: PERSISTIR COM TRANSA√á√ÉO ROBUSTA (Arquitetura Joris Kuypers INLINE)
        logger.info(f"üöÄ INICIANDO TRANSA√á√ÉO - RDO {numero_rdo}")
        try:
            # ‚úÖ CORRE√á√ÉO: Verificar schema do RDO antes de salvar
            try:
                # Teste de schema - verificar se todas as colunas existem
                logger.info(f"üîç VERIFICA√á√ÉO SCHEMA RDO:")
                logger.info(f"  üìã numero_rdo: {rdo.numero_rdo}")
                logger.info(f"  üèóÔ∏è obra_id: {rdo.obra_id}")
                logger.info(f"  üë§ criado_por_id: {rdo.criado_por_id}")
                logger.info(f"  üìÖ data_relatorio: {rdo.data_relatorio}")
                logger.info(f"  üìç local: {rdo.local}")
                logger.info(f"  üè¢ admin_id: {rdo.admin_id}")
            except Exception as schema_error:
                logger.error(f"‚ùå ERRO SCHEMA RDO: {schema_error}")
                raise Exception(f"Schema RDO inv√°lido: {schema_error}")
            
            # Salvar RDO principal
            db.session.add(rdo)
            db.session.flush()  # Para obter o ID
            
            logger.info(f"üíæ RDO {rdo.numero_rdo} criado com ID {rdo.id}")
            
            # Salvar todas as subatividades no servi√ßo correto
            logger.info(f"üíæ SALVANDO {len(subactivities)} SUBATIVIDADES")
            for i, sub_data in enumerate(subactivities):
                try:
                    logger.info(f"  üìã [{i+1}/{len(subactivities)}] {sub_data['nome']} = {sub_data['percentual']}%")
                    
                    subatividade = RDOServicoSubatividade(
                        rdo_id=rdo.id,
                        servico_id=target_service_id,  # SEMPRE usar o servi√ßo descoberto
                        nome_subatividade=sub_data['nome'],
                        percentual_conclusao=sub_data['percentual'],
                        observacoes_tecnicas=sub_data['observacoes'],
                        admin_id=admin_id,
                        ativo=True
                    )
                    
                    db.session.add(subatividade)
                    logger.info(f"  ‚úÖ Subatividade {sub_data['nome']} adicionada com sucesso")
                    
                except Exception as sub_error:
                    logger.error(f"  ‚ùå Erro na subatividade {sub_data['nome']}: {sub_error}")
                    raise Exception(f"Erro ao criar subatividade {sub_data['nome']}: {sub_error}")
                # Removido - l√≥gica movida para o bloco anterior
            
            # CORRE√á√ÉO CR√çTICA: PROCESSAR FUNCION√ÅRIOS SELECIONADOS
            funcionarios_selecionados = request.form.getlist('funcionarios_selecionados')
            logger.info(f"üë• PROCESSANDO FUNCION√ÅRIOS: {len(funcionarios_selecionados)} selecionados")
            logger.info(f"üë• Lista de IDs: {funcionarios_selecionados}")
            
            for funcionario_id_str in funcionarios_selecionados:
                try:
                    if funcionario_id_str and funcionario_id_str.strip():
                        funcionario_id_sel = int(funcionario_id_str.strip())
                        
                        # Verificar se funcion√°rio existe
                        funcionario = Funcionario.query.get(funcionario_id_sel)
                        if funcionario:
                            # ‚úÖ CORRE√á√ÉO CR√çTICA: Criar registro seguro de m√£o de obra
                            funcao_exercida = 'Funcion√°rio'  # Padr√£o seguro
                            try:
                                if hasattr(funcionario, 'funcao_ref') and funcionario.funcao_ref:
                                    funcao_exercida = funcionario.funcao_ref.nome
                                elif hasattr(funcionario, 'funcao') and funcionario.funcao:
                                    funcao_exercida = funcionario.funcao
                                logger.info(f"üë∑ Fun√ß√£o determinada para {funcionario.nome}: {funcao_exercida}")
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è Erro ao buscar fun√ß√£o do funcion√°rio {funcionario.nome}: {e}")
                            
                            # üîç VERIFICA√á√ÉO SCHEMA RDOMaoObra
                            logger.info(f"üîç Criando RDOMaoObra - rdo_id: {rdo.id}, funcionario_id: {funcionario_id_sel}")
                            try:
                                mao_obra = RDOMaoObra(
                                    rdo_id=rdo.id,
                                    funcionario_id=funcionario_id_sel,
                                    horas_trabalhadas=8.8,  # Padr√£o
                                    funcao_exercida=funcao_exercida
                                )
                                
                                # Teste de schema antes de adicionar
                                logger.info(f"  ‚úÖ RDOMaoObra criado: {vars(mao_obra)}")
                                db.session.add(mao_obra)
                                logger.info(f"üë∑ Funcion√°rio salvo: {funcionario.nome} (ID: {funcionario_id_sel})")
                            except Exception as mao_obra_error:
                                logger.error(f"‚ùå ERRO RDOMaoObra para funcionario {funcionario.nome}: {mao_obra_error}")
                                raise Exception(f"Erro ao criar RDOMaoObra: {mao_obra_error}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Funcion√°rio ID {funcionario_id_sel} n√£o encontrado")
                except Exception as e:
                    logger.error(f"‚ùå Erro ao processar funcion√°rio {funcionario_id_str}: {e}")
                    continue
            
            # üöÄ COMMIT DA TRANSA√á√ÉO FINAL
            logger.info(f"üöÄ EXECUTANDO COMMIT FINAL...")
            db.session.commit()
            success = True
            logger.info(f"‚úÖ SUCESSO TOTAL! RDO {rdo.numero_rdo} salvo:")
            logger.info(f"  üìã {len(subactivities)} subatividades")
            logger.info(f"  üë• {len(funcionarios_selecionados)} funcionarios")
            logger.info(f"  üèóÔ∏è Obra ID: {obra_id}")
            logger.info(f"  üè¢ Admin ID: {admin_id}")
            logger.info(f"  üî¢ N√∫mero RDO: {numero_rdo} (VERIFICADO √önico)")
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"‚ùå Erro ao salvar RDO: {e}")
            # ‚úÖ LOG DETALHADO PARA DEBUG PRODU√á√ÉO
            import traceback
            logger.error(f"‚ùå Stack trace completo: {traceback.format_exc()}")
            success = False
        
        if success:
            flash(f'RDO {numero_rdo} salvo com sucesso! Servi√ßo: {service_name}', 'success')
            logger.info(f"‚úÖ RDO {numero_rdo} salvo com {len(subactivities)} subatividades no servi√ßo {target_service_id}")
            return redirect(url_for('main.funcionario_rdo_consolidado'))
        else:
            flash('Erro interno ao salvar RDO. Verifique os logs para detalhes.', 'error')
            logger.error("‚ùå FALHA NO SALVAMENTO - Redirecionando para formul√°rio")
            return redirect(url_for('main.funcionario_rdo_novo'))
        
    except Exception as e:
        logger.error(f"‚ùå ERRO CR√çTICO: {str(e)}")
        import traceback
        traceback.print_exc()
        flash(f'Erro ao salvar RDO: {str(e)}', 'error')
        return redirect(url_for('main.funcionario_rdo_novo'))

@main_bp.route('/api/rdo/ultima-dados/<int:obra_id>')
@funcionario_required
def api_rdo_ultima_dados(obra_id):
    """
    API CR√çTICA: Buscar dados do √∫ltimo RDO de uma obra
    Corrige erro 404 no frontend rdo_autocomplete.js
    """
    try:
        # Usar admin_id robusto (mesma l√≥gica do salvamento)
        admin_id = get_admin_id_robusta()
        
        print(f"üîç API ultima-dados: Buscando RDO para obra {obra_id}, admin_id {admin_id}")
        
        # Buscar √∫ltimo RDO da obra
        ultimo_rdo = RDO.query.join(Obra).filter(
            Obra.id == obra_id,
            Obra.admin_id == admin_id
        ).order_by(RDO.data_relatorio.desc()).first()
        
        if not ultimo_rdo:
            print(f"‚ÑπÔ∏è Nenhum RDO encontrado para obra {obra_id}")
            return jsonify({
                'success': False,
                'message': 'Nenhum RDO anterior encontrado para esta obra'
            })
        
        # Buscar subatividades do √∫ltimo RDO
        subatividades = RDOServicoSubatividade.query.filter_by(
            rdo_id=ultimo_rdo.id
        ).all()
        
        # Buscar funcion√°rios do √∫ltimo RDO
        funcionarios_rdo = RDOMaoObra.query.filter_by(
            rdo_id=ultimo_rdo.id
        ).all()
        
        # Montar dados dos servi√ßos CORRIGIDO - agrupar subatividades por servi√ßo
        servicos_agrupados = {}
        
        # Agrupar subatividades por servi√ßo
        for sub in subatividades:
            servico_id = sub.servico_id
            if servico_id not in servicos_agrupados:
                # Buscar dados do servi√ßo
                servico = Servico.query.get(servico_id)
                if servico:
                    servicos_agrupados[servico_id] = {
                        'id': servico.id,
                        'nome': servico.nome,
                        'categoria': getattr(servico, 'categoria', 'Geral'),
                        'descricao': servico.descricao or '',
                        'subatividades': []
                    }
            
            # Adicionar subatividade ao servi√ßo
            if servico_id in servicos_agrupados:
                # CORRE√á√ÉO CR√çTICA: Buscar ID correto da subatividade_mestre
                subatividade_mestre_id = sub.id  # Fallback para o ID atual
                try:
                    # Buscar o ID correto na tabela subatividade_mestre pelo nome e servi√ßo
                    subatividade_mestre = db.session.query(SubatividadeMestre).filter_by(
                        nome=sub.nome_subatividade,
                        servico_id=servico_id
                    ).first()
                    
                    if subatividade_mestre:
                        subatividade_mestre_id = subatividade_mestre.id
                        print(f"‚úÖ API CORRIGIDA: {sub.nome_subatividade} -> ID correto {subatividade_mestre_id}")
                    else:
                        print(f"‚ö†Ô∏è API: Subatividade '{sub.nome_subatividade}' n√£o encontrada na tabela mestre")
                except Exception as e:
                    print(f"‚ùå API: Erro ao buscar ID da subatividade mestre: {e}")
                
                servicos_agrupados[servico_id]['subatividades'].append({
                    'id': subatividade_mestre_id,  # ‚úÖ ID correto da subatividade_mestre
                    'nome': sub.nome_subatividade,
                    'percentual': float(sub.percentual_conclusao or 0),
                    'observacoes': sub.observacoes_tecnicas or ''
                })
        
        # ORDENAR SUBATIVIDADES ANTES DE CONVERTER PARA LISTA
        def extrair_numero_subatividade_api(sub):
            """Extrair n√∫mero da subatividade para ordena√ß√£o (ex: '1. Detalhamento' -> 1)"""
            try:
                nome = sub.get('nome', '')
                if nome and '.' in nome:
                    return int(nome.split('.')[0])
                return 999  # Colocar no final se n√£o tem n√∫mero
            except:
                return 999
        
        # Aplicar ordena√ß√£o em cada servi√ßo
        for servico_id, servico_data in servicos_agrupados.items():
            if servico_data.get('subatividades'):
                servico_data['subatividades'].sort(key=extrair_numero_subatividade_api)
                print(f"üî¢ API: Subatividades ordenadas para servi√ßo {servico_data['nome']}: {len(servico_data['subatividades'])} itens")
        
        # Converter para lista
        servicos_data = list(servicos_agrupados.values())
        
        # Montar dados dos funcion√°rios
        funcionarios_data = []
        for func_rdo in funcionarios_rdo:
            if func_rdo.funcionario:
                funcionarios_data.append({
                    'id': func_rdo.funcionario.id,
                    'nome': func_rdo.funcionario.nome,
                    'cargo': func_rdo.funcionario.funcao_ref.nome if hasattr(func_rdo.funcionario, 'funcao_ref') and func_rdo.funcionario.funcao_ref else 'Funcion√°rio',
                    'horas_trabalhadas': float(func_rdo.horas_trabalhadas or 8.8)
                })
        
        print(f"‚úÖ API ultima-dados: {len(servicos_data)} servi√ßos, {len(funcionarios_data)} funcion√°rios")
        
        return jsonify({
            'success': True,
            'ultima_rdo': {
                'numero_rdo': ultimo_rdo.numero_rdo or f'RDO-{ultimo_rdo.id}',
                'data_relatorio': ultimo_rdo.data_relatorio.strftime('%Y-%m-%d'),
                'servicos': servicos_data,
                'funcionarios': funcionarios_data,
                'observacoes_gerais': getattr(ultimo_rdo, 'observacoes_gerais', '') or getattr(ultimo_rdo, 'observacoes', '') or ''
            }
        })
        
    except Exception as e:
        print(f"‚ùå ERRO API ultima-dados: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': str(e)
        })

def _buscar_servicos_obra_resiliente(obra_id, admin_id):
    """Busca servi√ßos da obra com m√∫ltiplas estrat√©gias resilientes"""
    try:
        print(f"üîç BUSCA RESILIENTE: obra_id={obra_id}, admin_id={admin_id}")
        
        # ESTRAT√âGIA 1: Buscar via ServicoObraReal (CORRIGIDA)
        try:
            servicos_obra_query = db.session.query(Servico).join(
                ServicoObraReal, Servico.id == ServicoObraReal.servico_id
            ).filter(
                ServicoObraReal.obra_id == obra_id,
                ServicoObraReal.admin_id == admin_id,  # ‚úÖ CORRE√á√ÉO CR√çTICA: usar admin_id ao inv√©s de ativo
                Servico.admin_id == admin_id,
                Servico.ativo == True
            ).all()
            
            if servicos_obra_query:
                print(f"‚úÖ ESTRAT√âGIA_1: {len(servicos_obra_query)} servi√ßos encontrados via ServicoObraReal")
                return servicos_obra_query
                
        except Exception as e:
            print(f"‚ö†Ô∏è ERRO ESTRAT√âGIA_1: {e}")
        
        # ESTRAT√âGIA 2: Buscar via ServicoObra (tabela legada)
        try:
            servicos_legado = []
            servicos_associados = ServicoObra.query.filter_by(obra_id=obra_id).all()
            
            for assoc in servicos_associados:
                if assoc.servico and assoc.servico.admin_id == admin_id and assoc.servico.ativo:
                    servicos_legado.append(assoc.servico)
            
            if servicos_legado:
                print(f"‚úÖ ESTRAT√âGIA_2: {len(servicos_legado)} servi√ßos encontrados via ServicoObra")
                return servicos_legado
                
        except Exception as e:
            print(f"‚ö†Ô∏è ERRO ESTRAT√âGIA_2: {e}")
        
        # ESTRAT√âGIA 3 REMOVIDA: Estava retornando todos os servi√ßos do admin_id
        # Isso causava exibi√ß√£o de servi√ßos n√£o relacionados √† obra
        print(f"‚ùå NENHUM SERVI√áO ENCONTRADO para obra_id={obra_id}, admin_id={admin_id}")
        return []
        
    except Exception as e:
        print(f"‚ùå ERRO CR√çTICO _buscar_servicos_obra_resiliente: {e}")
        return []

def _buscar_subatividades_servico(servico_id):
    """Busca subatividades padr√£o de um servi√ßo"""
    try:
        # Buscar subatividades reais do banco se existirem
        # Por enquanto, retornar estrutura padr√£o
        return [
            {'nome': 'Prepara√ß√£o', 'descricao': 'Prepara√ß√£o inicial do servi√ßo'},
            {'nome': 'Execu√ß√£o', 'descricao': 'Execu√ß√£o principal do servi√ßo'},  
            {'nome': 'Finaliza√ß√£o', 'descricao': 'Acabamentos e finaliza√ß√£o'}
        ]
    except Exception as e:
        print(f"‚ùå ERRO _buscar_subatividades_servico: {e}")
        return [{'nome': 'Atividade Padr√£o', 'descricao': 'Execu√ß√£o do servi√ßo'}]


# === SISTEMA LIMPO - C√ìDIGO DUPLICADO REMOVIDO ===

@main_bp.route('/novo_ponto', methods=['POST'])
@login_required
def novo_ponto():
    """Cria novo registro de ponto"""
    try:
        data = request.form.to_dict()
        
        funcionario_id = data.get('funcionario_id')
        if not funcionario_id:
            return jsonify({'success': False, 'message': 'Funcion√°rio n√£o informado'}), 400
        
        # Buscar funcion√°rio
        funcionario = Funcionario.query.get(funcionario_id)
        if not funcionario:
            return jsonify({'success': False, 'message': 'Funcion√°rio n√£o encontrado'}), 404
        
        # Criar registro de ponto
        registro = RegistroPonto(
            funcionario_id=funcionario_id,
            data=datetime.strptime(data.get('data'), '%Y-%m-%d').date(),
            hora_entrada=datetime.strptime(data.get('hora_entrada'), '%H:%M').time() if data.get('hora_entrada') else None,
            hora_saida=datetime.strptime(data.get('hora_saida'), '%H:%M').time() if data.get('hora_saida') else None,
            hora_almoco_saida=datetime.strptime(data.get('hora_almoco_saida'), '%H:%M').time() if data.get('hora_almoco_saida') else None,
            hora_almoco_retorno=datetime.strptime(data.get('hora_almoco_retorno'), '%H:%M').time() if data.get('hora_almoco_retorno') else None,
            observacoes=data.get('observacoes', ''),
            tipo_registro=data.get('tipo_lancamento', 'trabalho_normal')
        )
        
        # Calcular horas trabalhadas se poss√≠vel
        if registro.hora_entrada and registro.hora_saida:
            from utils import calcular_horas_trabalhadas
            horas_calc = calcular_horas_trabalhadas(
                registro.hora_entrada,
                registro.hora_saida,
                registro.hora_almoco_saida,
                registro.hora_almoco_retorno,
                registro.data
            )
            registro.horas_trabalhadas = horas_calc['total']
            registro.horas_extras = horas_calc['extras']
        
        db.session.add(registro)
        db.session.commit()
        
        return jsonify({
            'success': True,
            'message': 'Registro de ponto criado com sucesso!',
            'registro_id': registro.id
        })
        
    except Exception as e:
        db.session.rollback()
        return jsonify({'success': False, 'message': f'Erro: {str(e)}'}), 500

# CONTINUA√á√ÉO DO SISTEMA ANTIGO (TEMPOR√ÅRIO PARA COMPATIBILITY)

# ========================================
# üöó ROTAS COMPLETAS DE VE√çCULOS V2.0 
# ========================================
# Implementa√ß√£o completa com design id√™ntico aos RDOs
# Formul√°rios unificados, prote√ß√£o multi-tenant, circuit breakers

# Importar services de ve√≠culos
try:
    from veiculos_services import VeiculoService, UsoVeiculoService, CustoVeiculoService
    print("‚úÖ [VEICULOS] Services importados com sucesso")
except ImportError as e:
    print(f"‚ö†Ô∏è [VEICULOS] Erro ao importar services: {e}")
    # Criar fallbacks b√°sicos
    class VeiculoService:
        @staticmethod
        def listar_veiculos(admin_id, filtros=None, page=1, per_page=20):
            return {'veiculos': [], 'pagination': None, 'stats': {}}
        @staticmethod
        def criar_veiculo(dados, admin_id):
            return False, None, "Service n√£o dispon√≠vel"
    
    class UsoVeiculoService:
        @staticmethod
        def criar_uso_veiculo(dados, admin_id):
            return False, None, "Service n√£o dispon√≠vel"
    
    class CustoVeiculoService:
        @staticmethod
        def criar_custo_veiculo(dados, admin_id):
            return False, None, "Service n√£o dispon√≠vel"

# ===== ROTA PRINCIPAL DE VE√çCULOS (CORRIGIDA) =====
@main_bp.route('/veiculos')
@login_required
def veiculos():
    """Lista principal de ve√≠culos com filtros e estat√≠sticas"""
    try:
        print(f"üöó [VEICULOS_LISTA] Iniciando listagem...")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        # Capturar filtros da URL
        filtros = {
            'status': request.args.get('status'),
            'tipo': request.args.get('tipo'),
            'placa': request.args.get('placa'),
            'marca': request.args.get('marca')
        }
        # Remover filtros vazios
        filtros = {k: v for k, v in filtros.items() if v}
        
        # Pagina√ß√£o
        page = request.args.get('page', 1, type=int)
        per_page = 20
        
        # Usar service para listar ve√≠culos
        resultado = VeiculoService.listar_veiculos(
            admin_id=tenant_admin_id,
            filtros=filtros,
            page=page,
            per_page=per_page
        )
        
        print(f"‚úÖ [VEICULOS_LISTA] Encontrados {len(resultado.get('veiculos', []))} ve√≠culos")
        
        return render_template('veiculos_lista.html',
                             veiculos=resultado.get('veiculos', []),
                             pagination=resultado.get('pagination'),
                             stats=resultado.get('stats', {}),
                             filtros_aplicados=resultado.get('filtros_aplicados', {}))
        
    except Exception as e:
        print(f"‚ùå [VEICULOS_LISTA] Erro: {str(e)}")
        flash('Erro ao carregar ve√≠culos. Tente novamente.', 'error')
        return redirect(url_for('main.dashboard'))

# ===== NOVA ROTA: NOVO VE√çCULO =====
@main_bp.route('/veiculos/novo', methods=['GET', 'POST'])
@login_required
def novo_veiculo():
    """Formul√°rio para cadastrar novo ve√≠culo"""
    try:
        print(f"üöó [NOVO_VEICULO] Iniciando...")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        if request.method == 'GET':
            return render_template('veiculos_novo.html')
        
        # POST - Processar cadastro
        dados = request.form.to_dict()
        print(f"üîç [NOVO_VEICULO] Dados recebidos: {dados.keys()}")
        
        # Valida√ß√µes b√°sicas
        campos_obrigatorios = ['placa', 'marca', 'modelo', 'ano', 'tipo']
        for campo in campos_obrigatorios:
            if not dados.get(campo):
                flash(f'Campo {campo.title()} √© obrigat√≥rio.', 'error')
                return render_template('veiculos_novo.html')
        
        # Usar service para criar ve√≠culo
        sucesso, veiculo, mensagem = VeiculoService.criar_veiculo(dados, tenant_admin_id)
        
        if sucesso:
            flash(mensagem, 'success')
            return redirect(url_for('main.veiculos'))
        else:
            flash(mensagem, 'error')
            return render_template('veiculos_novo.html')
        
    except Exception as e:
        print(f"‚ùå [NOVO_VEICULO] Erro: {str(e)}")
        flash('Erro ao cadastrar ve√≠culo. Tente novamente.', 'error')
        return render_template('veiculos_novo.html')

# ===== NOVA ROTA: DETALHES DO VE√çCULO =====
@main_bp.route('/veiculos/<int:id>')
@login_required  
def detalhes_veiculo(id):
    """P√°gina de detalhes do ve√≠culo com abas de uso e custos"""
    try:
        print(f"üöó [DETALHES_VEICULO] Iniciando para ID {id}")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        # Buscar ve√≠culo
        from models import Veiculo, Funcionario
        veiculo = Veiculo.query.filter_by(id=id, admin_id=tenant_admin_id).first()
        if not veiculo:
            flash('Ve√≠culo n√£o encontrado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        # Buscar funcion√°rios para exibir nomes nos passageiros
        funcionarios = Funcionario.query.filter_by(admin_id=tenant_admin_id).all()
        
        # Buscar usos recentes (√∫ltimos 20)
        usos_resultado = UsoVeiculoService.listar_usos_veiculo(
            veiculo_id=id,
            admin_id=tenant_admin_id,
            page=1,
            per_page=20
        )
        
        # Buscar custos recentes
        custos_resultado = CustoVeiculoService.listar_custos_veiculo(
            veiculo_id=id,
            admin_id=tenant_admin_id,
            page=1,
            per_page=20
        )
        
        return render_template('veiculos_detalhes.html',
                             veiculo=veiculo,
                             funcionarios=funcionarios,
                             usos=usos_resultado.get('usos', []),
                             stats_uso=usos_resultado.get('stats', {}),
                             custos=custos_resultado.get('custos', []),
                             stats_custos=custos_resultado.get('stats', {}))
        
    except Exception as e:
        print(f"‚ùå [DETALHES_VEICULO] Erro: {str(e)}")
        flash('Erro ao carregar detalhes do ve√≠culo.', 'error')
        return redirect(url_for('main.veiculos'))

# ===== NOVA ROTA: NOVO USO DE VE√çCULO (FORMUL√ÅRIO UNIFICADO) =====
@main_bp.route('/veiculos/<int:veiculo_id>/uso/novo', methods=['GET', 'POST'])
@login_required
def novo_uso_veiculo(veiculo_id):
    """Formul√°rio unificado para novo uso de ve√≠culo (uso + custos)"""
    try:
        print(f"üöó [NOVO_USO] Iniciando para ve√≠culo {veiculo_id}")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        # Buscar ve√≠culo
        from models import Veiculo, Funcionario, Obra
        veiculo = Veiculo.query.filter_by(id=veiculo_id, admin_id=tenant_admin_id).first()
        if not veiculo:
            flash('Ve√≠culo n√£o encontrado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        if request.method == 'GET':
            # Buscar funcion√°rios e obras para os selects
            funcionarios = Funcionario.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
            obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
            
            return render_template('uso_veiculo_novo.html',
                                 veiculo=veiculo,
                                 funcionarios=funcionarios,
                                 obras=obras)
        
        # POST - Processar cria√ß√£o do uso
        dados = request.form.to_dict()
        dados['veiculo_id'] = veiculo_id  # Garantir que o ID est√° nos dados
        
        print(f"üîç [NOVO_USO] Dados recebidos: {dados.keys()}")
        
        # Valida√ß√µes b√°sicas
        campos_obrigatorios = ['data_uso', 'hora_saida', 'km_inicial']
        for campo in campos_obrigatorios:
            if not dados.get(campo):
                flash(f'Campo {campo.replace("_", " ").title()} √© obrigat√≥rio.', 'error')
                funcionarios = Funcionario.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
                obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
                return render_template('uso_veiculo_novo.html',
                                     veiculo=veiculo,
                                     funcionarios=funcionarios,
                                     obras=obras)
        
        # Usar service para criar uso
        sucesso, uso, mensagem = UsoVeiculoService.criar_uso_veiculo(dados, tenant_admin_id)
        
        if sucesso:
            flash(mensagem, 'success')
            return redirect(url_for('main.detalhes_veiculo', id=veiculo_id))
        else:
            flash(mensagem, 'error')
            funcionarios = Funcionario.query.filter_by(admin_id=tenant_admin_id, ativo=True).all()
            obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
            return render_template('uso_veiculo_novo.html',
                                 veiculo=veiculo,
                                 funcionarios=funcionarios,
                                 obras=obras)
        
    except Exception as e:
        print(f"‚ùå [NOVO_USO] Erro: {str(e)}")
        flash('Erro ao registrar uso do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=veiculo_id))

# ===== NOVA ROTA: NOVO CUSTO DE VE√çCULO =====
@main_bp.route('/veiculos/<int:veiculo_id>/custo/novo', methods=['GET', 'POST'])
@login_required
def novo_custo_veiculo_form(veiculo_id):
    """Formul√°rio para registrar novos custos de ve√≠culo"""
    try:
        print(f"üí∞ [NOVO_CUSTO] Iniciando para ve√≠culo {veiculo_id}")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        # Buscar ve√≠culo
        from models import Veiculo, Funcionario, Obra, UsoVeiculo
        veiculo = Veiculo.query.filter_by(id=veiculo_id, admin_id=tenant_admin_id).first()
        if not veiculo:
            flash('Ve√≠culo n√£o encontrado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        if request.method == 'GET':
            # Buscar usos recentes para associa√ß√£o (opcional)
            usos = UsoVeiculo.query.filter_by(
                veiculo_id=veiculo_id, 
                admin_id=tenant_admin_id
            ).order_by(UsoVeiculo.data_uso.desc()).limit(10).all()
            
            # Buscar obras para associa√ß√£o (opcional)
            obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
            
            return render_template('custo_veiculo_novo.html',
                                 veiculo=veiculo,
                                 usos=usos,
                                 obras=obras)
        
        # POST - Processar cria√ß√£o do custo
        dados = request.form.to_dict()
        dados['veiculo_id'] = veiculo_id
        
        print(f"üîç [NOVO_CUSTO] Dados recebidos: {dados.keys()}")
        
        # Valida√ß√µes b√°sicas
        campos_obrigatorios = ['data_custo', 'tipo', 'valor']
        for campo in campos_obrigatorios:
            if not dados.get(campo):
                flash(f'Campo {campo.replace("_", " ").title()} √© obrigat√≥rio.', 'error')
                usos = UsoVeiculo.query.filter_by(
                    veiculo_id=veiculo_id, 
                    admin_id=tenant_admin_id
                ).order_by(UsoVeiculo.data_uso.desc()).limit(10).all()
                obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
                return render_template('custo_veiculo_novo.html',
                                     veiculo=veiculo,
                                     usos=usos,
                                     obras=obras)
        
        # Usar service para criar custo
        sucesso, custo, mensagem = CustoVeiculoService.criar_custo_veiculo(dados, tenant_admin_id)
        
        if sucesso:
            flash(mensagem, 'success')
            return redirect(url_for('main.detalhes_veiculo', id=veiculo_id))
        else:
            flash(mensagem, 'error')
            usos = UsoVeiculo.query.filter_by(
                veiculo_id=veiculo_id, 
                admin_id=tenant_admin_id
            ).order_by(UsoVeiculo.data_uso.desc()).limit(10).all()
            obras = Obra.query.filter_by(admin_id=tenant_admin_id).all()
            return render_template('custo_veiculo_novo.html',
                                 veiculo=veiculo,
                                 usos=usos,
                                 obras=obras)
        
    except Exception as e:
        print(f"‚ùå [NOVO_CUSTO] Erro: {str(e)}")
        flash('Erro ao registrar custo do ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=veiculo_id))

# ===== NOVA ROTA: EDITAR VE√çCULO =====
@main_bp.route('/veiculos/<int:id>/editar', methods=['GET', 'POST'])
@login_required
def editar_veiculo(id):
    """Formul√°rio para editar dados do ve√≠culo"""
    try:
        print(f"üöó [EDITAR_VEICULO] Iniciando para ID {id}")
        
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            flash('Acesso negado. Fa√ßa login novamente.', 'error')
            return redirect(url_for('auth.login'))
        
        # Buscar ve√≠culo
        from models import Veiculo
        veiculo = Veiculo.query.filter_by(id=id, admin_id=tenant_admin_id).first()
        if not veiculo:
            flash('Ve√≠culo n√£o encontrado.', 'error')
            return redirect(url_for('main.veiculos'))
        
        if request.method == 'GET':
            return render_template('veiculos_editar.html', veiculo=veiculo)
        
        # POST - Processar edi√ß√£o
        dados = request.form.to_dict()
        print(f"üîç [EDITAR_VEICULO] Dados recebidos: {dados.keys()}")
        
        # Usar service para atualizar ve√≠culo
        sucesso, veiculo_atualizado, mensagem = VeiculoService.atualizar_veiculo(id, dados, tenant_admin_id)
        
        if sucesso:
            flash(mensagem, 'success')
            return redirect(url_for('main.detalhes_veiculo', id=id))
        else:
            flash(mensagem, 'error')
            return render_template('veiculos_editar.html', veiculo=veiculo)
        
    except Exception as e:
        print(f"‚ùå [EDITAR_VEICULO] Erro: {str(e)}")
        flash('Erro ao editar ve√≠culo.', 'error')
        return redirect(url_for('main.detalhes_veiculo', id=id))

# ===== API: DADOS DO VE√çCULO ===== 
@main_bp.route('/api/veiculos/<int:id>')
@login_required
def api_dados_veiculo(id):
    """API para obter dados do ve√≠culo em JSON"""
    try:
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            return jsonify({'error': 'Acesso negado'}), 403
        
        from models import Veiculo
        veiculo = Veiculo.query.filter_by(id=id, admin_id=tenant_admin_id).first()
        if not veiculo:
            return jsonify({'error': 'Ve√≠culo n√£o encontrado'}), 404
        
        dados = {
            'id': veiculo.id,
            'placa': veiculo.placa,
            'marca': veiculo.marca,
            'modelo': veiculo.modelo,
            'ano': veiculo.ano,
            'tipo': veiculo.tipo,
            'km_atual': veiculo.km_atual,
            'status': veiculo.status,
            'cor': veiculo.cor,
            'combustivel': veiculo.combustivel,
            'chassi': veiculo.chassi,
            'renavam': veiculo.renavam
        }
        
        return jsonify(dados)
        
    except Exception as e:
        print(f"‚ùå [API_DADOS_VEICULO] Erro: {str(e)}")
        return jsonify({'error': 'Erro interno'}), 500

# ===== API: FINALIZAR USO DE VE√çCULO =====
@main_bp.route('/api/veiculos/uso/<int:uso_id>/finalizar', methods=['POST'])
@login_required
def api_finalizar_uso(uso_id):
    """API para finalizar uso de ve√≠culo"""
    try:
        # Prote√ß√£o multi-tenant
        tenant_admin_id = get_tenant_admin_id()
        if not tenant_admin_id:
            return jsonify({'error': 'Acesso negado'}), 403
        
        dados = request.json or {}
        
        # Usar service para finalizar uso
        sucesso, uso, mensagem = UsoVeiculoService.finalizar_uso_veiculo(uso_id, dados, tenant_admin_id)
        
        if sucesso:
            return jsonify({'success': True, 'message': mensagem})
        else:
            return jsonify({'success': False, 'error': mensagem}), 400
        
    except Exception as e:
        print(f"‚ùå [API_FINALIZAR_USO] Erro: {str(e)}")
        return jsonify({'success': False, 'error': 'Erro interno'}), 500

