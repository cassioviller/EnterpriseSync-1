#!/usr/bin/env python3
"""
üîß CORRE√á√ÉO CR√çTICA PRODU√á√ÉO - Erro de Tipos Ve√≠culos
=======================================================
Corrige incompatibilidade entre character varying e integer
Espec√≠fico para o erro mostrado na imagem do usu√°rio

Erro: "operator does not exist: character varying = integer"
Causa: Campos veiculo_id sendo tratados como string em vez de integer
Solu√ß√£o: Convers√£o explicita de tipos + ALTER TABLE se necess√°rio
"""

import sys
import os
import traceback
from datetime import datetime

# Configurar path para importar depend√™ncias
sys.path.append('/app')
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def log_fix(message):
    """Log com timestamp para debugging de produ√ß√£o"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_message = f'[FIX-TYPES] [{timestamp}] {message}'
    print(log_message)
    
    # Salvar em arquivo de log espec√≠fico
    try:
        with open('/tmp/fix_types_veiculos.log', 'a') as f:
            f.write(log_message + '\n')
    except:
        pass

def fix_vehicle_type_errors():
    """Corrigir erros de tipos espec√≠ficos do sistema de ve√≠culos"""
    
    log_fix('üîß INICIANDO CORRE√á√ÉO DE TIPOS - SISTEMA VE√çCULOS')
    log_fix('=' * 55)
    
    try:
        from app import app, db
        from sqlalchemy import text, inspect
        
        with app.app_context():
            # 1. Verificar estrutura atual das tabelas
            log_fix('üîç Verificando estrutura atual das tabelas...')
            
            inspector = inspect(db.engine)
            
            # Tabelas cr√≠ticas para verifica√ß√£o
            tabelas_criticas = {
                'veiculo': ['id', 'admin_id'],
                'uso_veiculo': ['id', 'veiculo_id', 'funcionario_id', 'admin_id'],
                'custo_veiculo': ['id', 'veiculo_id', 'admin_id'],
                'passageiro_veiculo': ['id', 'uso_veiculo_id', 'funcionario_id', 'admin_id']
            }
            
            problemas_encontrados = []
            
            for tabela, campos_int in tabelas_criticas.items():
                if tabela in inspector.get_table_names():
                    log_fix(f'‚úÖ Tabela {tabela} existe')
                    
                    # Verificar tipos das colunas
                    try:
                        colunas = inspector.get_columns(tabela)
                        for coluna in colunas:
                            if coluna['name'] in campos_int:
                                tipo_atual = str(coluna['type']).upper()
                                if 'INTEGER' not in tipo_atual and 'BIGINT' not in tipo_atual:
                                    problema = f'{tabela}.{coluna["name"]} = {tipo_atual} (deveria ser INTEGER)'
                                    problemas_encontrados.append((tabela, coluna['name'], tipo_atual))
                                    log_fix(f'‚ö†Ô∏è {problema}')
                                else:
                                    log_fix(f'‚úÖ {tabela}.{coluna["name"]} = {tipo_atual}')
                    except Exception as e:
                        log_fix(f'‚ùå Erro verificando colunas de {tabela}: {e}')
                else:
                    log_fix(f'‚ùå Tabela {tabela} n√£o existe')
            
            # 2. Aplicar corre√ß√µes se necess√°rio
            if problemas_encontrados:
                log_fix(f'üîß Encontrados {len(problemas_encontrados)} problemas de tipo')
                
                for tabela, coluna, tipo_atual in problemas_encontrados:
                    try:
                        log_fix(f'üîÑ Corrigindo {tabela}.{coluna} ({tipo_atual} ‚Üí INTEGER)')
                        
                        # Backup de seguran√ßa dos dados
                        log_fix(f'üíæ Fazendo backup de {tabela}.{coluna}')
                        
                        # Convers√£o segura de tipo
                        sql_fix = f"""
                        -- Corre√ß√£o de tipo para {tabela}.{coluna}
                        ALTER TABLE {tabela} 
                        ALTER COLUMN {coluna} TYPE INTEGER 
                        USING CASE 
                            WHEN {coluna} ~ '^[0-9]+$' THEN {coluna}::INTEGER
                            ELSE NULL
                        END;
                        """
                        
                        db.session.execute(text(sql_fix))
                        db.session.commit()
                        
                        log_fix(f'‚úÖ {tabela}.{coluna} corrigido para INTEGER')
                        
                    except Exception as e:
                        log_fix(f'‚ùå Erro corrigindo {tabela}.{coluna}: {e}')
                        db.session.rollback()
                        
                        # Tentar corre√ß√£o alternativa
                        try:
                            log_fix(f'üîÑ Tentativa alternativa para {tabela}.{coluna}')
                            
                            sql_alt = f"""
                            -- Corre√ß√£o alternativa
                            UPDATE {tabela} 
                            SET {coluna} = CAST(NULLIF(TRIM({coluna}), '') AS INTEGER)
                            WHERE {coluna} IS NOT NULL;
                            """
                            
                            db.session.execute(text(sql_alt))
                            db.session.commit()
                            
                            log_fix(f'‚úÖ Corre√ß√£o alternativa aplicada para {tabela}.{coluna}')
                            
                        except Exception as e2:
                            log_fix(f'‚ùå Corre√ß√£o alternativa falhou: {e2}')
                            db.session.rollback()
            else:
                log_fix('‚úÖ Nenhum problema de tipo encontrado')
            
            # 3. Verifica√ß√£o final e otimiza√ß√µes
            log_fix('üîç Executando verifica√ß√£o final...')
            
            # Testar queries principais que falhavam
            try:
                # Teste 1: Query b√°sica de ve√≠culos
                resultado = db.session.execute(text("""
                    SELECT v.id, v.placa, COUNT(uv.id) as total_usos
                    FROM veiculo v
                    LEFT JOIN uso_veiculo uv ON v.id = uv.veiculo_id
                    WHERE v.admin_id = 2
                    GROUP BY v.id, v.placa
                    LIMIT 5
                """)).fetchall()
                
                log_fix(f'‚úÖ Teste query ve√≠culos: {len(resultado)} registros')
                
                # Teste 2: Query de uso com passageiros
                resultado2 = db.session.execute(text("""
                    SELECT uv.id, uv.veiculo_id, COUNT(pv.id) as passageiros
                    FROM uso_veiculo uv
                    LEFT JOIN passageiro_veiculo pv ON uv.id = pv.uso_veiculo_id
                    WHERE uv.admin_id = 2
                    GROUP BY uv.id, uv.veiculo_id
                    LIMIT 5
                """)).fetchall()
                
                log_fix(f'‚úÖ Teste query usos: {len(resultado2)} registros')
                
            except Exception as e:
                log_fix(f'‚ùå Erro nos testes finais: {e}')
                return False
            
            # 4. Limpeza e otimiza√ß√£o
            try:
                log_fix('üßπ Executando limpeza e otimiza√ß√£o...')
                
                # Recriar √≠ndices se necess√°rio
                db.session.execute(text("""
                    -- Recriar √≠ndices cr√≠ticos
                    DROP INDEX IF EXISTS idx_uso_veiculo_admin_veiculo;
                    CREATE INDEX IF NOT EXISTS idx_uso_veiculo_admin_veiculo 
                    ON uso_veiculo(admin_id, veiculo_id);
                    
                    DROP INDEX IF EXISTS idx_passageiro_veiculo_uso;
                    CREATE INDEX IF NOT EXISTS idx_passageiro_veiculo_uso 
                    ON passageiro_veiculo(uso_veiculo_id, admin_id);
                """))
                
                db.session.commit()
                log_fix('‚úÖ √çndices otimizados')
                
            except Exception as e:
                log_fix(f'‚ö†Ô∏è Aviso na otimiza√ß√£o: {e}')
            
            log_fix('‚úÖ CORRE√á√ÉO DE TIPOS CONCLU√çDA COM SUCESSO')
            return True
            
    except Exception as e:
        log_fix(f'‚ùå ERRO CR√çTICO NA CORRE√á√ÉO: {e}')
        log_fix(f'üìã Traceback: {traceback.format_exc()}')
        return False

def run_fix_if_needed():
    """Executar corre√ß√£o apenas se necess√°rio"""
    
    # Verificar se corre√ß√£o deve ser for√ßada
    force_fix = os.environ.get('FORCE_TYPE_FIX', '').lower() in ('1', 'true', 'yes')
    
    if force_fix:
        log_fix('üöÄ CORRE√á√ÉO FOR√áADA VIA ENVIRONMENT')
        return fix_vehicle_type_errors()
    
    # Verificar se h√° indicadores de necessidade da corre√ß√£o
    try:
        from app import app, db
        from sqlalchemy import text
        
        with app.app_context():
            # Teste se h√° erro de tipos
            try:
                db.session.execute(text("""
                    SELECT uv.id 
                    FROM uso_veiculo uv 
                    WHERE uv.veiculo_id = 1 AND uv.admin_id = 2 
                    LIMIT 1
                """)).fetchone()
                
                log_fix('‚úÖ Queries funcionando - corre√ß√£o n√£o necess√°ria')
                return True
                
            except Exception as e:
                error_msg = str(e).lower()
                if 'operator does not exist' in error_msg and 'character varying' in error_msg:
                    log_fix('üîß Erro de tipos detectado - executando corre√ß√£o')
                    return fix_vehicle_type_errors()
                else:
                    log_fix(f'‚ö†Ô∏è Erro diferente detectado: {e}')
                    return True
                    
    except Exception as e:
        log_fix(f'‚ùå Erro na verifica√ß√£o: {e}')
        return False

if __name__ == '__main__':
    log_fix('üöÄ SCRIPT DE CORRE√á√ÉO DE TIPOS INICIADO')
    
    success = run_fix_if_needed()
    
    if success:
        log_fix('‚úÖ SCRIPT CONCLU√çDO COM SUCESSO')
        sys.exit(0)
    else:
        log_fix('‚ùå SCRIPT FALHOU')
        sys.exit(1)