#!/usr/bin/env python3
"""
DEBUG: Verificar se h√° valores padr√£o sendo aplicados no frontend
Adicionar logs JavaScript para capturar exatamente o que est√° sendo enviado
"""

def adicionar_debug_javascript():
    """Adiciona JavaScript de debug no template de alimenta√ß√£o"""
    
    print("üîß ADICIONANDO DEBUG JAVASCRIPT")
    print("=" * 50)
    
    # JavaScript para adicionar ao template
    debug_js = '''
// DEBUG: Interceptar envio do formul√°rio
document.getElementById('alimentacaoForm').addEventListener('submit', function(e) {
    console.log('üîç DEBUG: Formul√°rio sendo enviado');
    
    // Capturar todos os valores dos campos de data
    const dataUnica = document.getElementById('data').value;
    const dataInicio = document.getElementById('data_inicio').value;
    const dataFim = document.getElementById('data_fim').value;
    
    console.log('üìÖ Valores capturados:');
    console.log('   data √∫nica:', dataUnica);
    console.log('   data in√≠cio:', dataInicio);
    console.log('   data fim:', dataFim);
    
    // Verificar se h√° altera√ß√£o nos valores
    const formData = new FormData(this);
    console.log('üì§ FormData sendo enviado:');
    for (let [key, value] of formData.entries()) {
        if (key.includes('data')) {
            console.log(`   ${key}: ${value}`);
        }
    }
    
    // N√£o impedir o envio, apenas logar
});

// DEBUG: Monitorar mudan√ßas nos campos de data
document.getElementById('data').addEventListener('change', function() {
    console.log('üìÖ Data √∫nica alterada para:', this.value);
});

document.getElementById('data_inicio').addEventListener('change', function() {
    console.log('üìÖ Data in√≠cio alterada para:', this.value);
});

document.getElementById('data_fim').addEventListener('change', function() {
    console.log('üìÖ Data fim alterada para:', this.value);
});
'''
    
    print("JavaScript de debug criado:")
    print(debug_js)
    
    return debug_js

def verificar_valores_default():
    """Verifica se h√° valores padr√£o sendo aplicados"""
    
    print("\nüîç VERIFICA√á√ÉO: Valores Padr√£o")
    print("-" * 40)
    
    # Casos suspeitos
    casos = [
        "Campo pode estar recebendo data atual automaticamente",
        "JavaScript pode estar alterando valor ap√≥s sele√ß√£o do usu√°rio",
        "Problema de timezone do navegador",
        "Input date pode ter valor m√≠nimo/m√°ximo que for√ßa mudan√ßa",
        "Formul√°rio pode ter evento que altera datas"
    ]
    
    for i, caso in enumerate(casos, 1):
        print(f"{i}. {caso}")

def simular_problema_comum():
    """Simula problemas comuns com date inputs"""
    
    print("\n‚ö†Ô∏è PROBLEMAS COMUNS COM DATE INPUTS:")
    print("-" * 40)
    
    from datetime import date
    
    # Data de hoje (agosto)
    hoje = date.today()
    print(f"Data atual: {hoje} (m√™s {hoje.month})")
    
    # Data que o usu√°rio quer (julho)  
    data_desejada = date(2025, 7, 15)
    print(f"Data desejada: {data_desejada} (m√™s {data_desejada.month})")
    
    # Verificar se h√° l√≥gica que substitui por data atual
    print("\nPoss√≠veis causas:")
    print("1. JavaScript aplicando Date.now() ou new Date()")
    print("2. Campo date sem valor sendo preenchido com hoje")
    print("3. Valida√ß√£o que for√ßa data m√≠nima = hoje")
    print("4. Timezone do navegador alterando a data")

if __name__ == "__main__":
    debug_js = adicionar_debug_javascript()
    verificar_valores_default()
    simular_problema_comum()