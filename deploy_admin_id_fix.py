#!/usr/bin/env python3
"""
Script de Deploy: Corre√ß√£o admin_id em Produ√ß√£o
Adiciona coluna admin_id √† tabela outro_custo se ela n√£o existir
Para uso direto em produ√ß√£o
"""

import os
import sys
import logging
from sqlalchemy import create_engine, text

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def apply_admin_id_fix():
    """
    Aplica corre√ß√£o da coluna admin_id em produ√ß√£o
    """
    try:
        # Verificar DATABASE_URL
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            logger.error("‚ùå DATABASE_URL n√£o encontrada nas vari√°veis de ambiente")
            return False
            
        logger.info(f"üîó Conectando ao banco: {database_url[:30]}...")
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # Verificar se admin_id existe
            logger.info("üîç Verificando exist√™ncia da coluna admin_id...")
            result = conn.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'outro_custo' AND column_name = 'admin_id'
            """))
            
            if result.fetchone():
                logger.info("‚úÖ Coluna admin_id j√° existe - nenhuma a√ß√£o necess√°ria")
                return True
            
            logger.info("‚ùå Coluna admin_id n√£o encontrada")
            logger.info("üîß Adicionando coluna admin_id...")
            
            # Adicionar coluna
            conn.execute(text("ALTER TABLE outro_custo ADD COLUMN admin_id INTEGER"))
            logger.info("‚úÖ Coluna admin_id adicionada")
            
            # Atualizar registros existentes
            logger.info("üîÑ Atualizando registros existentes...")
            result = conn.execute(text("""
                UPDATE outro_custo 
                SET admin_id = (
                    SELECT admin_id 
                    FROM funcionario 
                    WHERE funcionario.id = outro_custo.funcionario_id
                    LIMIT 1
                )
                WHERE admin_id IS NULL
            """))
            
            updated_count = result.rowcount
            logger.info(f"‚úÖ {updated_count} registros atualizados com admin_id")
            
            # Commit das mudan√ßas
            conn.commit()
            logger.info("üíæ Mudan√ßas salvas no banco")
            
            # Verifica√ß√£o final
            logger.info("üîç Verifica√ß√£o final...")
            test_result = conn.execute(text("SELECT admin_id FROM outro_custo LIMIT 1"))
            test_value = test_result.scalar()
            
            if test_value:
                logger.info(f"‚úÖ Teste bem-sucedido: admin_id = {test_value}")
                
                # Contar registros com admin_id
                count_result = conn.execute(text("SELECT COUNT(*) FROM outro_custo WHERE admin_id IS NOT NULL"))
                count = count_result.scalar()
                logger.info(f"üìä {count} registros com admin_id preenchido")
                
                return True
            else:
                logger.error("‚ùå Falha no teste - admin_id n√£o foi preenchido")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Erro durante corre√ß√£o: {e}")
        return False

def verify_deployment():
    """
    Verifica se o deploy foi bem-sucedido
    """
    try:
        database_url = os.environ.get('DATABASE_URL')
        if not database_url:
            return False
            
        engine = create_engine(database_url)
        
        with engine.connect() as conn:
            # Verificar estrutura final
            result = conn.execute(text("""
                SELECT column_name, ordinal_position
                FROM information_schema.columns 
                WHERE table_name = 'outro_custo'
                ORDER BY ordinal_position
            """))
            
            columns = result.fetchall()
            logger.info(f"üìã Estrutura final da tabela outro_custo ({len(columns)} colunas):")
            
            admin_id_found = False
            for col in columns:
                marker = "üëâ" if col[0] == 'admin_id' else "  "
                logger.info(f"{marker} {col[1]:2d}. {col[0]}")
                if col[0] == 'admin_id':
                    admin_id_found = True
            
            if admin_id_found and len(columns) >= 12:
                logger.info("‚úÖ Estrutura da tabela correta")
                return True
            else:
                logger.error("‚ùå Estrutura da tabela incompleta")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """
    Fun√ß√£o principal do deploy
    """
    logger.info("üöÄ INICIANDO DEPLOY - Corre√ß√£o admin_id")
    logger.info("=" * 50)
    
    # Aplicar corre√ß√£o
    if not apply_admin_id_fix():
        logger.error("‚ùå Falha na aplica√ß√£o da corre√ß√£o")
        sys.exit(1)
    
    # Verificar deploy
    if not verify_deployment():
        logger.error("‚ùå Falha na verifica√ß√£o do deploy")
        sys.exit(1)
    
    logger.info("=" * 50)
    logger.info("üéØ DEPLOY CONCLU√çDO COM SUCESSO")
    logger.info("‚úÖ Sistema SIGE pronto para uso em produ√ß√£o")
    
    return True

if __name__ == "__main__":
    main()