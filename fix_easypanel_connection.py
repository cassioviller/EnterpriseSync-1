#!/usr/bin/env python3
"""
Script para resolver problemas de conex√£o no EasyPanel
Baseado nos logs da imagem fornecida
"""

import os
import sys
import time
from datetime import datetime

def check_database_connection():
    """Verifica e corrige conex√£o com banco"""
    print("üîç DIAGN√ìSTICO EASYPANEL - SIGE v8.0")
    print("=" * 50)
    print(f"‚è∞ Executado em: {datetime.now()}")
    
    # Vari√°veis de ambiente
    print("\nüìã VARI√ÅVEIS DE AMBIENTE:")
    db_url = os.environ.get('DATABASE_URL', 'N√ÉO DEFINIDA')
    print(f"   DATABASE_URL: {db_url[:50]}..." if len(db_url) > 50 else f"   DATABASE_URL: {db_url}")
    print(f"   PORT: {os.environ.get('PORT', 'N√ÉO DEFINIDA')}")
    print(f"   FLASK_APP: {os.environ.get('FLASK_APP', 'N√ÉO DEFINIDA')}")
    
    if db_url == 'N√ÉO DEFINIDA':
        print("‚ùå DATABASE_URL n√£o est√° definida!")
        return False
    
    # Tentar importar aplica√ß√£o
    print("\nüêç TESTE DE IMPORTA√á√ÉO:")
    try:
        from app import app, db
        print("   ‚úÖ App importado com sucesso")
        
        # Testar contexto da aplica√ß√£o
        with app.app_context():
            print("   ‚úÖ Contexto da aplica√ß√£o ativo")
            
            # Testar conex√£o direta
            try:
                result = db.engine.execute(db.text("SELECT 1")).fetchone()
                print("   ‚úÖ Conex√£o com PostgreSQL funcionando")
                
                # Importar modelos
                import models
                print("   ‚úÖ Modelos importados")
                
                # Criar tabelas
                db.create_all()
                print("   ‚úÖ Comando db.create_all() executado")
                
                # Verificar tabelas criadas
                inspector = db.inspect(db.engine)
                tables = inspector.get_table_names()
                print(f"   üìä Total de tabelas: {len(tables)}")
                
                if len(tables) > 0:
                    print("   üìã Primeiras 10 tabelas:")
                    for i, table in enumerate(sorted(tables)[:10]):
                        print(f"      {i+1:2d}. {table}")
                    
                    if len(tables) > 10:
                        print(f"      ... e mais {len(tables) - 10} tabelas")
                    
                    # Criar usu√°rio administrativo
                    create_admin_user()
                    
                    print("\nüéØ BANCO DE DADOS CONFIGURADO COM SUCESSO!")
                    return True
                else:
                    print("   ‚ö†Ô∏è Nenhuma tabela foi criada")
                    return False
                    
            except Exception as e:
                print(f"   ‚ùå Erro na conex√£o com banco: {e}")
                return False
                
    except Exception as e:
        print(f"   ‚ùå Erro na importa√ß√£o: {e}")
        import traceback
        traceback.print_exc()
        return False

def create_admin_user():
    """Cria usu√°rio administrativo"""
    print("\nüë§ CRIANDO USU√ÅRIO ADMINISTRATIVO:")
    
    try:
        from models import Usuario, TipoUsuario
        from werkzeug.security import generate_password_hash
        from app import db
        
        # Verificar se j√° existe
        existing_admin = Usuario.query.filter_by(tipo_usuario=TipoUsuario.SUPER_ADMIN).first()
        
        if existing_admin:
            print(f"   ‚úÖ Super Admin j√° existe: {existing_admin.email}")
        else:
            # Criar novo super admin
            admin = Usuario(
                nome='Super Administrador',
                username='admin',
                email='admin@sige.com',
                password_hash=generate_password_hash('admin123'),
                tipo_usuario=TipoUsuario.SUPER_ADMIN,
                ativo=True
            )
            db.session.add(admin)
            
            # Criar admin demo
            demo = Usuario(
                nome='Vale Verde Constru√ß√µes',
                username='valeverde',
                email='admin@valeverde.com',
                password_hash=generate_password_hash('admin123'),
                tipo_usuario=TipoUsuario.ADMIN,
                ativo=True
            )
            db.session.add(demo)
            
            db.session.commit()
            print("   ‚úÖ Super Admin criado: admin@sige.com / admin123")
            print("   ‚úÖ Admin Demo criado: valeverde / admin123")
        
        # Contar usu√°rios
        total_users = Usuario.query.count()
        print(f"   üìä Total de usu√°rios no sistema: {total_users}")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao criar usu√°rio: {e}")

def main():
    """Fun√ß√£o principal"""
    success = check_database_connection()
    
    if success:
        print("\n" + "="*50)
        print("üéâ SISTEMA SIGE v8.0 ATIVADO COM SUCESSO!")
        print("="*50)
        print("üîê CREDENCIAIS DE ACESSO:")
        print("   Super Admin: admin@sige.com / admin123")
        print("   Admin Demo:  valeverde / admin123")
        print("\nüåê Acesse sua URL do EasyPanel e fa√ßa login!")
    else:
        print("\n" + "="*50)
        print("‚ùå FALHA NA CONFIGURA√á√ÉO")
        print("="*50)
        print("üìß Envie os logs acima para o desenvolvedor")
    
    return success

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)