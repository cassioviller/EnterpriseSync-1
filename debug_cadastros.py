#!/usr/bin/env python3
"""
Script para testar problemas de cadastro das p√°ginas de configura√ß√£o
"""

from app import app, db
from models import *

def testar_cadastros():
    with app.app_context():
        print("üîç Testando problemas de cadastro nas p√°ginas de configura√ß√£o...")
        
        # 1. Verificar se os modelos existem
        print("\n1. Verificando modelos:")
        try:
            departamentos = Departamento.query.count()
            print(f"‚úÖ Departamentos: {departamentos} registros")
        except Exception as e:
            print(f"‚ùå Erro no modelo Departamento: {e}")
        
        try:
            funcoes = Funcao.query.count()
            print(f"‚úÖ Fun√ß√µes: {funcoes} registros")
        except Exception as e:
            print(f"‚ùå Erro no modelo Funcao: {e}")
        
        try:
            horarios = HorarioTrabalho.query.count()
            print(f"‚úÖ Hor√°rios: {horarios} registros")
        except Exception as e:
            print(f"‚ùå Erro no modelo HorarioTrabalho: {e}")
        
        try:
            servicos = Servico.query.count()
            print(f"‚úÖ Servi√ßos: {servicos} registros")
        except Exception as e:
            print(f"‚ùå Erro no modelo Servico: {e}")
        
        # 2. Testar cria√ß√£o de dados
        print("\n2. Testando cria√ß√£o de dados:")
        
        # Testar departamento
        try:
            dept = Departamento(nome="Teste Departamento", descricao="Teste")
            db.session.add(dept)
            db.session.flush()
            print(f"‚úÖ Departamento criado com ID: {dept.id}")
            db.session.rollback()
        except Exception as e:
            print(f"‚ùå Erro ao criar departamento: {e}")
            db.session.rollback()
        
        # Testar fun√ß√£o
        try:
            func = Funcao(nome="Teste Fun√ß√£o", descricao="Teste", salario_base=2500.00)
            db.session.add(func)
            db.session.flush()
            print(f"‚úÖ Fun√ß√£o criada com ID: {func.id}")
            db.session.rollback()
        except Exception as e:
            print(f"‚ùå Erro ao criar fun√ß√£o: {e}")
            db.session.rollback()
        
        # Testar hor√°rio
        try:
            from datetime import time
            horario = HorarioTrabalho(
                nome="Teste Hor√°rio",
                entrada=time(8, 0),
                saida_almoco=time(12, 0),
                retorno_almoco=time(13, 0),
                saida=time(17, 0),
                horas_diarias=8.0,
                dias_semana="Segunda a Sexta"
            )
            db.session.add(horario)
            db.session.flush()
            print(f"‚úÖ Hor√°rio criado com ID: {horario.id}")
            db.session.rollback()
        except Exception as e:
            print(f"‚ùå Erro ao criar hor√°rio: {e}")
            db.session.rollback()
        
        # Testar servi√ßo
        try:
            servico = Servico(
                nome="Teste Servi√ßo",
                categoria="Teste",
                unidade_medida="m¬≤",
                ativo=True
            )
            db.session.add(servico)
            db.session.flush()
            print(f"‚úÖ Servi√ßo criado com ID: {servico.id}")
            db.session.rollback()
        except Exception as e:
            print(f"‚ùå Erro ao criar servi√ßo: {e}")
            db.session.rollback()

if __name__ == "__main__":
    testar_cadastros()