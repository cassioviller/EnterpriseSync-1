FROM python:3.11-slim

# Instalar depend√™ncias do sistema
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copiar arquivos de depend√™ncias
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copiar c√≥digo da aplica√ß√£o
COPY . .

# Criar script de entrada para produ√ß√£o
RUN echo '#!/bin/bash' > /app/docker-entrypoint-producao.sh && \
    echo 'set -e' >> /app/docker-entrypoint-producao.sh && \
    echo 'echo "üîÑ Iniciando SIGE v8.0 em produ√ß√£o..."' >> /app/docker-entrypoint-producao.sh && \
    echo 'echo "üìä Verificando conectividade PostgreSQL..."' >> /app/docker-entrypoint-producao.sh && \
    echo 'until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do' >> /app/docker-entrypoint-producao.sh && \
    echo '  echo "‚è≥ Aguardando PostgreSQL ficar dispon√≠vel..."' >> /app/docker-entrypoint-producao.sh && \
    echo '  sleep 2' >> /app/docker-entrypoint-producao.sh && \
    echo 'done' >> /app/docker-entrypoint-producao.sh && \
    echo 'echo "‚úÖ PostgreSQL conectado com sucesso"' >> /app/docker-entrypoint-producao.sh && \
    echo 'echo "üéØ Interface RDO moderna sincronizada"' >> /app/docker-entrypoint-producao.sh && \
    echo 'echo "üöÄ Iniciando servidor Gunicorn..."' >> /app/docker-entrypoint-producao.sh && \
    echo 'exec gunicorn --bind 0.0.0.0:5000 --workers 2 --timeout 120 --reload main:app' >> /app/docker-entrypoint-producao.sh

# Tornar script execut√°vel
RUN chmod +x /app/docker-entrypoint-producao.sh

EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:5000/health || exit 1

ENTRYPOINT ["/app/docker-entrypoint-producao.sh"]
