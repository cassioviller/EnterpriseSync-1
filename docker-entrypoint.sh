#!/bin/bash
# DOCKER ENTRYPOINT - SIGE v8.0
# Script de inicializa√ß√£o para container de produ√ß√£o
# Implementa: 1) Usu√°rio superadmin autom√°tico 2) Migra√ß√µes de banco

set -e

echo "üöÄ Iniciando SIGE v8.0 em container Docker..."

# Aguardar banco de dados estar dispon√≠vel
echo "‚è≥ Aguardando banco de dados PostgreSQL..."

# Extrair host e porta da DATABASE_URL
DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\):.*/\1/p')
DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
DB_USER=$(echo $DATABASE_URL | sed -n 's/.*\/\/\([^:]*\):.*/\1/p')

# Usar valores padr√£o se n√£o conseguir extrair
DB_HOST=${DB_HOST:-viajey_sige}
DB_PORT=${DB_PORT:-5432}
DB_USER=${DB_USER:-sige}

echo "   Conectando em: $DB_HOST:$DB_PORT como $DB_USER"

until pg_isready -h $DB_HOST -p $DB_PORT -U $DB_USER; do
    echo "   Banco ainda n√£o dispon√≠vel, aguardando..."
    sleep 3
done
echo "‚úÖ Banco de dados conectado!"

# ==========================================
# MELHORIA 2: APLICAR MIGRA√á√ïES DE BANCO
# ==========================================
echo "üóÑÔ∏è Aplicando migra√ß√µes de banco de dados..."
cd /app

# Configurar vari√°vel de ambiente para Flask-Migrate
export FLASK_APP=app.py

# Tentar executar migra√ß√µes primeiro
echo "   Tentando aplicar migra√ß√µes existentes..."
flask db upgrade 2>/dev/null && echo "‚úÖ Migra√ß√µes aplicadas" || {
    echo "   Nenhuma migra√ß√£o encontrada, criando migra√ß√£o inicial..."
    
    # Se n√£o h√° migra√ß√µes, criar uma
    if [ ! -f "migrations/versions/"*.py ] 2>/dev/null; then
        echo "   Gerando migra√ß√£o inicial..."
        flask db migrate -m "Initial migration from models" 2>/dev/null || echo "   Aviso: Erro ao gerar migra√ß√£o"
    fi
    
    # Aplicar migra√ß√µes ou criar tabelas manualmente
    flask db upgrade 2>/dev/null || {
        echo "   Migra√ß√µes falharam, criando tabelas diretamente..."
        python -c "
from app import app, db
with app.app_context():
    try:
        db.create_all()
        print('‚úÖ Tabelas criadas diretamente')
    except Exception as e:
        print(f'‚ùå Erro ao criar tabelas: {e}')
        exit(1)
        "
    }
}
echo "‚úÖ Migra√ß√µes aplicadas/verificadas com sucesso"

# ==========================================
# MELHORIA 1: USU√ÅRIO SUPERADMIN AUTOM√ÅTICO
# ==========================================
echo "üë§ Verificando/Criando usu√°rio superadmin..."
python -c "
import os
from app import app, db
from models import Usuario, TipoUsuario
from werkzeug.security import generate_password_hash

with app.app_context():
    try:
        # Configura√ß√µes do superadmin via vari√°veis de ambiente
        admin_email = os.environ.get('SUPERADMIN_EMAIL', 'admin@sige.com')
        admin_password = os.environ.get('SUPERADMIN_PASSWORD', 'admin123')
        admin_nome = os.environ.get('SUPERADMIN_NAME', 'Super Admin')
        admin_username = os.environ.get('SUPERADMIN_USERNAME', 'admin')
        
        # Verificar se j√° existe um superadmin
        existing_admin = Usuario.query.filter_by(email=admin_email).first()
        
        if not existing_admin:
            # Verificar se j√° existe algum superadmin
            existing_superadmin = Usuario.query.filter_by(tipo_usuario=TipoUsuario.SUPER_ADMIN).first()
            
            if existing_superadmin:
                print(f'‚òëÔ∏è J√° existe um usu√°rio superadmin: {existing_superadmin.email}')
            else:
                # Criar hash da senha
                password_hash = generate_password_hash(admin_password)
                
                # Criar novo superadmin
                new_admin = Usuario(
                    username=admin_username,
                    email=admin_email,
                    nome=admin_nome,
                    password_hash=password_hash,
                    tipo_usuario=TipoUsuario.SUPER_ADMIN,
                    ativo=True,
                    admin_id=None  # Superadmin n√£o tem admin pai
                )
                
                db.session.add(new_admin)
                db.session.commit()
                
                print(f'‚úÖ Usu√°rio superadmin criado com sucesso!')
                print(f'   Email: {admin_email}')
                print(f'   Username: {admin_username}')
                print(f'   Nome: {admin_nome}')
        else:
            print(f'‚òëÔ∏è Usu√°rio superadmin j√° existe: {admin_email}')
            # Garantir que seja SUPER_ADMIN e esteja ativo
            if existing_admin.tipo_usuario != TipoUsuario.SUPER_ADMIN or not existing_admin.ativo:
                existing_admin.tipo_usuario = TipoUsuario.SUPER_ADMIN
                existing_admin.ativo = True
                db.session.commit()
                print(f'‚úÖ Tipo de usu√°rio atualizado para SUPER_ADMIN')
                
    except Exception as e:
        print(f'‚ùå Erro ao criar/verificar superadmin: {e}')
        # N√£o sair com erro fatal aqui, pois pode ser um problema tempor√°rio
        import traceback
        traceback.print_exc()
" || echo "‚ö†Ô∏è Problema na cria√ß√£o do superadmin, continuando..."

# Verificar sa√∫de da aplica√ß√£o
echo "üîç Verificando aplica√ß√£o..."
python -c "
from app import app
try:
    with app.app_context():
        print('‚úÖ Aplica√ß√£o carregada com sucesso')
except Exception as e:
    print(f'‚ùå Erro na aplica√ß√£o: {e}')
    exit(1)
"

# Mostrar credenciais de acesso
echo ""
echo "üîë CREDENCIAIS DE ACESSO SUPERADMIN:"
echo "   Email: ${SUPERADMIN_EMAIL:-admin@sige.com}"
echo "   Senha: ${SUPERADMIN_PASSWORD:-admin123}"
echo ""

# Iniciar aplica√ß√£o com Gunicorn
echo "üåê Iniciando servidor Gunicorn na porta ${PORT}..."
exec gunicorn \
    --bind 0.0.0.0:${PORT} \
    --workers 4 \
    --worker-class sync \
    --timeout 30 \
    --access-logfile - \
    --error-logfile - \
    --log-level info \
    main:app