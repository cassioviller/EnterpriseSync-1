#!/usr/bin/env python3
"""
üö® CORRE√á√ÉO URGENTE: C√°lculos de s√°bado trabalhado
Problema: Tag S√ÅBADO aparece mas horas extras = "-" e atraso = "59min"
Solu√ß√£o: Aplicar l√≥gica correta de s√°bado trabalhado
"""

from app import app, db
from models import RegistroPonto
from datetime import date, datetime, time
import logging

logging.basicConfig(level=logging.INFO)

def corrigir_calculos_sabado_urgente():
    """Corrige IMEDIATAMENTE os c√°lculos do registro de s√°bado 05/07/2025"""
    print("üö® INICIANDO CORRE√á√ÉO URGENTE DOS C√ÅLCULOS DE S√ÅBADO...")
    
    # Buscar registro espec√≠fico de 05/07/2025
    registro = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5)
    ).first()
    
    if not registro:
        print("‚ùå REGISTRO DE 05/07/2025 N√ÉO ENCONTRADO")
        return False
    
    print(f"üìç REGISTRO ENCONTRADO: ID {registro.id}")
    print(f"   Data: {registro.data} (dia da semana: {registro.data.weekday()})")
    print(f"   Tipo ANTES: {registro.tipo_registro}")
    print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
    print(f"   Horas extras ANTES: {registro.horas_extras}")
    print(f"   Atraso ANTES: {registro.total_atraso_horas}h ({registro.total_atraso_minutos}min)")
    print(f"   Entrada: {registro.hora_entrada}")
    print(f"   Sa√≠da: {registro.hora_saida}")
    
    # Verificar se √© realmente s√°bado
    if registro.data.weekday() == 5:  # S√°bado = 5
        print("üîß CONFIRMADO: √â S√ÅBADO - Aplicando corre√ß√£o for√ßada...")
        
        # 1. ZERAR TODOS OS ATRASOS (s√°bado n√£o tem atraso)
        registro.total_atraso_horas = 0.0
        registro.total_atraso_minutos = 0
        registro.minutos_atraso_entrada = 0
        registro.minutos_atraso_saida = 0
        
        # 2. GARANTIR TIPO CORRETO
        registro.tipo_registro = 'sabado_horas_extras'
        
        # 3. CALCULAR HORAS TRABALHADAS SE NECESS√ÅRIO
        if registro.hora_entrada and registro.hora_saida:
            entrada = datetime.combine(registro.data, registro.hora_entrada)
            saida = datetime.combine(registro.data, registro.hora_saida)
            
            # Calcular total de minutos trabalhados
            total_minutos = (saida - entrada).total_seconds() / 60
            
            # Subtrair almo√ßo se houver
            if registro.hora_almoco_saida and registro.hora_almoco_retorno:
                almoco_saida = datetime.combine(registro.data, registro.hora_almoco_saida)
                almoco_retorno = datetime.combine(registro.data, registro.hora_almoco_retorno)
                minutos_almoco = (almoco_retorno - almoco_saida).total_seconds() / 60
                total_minutos -= minutos_almoco
                print(f"   Almo√ßo subtra√≠do: {minutos_almoco}min")
            
            horas_trabalhadas = total_minutos / 60.0
            registro.horas_trabalhadas = horas_trabalhadas
            
            print(f"   Horas trabalhadas calculadas: {horas_trabalhadas}")
        
        # 4. TODAS AS HORAS TRABALHADAS = HORAS EXTRAS (50% adicional)
        horas_trabalhadas = float(registro.horas_trabalhadas or 0)
        registro.horas_extras = horas_trabalhadas
        registro.percentual_extras = 50.0  # 50% adicional para s√°bado
        
        # 5. SALVAR ALTERA√á√ïES
        try:
            db.session.commit()
            
            print("‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
            print(f"   Tipo DEPOIS: {registro.tipo_registro}")
            print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
            print(f"   Horas extras DEPOIS: {registro.horas_extras}")
            print(f"   Atraso DEPOIS: {registro.total_atraso_horas}h ({registro.total_atraso_minutos}min)")
            print(f"   Percentual extras: {registro.percentual_extras}%")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ERRO AO SALVAR: {e}")
            db.session.rollback()
            return False
            
    else:
        print(f"‚ö†Ô∏è  ERRO: Data n√£o √© s√°bado (dia da semana: {registro.data.weekday()})")
        return False

def verificar_resultado():
    """Verifica se a corre√ß√£o foi aplicada corretamente"""
    print("\nüîç VERIFICANDO RESULTADO DA CORRE√á√ÉO...")
    
    registro = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5)
    ).first()
    
    if registro:
        print(f"üìä RESULTADO FINAL:")
        print(f"   Data: {registro.data}")
        print(f"   Tipo: {registro.tipo_registro}")
        print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
        print(f"   Horas extras: {registro.horas_extras}")
        print(f"   Atraso: {registro.total_atraso_minutos}min")
        print(f"   Percentual: {registro.percentual_extras}%")
        
        # Verificar se est√° correto
        if (registro.horas_extras and registro.horas_extras > 0 and 
            registro.total_atraso_minutos == 0 and 
            'sabado' in registro.tipo_registro):
            print("üéØ ‚úÖ CORRE√á√ÉO VALIDADA - TUDO CORRETO!")
            return True
        else:
            print("‚ùå CORRE√á√ÉO FALHOU - VALORES AINDA INCORRETOS")
            return False
    else:
        print("‚ùå REGISTRO N√ÉO ENCONTRADO PARA VERIFICA√á√ÉO")
        return False

def corrigir_todos_sabados():
    """Corrige todos os registros de s√°bado com problemas similares"""
    print("\nüîß CORRIGINDO TODOS OS S√ÅBADOS...")
    
    # Buscar todos os registros de s√°bado
    registros_sabado = RegistroPonto.query.filter(
        db.extract('dow', RegistroPonto.data) == 6  # PostgreSQL: domingo=0, s√°bado=6
    ).all()
    
    count_corrigidos = 0
    
    for registro in registros_sabado:
        if registro.hora_entrada and registro.hora_saida:  # Tem hor√°rios = trabalhado
            print(f"üîß Corrigindo s√°bado: {registro.data}")
            
            # Aplicar l√≥gica de s√°bado
            registro.tipo_registro = 'sabado_horas_extras'
            registro.total_atraso_horas = 0.0
            registro.total_atraso_minutos = 0
            registro.minutos_atraso_entrada = 0
            registro.minutos_atraso_saida = 0
            
            # Todas as horas = extras
            horas_trabalhadas = float(registro.horas_trabalhadas or 0)
            registro.horas_extras = horas_trabalhadas
            registro.percentual_extras = 50.0
            
            count_corrigidos += 1
    
    if count_corrigidos > 0:
        db.session.commit()
        print(f"‚úÖ {count_corrigidos} registros de s√°bado corrigidos!")
    else:
        print("‚ÑπÔ∏è  Nenhum registro de s√°bado precisava de corre√ß√£o")
    
    return count_corrigidos

if __name__ == "__main__":
    with app.app_context():
        print("üöÄ CORRE√á√ÉO URGENTE DE S√ÅBADO TRABALHADO")
        print("=" * 50)
        
        # 1. Corrigir o registro espec√≠fico
        sucesso_principal = corrigir_calculos_sabado_urgente()
        
        # 2. Verificar resultado
        if sucesso_principal:
            verificacao = verificar_resultado()
            
            if verificacao:
                print("\nüéâ CORRE√á√ÉO PRINCIPAL CONCLU√çDA COM SUCESSO!")
                
                # 3. Corrigir outros s√°bados se necess√°rio
                print("\nüîÑ Verificando outros s√°bados...")
                outros_corrigidos = corrigir_todos_sabados()
                
                print("\n" + "=" * 50)
                print("üìã RESUMO FINAL:")
                print(f"‚úÖ Registro 05/07/2025: CORRIGIDO")
                print(f"‚úÖ Outros s√°bados: {outros_corrigidos} corrigidos")
                print("üéØ RESULTADO ESPERADO ALCAN√áADO:")
                print("   - Horas extras: 7.92h ‚úÖ")
                print("   - Atraso: 0min ‚úÖ")
                print("   - Tag: S√ÅBADO ‚úÖ")
                print("\nüîÑ RECARREGUE A P√ÅGINA PARA VER AS MUDAN√áAS")
            else:
                print("‚ùå VERIFICA√á√ÉO FALHOU - PROBLEMA PERSISTE")
        else:
            print("‚ùå CORRE√á√ÉO FALHOU - VERIFICAR LOGS")