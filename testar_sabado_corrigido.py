#!/usr/bin/env python3
"""
üß™ TESTE: Verificar se corre√ß√£o de s√°bado foi aplicada corretamente
"""

from app import app, db
from models import RegistroPonto
from datetime import date

def testar_correcao_sabado():
    """Testa se a corre√ß√£o do s√°bado foi aplicada"""
    print("üß™ TESTE: Verificando corre√ß√£o de s√°bado 05/07/2025")
    print("=" * 50)
    
    # Buscar registro espec√≠fico
    registro = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5)
    ).first()
    
    if not registro:
        print("‚ùå Registro n√£o encontrado")
        return False
    
    print(f"üìä DADOS DO REGISTRO:")
    print(f"   ID: {registro.id}")
    print(f"   Data: {registro.data}")
    print(f"   Tipo: {registro.tipo_registro}")
    print(f"   Entrada: {registro.hora_entrada}")
    print(f"   Sa√≠da: {registro.hora_saida}")
    print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
    print(f"   Horas extras: {registro.horas_extras}")
    print(f"   Atraso (horas): {registro.total_atraso_horas}")
    print(f"   Atraso (minutos): {registro.total_atraso_minutos}")
    print(f"   Percentual: {registro.percentual_extras}%")
    
    # Verificar se est√° correto
    resultados = []
    
    # 1. Deve ter horas extras (n√£o deve ser None ou 0)
    if registro.horas_extras and registro.horas_extras > 0:
        print(f"‚úÖ Horas extras: {registro.horas_extras}h (OK)")
        resultados.append(True)
    else:
        print(f"‚ùå Horas extras: {registro.horas_extras} (ERRO)")
        resultados.append(False)
    
    # 2. Atraso deve ser zero
    if registro.total_atraso_minutos == 0:
        print(f"‚úÖ Atraso: {registro.total_atraso_minutos}min (OK)")
        resultados.append(True)
    else:
        print(f"‚ùå Atraso: {registro.total_atraso_minutos}min (ERRO)")
        resultados.append(False)
    
    # 3. Tipo deve ser s√°bado
    if 'sabado' in (registro.tipo_registro or ''):
        print(f"‚úÖ Tipo: {registro.tipo_registro} (OK)")
        resultados.append(True)
    else:
        print(f"‚ùå Tipo: {registro.tipo_registro} (ERRO)")
        resultados.append(False)
    
    # 4. Percentual deve ser 50%
    if registro.percentual_extras == 50.0:
        print(f"‚úÖ Percentual: {registro.percentual_extras}% (OK)")
        resultados.append(True)
    else:
        print(f"‚ùå Percentual: {registro.percentual_extras}% (ERRO)")
        resultados.append(False)
    
    sucesso = all(resultados)
    
    print("\nüìã RESULTADO:")
    if sucesso:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Corre√ß√£o aplicada com sucesso")
        print("‚úÖ S√°bado trabalhado calculado corretamente")
        return True
    else:
        print("‚ùå ALGUNS TESTES FALHARAM")
        print("‚ö†Ô∏è  Corre√ß√£o pode n√£o ter sido aplicada completamente")
        return False

def testar_todos_sabados():
    """Testa todos os registros de s√°bado"""
    print("\nüîç TESTE: Verificando todos os s√°bados")
    print("=" * 50)
    
    # Buscar registros de s√°bado com hor√°rios
    registros_sabado = RegistroPonto.query.filter(
        db.extract('dow', RegistroPonto.data) == 6,  # PostgreSQL: s√°bado = 6
        RegistroPonto.hora_entrada.isnot(None),
        RegistroPonto.hora_saida.isnot(None)
    ).all()
    
    print(f"üìä Encontrados {len(registros_sabado)} s√°bados trabalhados")
    
    problemas = []
    
    for registro in registros_sabado:
        # Verificar se tem horas extras
        if not registro.horas_extras or registro.horas_extras == 0:
            problemas.append(f"‚ùå {registro.data}: sem horas extras")
        
        # Verificar se tem atraso zero
        if registro.total_atraso_minutos != 0:
            problemas.append(f"‚ùå {registro.data}: atraso {registro.total_atraso_minutos}min")
        
        # Verificar percentual
        if registro.percentual_extras != 50.0:
            problemas.append(f"‚ùå {registro.data}: percentual {registro.percentual_extras}%")
    
    if problemas:
        print("‚ö†Ô∏è  PROBLEMAS ENCONTRADOS:")
        for problema in problemas[:5]:  # Mostrar s√≥ os primeiros 5
            print(f"   {problema}")
        if len(problemas) > 5:
            print(f"   ... e mais {len(problemas) - 5} problemas")
        return False
    else:
        print("‚úÖ TODOS OS S√ÅBADOS EST√ÉO CORRETOS!")
        return True

if __name__ == "__main__":
    with app.app_context():
        print("üöÄ TESTE COMPLETO: Corre√ß√£o de S√°bado")
        print("=" * 60)
        
        # Teste 1: Verificar registro espec√≠fico
        teste1 = testar_correcao_sabado()
        
        # Teste 2: Verificar todos os s√°bados
        teste2 = testar_todos_sabados()
        
        print("\n" + "=" * 60)
        print("üìã RESUMO FINAL:")
        
        if teste1 and teste2:
            print("üéâ TODOS OS TESTES PASSARAM!")
            print("‚úÖ Corre√ß√£o de s√°bado funcionando perfeitamente")
            print("‚úÖ Sistema aplicando l√≥gica correta")
        else:
            print("‚ö†Ô∏è  ALGUNS TESTES FALHARAM")
            if not teste1:
                print("‚ùå Registro espec√≠fico (05/07) com problemas")
            if not teste2:
                print("‚ùå Outros s√°bados com problemas")
        
        print("=" * 60)