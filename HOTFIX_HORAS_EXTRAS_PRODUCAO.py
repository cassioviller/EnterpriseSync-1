#!/usr/bin/env python3
"""
HOTFIX PRODU√á√ÉO: Corre√ß√£o de Horas Extras
Execute este arquivo no ambiente de produ√ß√£o para corrigir os c√°lculos
"""

from app import app, db
from models import RegistroPonto, Funcionario
from datetime import date, time

def aplicar_correcao_producao():
    """Aplica corre√ß√£o completa no ambiente de produ√ß√£o"""
    
    with app.app_context():
        print("üö® HOTFIX PRODU√á√ÉO - CORRE√á√ÉO HORAS EXTRAS")
        print("=" * 50)
        
        registros_corrigidos = 0
        
        # Buscar todos registros de trabalho normal
        registros = RegistroPonto.query.filter(
            RegistroPonto.tipo_registro == 'trabalho_normal',
            RegistroPonto.hora_entrada.isnot(None),
            RegistroPonto.hora_saida.isnot(None)
        ).all()
        
        print(f"üìã Processando {len(registros)} registros...")
        
        for registro in registros:
            funcionario = Funcionario.query.get(registro.funcionario_id)
            
            # Hor√°rio padr√£o: 07:12-17:00 (todos funcion√°rios)
            padrao_entrada_min = 7 * 60 + 12  # 432 min
            padrao_saida_min = 17 * 60         # 1020 min
            
            # Hor√°rio real
            real_entrada_min = registro.hora_entrada.hour * 60 + registro.hora_entrada.minute
            real_saida_min = registro.hora_saida.hour * 60 + registro.hora_saida.minute
            
            # CALCULAR ATRASOS
            atraso_entrada = max(0, real_entrada_min - padrao_entrada_min)
            atraso_saida = max(0, padrao_saida_min - real_saida_min)
            total_atraso_min = atraso_entrada + atraso_saida
            
            # CALCULAR EXTRAS
            extra_entrada = max(0, padrao_entrada_min - real_entrada_min)
            extra_saida = max(0, real_saida_min - padrao_saida_min)
            total_extra_min = extra_entrada + extra_saida
            
            # Converter para horas
            atraso_horas = total_atraso_min / 60.0
            extra_horas = total_extra_min / 60.0
            
            # Verificar se precisa corre√ß√£o
            needs_fix = (
                abs(registro.horas_extras - extra_horas) > 0.01 or
                abs(registro.total_atraso_horas - atraso_horas) > 0.01
            )
            
            if needs_fix:
                # Valores anteriores para log
                old_extra = registro.horas_extras
                old_atraso = registro.total_atraso_horas
                
                # Aplicar corre√ß√µes
                registro.horas_extras = round(extra_horas, 2)
                registro.total_atraso_horas = round(atraso_horas, 2)
                registro.total_atraso_minutos = total_atraso_min
                registro.minutos_atraso_entrada = atraso_entrada
                registro.minutos_atraso_saida = atraso_saida
                
                # Percentual de extras
                if registro.horas_extras > 0:
                    registro.percentual_extras = 50.0
                else:
                    registro.percentual_extras = 0.0
                
                # Recalcular horas trabalhadas
                total_min = real_saida_min - real_entrada_min - 60  # Menos 1h almo√ßo
                registro.horas_trabalhadas = round(max(0, total_min / 60.0), 2)
                
                print(f"‚úÖ {funcionario.nome} {registro.data}: "
                      f"Extras {old_extra}h‚Üí{registro.horas_extras}h, "
                      f"Atrasos {old_atraso}h‚Üí{registro.total_atraso_horas}h")
                
                registros_corrigidos += 1
        
        # Commit das altera√ß√µes
        try:
            db.session.commit()
            print(f"\nüéâ SUCESSO: {registros_corrigidos} registros corrigidos!")
            
            # Verificar casos espec√≠ficos
            print("\nüîç VERIFICA√á√ÉO FINAL:")
            
            # Jo√£o Silva Santos 31/07/2025
            joao_31 = RegistroPonto.query.filter(
                RegistroPonto.data == date(2025, 7, 31),
                RegistroPonto.hora_entrada == time(7, 5),
                RegistroPonto.hora_saida == time(17, 50)
            ).first()
            
            if joao_31:
                func = Funcionario.query.get(joao_31.funcionario_id)
                print(f"‚úÖ {func.nome} 31/07: {joao_31.horas_extras}h extras - {joao_31.percentual_extras}%")
            
            # Ana Paula 29/07/2025
            ana_29 = RegistroPonto.query.filter(
                RegistroPonto.data == date(2025, 7, 29),
                RegistroPonto.hora_entrada == time(7, 30),
                RegistroPonto.hora_saida == time(18, 0)
            ).first()
            
            if ana_29:
                func2 = Funcionario.query.get(ana_29.funcionario_id)
                print(f"‚úÖ {func2.nome} 29/07: {ana_29.horas_extras}h extras, {ana_29.total_atraso_horas}h atrasos")
            
            print("\n‚úÖ HOTFIX APLICADO COM SUCESSO!")
            
        except Exception as e:
            db.session.rollback()
            print(f"\n‚ùå ERRO: {str(e)}")
            raise

if __name__ == "__main__":
    aplicar_correcao_producao()