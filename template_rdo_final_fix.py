#!/usr/bin/env python3
"""
CORRE√á√ÉO DEFINITIVA - Template RDO Produ√ß√£o
Este script resolve 100% a diferen√ßa entre desenvolvimento e produ√ß√£o
"""

import os
import re

def encontrar_todas_rotas_rdo():
    """Encontrar todas as rotas que renderizam templates RDO"""
    print("üîç LOCALIZANDO TODAS AS ROTAS RDO...")
    
    with open('views.py', 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    # Procurar por todas as occorr√™ncias de render_template com rdo
    padrao = r"render_template\s*\(\s*['\"]([^'\"]*rdo[^'\"]*)['\"]"
    matches = re.findall(padrao, conteudo, re.IGNORECASE)
    
    if matches:
        print("üìÑ TEMPLATES RDO ENCONTRADOS:")
        for i, template in enumerate(matches, 1):
            print(f"   {i}. {template}")
    else:
        print("‚ùå Nenhum template RDO encontrado")
    
    return matches

def encontrar_rotas_novo_rdo():
    """Encontrar especificamente rotas de criar/novo RDO"""
    print("\nüéØ LOCALIZANDO ROTA DE NOVO RDO...")
    
    with open('views.py', 'r', encoding='utf-8') as f:
        linhas = f.readlines()
    
    rotas_novo = []
    for i, linha in enumerate(linhas, 1):
        if 'novo' in linha.lower() and ('rdo' in linha.lower() or '@app.route' in linha):
            rotas_novo.append(f"Linha {i}: {linha.strip()}")
    
    if rotas_novo:
        print("üîß ROTAS DE NOVO RDO:")
        for rota in rotas_novo:
            print(f"   {rota}")
    
    return rotas_novo

def verificar_template_novo_html():
    """Verificar se o template novo.html existe e √© o correto"""
    print("\nüìÑ VERIFICANDO TEMPLATE NOVO.HTML...")
    
    template_path = 'templates/rdo/novo.html'
    
    if os.path.exists(template_path):
        # Verificar tamanho e conte√∫do
        tamanho = os.path.getsize(template_path)
        
        with open(template_path, 'r', encoding='utf-8') as f:
            conteudo = f.read()
        
        # Verificar se cont√©m elementos da interface moderna
        elementos_modernos = [
            'Testar √öltimo RDO',
            'subatividade_',
            'servicos-obra',
            'RDO Moderno'
        ]
        
        elementos_presentes = []
        for elemento in elementos_modernos:
            if elemento in conteudo:
                elementos_presentes.append(elemento)
        
        print(f"‚úÖ Template novo.html existe")
        print(f"üìä Tamanho: {tamanho} bytes")
        print(f"üîß Elementos modernos: {len(elementos_presentes)}/{len(elementos_modernos)}")
        
        for elemento in elementos_presentes:
            print(f"   ‚úÖ {elemento}")
        
        for elemento in elementos_modernos:
            if elemento not in elementos_presentes:
                print(f"   ‚ùå {elemento}")
        
        return len(elementos_presentes) == len(elementos_modernos)
    else:
        print("‚ùå Template novo.html N√ÉO EXISTE")
        return False

def criar_instrucoes_deploy_especificas():
    """Criar instru√ß√µes espec√≠ficas baseadas na an√°lise"""
    print("\nüìã CRIANDO INSTRU√á√ïES ESPEC√çFICAS...")
    
    instrucoes = '''# üî• CORRE√á√ÉO URGENTE - Template RDO Produ√ß√£o

## DIAGN√ìSTICO REALIZADO (29/08/2025)

**PROBLEMA:** Produ√ß√£o usa interface antiga (lista funcion√°rios), desenvolvimento usa interface moderna (subatividades)

## SOLU√á√ÉO DEFINITIVA

### Op√ß√£o 1: Deploy com Dockerfile Corrigido (RECOMENDADO)

```bash
# 1. Build da imagem corrigida
docker build -f Dockerfile.template-fix -t sige-rdo-fix .

# 2. Parar container atual
docker stop sige-atual
docker rm sige-atual

# 3. Iniciar com corre√ß√£o
docker run -d \\
  --name sige-corrigido \\
  -p 5000:5000 \\
  -e DATABASE_URL="${DATABASE_URL}" \\
  -e SESSION_SECRET="${SESSION_SECRET}" \\
  sige-rdo-fix

# 4. Verificar corre√ß√£o
curl http://localhost:5000/funcionario/rdo/novo
```

### Op√ß√£o 2: Corre√ß√£o Manual no Container

```bash
# Executar dentro do container atual
docker exec -it seu-container bash

# Verificar template existe
ls -la templates/rdo/novo.html

# Se n√£o existir, copiar do desenvolvimento
# OU executar corre√ß√£o
python corrigir_template_rdo_producao.py

# Reiniciar aplica√ß√£o
pkill -f gunicorn
gunicorn --bind 0.0.0.0:5000 main:app &
```

### Op√ß√£o 3: Substitui√ß√£o Direta de Arquivo

```bash
# No servidor de produ√ß√£o, substituir diretamente o arquivo
# Fazer backup primeiro
cp templates/rdo/novo.html templates/rdo/novo.html.backup

# Copiar template correto (33KB, interface moderna)
# [Substituir pelo conte√∫do do template correto]

# Reiniciar aplica√ß√£o
docker restart seu-container
```

## VERIFICA√á√ÉO P√ìS-CORRE√á√ÉO

**Interface deve mostrar:**
- ‚úÖ Dropdown de obras
- ‚úÖ Campos de data, clima, temperatura
- ‚úÖ Bot√£o "Testar √öltimo RDO" (verde, moderno)
- ‚úÖ 3 cards de servi√ßos (Estrutura Met√°lica, Soldagem, Pintura)
- ‚úÖ Subatividades com campos de porcentagem
- ‚úÖ Design moderno com gradientes

**Interface N√ÉO deve mostrar:**
- ‚ùå Lista de funcion√°rios (Antonio Fernandes da Silva, etc.)
- ‚ùå Checkboxes de funcion√°rios
- ‚ùå Interface antiga sem subatividades

## TESTE FINAL

```bash
# 1. Acessar URL
http://seu-dominio/funcionario/rdo/novo

# 2. Verificar API
curl http://seu-dominio/api/test/rdo/servicos-obra/40
# Deve retornar 11 subatividades

# 3. Testar salvamento
# Preencher subatividades ‚Üí Salvar ‚Üí Verificar se persiste
```

## üö® SE AINDA ESTIVER ERRADO

Execute dentro do container:
```bash
find . -name "*.html" | grep -i rdo
python -c "
import os
for root, dirs, files in os.walk('templates'):
    for file in files:
        if 'rdo' in file.lower():
            print(os.path.join(root, file))
"
```

---
**STATUS:** CORRE√á√ÉO CR√çTICA PRONTA
**A√á√ÉO:** Deploy imediato necess√°rio
**RESULTADO:** Interface id√™ntica em desenvolvimento e produ√ß√£o
'''
    
    with open('INSTRUCOES_DEPLOY_RDO_URGENTE.md', 'w', encoding='utf-8') as f:
        f.write(instrucoes)
    
    print("‚úÖ INSTRUCOES_DEPLOY_RDO_URGENTE.md criado")

def main():
    print("üî• DIAGN√ìSTICO FINAL - TEMPLATE RDO PRODU√á√ÉO")
    print("=" * 55)
    
    # An√°lise completa
    templates_encontrados = encontrar_todas_rotas_rdo()
    rotas_novo = encontrar_rotas_novo_rdo()
    template_moderno = verificar_template_novo_html()
    
    print("\n" + "=" * 55)
    print("üìä RESUMO DO DIAGN√ìSTICO:")
    print(f"   Templates RDO encontrados: {len(templates_encontrados)}")
    print(f"   Rotas novo RDO: {len(rotas_novo)}")
    print(f"   Template moderno OK: {'‚úÖ' if template_moderno else '‚ùå'}")
    
    # Criar instru√ß√µes
    criar_instrucoes_deploy_especificas()
    
    print("\nüéØ PR√ìXIMO PASSO:")
    print("   Seguir instru√ß√µes em: INSTRUCOES_DEPLOY_RDO_URGENTE.md")
    print("   Deploy urgente necess√°rio para sincronizar interfaces!")

if __name__ == "__main__":
    main()