#!/usr/bin/env python3
"""
Reproduz exatamente o problema da imagem anexada
Cria um registro de s√°bado e verifica se hor√°rios de almo√ßo s√£o salvos
"""

from app import app, db
from models import *
from datetime import date, time, datetime, timedelta
from utils import calcular_horas_trabalhadas
import logging

logging.basicConfig(level=logging.INFO)

def limpar_registros_sabado():
    """Remove registros existentes para o s√°bado 05/07/2025"""
    
    with app.app_context():
        data_sabado = date(2025, 7, 5)
        
        registros_existentes = RegistroPonto.query.filter_by(data=data_sabado).all()
        
        for registro in registros_existentes:
            print(f"Removendo registro existente ID {registro.id} de {registro.data}")
            db.session.delete(registro)
        
        db.session.commit()

def criar_registro_exato_imagem():
    """Cria registro exatamente como mostrado na imagem"""
    
    with app.app_context():
        # Buscar primeiro funcion√°rio ativo
        funcionario = Funcionario.query.filter_by(ativo=True).first()
        if not funcionario:
            print("‚ùå Nenhum funcion√°rio ativo encontrado")
            return None
        
        print(f"‚úì Usando funcion√°rio: {funcionario.nome}")
        
        # Data 05/07/2025 (s√°bado da imagem)
        data_sabado = date(2025, 7, 5)
        
        # Criar registro EXATAMENTE como na imagem
        # Entrada: 07:07, Sa√≠da: 16:02
        # A imagem mostra que os campos de almo√ßo est√£o vazios (-)
        registro = RegistroPonto(
            funcionario_id=funcionario.id,
            obra_id=None,
            data=data_sabado,
            hora_entrada=time(7, 7),      # 07:07
            hora_saida=time(16, 2),       # 16:02
            hora_almoco_saida=time(12, 0),    # TESTANDO: definir hor√°rio de almo√ßo
            hora_almoco_retorno=time(13, 0),  # TESTANDO: definir retorno almo√ßo
            observacoes="S√°bado - teste reprodu√ß√£o imagem"
        )
        
        print(f"Criando registro com:")
        print(f"  - Entrada: {registro.hora_entrada}")
        print(f"  - Sa√≠da: {registro.hora_saida}")
        print(f"  - Almo√ßo Sa√≠da: {registro.hora_almoco_saida}")
        print(f"  - Almo√ßo Retorno: {registro.hora_almoco_retorno}")
        
        # Calcular horas usando a fun√ß√£o do sistema
        if registro.hora_entrada and registro.hora_saida:
            horas_calc = calcular_horas_trabalhadas(
                registro.hora_entrada,
                registro.hora_saida,
                registro.hora_almoco_saida,
                registro.hora_almoco_retorno
            )
            
            registro.horas_trabalhadas = horas_calc['total']
            registro.horas_extras = horas_calc['extras']
            
            print(f"  - Horas calculadas: {registro.horas_trabalhadas}")
            print(f"  - Horas extras: {registro.horas_extras}")
        
        # Salvar no banco
        db.session.add(registro)
        db.session.commit()
        
        print(f"‚úÖ Registro criado com ID: {registro.id}")
        
        return registro.id

def verificar_registro_criado(registro_id):
    """Verifica se o registro foi salvo corretamente"""
    
    with app.app_context():
        registro = db.session.get(RegistroPonto, registro_id)
        
        if not registro:
            print("‚ùå Registro n√£o encontrado no banco!")
            return False
        
        print(f"\n=== VERIFICA√á√ÉO BANCO DE DADOS ===")
        print(f"ID: {registro.id}")
        print(f"Funcion√°rio: {registro.funcionario_ref.nome}")
        print(f"Data: {registro.data}")
        print(f"Entrada: {registro.hora_entrada}")
        print(f"Sa√≠da: {registro.hora_saida}")
        print(f"Almo√ßo Sa√≠da: {registro.hora_almoco_saida}")
        print(f"Almo√ßo Retorno: {registro.hora_almoco_retorno}")
        print(f"Horas Trabalhadas: {registro.horas_trabalhadas}")
        print(f"Horas Extras: {registro.horas_extras}")
        
        # Verificar se campos de almo√ßo est√£o vazios
        if not registro.hora_almoco_saida:
            print("‚ö†Ô∏è Almo√ßo Sa√≠da est√° VAZIO no banco!")
            return False
        
        if not registro.hora_almoco_retorno:
            print("‚ö†Ô∏è Almo√ßo Retorno est√° VAZIO no banco!")
            return False
        
        print("‚úÖ Todos os campos est√£o preenchidos no banco")
        return True

def testar_via_form_simulation():
    """Simula envio via formul√°rio POST para testar a rota"""
    
    print(f"\n=== TESTE VIA SIMULA√á√ÉO FORM POST ===")
    
    with app.app_context():
        from flask import Flask
        from werkzeug.test import Client
        from werkzeug.wrappers import BaseResponse
        
        # Buscar funcion√°rio
        funcionario = Funcionario.query.filter_by(ativo=True).first()
        if not funcionario:
            print("‚ùå Nenhum funcion√°rio encontrado")
            return
        
        # Simular dados do formul√°rio
        form_data = {
            'funcionario_id': str(funcionario.id),
            'obra_id': '',
            'data': '2025-07-05',
            'hora_entrada': '07:07',
            'hora_saida': '16:02',
            'hora_almoco_saida': '12:00',    # IMPORTANTE: testar se este campo √© processado
            'hora_almoco_retorno': '13:00',  # IMPORTANTE: testar se este campo √© processado
            'observacoes': 'Teste via simula√ß√£o POST'
        }
        
        print("Dados do formul√°rio que seriam enviados:")
        for campo, valor in form_data.items():
            print(f"  {campo}: {valor}")
        
        # Para teste completo, seria necess√°rio simular a requisi√ß√£o POST
        # Por enquanto, vamos verificar se a fun√ß√£o de processamento funciona
        
        print("\n‚úì Dados preparados para envio")

def investigar_registros_existentes():
    """Investiga registros existentes para entender o padr√£o"""
    
    with app.app_context():
        print(f"\n=== INVESTIGA√á√ÉO REGISTROS EXISTENTES ===")
        
        # Buscar registros com almo√ßo definido
        registros_com_almoco = RegistroPonto.query.filter(
            RegistroPonto.hora_almoco_saida.isnot(None)
        ).limit(5).all()
        
        print(f"Registros com hor√°rio de almo√ßo definido: {len(registros_com_almoco)}")
        
        for registro in registros_com_almoco:
            print(f"  ID {registro.id}: {registro.data} - {registro.hora_almoco_saida} a {registro.hora_almoco_retorno}")
        
        # Buscar registros sem almo√ßo
        registros_sem_almoco = RegistroPonto.query.filter(
            RegistroPonto.hora_almoco_saida.is_(None)
        ).limit(5).all()
        
        print(f"\nRegistros SEM hor√°rio de almo√ßo: {len(registros_sem_almoco)}")
        
        for registro in registros_sem_almoco:
            print(f"  ID {registro.id}: {registro.data} - Almo√ßo: None")

if __name__ == "__main__":
    print("=== REPRODU√á√ÉO DO PROBLEMA DE ALMO√áO ===")
    print("Baseado na imagem anexada do s√°bado 05/07/2025")
    
    # 1. Investigar registros existentes
    investigar_registros_existentes()
    
    # 2. Limpar registros do s√°bado para teste limpo
    limpar_registros_sabado()
    
    # 3. Criar registro exato da imagem
    registro_id = criar_registro_exato_imagem()
    
    if registro_id:
        # 4. Verificar se foi salvo corretamente
        sucesso = verificar_registro_criado(registro_id)
        
        if sucesso:
            print("‚úÖ Problema N√ÉO reproduzido - hor√°rios de almo√ßo foram salvos corretamente")
        else:
            print("‚ùå Problema REPRODUZIDO - hor√°rios de almo√ßo n√£o foram salvos")
        
        # 5. Teste via simula√ß√£o de formul√°rio
        testar_via_form_simulation()
    
    print("\nüîç An√°lise completa finalizada!")