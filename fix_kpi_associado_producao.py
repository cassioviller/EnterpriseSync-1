#!/usr/bin/env python3
"""
Script para corrigir associa√ß√µes de KPI em produ√ß√£o
Aplicar via comando direto no ambiente de produ√ß√£o
"""

from app import app, db
from sqlalchemy import text
import sys

def aplicar_correcao_kpi_producao():
    """Aplica corre√ß√£o de KPI associado em produ√ß√£o"""
    with app.app_context():
        try:
            print("üîß CORRE√á√ÉO DE KPI EM PRODU√á√ÉO")
            print("=" * 50)
            
            # PASSO 1: Verificar estado atual
            print("\nüìä Estado atual dos KPIs:")
            result = db.session.execute(text('''
                SELECT kpi_associado, COUNT(*) as total, SUM(valor) as soma_valor
                FROM outro_custo
                GROUP BY kpi_associado
                ORDER BY kpi_associado
            ''')).fetchall()
            
            for row in result:
                print(f"  {row[0]}: {row[1]} registros, R$ {row[2]:.2f}")
            
            # PASSO 2: Verificar registros que precisam ser corrigidos
            print("\nüîç Registros que precisam corre√ß√£o:")
            problemas = db.session.execute(text('''
                SELECT tipo, kpi_associado, COUNT(*) as quantidade,
                       CASE 
                           WHEN LOWER(tipo) LIKE '%transporte%' OR LOWER(tipo) LIKE '%vale transporte%' OR LOWER(tipo) IN ('vt', 'vale_transporte') THEN 'custo_transporte'
                           WHEN LOWER(tipo) LIKE '%alimenta%' OR LOWER(tipo) LIKE '%vale alimenta%' OR LOWER(tipo) IN ('va', 'vale_alimentacao', 'refeicao') THEN 'custo_alimentacao'
                           WHEN LOWER(tipo) LIKE '%semana viagem%' OR LOWER(tipo) LIKE '%viagem%' THEN 'custo_alimentacao'
                           ELSE 'outros_custos'
                       END as kpi_correto
                FROM outro_custo
                WHERE CASE 
                    WHEN LOWER(tipo) LIKE '%transporte%' OR LOWER(tipo) LIKE '%vale transporte%' OR LOWER(tipo) IN ('vt', 'vale_transporte') THEN 'custo_transporte'
                    WHEN LOWER(tipo) LIKE '%alimenta%' OR LOWER(tipo) LIKE '%vale alimenta%' OR LOWER(tipo) IN ('va', 'vale_alimentacao', 'refeicao') THEN 'custo_alimentacao'
                    WHEN LOWER(tipo) LIKE '%semana viagem%' OR LOWER(tipo) LIKE '%viagem%' THEN 'custo_alimentacao'
                    ELSE 'outros_custos'
                END != kpi_associado
                GROUP BY tipo, kpi_associado, kpi_correto
                ORDER BY tipo
            ''')).fetchall()
            
            if problemas:
                print("‚ùå Problemas encontrados:")
                total_problemas = 0
                for row in problemas:
                    print(f"  {row[0]} ‚Üí {row[1]} (deveria ser {row[3]}) - {row[2]} registros")
                    total_problemas += row[2]
                print(f"\nTotal de registros para corrigir: {total_problemas}")
            else:
                print("‚úÖ Nenhum problema encontrado")
                return True
            
            # PASSO 3: Aplicar corre√ß√£o
            print(f"\n‚ö° Aplicando corre√ß√£o em {total_problemas} registros...")
            
            updated = db.session.execute(text('''
                UPDATE outro_custo 
                SET kpi_associado = CASE 
                    WHEN LOWER(tipo) LIKE '%transporte%' OR LOWER(tipo) LIKE '%vale transporte%' OR LOWER(tipo) IN ('vt', 'vale_transporte') THEN 'custo_transporte'
                    WHEN LOWER(tipo) LIKE '%alimenta%' OR LOWER(tipo) LIKE '%vale alimenta%' OR LOWER(tipo) IN ('va', 'vale_alimentacao', 'refeicao') THEN 'custo_alimentacao'
                    WHEN LOWER(tipo) LIKE '%semana viagem%' OR LOWER(tipo) LIKE '%viagem%' THEN 'custo_alimentacao'
                    ELSE 'outros_custos'
                END
                WHERE CASE 
                    WHEN LOWER(tipo) LIKE '%transporte%' OR LOWER(tipo) LIKE '%vale transporte%' OR LOWER(tipo) IN ('vt', 'vale_transporte') THEN 'custo_transporte'
                    WHEN LOWER(tipo) LIKE '%alimenta%' OR LOWER(tipo) LIKE '%vale alimenta%' OR LOWER(tipo) IN ('va', 'vale_alimentacao', 'refeicao') THEN 'custo_alimentacao'
                    WHEN LOWER(tipo) LIKE '%semana viagem%' OR LOWER(tipo) LIKE '%viagem%' THEN 'custo_alimentacao'
                    ELSE 'outros_custos'
                END != kpi_associado
            ''')).rowcount
            
            db.session.commit()
            print(f"‚úÖ {updated} registros corrigidos com sucesso!")
            
            # PASSO 4: Verificar resultado final
            print("\nüìà Estado final dos KPIs:")
            result_final = db.session.execute(text('''
                SELECT kpi_associado, COUNT(*) as total, SUM(valor) as soma_valor
                FROM outro_custo
                GROUP BY kpi_associado
                ORDER BY kpi_associado
            ''')).fetchall()
            
            for row in result_final:
                print(f"  {row[0]}: {row[1]} registros, R$ {row[2]:.2f}")
            
            # PASSO 5: Verifica√ß√£o final
            verificacao = db.session.execute(text('''
                SELECT COUNT(*) 
                FROM outro_custo
                WHERE CASE 
                    WHEN LOWER(tipo) LIKE '%transporte%' OR LOWER(tipo) LIKE '%vale transporte%' OR LOWER(tipo) IN ('vt', 'vale_transporte') THEN 'custo_transporte'
                    WHEN LOWER(tipo) LIKE '%alimenta%' OR LOWER(tipo) LIKE '%vale alimenta%' OR LOWER(tipo) IN ('va', 'vale_alimentacao', 'refeicao') THEN 'custo_alimentacao'
                    WHEN LOWER(tipo) LIKE '%semana viagem%' OR LOWER(tipo) LIKE '%viagem%' THEN 'custo_alimentacao'
                    ELSE 'outros_custos'
                END != kpi_associado
            ''')).scalar()
            
            if verificacao == 0:
                print("\n‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
                print("‚úÖ Todos os KPIs est√£o agora associados corretamente")
                return True
            else:
                print(f"\n‚ùå Ainda existem {verificacao} registros com problemas")
                return False
                
        except Exception as e:
            print(f"‚ùå ERRO: {e}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    print("APLICA√á√ÉO DE CORRE√á√ÉO KPI EM PRODU√á√ÉO")
    print("Executando corre√ß√£o...")
    
    success = aplicar_correcao_kpi_producao()
    
    if success:
        print("\nüéâ MISS√ÉO CUMPRIDA!")
        print("Os KPIs de transporte e alimenta√ß√£o agora mostrar√£o os valores corretos")
        sys.exit(0)
    else:
        print("\nüí• FALHA NA CORRE√á√ÉO")
        print("Verifique os logs e tente novamente")
        sys.exit(1)