#!/usr/bin/env python3
"""
Relat√≥rio de Auditoria de KPIs
Identifica inconsist√™ncias e valida c√°lculos
"""

from app import app, db
from models import Funcionario, Usuario
from kpis_engine import KPIsEngine
from kpis_engine_corrigido import CorrectedKPIService, KPIValidationService
from datetime import date, datetime
import json

def gerar_relatorio_auditoria_completo():
    """Gera relat√≥rio completo de auditoria de KPIs"""
    with app.app_context():
        print("=" * 100)
        print("RELAT√ìRIO DE AUDITORIA DE KPIs - SISTEMA SIGE")
        print("=" * 100)
        
        # Buscar funcion√°rios ativos
        funcionarios = Funcionario.query.filter_by(ativo=True).all()
        
        print(f"üìä TOTAL DE FUNCION√ÅRIOS ATIVOS: {len(funcionarios)}")
        print(f"üìÖ PER√çODO DE AN√ÅLISE: Julho/2025")
        
        validator = KPIValidationService()
        resultados_auditoria = []
        
        funcionarios_inconsistentes = 0
        total_diferencas = 0
        
        print("\n" + "=" * 100)
        print("AUDITORIA POR FUNCION√ÅRIO")
        print("=" * 100)
        
        for funcionario in funcionarios:
            print(f"\nüîç Auditando: {funcionario.nome} (ID: {funcionario.id})")
            
            try:
                validacao = validator.validate_employee_kpis(
                    funcionario.id,
                    date(2025, 7, 1),
                    date(2025, 7, 31)
                )
                
                if not validacao['is_consistent']:
                    funcionarios_inconsistentes += 1
                    num_diferencas = len(validacao['diferencas'])
                    total_diferencas += num_diferencas
                    
                    print(f"  ‚ö†Ô∏è  {num_diferencas} inconsist√™ncias detectadas:")
                    for kpi, diff in validacao['diferencas'].items():
                        print(f"    ‚Ä¢ {kpi}: {diff['atual']} ‚Üí {diff['corrigido']} (Œî {diff['diferenca']:.2f})")
                    
                    resultados_auditoria.append({
                        'funcionario_id': funcionario.id,
                        'funcionario_nome': funcionario.nome,
                        'inconsistencias': num_diferencas,
                        'detalhes': validacao['diferencas']
                    })
                else:
                    print("  ‚úÖ KPIs consistentes")
                    
            except Exception as e:
                print(f"  ‚ùå Erro na auditoria: {str(e)}")
        
        print("\n" + "=" * 100)
        print("RESUMO EXECUTIVO DA AUDITORIA")
        print("=" * 100)
        
        print(f"üìà ESTAT√çSTICAS GERAIS:")
        print(f"  ‚Ä¢ Total de funcion√°rios auditados: {len(funcionarios)}")
        print(f"  ‚Ä¢ Funcion√°rios com inconsist√™ncias: {funcionarios_inconsistentes}")
        print(f"  ‚Ä¢ Taxa de consist√™ncia: {((len(funcionarios) - funcionarios_inconsistentes) / len(funcionarios) * 100):.1f}%")
        print(f"  ‚Ä¢ Total de diferen√ßas encontradas: {total_diferencas}")
        
        if funcionarios_inconsistentes > 0:
            print(f"\n‚ö†Ô∏è  A√á√ÉO REQUERIDA:")
            print(f"  ‚Ä¢ {funcionarios_inconsistentes} funcion√°rios precisam de corre√ß√£o nos KPIs")
            print(f"  ‚Ä¢ Recomenda-se migrar para o engine corrigido")
            print(f"  ‚Ä¢ Implementar valida√ß√µes autom√°ticas")
        else:
            print(f"\n‚úÖ SISTEMA √çNTEGRO:")
            print(f"  ‚Ä¢ Todos os KPIs est√£o consistentes")
            print(f"  ‚Ä¢ N√£o h√° necessidade de corre√ß√µes")
        
        print("\n" + "=" * 100)
        print("KPIs MAIS AFETADOS")
        print("=" * 100)
        
        # Contar quais KPIs t√™m mais problemas
        kpis_problemas = {}
        for resultado in resultados_auditoria:
            for kpi in resultado['detalhes'].keys():
                kpis_problemas[kpi] = kpis_problemas.get(kpi, 0) + 1
        
        if kpis_problemas:
            print("KPIs com mais inconsist√™ncias:")
            for kpi, count in sorted(kpis_problemas.items(), key=lambda x: x[1], reverse=True):
                print(f"  ‚Ä¢ {kpi}: {count} funcion√°rios afetados")
        
        print("\n" + "=" * 100)
        print("RECOMENDA√á√ïES T√âCNICAS")
        print("=" * 100)
        
        print("1. ‚öôÔ∏è  MIGRA√á√ÉO DE ENGINE:")
        print("   ‚Ä¢ Substituir KPIsEngine por CorrectedKPIService")
        print("   ‚Ä¢ Atualizar views.py para usar engine corrigido")
        print("   ‚Ä¢ Implementar transi√ß√£o gradual")
        
        print("\n2. üîß CORRE√á√ïES DE TIPOS:")
        print("   ‚Ä¢ Padronizar tipos de lan√ßamento de ponto")
        print("   ‚Ä¢ Atualizar interface de cadastro")
        print("   ‚Ä¢ Criar valida√ß√µes de entrada")
        
        print("\n3. ‚úÖ VALIDA√á√ïES AUTOM√ÅTICAS:")
        print("   ‚Ä¢ Implementar auditoria autom√°tica di√°ria")
        print("   ‚Ä¢ Criar alertas para inconsist√™ncias")
        print("   ‚Ä¢ Dashboard de qualidade de dados")
        
        print("\n4. üìä MONITORAMENTO:")
        print("   ‚Ä¢ Logs de c√°lculo de KPIs")
        print("   ‚Ä¢ M√©tricas de performance")
        print("   ‚Ä¢ Relat√≥rios de tend√™ncias")
        
        print("\n‚úÖ AUDITORIA CONCLU√çDA")
        
        return {
            'total_funcionarios': len(funcionarios),
            'funcionarios_inconsistentes': funcionarios_inconsistentes,
            'total_diferencas': total_diferencas,
            'resultados': resultados_auditoria,
            'kpis_problemas': kpis_problemas
        }

if __name__ == "__main__":
    resultado = gerar_relatorio_auditoria_completo()