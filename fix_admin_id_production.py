#!/usr/bin/env python3
"""
Script para corrigir problema de admin_id em produ√ß√£o
Baseado na an√°lise detalhada do erro UndefinedColumn
"""

from app import app, db
from models import OutroCusto, Funcionario
from sqlalchemy import text, inspect
import logging
import os

def setup_logging():
    """Configurar logging detalhado para debug"""
    logging.basicConfig(level=logging.DEBUG)
    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
    print("üîß Logging do SQLAlchemy ativado")

def verify_database_connection():
    """Verificar conex√£o com banco de dados"""
    try:
        with app.app_context():
            result = db.session.execute(text('SELECT version()'))
            version = result.scalar()
            print(f"‚úÖ Conex√£o com PostgreSQL: {version}")
            return True
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def check_column_exists():
    """Verificar se coluna admin_id existe no banco"""
    with app.app_context():
        try:
            result = db.session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'outro_custo' AND column_name = 'admin_id'
            """))
            
            column_info = result.fetchone()
            if column_info:
                print(f"‚úÖ Coluna admin_id existe: {column_info[1]} (nullable: {column_info[2]})")
                return True
            else:
                print("‚ùå Coluna admin_id N√ÉO EXISTE")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar coluna: {e}")
            return False

def add_admin_id_column():
    """Adicionar coluna admin_id se n√£o existir"""
    with app.app_context():
        try:
            print("üîß Adicionando coluna admin_id...")
            
            # Adicionar coluna
            db.session.execute(text('ALTER TABLE outro_custo ADD COLUMN admin_id INTEGER'))
            
            # Adicionar foreign key (opcional, pode falhar se tabela usuario n√£o existe)
            try:
                db.session.execute(text('''
                    ALTER TABLE outro_custo 
                    ADD CONSTRAINT fk_outro_custo_admin 
                    FOREIGN KEY (admin_id) REFERENCES usuario(id)
                '''))
                print("‚úÖ Foreign key constraint adicionada")
            except Exception as fk_error:
                print(f"‚ö†Ô∏è  Foreign key n√£o p√¥de ser adicionada: {fk_error}")
            
            # Atualizar registros existentes
            print("üîß Atualizando registros existentes...")
            updated = db.session.execute(text('''
                UPDATE outro_custo 
                SET admin_id = (
                    SELECT admin_id 
                    FROM funcionario 
                    WHERE funcionario.id = outro_custo.funcionario_id
                    LIMIT 1
                )
                WHERE admin_id IS NULL
            ''')).rowcount
            
            db.session.commit()
            print(f"‚úÖ Coluna admin_id adicionada e {updated} registros atualizados")
            return True
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao adicionar coluna: {e}")
            return False

def clear_sqlalchemy_cache():
    """Limpar cache de metadados do SQLAlchemy"""
    with app.app_context():
        try:
            print("üîß Limpando cache de metadados do SQLAlchemy...")
            
            # Limpar metadados
            db.metadata.clear()
            
            # For√ßar reflex√£o
            db.metadata.reflect(bind=db.engine)
            
            print("‚úÖ Cache de metadados limpo e refletido")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao limpar cache: {e}")
            return False

def test_model_functionality():
    """Testar funcionalidade do modelo OutroCusto"""
    with app.app_context():
        try:
            print("üîç Testando funcionalidade do modelo...")
            
            # Teste b√°sico de contagem
            total = OutroCusto.query.count()
            print(f"‚úÖ Total de registros: {total}")
            
            # Teste com filtro admin_id
            with_admin = OutroCusto.query.filter(OutroCusto.admin_id.isnot(None)).count()
            print(f"‚úÖ Registros com admin_id: {with_admin}")
            
            # Teste de join com funcion√°rio
            joined = OutroCusto.query.join(Funcionario).count()
            print(f"‚úÖ Registros com join funcion√°rio: {joined}")
            
            # Teste espec√≠fico da query problem√°tica
            result = OutroCusto.query.filter_by(funcionario_id=96).first()
            if result:
                print(f"‚úÖ Query espec√≠fica funcionou: ID {result.id}, Admin ID {result.admin_id}")
            else:
                print("‚ö†Ô∏è  Nenhum registro encontrado para funcion√°rio 96")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste do modelo: {e}")
            print(f"   Tipo: {type(e).__name__}")
            print(f"   Detalhes: {str(e)}")
            return False

def main():
    """Fun√ß√£o principal de corre√ß√£o"""
    print("üöÄ INICIANDO CORRE√á√ÉO DO PROBLEMA admin_id EM PRODU√á√ÉO")
    print("=" * 60)
    
    # 1. Configurar logging
    setup_logging()
    
    # 2. Verificar conex√£o
    if not verify_database_connection():
        print("‚ùå FALHA: N√£o foi poss√≠vel conectar ao banco de dados")
        return False
    
    # 3. Verificar se coluna existe
    column_exists = check_column_exists()
    
    # 4. Adicionar coluna se necess√°rio
    if not column_exists:
        if not add_admin_id_column():
            print("‚ùå FALHA: N√£o foi poss√≠vel adicionar coluna admin_id")
            return False
    
    # 5. Limpar cache do SQLAlchemy
    if not clear_sqlalchemy_cache():
        print("‚ö†Ô∏è  AVISO: N√£o foi poss√≠vel limpar cache, mas pode n√£o ser cr√≠tico")
    
    # 6. Testar funcionalidade
    if not test_model_functionality():
        print("‚ùå FALHA: Modelo ainda n√£o est√° funcionando")
        return False
    
    print("=" * 60)
    print("‚úÖ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("   - Coluna admin_id verificada/criada")
    print("   - Dados atualizados")
    print("   - Cache do SQLAlchemy limpo")
    print("   - Funcionalidade testada")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)