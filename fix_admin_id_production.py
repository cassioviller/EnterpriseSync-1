#!/usr/bin/env python3
"""
Script para corrigir problema de admin_id em produ√ß√£o
Baseado na an√°lise detalhada do erro UndefinedColumn
"""

from app import app, db
from models import OutroCusto, Funcionario
from sqlalchemy import text, inspect
import logging
import os

def setup_logging():
    """Configurar logging detalhado para debug"""
    logging.basicConfig(level=logging.DEBUG)
    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
    print("üîß Logging do SQLAlchemy ativado")

def verify_database_connection():
    """Verificar conex√£o com banco de dados"""
    try:
        with app.app_context():
            result = db.session.execute(text('SELECT version()'))
            version = result.scalar()
            print(f"‚úÖ Conex√£o com PostgreSQL: {version}")
            return True
    except Exception as e:
        print(f"‚ùå Erro de conex√£o: {e}")
        return False

def check_column_exists():
    """Verificar se colunas admin_id e kpi_associado existem no banco"""
    with app.app_context():
        try:
            # Verificar admin_id
            result = db.session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'outro_custo' AND column_name = 'admin_id'
            """))
            
            admin_column = result.fetchone()
            admin_exists = bool(admin_column)
            if admin_column:
                print(f"‚úÖ Coluna admin_id existe: {admin_column[1]} (nullable: {admin_column[2]})")
            else:
                print("‚ùå Coluna admin_id N√ÉO EXISTE")
                
            # Verificar kpi_associado
            result = db.session.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'outro_custo' AND column_name = 'kpi_associado'
            """))
            
            kpi_column = result.fetchone()
            kpi_exists = bool(kpi_column)
            if kpi_column:
                print(f"‚úÖ Coluna kpi_associado existe: {kpi_column[1]} (nullable: {kpi_column[2]})")
            else:
                print("‚ùå Coluna kpi_associado N√ÉO EXISTE")
                
            return admin_exists, kpi_exists
                
        except Exception as e:
            print(f"‚ùå Erro ao verificar colunas: {e}")
            return False, False

def add_missing_columns(admin_exists, kpi_exists):
    """Adicionar colunas que faltam"""
    with app.app_context():
        try:
            success = True
            
            # Adicionar admin_id se n√£o existir
            if not admin_exists:
                print("üîß Adicionando coluna admin_id...")
                
                db.session.execute(text('ALTER TABLE outro_custo ADD COLUMN admin_id INTEGER'))
                
                # Adicionar foreign key (opcional, pode falhar se tabela usuario n√£o existe)
                try:
                    db.session.execute(text('''
                        ALTER TABLE outro_custo 
                        ADD CONSTRAINT fk_outro_custo_admin 
                        FOREIGN KEY (admin_id) REFERENCES usuario(id)
                    '''))
                    print("‚úÖ Foreign key constraint admin_id adicionada")
                except Exception as fk_error:
                    print(f"‚ö†Ô∏è  Foreign key admin_id n√£o p√¥de ser adicionada: {fk_error}")
                
                # Atualizar registros existentes
                print("üîß Atualizando registros admin_id...")
                updated = db.session.execute(text('''
                    UPDATE outro_custo 
                    SET admin_id = (
                        SELECT admin_id 
                        FROM funcionario 
                        WHERE funcionario.id = outro_custo.funcionario_id
                        LIMIT 1
                    )
                    WHERE admin_id IS NULL
                ''')).rowcount
                
                print(f"‚úÖ Coluna admin_id adicionada e {updated} registros atualizados")
            else:
                print("‚úÖ Coluna admin_id j√° existe")
            
            # Adicionar kpi_associado se n√£o existir
            if not kpi_exists:
                print("üîß Adicionando coluna kpi_associado...")
                
                db.session.execute(text("ALTER TABLE outro_custo ADD COLUMN kpi_associado VARCHAR(30) DEFAULT 'outros_custos'"))
                
                # Atualizar registros existentes
                print("üîß Atualizando registros kpi_associado...")
                updated = db.session.execute(text('''
                    UPDATE outro_custo 
                    SET kpi_associado = 'outros_custos'
                    WHERE kpi_associado IS NULL
                ''')).rowcount
                
                print(f"‚úÖ Coluna kpi_associado adicionada e {updated} registros atualizados")
            else:
                print("‚úÖ Coluna kpi_associado j√° existe")
            
            db.session.commit()
            return success
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao adicionar colunas: {e}")
            return False

def clear_sqlalchemy_cache():
    """Limpar cache de metadados do SQLAlchemy"""
    with app.app_context():
        try:
            print("üîß Limpando cache de metadados do SQLAlchemy...")
            
            # Limpar metadados
            db.metadata.clear()
            
            # For√ßar reflex√£o
            db.metadata.reflect(bind=db.engine)
            
            print("‚úÖ Cache de metadados limpo e refletido")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao limpar cache: {e}")
            return False

def test_model_functionality():
    """Testar funcionalidade do modelo OutroCusto"""
    with app.app_context():
        try:
            print("üîç Testando funcionalidade do modelo...")
            
            # Teste b√°sico de contagem
            total = OutroCusto.query.count()
            print(f"‚úÖ Total de registros: {total}")
            
            # Teste com filtro admin_id
            with_admin = OutroCusto.query.filter(OutroCusto.admin_id.isnot(None)).count()
            print(f"‚úÖ Registros com admin_id: {with_admin}")
            
            # Teste com filtro kpi_associado
            with_kpi = OutroCusto.query.filter(OutroCusto.kpi_associado.isnot(None)).count()
            print(f"‚úÖ Registros com kpi_associado: {with_kpi}")
            
            # Teste de join com funcion√°rio
            joined = OutroCusto.query.join(Funcionario).count()
            print(f"‚úÖ Registros com join funcion√°rio: {joined}")
            
            # Teste espec√≠fico da query problem√°tica
            result = OutroCusto.query.first()
            if result:
                print(f"‚úÖ Query espec√≠fica funcionou: ID {result.id}, Admin ID {result.admin_id}, KPI {result.kpi_associado}")
            else:
                print("‚ö†Ô∏è  Nenhum registro encontrado")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro no teste do modelo: {e}")
            print(f"   Tipo: {type(e).__name__}")
            print(f"   Detalhes: {str(e)}")
            return False

def main():
    """Fun√ß√£o principal de corre√ß√£o"""
    print("üöÄ INICIANDO CORRE√á√ÉO DE COLUNAS EM PRODU√á√ÉO")
    print("=" * 60)
    
    # 1. Configurar logging
    setup_logging()
    
    # 2. Verificar conex√£o
    if not verify_database_connection():
        print("‚ùå FALHA: N√£o foi poss√≠vel conectar ao banco de dados")
        return False
    
    # 3. Verificar se colunas existem
    admin_exists, kpi_exists = check_column_exists()
    
    # 4. Adicionar colunas se necess√°rio
    if not admin_exists or not kpi_exists:
        if not add_missing_columns(admin_exists, kpi_exists):
            print("‚ùå FALHA: N√£o foi poss√≠vel adicionar colunas faltantes")
            return False
    else:
        print("‚úÖ Todas as colunas j√° existem")
    
    # 5. Limpar cache do SQLAlchemy
    if not clear_sqlalchemy_cache():
        print("‚ö†Ô∏è  AVISO: N√£o foi poss√≠vel limpar cache, mas pode n√£o ser cr√≠tico")
    
    # 6. Testar funcionalidade
    if not test_model_functionality():
        print("‚ùå FALHA: Modelo ainda n√£o est√° funcionando")
        return False
    
    print("=" * 60)
    print("‚úÖ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("   - Colunas admin_id e kpi_associado verificadas/criadas")
    print("   - Dados atualizados")
    print("   - Cache do SQLAlchemy limpo")
    print("   - Funcionalidade testada")
    print("=" * 60)
    
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)