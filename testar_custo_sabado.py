#!/usr/bin/env python3
"""
üß™ TESTE: Verificar se o c√°lculo de custo de m√£o de obra para s√°bado est√° correto
Deve contar apenas o valor das horas extras (1.5x), n√£o duplicar
"""

from app import app, db
from models import Funcionario, RegistroPonto
from kpis_engine import KPIsEngine
from datetime import date

def testar_custo_sabado():
    """Testa o c√°lculo de custo para s√°bado trabalhado"""
    print("üß™ TESTE: Verificando c√°lculo de custo de s√°bado")
    print("=" * 50)
    
    # Buscar funcion√°rio com registros de s√°bado
    funcionario = Funcionario.query.filter(
        Funcionario.salario.isnot(None),
        Funcionario.salario > 0
    ).first()
    
    if not funcionario:
        print("‚ùå Nenhum funcion√°rio com sal√°rio encontrado")
        return False
    
    print(f"üë§ Funcion√°rio: {funcionario.nome}")
    print(f"üí∞ Sal√°rio: R$ {funcionario.salario}")
    
    # Buscar registro de s√°bado espec√≠fico
    registro_sabado = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data == date(2025, 7, 5),  # S√°bado conhecido
        RegistroPonto.tipo_registro == 'sabado_horas_extras'
    ).first()
    
    if not registro_sabado:
        print("‚ùå Registro de s√°bado 05/07/2025 n√£o encontrado")
        return False
    
    print(f"üìÖ Data: {registro_sabado.data}")
    print(f"‚è∞ Horas trabalhadas: {registro_sabado.horas_trabalhadas}")
    print(f"‚≠ê Horas extras: {registro_sabado.horas_extras}")
    print(f"üìä Tipo: {registro_sabado.tipo_registro}")
    
    # Calcular KPIs para o per√≠odo
    engine = KPIsEngine()
    data_inicio = date(2025, 7, 1)
    data_fim = date(2025, 7, 31)
    
    kpis = engine.calcular_kpis_funcionario(funcionario.id, data_inicio, data_fim)
    
    if not kpis:
        print("‚ùå Erro ao calcular KPIs")
        return False
    
    custo_mao_obra = kpis['custo_mao_obra']
    print(f"üíµ Custo m√£o de obra (julho): R$ {custo_mao_obra:.2f}")
    
    # Verificar c√°lculo manual
    print("\nüîç VERIFICA√á√ÉO MANUAL:")
    
    # Buscar todos os registros do funcion√°rio no per√≠odo
    registros = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim
    ).all()
    
    # Classificar por tipo
    horas_por_tipo = {}
    for registro in registros:
        tipo = registro.tipo_registro or 'trabalho_normal'
        horas = float(registro.horas_trabalhadas or 0)
        
        if tipo not in horas_por_tipo:
            horas_por_tipo[tipo] = 0.0
        horas_por_tipo[tipo] += horas
    
    print("üìä Horas por tipo:")
    for tipo, horas in horas_por_tipo.items():
        print(f"   {tipo}: {horas}h")
    
    # Calcular valor/hora
    tipos_divisor = ['trabalho_normal', 'falta_justificada']
    horas_divisor = sum(horas_por_tipo.get(tipo, 0.0) for tipo in tipos_divisor)
    
    if horas_divisor > 0:
        valor_hora = float(funcionario.salario) / horas_divisor
    else:
        # Fallback: 220h/m√™s (padr√£o)
        valor_hora = float(funcionario.salario) / 220.0
    
    print(f"üí± Valor/hora calculado: R$ {valor_hora:.2f}")
    print(f"‚öñÔ∏è  Base de c√°lculo: {horas_divisor}h (horas normais + faltas justificadas)")
    
    # Verificar c√°lculo de s√°bado
    horas_sabado = (horas_por_tipo.get('sabado_trabalhado', 0.0) + 
                   horas_por_tipo.get('sabado_horas_extras', 0.0))
    
    custo_sabado_esperado = horas_sabado * valor_hora * 1.5
    
    print(f"\nüí∞ C√ÅLCULO DE S√ÅBADO:")
    print(f"   Horas s√°bado: {horas_sabado}h")
    print(f"   Valor/hora: R$ {valor_hora:.2f}")
    print(f"   Multiplicador: 1.5x (50% adicional)")
    print(f"   Custo s√°bado: {horas_sabado} √ó {valor_hora:.2f} √ó 1.5 = R$ {custo_sabado_esperado:.2f}")
    
    # Calcular custo total esperado
    custo_total_esperado = 0.0
    
    # 1. Horas normais
    horas_normais = (horas_por_tipo.get('trabalho_normal', 0.0) + 
                    horas_por_tipo.get('falta_justificada', 0.0))
    custo_normais = horas_normais * valor_hora
    custo_total_esperado += custo_normais
    
    # 2. S√°bado (1.5x)
    custo_total_esperado += custo_sabado_esperado
    
    # 3. Domingo (2.0x)
    horas_domingo = horas_por_tipo.get('domingo_trabalhado', 0.0)
    custo_domingo = horas_domingo * valor_hora * 2.0
    custo_total_esperado += custo_domingo
    
    # 4. Feriado (2.0x)
    horas_feriado = horas_por_tipo.get('feriado_trabalhado', 0.0)
    custo_feriado = horas_feriado * valor_hora * 2.0
    custo_total_esperado += custo_feriado
    
    print(f"\nüìä COMPOSI√á√ÉO DO CUSTO TOTAL:")
    print(f"   Horas normais: {horas_normais}h √ó R$ {valor_hora:.2f} = R$ {custo_normais:.2f}")
    print(f"   S√°bado: {horas_sabado}h √ó R$ {valor_hora:.2f} √ó 1.5 = R$ {custo_sabado_esperado:.2f}")
    print(f"   Domingo: {horas_domingo}h √ó R$ {valor_hora:.2f} √ó 2.0 = R$ {custo_domingo:.2f}")
    print(f"   Feriado: {horas_feriado}h √ó R$ {valor_hora:.2f} √ó 2.0 = R$ {custo_feriado:.2f}")
    print(f"   TOTAL ESPERADO: R$ {custo_total_esperado:.2f}")
    print(f"   TOTAL CALCULADO: R$ {custo_mao_obra:.2f}")
    
    # Verificar se h√° diferen√ßa significativa
    diferenca = abs(custo_mao_obra - custo_total_esperado)
    tolerancia = 0.01  # 1 centavo
    
    if diferenca <= tolerancia:
        print(f"‚úÖ C√ÅLCULO CORRETO! Diferen√ßa: R$ {diferenca:.2f}")
        return True
    else:
        print(f"‚ùå C√ÅLCULO INCORRETO! Diferen√ßa: R$ {diferenca:.2f}")
        
        # Verificar se pode estar duplicando s√°bado
        if custo_mao_obra > custo_total_esperado:
            possivel_duplicacao = custo_mao_obra - custo_total_esperado
            print(f"‚ö†Ô∏è  Poss√≠vel duplica√ß√£o de R$ {possivel_duplicacao:.2f}")
            
            # Verificar se a diferen√ßa √© pr√≥xima do custo de s√°bado
            if abs(possivel_duplicacao - custo_sabado_esperado) < 1.0:
                print("üö® PROV√ÅVEL DUPLICA√á√ÉO DE CUSTO DE S√ÅBADO!")
        
        return False

if __name__ == "__main__":
    with app.app_context():
        print("üöÄ TESTE DE CUSTO DE M√ÉO DE OBRA PARA S√ÅBADO")
        print("=" * 60)
        
        resultado = testar_custo_sabado()
        
        print("\n" + "=" * 60)
        if resultado:
            print("üéâ TESTE PASSOU!")
            print("‚úÖ C√°lculo de s√°bado est√° correto")
            print("‚úÖ N√£o h√° duplica√ß√£o de valores")
        else:
            print("‚ùå TESTE FALHOU!")
            print("‚ö†Ô∏è  Verificar l√≥gica de c√°lculo")
        
        print("=" * 60)