#!/usr/bin/env python3
"""
Debug do sistema de lan√ßamento de alimenta√ß√£o por per√≠odo
Simula uma requisi√ß√£o POST para identificar onde est√£o os problemas nas datas
"""
from app import app, db
from models import RegistroAlimentacao, Funcionario, Obra, Restaurante
from datetime import datetime, timedelta, date
import logging

# Configurar logging para debug
logging.basicConfig(level=logging.DEBUG)

def testar_lancamento_periodo():
    """Simula um lan√ßamento por per√≠odo para debug"""
    print("üîß DEBUG: Lan√ßamento de Alimenta√ß√£o por Per√≠odo")
    print("=" * 60)
    
    with app.app_context():
        # Dados de teste (simular form data)
        data_inicio_str = "2025-08-01"  # Hoje
        data_fim_str = "2025-08-03"     # Hoje + 2 dias
        
        print(f"üìÖ Per√≠odo teste: {data_inicio_str} at√© {data_fim_str}")
        
        # Simular a l√≥gica do views.py
        inicio = datetime.strptime(data_inicio_str, '%Y-%m-%d').date()
        fim = datetime.strptime(data_fim_str, '%Y-%m-%d').date()
        
        print(f"üîç Data in√≠cio convertida: {inicio}")
        print(f"üîç Data fim convertida: {fim}")
        
        # Gerar lista de datas
        datas_processamento = []
        data_atual = inicio
        
        while data_atual <= fim:
            datas_processamento.append(data_atual)
            print(f"   üìÖ Adicionada data: {data_atual}")
            data_atual += timedelta(days=1)
        
        print(f"\n‚úÖ Total de datas geradas: {len(datas_processamento)}")
        
        # Verificar funcion√°rios dispon√≠veis
        funcionarios = Funcionario.query.filter_by(ativo=True).limit(2).all()
        print(f"üë• Funcion√°rios de teste: {[f.nome for f in funcionarios]}")
        
        if not funcionarios:
            print("‚ùå Nenhum funcion√°rio ativo encontrado!")
            return
        
        # Verificar obra dispon√≠vel
        obra = Obra.query.filter_by(ativo=True).first()
        if not obra:
            print("‚ùå Nenhuma obra ativa encontrada!")
            return
        
        print(f"üèóÔ∏è Obra de teste: {obra.nome}")
        
        # Verificar restaurante dispon√≠vel
        restaurante = Restaurante.query.first()
        if not restaurante:
            print("‚ùå Nenhum restaurante encontrado!")
            return
        
        print(f"üçΩÔ∏è Restaurante de teste: {restaurante.nome}")
        
        # Simular cria√ß√£o de registros
        print(f"\nüîÑ Simulando cria√ß√£o de registros...")
        registros_teste = []
        
        for data in datas_processamento:
            for funcionario in funcionarios[:1]:  # Apenas 1 funcion√°rio para teste
                registro_data = {
                    'funcionario_id': funcionario.id,
                    'funcionario_nome': funcionario.nome,
                    'obra_id': obra.id,
                    'restaurante_id': restaurante.id,
                    'data': data,
                    'tipo': 'almoco',
                    'valor': 15.0
                }
                registros_teste.append(registro_data)
                print(f"   üìù {funcionario.nome} - {data} - Almo√ßo - R$ 15,00")
        
        print(f"\nüìä RESUMO:")
        print(f"   ‚Ä¢ Per√≠odo: {data_inicio_str} a {data_fim_str}")
        print(f"   ‚Ä¢ Dias: {len(datas_processamento)}")
        print(f"   ‚Ä¢ Funcion√°rios: {len(funcionarios[:1])}")
        print(f"   ‚Ä¢ Total registros previstos: {len(registros_teste)}")
        
        # Verificar registros existentes no banco
        print(f"\nüîç VERIFICANDO REGISTROS EXISTENTES NO BANCO:")
        registros_existentes = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.data >= inicio,
            RegistroAlimentacao.data <= fim
        ).all()
        
        if registros_existentes:
            print(f"‚ö†Ô∏è Encontrados {len(registros_existentes)} registros existentes:")
            for reg in registros_existentes:
                funcionario = Funcionario.query.get(reg.funcionario_id)
                nome_func = funcionario.nome if funcionario else f"ID:{reg.funcionario_id}"
                print(f"   ‚Ä¢ {nome_func} - {reg.data} - {reg.tipo} - R$ {reg.valor}")
        else:
            print("‚úÖ Nenhum registro existente no per√≠odo")

def verificar_registros_recentes():
    """Verifica os registros mais recentes para an√°lise"""
    print(f"\nüîç REGISTROS MAIS RECENTES (√∫ltimos 5):")
    
    with app.app_context():
        registros_recentes = RegistroAlimentacao.query.order_by(
            RegistroAlimentacao.id.desc()
        ).limit(5).all()
        
        for reg in registros_recentes:
            funcionario = Funcionario.query.get(reg.funcionario_id)
            nome_func = funcionario.nome if funcionario else f"ID:{reg.funcionario_id}"
            
            print(f"   ID {reg.id}: {nome_func} - {reg.data} - {reg.tipo} - R$ {reg.valor}")
            print(f"      Criado em: {reg.created_at}")

if __name__ == "__main__":
    testar_lancamento_periodo()
    verificar_registros_recentes()