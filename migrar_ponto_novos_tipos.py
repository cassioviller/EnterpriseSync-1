#!/usr/bin/env python3
"""
Script para adicionar colunas necess√°rias ao sistema de tipos de lan√ßamento
com percentuais configur√°veis de horas extras
"""

import os
import sys
from datetime import datetime
from sqlalchemy import text

# Adicionar o diret√≥rio atual ao path do Python
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app import app, db

def migrar_ponto_novos_tipos():
    """Adiciona colunas para tipos de lan√ßamento e percentual de horas extras"""
    
    print("üöÄ Iniciando migra√ß√£o do sistema de tipos de lan√ßamento...")
    
    with app.app_context():
        try:
            # Verificar se as colunas j√° existem
            result = db.session.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'registro_ponto' 
                AND column_name IN ('tipo_registro', 'percentual_extras')
            """))
            
            existing_columns = [row[0] for row in result.fetchall()]
            print(f"Colunas existentes: {existing_columns}")
            
            # Adicionar coluna tipo_registro se n√£o existir
            if 'tipo_registro' not in existing_columns:
                print("‚ûï Adicionando coluna 'tipo_registro'...")
                db.session.execute(text("""
                    ALTER TABLE registro_ponto 
                    ADD COLUMN tipo_registro VARCHAR(30) DEFAULT 'trabalhado'
                """))
                
                # Atualizar registros existentes baseado em observa√ß√µes
                print("üîÑ Atualizando registros existentes...")
                db.session.execute(text("""
                    UPDATE registro_ponto 
                    SET tipo_registro = CASE 
                        WHEN observacoes ILIKE '%FERIADO_TRABALHADO%' THEN 'feriado_trabalhado'
                        WHEN observacoes ILIKE '%FALTA_JUSTIFICADA%' THEN 'falta_justificada'  
                        WHEN observacoes ILIKE '%FALTA%' THEN 'falta'
                        WHEN observacoes ILIKE '%FERIADO%' THEN 'feriado'
                        ELSE 'trabalhado'
                    END
                """))
                print("‚úÖ Coluna 'tipo_registro' adicionada com sucesso!")
            else:
                print("‚ÑπÔ∏è Coluna 'tipo_registro' j√° existe")
            
            # Adicionar coluna percentual_extras se n√£o existir
            if 'percentual_extras' not in existing_columns:
                print("‚ûï Adicionando coluna 'percentual_extras'...")
                db.session.execute(text("""
                    ALTER TABLE registro_ponto 
                    ADD COLUMN percentual_extras FLOAT DEFAULT 0.0
                """))
                
                # Configurar percentuais para registros existentes
                print("üîÑ Configurando percentuais para registros existentes...")
                db.session.execute(text("""
                    UPDATE registro_ponto 
                    SET percentual_extras = CASE 
                        WHEN tipo_registro IN ('feriado_trabalhado', 'domingo_horas_extras') THEN 100.0
                        WHEN tipo_registro = 'sabado_horas_extras' THEN 50.0
                        ELSE 0.0
                    END
                """))
                print("‚úÖ Coluna 'percentual_extras' adicionada com sucesso!")
            else:
                print("‚ÑπÔ∏è Coluna 'percentual_extras' j√° existe")
            
            # Commit das altera√ß√µes
            db.session.commit()
            
            # Verificar resultado final
            result = db.session.execute(text("SELECT COUNT(*) FROM registro_ponto"))
            total_registros = result.fetchone()[0]
            
            result = db.session.execute(text("""
                SELECT tipo_registro, COUNT(*) as total
                FROM registro_ponto 
                GROUP BY tipo_registro
                ORDER BY total DESC
            """))
            tipos_distribuicao = result.fetchall()
            
            print(f"\nüìä Migra√ß√£o conclu√≠da com sucesso!")
            print(f"Total de registros: {total_registros}")
            print(f"Distribui√ß√£o por tipo:")
            for tipo, total in tipos_distribuicao:
                print(f"  - {tipo}: {total} registros")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante a migra√ß√£o: {str(e)}")
            db.session.rollback()
            return False

if __name__ == "__main__":
    if migrar_ponto_novos_tipos():
        print("\nüéâ Migra√ß√£o executada com sucesso!")
        print("\nNovos tipos dispon√≠veis:")
        print("- trabalhado (padr√£o)")
        print("- falta")
        print("- falta_justificada")
        print("- feriado")
        print("- feriado_trabalhado (100% extra)")
        print("- sabado_horas_extras (50-60% configur√°vel)")
        print("- domingo_horas_extras (100% extra)")
    else:
        print("\nüí• Falha na migra√ß√£o!")
        sys.exit(1)