#!/usr/bin/env python3
"""
Script para popular categorias de servi√ßos padr√£o no SIGE v8.0
Executa cria√ß√£o das categorias padr√£o para constru√ß√£o civil
"""

from app import app, db
from models import CategoriaServico, Usuario
from datetime import datetime

def popular_categorias_servicos():
    """Criar categorias padr√£o de servi√ßos para constru√ß√£o civil"""
    
    with app.app_context():
        print("üèóÔ∏è  Populando Categorias de Servi√ßos - SIGE v8.0")
        print("=" * 50)
        
        # Buscar admin para associar as categorias (multi-tenant)
        admin = Usuario.query.filter_by(username='valeverde').first()
        if not admin:
            print("‚ùå Admin 'valeverde' n√£o encontrado. Execute o script de cria√ß√£o de usu√°rios primeiro.")
            return
        
        print(f"‚úÖ Admin encontrado: {admin.username} (ID: {admin.id})")
        
        # Categorias padr√£o da constru√ß√£o civil
        categorias_padrao = [
            {
                'nome': 'Estrutura',
                'descricao': 'Servi√ßos estruturais como funda√ß√µes, pilares, vigas e lajes',
                'cor': '#dc3545',  # Vermelho
                'icone': 'fas fa-building',
                'ordem': 1
            },
            {
                'nome': 'Alvenaria',
                'descricao': 'Servi√ßos de alvenaria de veda√ß√£o e estrutural',
                'cor': '#fd7e14',  # Laranja
                'icone': 'fas fa-chess-board',
                'ordem': 2
            },
            {
                'nome': 'Cobertura',
                'descricao': 'Estrutura de telhado, telhas e impermeabiliza√ß√£o de cobertura',
                'cor': '#20c997',  # Verde √°gua
                'icone': 'fas fa-home',
                'ordem': 3
            },
            {
                'nome': 'Instala√ß√µes',
                'descricao': 'Instala√ß√µes el√©tricas, hidr√°ulicas, g√°s e telecomunica√ß√µes',
                'cor': '#0dcaf0',  # Azul claro
                'icone': 'fas fa-plug',
                'ordem': 4
            },
            {
                'nome': 'Acabamento',
                'descricao': 'Revestimentos, pinturas, pisos e acabamentos finais',
                'cor': '#6f42c1',  # Roxo
                'icone': 'fas fa-paint-brush',
                'ordem': 5
            },
            {
                'nome': 'Esquadrias',
                'descricao': 'Portas, janelas, port√µes e elementos de fechamento',
                'cor': '#6c757d',  # Cinza
                'icone': 'fas fa-door-open',
                'ordem': 6
            },
            {
                'nome': 'Funda√ß√£o',
                'descricao': 'Escava√ß√£o, sapatas, blocos e elementos de funda√ß√£o',
                'cor': '#795548',  # Marrom
                'icone': 'fas fa-mountain',
                'ordem': 7
            },
            {
                'nome': 'Impermeabiliza√ß√£o',
                'descricao': 'Servi√ßos de impermeabiliza√ß√£o e prote√ß√£o contra umidade',
                'cor': '#607d8b',  # Azul acinzentado
                'icone': 'fas fa-tint',
                'ordem': 8
            },
            {
                'nome': 'Paisagismo',
                'descricao': 'Jardins, gramados e elementos paisag√≠sticos',
                'cor': '#4caf50',  # Verde
                'icone': 'fas fa-seedling',
                'ordem': 9
            },
            {
                'nome': 'Infraestrutura',
                'descricao': 'Terraplenagem, drenagem e infraestrutura urbana',
                'cor': '#ff9800',  # √Çmbar
                'icone': 'fas fa-road',
                'ordem': 10
            }
        ]
        
        categorias_criadas = 0
        categorias_existentes = 0
        
        for cat_data in categorias_padrao:
            # Verificar se categoria j√° existe para este admin
            categoria_existente = CategoriaServico.query.filter_by(
                nome=cat_data['nome'],
                admin_id=admin.id
            ).first()
            
            if categoria_existente:
                print(f"‚ö†Ô∏è  Categoria '{cat_data['nome']}' j√° existe - pulando")
                categorias_existentes += 1
                continue
            
            # Criar nova categoria
            categoria = CategoriaServico(
                nome=cat_data['nome'],
                descricao=cat_data['descricao'],
                cor=cat_data['cor'],
                icone=cat_data['icone'],
                ordem=cat_data['ordem'],
                admin_id=admin.id,
                ativo=True
            )
            
            db.session.add(categoria)
            print(f"‚úÖ Categoria criada: {cat_data['nome']} ({cat_data['cor']}) - {cat_data['icone']}")
            categorias_criadas += 1
        
        # Salvar no banco
        try:
            db.session.commit()
            print("\n" + "=" * 50)
            print(f"üéâ Categorias populadas com sucesso!")
            print(f"üìä Estat√≠sticas:")
            print(f"   ‚Ä¢ Categorias criadas: {categorias_criadas}")
            print(f"   ‚Ä¢ Categorias j√° existiam: {categorias_existentes}")
            print(f"   ‚Ä¢ Total no sistema: {categorias_criadas + categorias_existentes}")
            print(f"   ‚Ä¢ Admin: {admin.username}")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro ao salvar no banco: {str(e)}")
            return
        
        # Verificar cria√ß√£o
        total_categorias = CategoriaServico.query.filter_by(
            admin_id=admin.id,
            ativo=True
        ).count()
        
        print(f"\n‚úÖ Verifica√ß√£o: {total_categorias} categorias ativas no banco")
        print("\nüîß Agora voc√™ pode:")
        print("   1. Acessar a p√°gina de Servi√ßos")
        print("   2. Clicar no bot√£o '+' ao lado do campo Categoria")
        print("   3. Gerenciar suas categorias de servi√ßos")
        print("\nüåü Sistema pronto para uso!")

if __name__ == '__main__':
    popular_categorias_servicos()