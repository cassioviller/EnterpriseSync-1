#!/bin/bash
# üöÄ SIGE v10.0 - ENTRYPOINT PARA CORRE√á√ÉO DE VE√çCULOS EM PRODU√á√ÉO
# ================================================================
# Vers√£o especializada para aplicar migration de limpeza de ve√≠culos
# Foco: Resolver problemas de SQLAlchemy com models obsoletos
# ================================================================

set -e

echo "üöÄ SIGE v10.0 - CORRE√á√ÉO DE VE√çCULOS EM PRODU√á√ÉO"
echo "================================================"

# Configura√ß√µes b√°sicas de ambiente
export FLASK_ENV=production
export DIGITAL_MASTERY_MODE=true
export RUN_VEHICLE_MIGRATION=true

# DATABASE_URL padr√£o para EasyPanel se n√£o estiver definida
if [ -z "$DATABASE_URL" ]; then
    export DATABASE_URL="postgresql://sige:sige@viajey_sige:5432/sige?sslmode=disable"
    echo "üîß Usando DATABASE_URL padr√£o EasyPanel"
else
    echo "üîß Usando DATABASE_URL existente"
fi

# Logging detalhado para produ√ß√£o
echo "üìã AMBIENTE DE PRODU√á√ÉO DETECTADO"
echo "   üîë DATABASE_URL configurada"
echo "   üîß RUN_VEHICLE_MIGRATION=true"
echo "   üíª Hostname: $(hostname)"
echo "   üìÖ Data: $(date)"

# Aguardar banco de dados com timeout estendido
echo "üîå Aguardando banco de dados..."
sleep 20

# Teste detalhado de conectividade
echo "üîç Testando conectividade com banco..."
if command -v pg_isready >/dev/null 2>&1; then
    for i in {1..5}; do
        if pg_isready -h ${DATABASE_HOST:-viajey_sige} -p ${DATABASE_PORT:-5432} -U ${DATABASE_USER:-sige} >/dev/null 2>&1; then
            echo "‚úÖ Banco de dados acess√≠vel (tentativa $i)"
            break
        else
            echo "‚ö†Ô∏è Tentativa $i/5 - aguardando banco..."
            sleep 5
        fi
    done
else
    echo "‚ÑπÔ∏è pg_isready n√£o dispon√≠vel - continuando"
fi

# üî• MIGRATION CR√çTICA PARA VE√çCULOS
echo "üî• EXECUTANDO MIGRATION CR√çTICA DE VE√çCULOS"
echo "============================================"

python3 -c "
import sys
import os
sys.path.append('/app')

print('üöÄ INICIANDO MIGRATION DE LIMPEZA DE VE√çCULOS...')

try:
    # Importar o script de migration
    import migration_cleanup_veiculos_production
    
    print('üìã Executando migration...')
    migrator = migration_cleanup_veiculos_production.VeiculosMigrationCleaner()
    sucesso = migrator.executar_migration()
    
    if sucesso:
        print('‚úÖ MIGRATION DE VE√çCULOS EXECUTADA COM SUCESSO!')
    else:
        print('‚ùå MIGRATION FALHOU - continuando com inicializa√ß√£o')
        
except Exception as e:
    print(f'‚ö†Ô∏è Erro na migration (n√£o cr√≠tico): {e}')
    print('üîÑ Aplica√ß√£o tentar√° continuar...')
"

# Inicializa√ß√£o b√°sica da aplica√ß√£o
echo "üìä Inicializando aplica√ß√£o p√≥s-migration..."
python3 -c "
import sys
import os
sys.path.append('/app')

try:
    print('üîß Importando aplica√ß√£o...')
    from app import app, db
    
    with app.app_context():
        print('üìã Verificando/criando tabelas b√°sicas...')
        db.create_all()
        print('‚úÖ Tabelas verificadas')
        
        # Health check espec√≠fico de ve√≠culos
        try:
            from sqlalchemy import text, inspect
            
            # Verificar tabelas de ve√≠culos
            inspector = inspect(db.engine)
            tabelas = inspector.get_table_names()
            
            print('üîç VERIFICA√á√ÉO P√ìS-MIGRATION:')
            tabelas_essenciais = ['veiculo', 'uso_veiculo', 'custo_veiculo']
            for tabela in tabelas_essenciais:
                if tabela in tabelas:
                    result = db.session.execute(text(f'SELECT COUNT(*) FROM {tabela}'))
                    count = result.scalar()
                    print(f'   ‚úÖ {tabela}: {count} registros')
                else:
                    print(f'   ‚ùå {tabela}: TABELA AUSENTE')
            
            # Verificar se tabelas obsoletas foram removidas
            tabelas_obsoletas = ['alocacao_veiculo', 'equipe_veiculo', 'transferencia_veiculo']
            print('üóëÔ∏è TABELAS OBSOLETAS:')
            for tabela in tabelas_obsoletas:
                if tabela in tabelas:
                    print(f'   ‚ö†Ô∏è {tabela}: AINDA PRESENTE (pode causar erro)')
                else:
                    print(f'   ‚úÖ {tabela}: REMOVIDA')
                    
        except Exception as e:
            print(f'‚ÑπÔ∏è Health check diagn√≥stico: {e}')
        
        print('‚úÖ Inicializa√ß√£o b√°sica conclu√≠da')
        
except Exception as e:
    print(f'‚ö†Ô∏è Erro na inicializa√ß√£o (n√£o cr√≠tico): {e}')
    print('üîÑ Aplica√ß√£o tentar√° continuar...')
"

echo "üéØ CORRE√á√ÉO DE VE√çCULOS APLICADA COM SUCESSO!"
echo "üöÄ Iniciando aplica√ß√£o..."

# Executar comando passado como par√¢metro
exec "$@"