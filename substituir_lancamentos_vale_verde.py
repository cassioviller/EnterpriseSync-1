#!/usr/bin/env python3
"""
SUBSTITUIR LAN√áAMENTOS VALE VERDE - DIAS ESPEC√çFICOS
Substitui lan√ßamentos nos dias 12, 13, 19 e 20/07/2025 para funcion√°rios Vale Verde
"""

import os
import sys
sys.path.append('.')

from app import app, db
from models import Funcionario, RegistroPonto
from datetime import datetime, date
from sqlalchemy import text

def substituir_lancamentos_vale_verde():
    """Substitui lan√ßamentos espec√≠ficos para funcion√°rios Vale Verde"""
    
    with app.app_context():
        print("SUBSTITUINDO LAN√áAMENTOS VALE VERDE")
        print("=" * 60)
        
        # Buscar funcion√°rios Vale Verde
        funcionarios_vale_verde = Funcionario.query.filter(
            Funcionario.nome.like('%Vale Verde%')
        ).all()
        
        if not funcionarios_vale_verde:
            print("‚ùå Nenhum funcion√°rio Vale Verde encontrado")
            return False
        
        print(f"‚úÖ Encontrados {len(funcionarios_vale_verde)} funcion√°rios Vale Verde:")
        for func in funcionarios_vale_verde:
            print(f"  ‚Ä¢ {func.codigo} - {func.nome}")
        
        # Datas espec√≠ficas solicitadas
        datas_substituir = [
            {'data': date(2025, 7, 12), 'tipo': 'sabado_trabalhado', 'dia': 'S√ÅBADO'},    # 12/07 - S√°bado
            {'data': date(2025, 7, 13), 'tipo': 'domingo_trabalhado', 'dia': 'DOMINGO'},  # 13/07 - Domingo
            {'data': date(2025, 7, 19), 'tipo': 'sabado_trabalhado', 'dia': 'S√ÅBADO'},    # 19/07 - S√°bado  
            {'data': date(2025, 7, 20), 'tipo': 'domingo_trabalhado', 'dia': 'DOMINGO'},  # 20/07 - Domingo
        ]
        
        registros_alterados = 0
        
        for funcionario in funcionarios_vale_verde:
            print(f"\nüîÑ Processando: {funcionario.nome}")
            
            for config in datas_substituir:
                data_lancamento = config['data']
                tipo_lancamento = config['tipo']
                dia_nome = config['dia']
                
                # Verificar se j√° existe registro na data
                registro_existente = RegistroPonto.query.filter_by(
                    funcionario_id=funcionario.id,
                    data=data_lancamento
                ).first()
                
                if registro_existente:
                    # Atualizar registro existente
                    print(f"  üîÑ Atualizando {dia_nome} {data_lancamento.strftime('%d/%m')}")
                    
                    registro_existente.tipo_registro = tipo_lancamento
                    registro_existente.hora_entrada = datetime.strptime('07:00', '%H:%M').time()
                    registro_existente.hora_almoco_saida = datetime.strptime('12:00', '%H:%M').time()
                    registro_existente.hora_almoco_retorno = datetime.strptime('13:00', '%H:%M').time()
                    registro_existente.hora_saida = datetime.strptime('16:00', '%H:%M').time()
                    registro_existente.horas_trabalhadas = 8.0
                    registro_existente.horas_extras = 8.0 if tipo_lancamento != 'trabalho_normal' else 0.0
                    
                    if tipo_lancamento == 'sabado_trabalhado':
                        registro_existente.percentual_extras = 50.0
                        registro_existente.observacoes = 'S√°bado trabalhado - todas as horas com 50% adicional'
                    elif tipo_lancamento == 'domingo_trabalhado':
                        registro_existente.percentual_extras = 100.0
                        registro_existente.observacoes = 'Domingo trabalhado - todas as horas com 100% adicional'
                    
                    registros_alterados += 1
                    
                else:
                    # Criar novo registro
                    print(f"  ‚úÖ Criando {dia_nome} {data_lancamento.strftime('%d/%m')}")
                    
                    novo_registro = RegistroPonto(
                        funcionario_id=funcionario.id,
                        data=data_lancamento,
                        tipo_registro=tipo_lancamento,
                        hora_entrada=datetime.strptime('07:00', '%H:%M').time(),
                        hora_almoco_saida=datetime.strptime('12:00', '%H:%M').time(),
                        hora_almoco_retorno=datetime.strptime('13:00', '%H:%M').time(),
                        hora_saida=datetime.strptime('16:00', '%H:%M').time(),
                        horas_trabalhadas=8.0,
                        horas_extras=8.0 if tipo_lancamento != 'trabalho_normal' else 0.0,
                        percentual_extras=50.0 if tipo_lancamento == 'sabado_trabalhado' else 100.0,
                        observacoes=f'{dia_nome} trabalhado - Vale Verde'
                    )
                    db.session.add(novo_registro)
                    registros_alterados += 1
        
        # Salvar altera√ß√µes
        try:
            db.session.commit()
            print(f"\n‚úÖ SUCESSO: {registros_alterados} registros alterados/criados!")
            return True
        except Exception as e:
            db.session.rollback()
            print(f"\n‚ùå ERRO ao salvar: {e}")
            return False

def verificar_resultados():
    """Verifica se os lan√ßamentos est√£o corretos"""
    
    with app.app_context():
        print("\nVERIFICANDO RESULTADOS")
        print("=" * 50)
        
        # Buscar registros espec√≠ficos
        datas_verificar = [
            date(2025, 7, 12),  # S√°bado
            date(2025, 7, 13),  # Domingo
            date(2025, 7, 19),  # S√°bado
            date(2025, 7, 20),  # Domingo
        ]
        
        funcionarios_vale_verde = Funcionario.query.filter(
            Funcionario.nome.like('%Vale Verde%')
        ).all()
        
        print("REGISTROS POR DATA:")
        for data_verif in datas_verificar:
            dia_semana = "S√ÅBADO" if data_verif.weekday() == 5 else "DOMINGO" if data_verif.weekday() == 6 else "OUTRO"
            
            registros_data = RegistroPonto.query.filter(
                RegistroPonto.data == data_verif,
                RegistroPonto.funcionario_id.in_([f.id for f in funcionarios_vale_verde])
            ).all()
            
            print(f"\nüìÖ {data_verif.strftime('%d/%m/%Y')} ({dia_semana}):")
            for registro in registros_data:
                tipo_badge = ""
                if registro.tipo_registro == 'sabado_trabalhado':
                    tipo_badge = "üìÖ BADGE VERDE (warning)"
                elif registro.tipo_registro == 'domingo_trabalhado':
                    tipo_badge = "üìÖ BADGE VERMELHA (danger)"
                
                print(f"  ‚Ä¢ {registro.funcionario.nome}: {registro.tipo_registro} - {tipo_badge}")
        
        print(f"\nRESUMO:")
        print(f"‚úÖ {len(funcionarios_vale_verde)} funcion√°rios Vale Verde")
        print(f"‚úÖ 4 datas espec√≠ficas processadas")
        print(f"‚úÖ Badges na tabela mostrar√£o:")
        print(f"   - Coluna Data: S√ÅBADO/DOMINGO")
        print(f"   - Coluna Tipo: S√°bado Trabalhado/Domingo Trabalhado")

if __name__ == "__main__":
    print("SUBSTITUINDO LAN√áAMENTOS VALE VERDE - DIAS ESPEC√çFICOS")
    print("=" * 70)
    
    # Substituir lan√ßamentos
    sucesso = substituir_lancamentos_vale_verde()
    
    if sucesso:
        # Verificar resultados
        verificar_resultados()
        
        print("\n" + "=" * 70)
        print("‚úÖ LAN√áAMENTOS VALE VERDE ATUALIZADOS!")
        print("‚úÖ Dias 12, 13, 19, 20/07 configurados")
        print("‚úÖ S√°bados: tipo 'sabado_trabalhado' - badge VERDE")
        print("‚úÖ Domingos: tipo 'domingo_trabalhado' - badge VERMELHA")
        print("\nNa tabela de controle de ponto voc√™ ver√°:")
        print("- 12/07: S√ÅBADO na data, 'S√°bado Trabalhado' no tipo")
        print("- 13/07: DOMINGO na data, 'Domingo Trabalhado' no tipo")
        print("- 19/07: S√ÅBADO na data, 'S√°bado Trabalhado' no tipo")
        print("- 20/07: DOMINGO na data, 'Domingo Trabalhado' no tipo")
    else:
        print("\n‚ùå FALHA na substitui√ß√£o dos lan√ßamentos")