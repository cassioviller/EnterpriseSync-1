#!/usr/bin/env python3
"""
APLICAR NOVA L√ìGICA DE HORAS EXTRAS BASEADA EM HOR√ÅRIO PADR√ÉO
Data: 06 de Agosto de 2025
Objetivo: Implementar c√°lculo correto de horas extras baseado no hor√°rio cadastrado do funcion√°rio
APLICA√á√ÉO: APENAS PARA DIAS NORMAIS (n√£o altera s√°bados, domingos, feriados)
"""

from app import app, db
from models import RegistroPonto, Funcionario, HorarioTrabalho
from kpis_engine import CalculadoraKPI
from datetime import date, time, datetime
import logging

logging.basicConfig(level=logging.INFO)

def corrigir_horarios_extras_logica_padrao():
    """
    Aplica nova l√≥gica de horas extras baseada no hor√°rio padr√£o cadastrado
    APENAS para registros de dias normais
    """
    with app.app_context():
        print("üïê APLICANDO NOVA L√ìGICA DE HORAS EXTRAS BASEADA EM HOR√ÅRIO PADR√ÉO")
        print("=" * 70)
        print("üìã REGRAS:")
        print("   ‚Ä¢ APENAS dias normais (n√£o altera s√°bados/domingos/feriados)")
        print("   ‚Ä¢ Usa hor√°rio cadastrado em 'hor√°rios de trabalho'")
        print("   ‚Ä¢ Entrada antecipada + Sa√≠da atrasada = Horas Extras")
        print("   ‚Ä¢ Entrada atrasada + Sa√≠da antecipada = Atrasos")
        print("=" * 70)
        
        # Buscar registros de dias normais dos √∫ltimos 30 dias
        registros_normais = RegistroPonto.query.filter(
            RegistroPonto.data >= date(2025, 7, 1),  # Julho e agosto
            RegistroPonto.tipo_registro.in_([
                'trabalho_normal', 'ponto_normal', 'dia_normal'
            ]),
            RegistroPonto.hora_entrada.isnot(None),
            RegistroPonto.hora_saida.isnot(None)
        ).order_by(RegistroPonto.data.desc()).limit(100).all()
        
        print(f"üìä REGISTROS ENCONTRADOS: {len(registros_normais)} dias normais")
        
        if not registros_normais:
            print("‚ÑπÔ∏è Nenhum registro de dia normal encontrado")
            return
        
        # Aplicar nova l√≥gica
        engine = CalculadoraKPI()
        corrigidos = 0
        total_processados = 0
        
        for registro in registros_normais:
            try:
                total_processados += 1
                funcionario = registro.funcionario_ref
                
                print(f"\nüîÑ PROCESSANDO ({total_processados}/{len(registros_normais)})")
                print(f"   {funcionario.nome} - {registro.data} - {registro.tipo_registro}")
                
                # Valores antigos para compara√ß√£o
                extras_antigas = registro.horas_extras or 0
                atrasos_antigos = registro.total_atraso_horas or 0
                
                # Aplicar nova l√≥gica usando KPI Engine
                sucesso = engine.calcular_e_atualizar_ponto(registro.id)
                
                if sucesso:
                    # Recarregar registro para ver mudan√ßas
                    db.session.refresh(registro)
                    
                    print(f"   ‚úÖ ATUALIZADO:")
                    print(f"      Extras: {extras_antigas:.2f}h ‚Üí {registro.horas_extras:.2f}h")
                    print(f"      Atrasos: {atrasos_antigos:.2f}h ‚Üí {registro.total_atraso_horas:.2f}h")
                    
                    if abs(extras_antigas - registro.horas_extras) > 0.01:
                        corrigidos += 1
                        print(f"      üìà CORRE√á√ÉO APLICADA!")
                else:
                    print(f"   ‚ùå ERRO ao processar registro {registro.id}")
                    
            except Exception as e:
                print(f"   ‚ùå ERRO: {e}")
                continue
        
        print(f"\nüìã RELAT√ìRIO FINAL:")
        print(f"   Total processados: {total_processados}")
        print(f"   Registros corrigidos: {corrigidos}")
        print(f"   Taxa de corre√ß√£o: {(corrigidos/total_processados)*100:.1f}%")
        
        # Salvar altera√ß√µes
        try:
            db.session.commit()
            print("‚úÖ ALTERA√á√ïES SALVAS NO BANCO DE DADOS")
        except Exception as e:
            print(f"‚ùå ERRO AO SALVAR: {e}")
            db.session.rollback()

def verificar_horarios_cadastrados():
    """Verificar quantos funcion√°rios t√™m hor√°rios cadastrados"""
    with app.app_context():
        print("\nüîç VERIFICA√á√ÉO DE HOR√ÅRIOS CADASTRADOS:")
        print("=" * 40)
        
        total_funcionarios = Funcionario.query.filter_by(ativo=True).count()
        com_horario = Funcionario.query.filter(
            Funcionario.ativo == True,
            Funcionario.horario_trabalho_id.isnot(None)
        ).count()
        sem_horario = total_funcionarios - com_horario
        
        print(f"üìä FUNCION√ÅRIOS ATIVOS: {total_funcionarios}")
        print(f"   Com hor√°rio cadastrado: {com_horario}")
        print(f"   Sem hor√°rio (usar√£o padr√£o): {sem_horario}")
        
        if com_horario > 0:
            print(f"\nüìã HOR√ÅRIOS CADASTRADOS:")
            funcionarios_com_horario = Funcionario.query.filter(
                Funcionario.ativo == True,
                Funcionario.horario_trabalho_id.isnot(None)
            ).all()
            
            for func in funcionarios_com_horario:
                horario = func.horario_trabalho_ref
                print(f"   {func.nome}: {horario.entrada} √†s {horario.saida}")

def validar_exemplo_calculo():
    """Validar c√°lculo com exemplo espec√≠fico"""
    with app.app_context():
        print("\nüß™ VALIDA√á√ÉO COM EXEMPLO REAL:")
        print("=" * 40)
        
        # Simular exemplo do prompt
        entrada_padrao = time(7, 12)    # 07:12
        entrada_real = time(7, 5)       # 07:05
        saida_padrao = time(17, 0)      # 17:00
        saida_real = time(17, 50)       # 17:50
        
        # Calcular extras entrada
        entrada_padrao_min = (entrada_padrao.hour * 60) + entrada_padrao.minute  # 432min
        entrada_real_min = (entrada_real.hour * 60) + entrada_real.minute        # 425min
        extras_entrada_min = max(0, entrada_padrao_min - entrada_real_min)       # 7min
        
        # Calcular extras sa√≠da
        saida_padrao_min = (saida_padrao.hour * 60) + saida_padrao.minute        # 1020min
        saida_real_min = (saida_real.hour * 60) + saida_real.minute              # 1070min
        extras_saida_min = max(0, saida_real_min - saida_padrao_min)             # 50min
        
        # Total
        total_extras_min = extras_entrada_min + extras_saida_min                 # 57min
        total_extras_h = round(total_extras_min / 60, 2)                         # 0.95h
        
        print(f"üìä EXEMPLO DE C√ÅLCULO:")
        print(f"   Hor√°rio padr√£o: {entrada_padrao} √†s {saida_padrao}")
        print(f"   Hor√°rio real: {entrada_real} √†s {saida_real}")
        print(f"   Extras entrada: {entrada_padrao} - {entrada_real} = {extras_entrada_min}min")
        print(f"   Extras sa√≠da: {saida_real} - {saida_padrao} = {extras_saida_min}min")
        print(f"   Total extras: {total_extras_min}min = {total_extras_h}h")
        print(f"   ‚úÖ Resultado esperado: 0.95h")

if __name__ == "__main__":
    print("üöÄ INICIANDO APLICA√á√ÉO DA NOVA L√ìGICA DE HORAS EXTRAS")
    
    # Fase 1: Verificar hor√°rios cadastrados
    verificar_horarios_cadastrados()
    
    # Fase 2: Validar exemplo
    validar_exemplo_calculo()
    
    # Fase 3: Aplicar corre√ß√£o
    resposta = input("\n‚ùì Aplicar nova l√≥gica aos registros existentes? (s/n): ")
    if resposta.lower() == 's':
        corrigir_horarios_extras_logica_padrao()
    else:
        print("‚ÑπÔ∏è Corre√ß√£o cancelada pelo usu√°rio")
    
    print("\nüéØ NOVA L√ìGICA DE HORAS EXTRAS BASEADA EM HOR√ÅRIO PADR√ÉO CONCLU√çDA!")