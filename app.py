import os
import logging
from flask import Flask, url_for
from flask_login import LoginManager
from flask_migrate import Migrate
# CSRFProtect removido - causa conflito 405 quando WTF_CSRF_ENABLED=False
from flask_cors import CORS
from werkzeug.middleware.proxy_fix import ProxyFix

# ü§ñ SISTEMA DE DETEC√á√ÉO AUTOM√ÅTICA DE AMBIENTE - SIGE v10.0
from environment_detector import auto_configure_environment, get_environment_info, is_production

# Configure logging for production
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Create app instance
app = Flask(__name__)
app.secret_key = os.environ.get("SECRET_KEY", "sige-v10-digital-mastery-production-key-2025")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

# ü§ñ DETEC√á√ÉO E CONFIGURA√á√ÉO AUTOM√ÅTICA DE AMBIENTE
logger.info("üöÄ SIGE v10.0 - INICIANDO DETEC√á√ÉO AUTOM√ÅTICA DE AMBIENTE")
logger.info("=" * 60)

# Configurar ambiente automaticamente baseado na detec√ß√£o inteligente
env_info = auto_configure_environment()

# Database configuration - v10.0 Digital Mastery com detec√ß√£o autom√°tica
database_url = os.environ.get("DATABASE_URL")
if not database_url:
    # Se n√£o houver DATABASE_URL, usar padr√£o baseado no ambiente detectado
    if is_production():
        database_url = "postgresql://sige:sige@viajey_sige:5432/sige?sslmode=disable"
        os.environ['DATABASE_URL'] = database_url
        logger.info("üîß DATABASE_URL de produ√ß√£o configurada automaticamente")
    else:
        logger.info("üîß DATABASE_URL de desenvolvimento mantida")

# Fun√ß√£o para mascarar credenciais nos logs
def mask_database_url(url):
    """Mascara credenciais em URLs de banco para logs seguros"""
    if not url:
        return "None"
    import re
    # Mascarar senha: user:password@host -> user:****@host
    masked = re.sub(r'://([^:]+):([^@]+)@', r'://\1:****@', url)
    return masked

# Log da detec√ß√£o autom√°tica
logger.info(f"üåç AMBIENTE DETECTADO: {env_info['environment'].upper()}")
logger.info(f"üñ•Ô∏è PLATAFORMA: {env_info['platform'].upper()}")
logger.info(f"üìä CONFIAN√áA: {env_info['confidence']:.1%}")
logger.info(f"üîó DATABASE: {mask_database_url(database_url)}")
logger.info(f"üîÑ AUTO-MIGRA√á√ïES: {env_info['auto_migrations']}")
logger.info(f"üóëÔ∏è AUTO-LIMPEZA: {env_info['auto_cleanup']}")

# Convert postgres:// to postgresql:// for SQLAlchemy compatibility
if database_url and database_url.startswith("postgres://"):
    database_url = database_url.replace("postgres://", "postgresql://", 1)

# Garantir que sslmode=disable est√° presente para EasyPanel
if database_url and "sslmode=" not in database_url:
    separator = "&" if "?" in database_url else "?"
    database_url = f"{database_url}{separator}sslmode=disable"

app.config["SQLALCHEMY_DATABASE_URI"] = database_url
app.config["SQLALCHEMY_ENGINE_OPTIONS"] = {
    "pool_recycle": 300,
    "pool_pre_ping": True,
    "pool_size": 10,
    "max_overflow": 20,
    "echo": False  # Desabilitar logs SQL em produ√ß√£o
}
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.config['WTF_CSRF_ENABLED'] = False

# Configura√ß√µes v10.0 Digital Mastery - Autom√°ticas baseadas no ambiente
app.config['DIGITAL_MASTERY_MODE'] = True
app.config['OBSERVABILITY_ENABLED'] = True
app.config['RUN_MIGRATIONS_FLAG'] = env_info['auto_migrations']  # Autom√°tico baseado na detec√ß√£o
app.config['RUN_CLEANUP_FLAG'] = env_info['auto_cleanup']  # Autom√°tico baseado na detec√ß√£o
app.config['RDO_MASTERY_ENABLED'] = True
app.config['ENVIRONMENT_INFO'] = env_info  # Armazenar info do ambiente para uso posterior

# Configura√ß√µes espec√≠ficas por ambiente
if is_production():
    app.config['DEBUG'] = False
    app.config['TESTING'] = False
    logger.info("üè≠ Configura√ß√µes de produ√ß√£o aplicadas")
else:
    app.config['DEBUG'] = True
    logger.info("üîß Configura√ß√µes de desenvolvimento mantidas")

# Configura√ß√µes espec√≠ficas para resolver erro SERVER_NAME  
app.config['SERVER_NAME'] = None  # Permite qualquer host
app.config['APPLICATION_ROOT'] = '/'  # Raiz da aplica√ß√£o  
app.config['PREFERRED_URL_SCHEME'] = 'http'  # Esquema padr√£o

# Configure CORS for AJAX requests
CORS(app, origins="*", methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])

# Initialize extensions
from models import db  # Import the db instance from models
db.init_app(app)

migrate = Migrate()
migrate.init_app(app, db)

login_manager = LoginManager()
login_manager.init_app(app)
setattr(login_manager, 'login_view', 'auth.login')  # Corrigido para apontar para blueprint auth
login_manager.login_message = 'Por favor, fa√ßa login para acessar esta p√°gina.'

# Context processor para configura√ß√µes da empresa
@app.context_processor
def inject_company_config():
    """Injeta configura√ß√µes da empresa em todos os templates"""
    try:
        from flask_login import current_user
        from models import ConfiguracaoEmpresa
        
        if current_user and current_user.is_authenticated:
            admin_id = getattr(current_user, 'admin_id', None) or current_user.id
            config_empresa = ConfiguracaoEmpresa.query.filter_by(admin_id=admin_id).first()
            
            if config_empresa:
                return {
                    'config_empresa': config_empresa,
                    'empresa_cores': {
                        'primaria': config_empresa.cor_primaria or '#007bff',
                        'secundaria': config_empresa.cor_secundaria or '#6c757d',
                        'fundo_proposta': config_empresa.cor_fundo_proposta or '#f8f9fa'
                    }
                }
        
        # Valores padr√£o se n√£o houver configura√ß√£o
        return {
            'config_empresa': None,
            'empresa_cores': {
                'primaria': '#007bff',
                'secundaria': '#6c757d', 
                'fundo_proposta': '#f8f9fa'
            }
        }
    except Exception:
        # Fallback em caso de erro
        return {
            'config_empresa': None,
            'empresa_cores': {
                'primaria': '#007bff',
                'secundaria': '#6c757d',
                'fundo_proposta': '#f8f9fa'
            }
        }

# CORRE√á√ÉO CR√çTICA: CSRF removido completamente para evitar conflito 405
# CSRFProtect estava sendo inicializado mesmo com WTF_CSRF_ENABLED = False
# Esta √© a causa principal dos erros 405 Method Not Allowed

# Configurar CORS para requisi√ß√µes AJAX das APIs
CORS(app, origins="*", methods=["GET", "POST", "PUT", "DELETE"], 
     allow_headers=["Content-Type", "Authorization"])

# Import all models (now consolidated)
from models import *
logging.info("‚úÖ Todos os modelos importados do arquivo consolidado")

# Import views
from views import main_bp
from production_routes import production_bp
from error_handlers import register_error_handlers
try:
    from relatorios_funcionais import relatorios_bp
    app.register_blueprint(relatorios_bp, url_prefix='/relatorios')
except ImportError:
    logging.warning("Relat√≥rios funcionais n√£o dispon√≠vel")

try:
    from almoxarifado_views import almoxarifado_bp
    app.register_blueprint(almoxarifado_bp, url_prefix='/almoxarifado')
except ImportError:
    logging.warning("Almoxarifado views n√£o dispon√≠vel")

# Register main blueprint
app.register_blueprint(main_bp)
app.register_blueprint(production_bp, url_prefix='/prod')

# Register ServicoObraReal blueprint
try:
    from crud_servico_obra_real import servico_obra_real_bp
    app.register_blueprint(servico_obra_real_bp)
    logging.info("‚úÖ Blueprint ServicoObraReal registrado")
except ImportError as e:
    logging.warning(f"ServicosObraReal n√£o dispon√≠vel: {e}")

# Test routes removed for production cleanliness

# Register error handlers
register_error_handlers(app)

@login_manager.user_loader
def load_user(user_id):
    return Usuario.query.get(int(user_id))

# Fun√ß√£o para templates
@app.template_global()
def obter_foto_funcionario(funcionario):
    """Obter foto do funcion√°rio (base64 ou padr√£o)"""
    if funcionario.foto_base64:
        return funcionario.foto_base64
    elif funcionario.foto:
        return url_for('static', filename=funcionario.foto)
    else:
        # SVG padr√£o baseado no nome
        iniciais = ''.join([nome[0].upper() for nome in funcionario.nome.split()[:2]])
        cores = ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6f42c1']
        cor_fundo = cores[hash(funcionario.nome) % len(cores)]
        
        svg_avatar = f'''data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80">
            <rect width="80" height="80" fill="{cor_fundo}"/>
            <text x="40" y="45" font-family="Arial, sans-serif" font-size="24" font-weight="bold" 
                  text-anchor="middle" fill="white">{iniciais}</text>
        </svg>'''
        return svg_avatar

# Create tables and initialize
with app.app_context():
    db.create_all()
    logging.info("Database tables created/verified")
    
    # ü§ñ SISTEMA DE MIGRA√á√ïES TOTALMENTE AUTOM√ÅTICO - SIGE v10.0
    logger.info("üöÄ INICIANDO SISTEMA DE MIGRA√á√ïES AUTOM√ÅTICAS")
    logger.info("=" * 50)
    
    # Obter informa√ß√µes de configura√ß√£o autom√°tica
    should_migrate = app.config['RUN_MIGRATIONS_FLAG']
    should_cleanup = app.config['RUN_CLEANUP_FLAG']
    env_name = env_info['environment']
    
    logger.info(f"üåç Ambiente: {env_name.upper()}")
    logger.info(f"üîÑ Auto-migra√ß√£o: {should_migrate}")
    logger.info(f"üóëÔ∏è Auto-limpeza: {should_cleanup}")
    
    if should_migrate:
        logger.info("üîÑ Executando migra√ß√µes automaticamente baseado na detec√ß√£o de ambiente...")
        try:
            from migrations import executar_migracoes
            executar_migracoes()
            logger.info("‚úÖ Migra√ß√µes executadas com sucesso!")
        except Exception as e:
            logger.error(f"‚ùå Erro ao executar migra√ß√µes: {e}")
            # N√£o interromper o app, apenas logar erro
    else:
        logger.info(f"üîá Migra√ß√µes n√£o necess√°rias para ambiente '{env_name}'")
    
    # üöÄ SISTEMA DE MIGRA√á√ïES FOR√áADAS DE VE√çCULOS - CR√çTICO
    logger.info("üîß VERIFICANDO NECESSIDADE DE MIGRA√á√ïES FOR√áADAS DE VE√çCULOS...")
    logger.info("-" * 60)
    
    # Sempre executar verifica√ß√£o de migra√ß√µes for√ßadas se houver migra√ß√µes habilitadas
    # Isso resolve o problema cr√≠tico de colunas faltantes em produ√ß√£o
    if should_migrate or is_production():
        logger.info("üéØ EXECUTANDO MIGRA√á√ïES FOR√áADAS DE VE√çCULOS - RESOLVER COLUNAS FALTANTES")
        try:
            from migration_force_veiculos import VeiculoMigrationForcer
            
            # Usar a mesma DATABASE_URL que o app
            database_url = app.config["SQLALCHEMY_DATABASE_URI"]
            
            if database_url:
                migrator = VeiculoMigrationForcer(database_url)
                migration_success = migrator.run_all_migrations()
                
                if migration_success:
                    logger.info("üéâ MIGRA√á√ïES FOR√áADAS DE VE√çCULOS EXECUTADAS COM SUCESSO!")
                    logger.info("‚úÖ Problema de colunas faltantes RESOLVIDO definitivamente")
                else:
                    logger.error("‚ùå MIGRA√á√ïES FOR√áADAS DE VE√çCULOS FALHARAM - Verificar logs")
                    # N√£o interromper o app, apenas logar erro
            else:
                logger.error("‚ùå DATABASE_URL n√£o dispon√≠vel para migra√ß√µes for√ßadas")
                
        except ImportError:
            logger.warning("‚ö†Ô∏è Sistema de migra√ß√µes for√ßadas n√£o dispon√≠vel")
        except Exception as e:
            logger.error(f"‚ùå Erro nas migra√ß√µes for√ßadas de ve√≠culos: {e}")
            # N√£o interromper o app, apenas logar erro
    else:
        logger.info("üîá Migra√ß√µes for√ßadas de ve√≠culos n√£o necess√°rias para ambiente atual")
    
    logger.info("=" * 60)
    
    # üóëÔ∏è SISTEMA DE LIMPEZA DE VE√çCULOS - AUTOM√ÅTICO
    if should_cleanup:
        logger.info("üóëÔ∏è Executando limpeza de ve√≠culos automaticamente...")
        try:
            from migration_cleanup_veiculos_production import run_migration_if_needed
            cleanup_success = run_migration_if_needed()
            if cleanup_success:
                logger.info("‚úÖ Migration de limpeza de ve√≠culos processada com sucesso")
            else:
                logger.warning("‚ö†Ô∏è Migration de limpeza de ve√≠culos falhou ou n√£o foi necess√°ria")
        except ImportError:
            logger.warning("‚ö†Ô∏è Migration de limpeza de ve√≠culos n√£o dispon√≠vel")
        except Exception as e:
            logger.error(f"‚ùå Erro na migration de limpeza de ve√≠culos: {e}")
            # N√£o interromper o app, apenas logar erro
    else:
        logger.info(f"üîá Limpeza de ve√≠culos n√£o necess√°ria para ambiente '{env_name}'")
    
    # Log final do sistema
    logger.info("‚úÖ SISTEMA AUTOM√ÅTICO DE MIGRA√á√ïES INICIALIZADO")
    logger.info(f"üìã Resumo: Ambiente={env_name}, Migra√ß√µes={should_migrate}, Limpeza={should_cleanup}")
    logger.info("üí° Sistema funcionando em modo TOTALMENTE AUTOM√ÅTICO - zero interven√ß√£o manual!")
    
    # Register additional blueprints
    try:
        from folha_pagamento_views import folha_bp
        app.register_blueprint(folha_bp, url_prefix='/folha-pagamento')
        logging.info("‚úÖ Blueprint folha de pagamento registrado")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint folha de pagamento: {e}")
    
    try:
        from contabilidade_views import contabilidade_bp
        app.register_blueprint(contabilidade_bp, url_prefix='/contabilidade')
        logging.info("‚úÖ Blueprint contabilidade registrado")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint contabilidade: {e}")
    
    # Blueprint templates de propostas
    try:
        from templates_views import templates_bp
        app.register_blueprint(templates_bp, url_prefix='/templates')
        logging.info("‚úÖ Blueprint templates registrado")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint templates: {e}")
    
    # Blueprint de servi√ßos ser√° registrado em main.py para evitar conflitos
    
    # Registrar blueprint de alimenta√ß√£o
    try:
        from alimentacao_crud import alimentacao_bp
        app.register_blueprint(alimentacao_bp)
        logging.info("‚úÖ Blueprint alimenta√ß√£o registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint alimenta√ß√£o n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint alimenta√ß√£o: {e}")
    
    # Modelos de propostas j√° est√£o consolidados em models.py
    logging.info("‚úÖ Modelos de propostas importados do arquivo consolidado")
    
    # Registrar blueprint de propostas consolidado
    try:
        from propostas_consolidated import propostas_bp
        app.register_blueprint(propostas_bp, url_prefix='/propostas')
        logging.info("‚úÖ Blueprint propostas consolidado registrado")
    except ImportError as e:
        # Fallback para blueprint antigo
        try:
            from propostas_views import propostas_bp
            app.register_blueprint(propostas_bp, url_prefix='/propostas')
            logging.info("‚úÖ Blueprint propostas (fallback) registrado")
        except ImportError as e2:
            logging.warning(f"‚ö†Ô∏è Blueprint propostas n√£o encontrado: {e} | {e2}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint propostas: {e}")
    
    # Registrar API de organiza√ß√£o
    try:
        from api_organizer import api_organizer
        app.register_blueprint(api_organizer)
        logging.info("‚úÖ Blueprint API organizer registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint API organizer n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint API organizer: {e}")
    
    # Registrar blueprint de categorias de servi√ßos
    try:
        from categoria_servicos import categorias_bp
        app.register_blueprint(categorias_bp)
        logging.info("‚úÖ Blueprint categorias de servi√ßos registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint categorias de servi√ßos n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint categorias de servi√ßos: {e}")
    
    # Registrar blueprint de configura√ß√µes
    try:
        from configuracoes_views import configuracoes_bp
        app.register_blueprint(configuracoes_bp)
        logging.info("‚úÖ Blueprint configura√ß√µes registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint configura√ß√µes n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint configura√ß√µes: {e}")
    
    # Registrar API limpa de servi√ßos da obra
    try:
        from api_servicos_obra_limpa import api_servicos_obra_bp
        app.register_blueprint(api_servicos_obra_bp)
        logging.info("‚úÖ Blueprint API servi√ßos obra LIMPA registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint API servi√ßos obra limpa n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint API servi√ßos obra limpa: {e}")
    
    # Registrar blueprint EQUIPE - Sistema de Gest√£o Lean
    try:
        from equipe_views import equipe_bp
        app.register_blueprint(equipe_bp)
        logging.info("‚úÖ Blueprint EQUIPE (gest√£o lean) registrado")
    except ImportError as e:
        logging.warning(f"‚ö†Ô∏è Blueprint EQUIPE n√£o encontrado: {e}")
    except Exception as e:
        logging.error(f"‚ùå Erro ao registrar blueprint EQUIPE: {e}")
    
    # Sistema avan√ßado de ve√≠culos removido (c√≥digo obsoleto limpo)
    
    # Photo migration moved to migrations.py for cleaner app initialization
    
    # Development authentication bypass (PERMANENTEMENTE DESABILITADO)
    # Causa conflitos de admin_id entre sess√µes
    # if os.environ.get('FLASK_ENV') != 'production':
    #     try:
    #         bypass_auth removido
    #         logging.info("üîì Sistema de bypass de autentica√ß√£o carregado")
    #     except Exception as e:
    #         logging.error(f"Erro ao carregar bypass: {e}")
    
    logging.info("üîí Sistema de bypass PERMANENTEMENTE desabilitado - admin_id consistente")

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)