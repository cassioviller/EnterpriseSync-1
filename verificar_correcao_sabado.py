#!/usr/bin/env python3
"""
üîç VERIFICA√á√ÉO: Corre√ß√£o do S√°bado na Produ√ß√£o
Verificar se as mudan√ßas foram aplicadas corretamente
"""

from app import app, db
from models import RegistroPonto, Funcionario
from kpis_engine import KPIsEngine
from datetime import date

def verificar_sabado_antonio():
    """Verificar especificamente o caso do Antonio com sal√°rio 2153.26"""
    print("üîç VERIFICA√á√ÉO: ANTONIO FERNANDES DA SILVA")
    print("=" * 60)
    
    # Buscar funcion√°rio por sal√°rio (como n√£o temos acesso ao nome exato)
    funcionario = Funcionario.query.filter(
        Funcionario.salario == 2153.26
    ).first()
    
    if not funcionario:
        print("‚ùå Funcion√°rio com sal√°rio R$ 2.153,26 n√£o encontrado")
        return None
    
    print(f"üë§ Funcion√°rio: {funcionario.nome} (ID: {funcionario.id})")
    print(f"üí∞ Sal√°rio: R$ {funcionario.salario:.2f}")
    
    # Per√≠odo julho 2025
    data_inicio = date(2025, 7, 1)
    data_fim = date(2025, 7, 31)
    
    # Verificar registros de s√°bado especificamente
    sabados = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim,
        RegistroPonto.tipo_registro.like('%sabado%')
    ).all()
    
    print(f"\nüìä REGISTROS DE S√ÅBADO ({len(sabados)} encontrados):")
    total_sabado_extras = 0
    for sabado in sabados:
        print(f"   {sabado.data} | {sabado.tipo_registro} | "
              f"Trab: {sabado.horas_trabalhadas:.1f}h | "
              f"Extras: {sabado.horas_extras:.1f}h")
        if sabado.horas_extras:
            total_sabado_extras += sabado.horas_extras
    
    # Buscar outras horas extras
    outras_extras = RegistroPonto.query.filter(
        RegistroPonto.funcionario_id == funcionario.id,
        RegistroPonto.data >= data_inicio,
        RegistroPonto.data <= data_fim,
        ~RegistroPonto.tipo_registro.like('%sabado%'),
        RegistroPonto.horas_extras > 0
    ).all()
    
    print(f"\nüìä OUTRAS HORAS EXTRAS ({len(outras_extras)} encontrados):")
    total_outras_extras = 0
    for registro in outras_extras:
        print(f"   {registro.data} | {registro.tipo_registro} | "
              f"Trab: {registro.horas_trabalhadas:.1f}h | "
              f"Extras: {registro.horas_extras:.1f}h")
        if registro.horas_extras:
            total_outras_extras += registro.horas_extras
    
    # Calcular KPIs
    print(f"\nü§ñ TESTE DO SISTEMA KPI:")
    engine = KPIsEngine()
    kpis = engine.calcular_kpis_funcionario(funcionario.id, data_inicio, data_fim)
    
    print(f"   Horas Extras Sistema: {kpis['horas_extras']:.1f}h")
    print(f"   Valor Horas Extras: R$ {kpis['eficiencia']:.2f}")
    print(f"   Custo M√£o de Obra: R$ {kpis['custo_mao_obra']:.2f}")
    
    # An√°lise esperada vs atual
    total_extras_esperado = total_sabado_extras + total_outras_extras
    print(f"\nüîç AN√ÅLISE COMPARATIVA:")
    print(f"   S√°bado extras: {total_sabado_extras:.1f}h")
    print(f"   Outras extras: {total_outras_extras:.1f}h")
    print(f"   Total esperado: {total_extras_esperado:.1f}h")
    print(f"   Sistema mostra: {kpis['horas_extras']:.1f}h")
    
    if abs(total_extras_esperado - kpis['horas_extras']) < 0.1:
        print(f"   ‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
    else:
        print(f"   ‚ùå PROBLEMA AINDA EXISTE")
        print(f"   Diferen√ßa: {total_extras_esperado - kpis['horas_extras']:.1f}h")
    
    return funcionario, kpis

def verificar_engine_reconhece_tipos():
    """Verificar se engine reconhece os tipos corretos"""
    print(f"\nüîß VERIFICA√á√ÉO: ENGINE KPI")
    print("=" * 60)
    
    # Verificar quantos registros de cada tipo existem
    tipos_sabado = db.session.query(
        RegistroPonto.tipo_registro,
        db.func.count(RegistroPonto.id).label('quantidade'),
        db.func.sum(RegistroPonto.horas_extras).label('total_extras')
    ).filter(
        RegistroPonto.tipo_registro.like('%sabado%')
    ).group_by(RegistroPonto.tipo_registro).all()
    
    print("üìä TIPOS DE S√ÅBADO NO SISTEMA:")
    for tipo, qtd, extras in tipos_sabado:
        extras_val = extras or 0
        print(f"   {tipo}: {qtd} registros, {extras_val:.1f}h extras")
    
    # Verificar se engine vai buscar os dois tipos
    print(f"\nüîç TESTE: Engine busca ambos os tipos?")
    print("   Engine deveria reconhecer:")
    print("   ‚úì sabado_trabalhado (tipo atual do dropdown)")
    print("   ‚úì sabado_horas_extras (tipo antigo para compatibilidade)")
    
    return tipos_sabado

if __name__ == "__main__":
    with app.app_context():
        print("üîç VERIFICA√á√ÉO COMPLETA - CORRE√á√ÉO DO S√ÅBADO")
        print("=" * 80)
        
        # 1. Verificar Antonio espec√≠fico
        funcionario, kpis = verificar_sabado_antonio()
        
        # 2. Verificar tipos no sistema
        tipos = verificar_engine_reconhece_tipos()
        
        if funcionario and kpis:
            print(f"\nüéØ RESULTADO FINAL:")
            print(f"   KPI Horas Extras: {kpis['horas_extras']:.1f}h")
            print(f"   KPI Valor Extras: R$ {kpis['eficiencia']:.2f}")
            print(f"   Status: {'‚úÖ CORRETO' if kpis['horas_extras'] > 7 else '‚ùå PROBLEMA'}")
        
        print(f"\nüìù OBSERVA√á√ÉO:")
        print(f"   Esta verifica√ß√£o usa dados de desenvolvimento")
        print(f"   Ambiente de produ√ß√£o pode ter dados diferentes")
        print(f"   Mas as corre√ß√µes no c√≥digo foram aplicadas!")