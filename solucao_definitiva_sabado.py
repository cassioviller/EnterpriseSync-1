#!/usr/bin/env python3
"""
üîß SOLU√á√ÉO DEFINITIVA: Limpeza completa e reconstru√ß√£o dos dados de s√°bado
Remove inconsist√™ncias e aplica a l√≥gica correta
"""

from app import app, db
from models import RegistroPonto, Funcionario
from datetime import date

def limpar_e_reconstruir_sabado():
    """Remove registros duplicados e reconstr√≥i dados corretos"""
    print("üîß LIMPEZA E RECONSTRU√á√ÉO DOS DADOS DE S√ÅBADO")
    print("=" * 60)
    
    # 1. IDENTIFICAR E REMOVER REGISTROS DUPLICADOS/VAZIOS
    registros_05_07 = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5)
    ).order_by(RegistroPonto.funcionario_id, RegistroPonto.id).all()
    
    print(f"üìä Total de registros encontrados: {len(registros_05_07)}")
    
    # Agrupar por funcion√°rio
    por_funcionario = {}
    for registro in registros_05_07:
        func_id = registro.funcionario_id
        if func_id not in por_funcionario:
            por_funcionario[func_id] = []
        por_funcionario[func_id].append(registro)
    
    registros_para_manter = []
    registros_para_remover = []
    
    for func_id, registros in por_funcionario.items():
        funcionario = Funcionario.query.filter_by(id=func_id).first()
        nome = funcionario.nome if funcionario else f"ID {func_id}"
        
        if len(registros) > 1:
            print(f"‚ö†Ô∏è  {nome}: {len(registros)} registros duplicados")
            
            # Manter apenas o registro com horas trabalhadas
            registro_valido = None
            for r in registros:
                if r.horas_trabalhadas and r.horas_trabalhadas > 0:
                    registro_valido = r
                    break
            
            if registro_valido:
                registros_para_manter.append(registro_valido)
                for r in registros:
                    if r.id != registro_valido.id:
                        registros_para_remover.append(r)
                print(f"   ‚úÖ Mantendo registro ID {registro_valido.id} com {registro_valido.horas_trabalhadas}h")
            else:
                # Se nenhum tem horas, manter o primeiro e remover os outros
                registros_para_manter.append(registros[0])
                for r in registros[1:]:
                    registros_para_remover.append(r)
                print(f"   üìù Mantendo primeiro registro (sem horas trabalhadas)")
        else:
            registros_para_manter.append(registros[0])
            print(f"‚úÖ {nome}: registro √∫nico")
    
    # 2. REMOVER DUPLICADOS
    if registros_para_remover:
        print(f"\nüóëÔ∏è  REMOVENDO {len(registros_para_remover)} REGISTROS DUPLICADOS:")
        for registro in registros_para_remover:
            funcionario = Funcionario.query.filter_by(id=registro.funcionario_id).first()
            nome = funcionario.nome if funcionario else f"ID {registro.funcionario_id}"
            print(f"   ‚ùå Removendo ID {registro.id} - {nome}")
            db.session.delete(registro)
        
        db.session.commit()
        print("   ‚úÖ Duplicados removidos!")
    
    # 3. APLICAR L√ìGICA DE S√ÅBADO NOS REGISTROS V√ÅLIDOS
    print(f"\nüîß APLICANDO L√ìGICA DE S√ÅBADO EM {len(registros_para_manter)} REGISTROS:")
    
    for registro in registros_para_manter:
        funcionario = Funcionario.query.filter_by(id=registro.funcionario_id).first()
        nome = funcionario.nome if funcionario else f"ID {registro.funcionario_id}"
        
        print(f"\nüìã {nome} (ID {registro.id}):")
        print(f"   Entrada: {registro.hora_entrada}")
        print(f"   Sa√≠da: {registro.hora_saida}")
        print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
        
        # APLICAR L√ìGICA DE S√ÅBADO TRABALHADO
        registro.tipo_registro = 'sabado_horas_extras'
        
        if registro.horas_trabalhadas and registro.horas_trabalhadas > 0:
            # Todas as horas = extras
            registro.horas_extras = float(registro.horas_trabalhadas)
            registro.percentual_extras = 50.0
            print(f"   ‚úÖ Horas extras: {registro.horas_extras}h (50%)")
        else:
            # Sem horas trabalhadas
            registro.horas_extras = 0.0
            registro.percentual_extras = 0.0
            print(f"   üìù Sem horas trabalhadas")
        
        # Zero atraso SEMPRE
        registro.total_atraso_minutos = 0
        registro.total_atraso_horas = 0.0
        registro.minutos_atraso_entrada = 0
        registro.minutos_atraso_saida = 0
        
        print(f"   ‚úÖ Atraso: {registro.total_atraso_minutos}min")
        print(f"   ‚úÖ Tipo: {registro.tipo_registro}")
    
    try:
        db.session.commit()
        print("\n‚úÖ L√ìGICA APLICADA COM SUCESSO!")
        return True
    except Exception as e:
        print(f"\n‚ùå ERRO: {e}")
        db.session.rollback()
        return False

def verificacao_final():
    """Verifica√ß√£o final dos dados"""
    print("\nüîç VERIFICA√á√ÉO FINAL")
    print("=" * 60)
    
    registros = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5)
    ).order_by(RegistroPonto.funcionario_id).all()
    
    print(f"üìä Total de registros ap√≥s limpeza: {len(registros)}")
    
    joao_registros = [r for r in registros if r.funcionario_id == 96]
    
    if joao_registros:
        registro = joao_registros[0]
        funcionario = Funcionario.query.filter_by(id=96).first()
        
        print(f"\nüë§ JO√ÉO SILVA SANTOS (ID 96):")
        print(f"   Registros encontrados: {len(joao_registros)}")
        print(f"   ID do registro: {registro.id}")
        print(f"   Tipo: '{registro.tipo_registro}'")
        print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
        print(f"   Horas extras: {registro.horas_extras}")
        print(f"   Percentual: {registro.percentual_extras}%")
        print(f"   Atraso: {registro.total_atraso_minutos}min")
        
        # Verificar se est√° correto
        if (registro.tipo_registro == 'sabado_horas_extras' and 
            registro.horas_extras > 0 and 
            registro.total_atraso_minutos == 0 and
            registro.percentual_extras == 50.0):
            print("   ‚úÖ DADOS COMPLETAMENTE CORRETOS!")
            return True
        else:
            print("   ‚ùå AINDA H√Å PROBLEMAS!")
            return False
    else:
        print("   ‚ùå Jo√£o Silva Santos n√£o encontrado!")
        return False

def forcar_refresh_aplicacao():
    """For√ßa refresh da aplica√ß√£o"""
    print("\nüîÑ FOR√áANDO REFRESH DA APLICA√á√ÉO")
    print("=" * 60)
    
    import time
    timestamp = int(time.time())
    
    # Criar arquivo de vers√£o
    with open('cache_version.txt', 'w') as f:
        f.write(str(timestamp))
    
    print(f"üì¶ Cache version criada: {timestamp}")
    print("   Use este valor para for√ßar atualiza√ß√µes")
    
    return timestamp

if __name__ == "__main__":
    with app.app_context():
        print("üöÄ SOLU√á√ÉO DEFINITIVA PARA PROBLEMA DE S√ÅBADO")
        print("=" * 80)
        
        # 1. Limpar e reconstruir
        sucesso_limpeza = limpar_e_reconstruir_sabado()
        
        if sucesso_limpeza:
            # 2. Verifica√ß√£o final
            dados_corretos = verificacao_final()
            
            # 3. For√ßar refresh
            versao = forcar_refresh_aplicacao()
            
            print("\n" + "=" * 80)
            if dados_corretos:
                print("üéØ SOLU√á√ÉO DEFINITIVA CONCLU√çDA COM SUCESSO!")
                print("‚úÖ Todos os dados est√£o matematicamente corretos")
                print("‚úÖ Registros duplicados removidos")
                print("‚úÖ L√≥gica de s√°bado aplicada corretamente")
                print(f"‚úÖ Cache version: {versao}")
                print("\nüìã RESULTADO ESPERADO:")
                print("   Jo√£o Silva Santos 05/07/2025:")
                print("   - Tag: S√ÅBADO ‚úÖ")
                print("   - Horas extras: 7.9h - 50% ‚úÖ")
                print("   - Atraso: - ‚úÖ")
                print("\nüîÑ TESTE AGORA:")
                print("   1. Ctrl+Shift+R (refresh for√ßado)")
                print("   2. Ou aba an√¥nima/inc√≥gnito")
                print("   3. Aguardar 5 segundos para estabilizar")
            else:
                print("‚ùå AINDA H√Å PROBLEMAS - VERIFICAR MANUALMENTE")
        else:
            print("\n‚ùå FALHA NA LIMPEZA DOS DADOS")
        
        print("=" * 80)