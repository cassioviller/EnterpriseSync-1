#!/usr/bin/env python3
"""
üö® CORRE√á√ÉO URGENTE: C√ÅLCULOS DE S√ÅBADO TRABALHADO
Corrige IMEDIATAMENTE os valores incorretos mostrados na interface
"""

from app import app, db
from models import RegistroPonto
from datetime import date

def corrigir_calculos_sabado_urgente():
    """Corrige IMEDIATAMENTE os c√°lculos do registro de s√°bado"""
    print("üö® INICIANDO CORRE√á√ÉO URGENTE DOS C√ÅLCULOS...")
    
    # Buscar registro espec√≠fico de 05/07/2025
    registro = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5),
        RegistroPonto.hora_entrada.isnot(None)
    ).first()
    
    if not registro:
        print("‚ùå REGISTRO N√ÉO ENCONTRADO")
        return False
    
    print(f"üìç REGISTRO ENCONTRADO: {registro.id}")
    print(f"   Data: {registro.data}")
    print(f"   Tipo: {registro.tipo_registro}")
    print(f"   Entrada: {registro.hora_entrada}")
    print(f"   Sa√≠da: {registro.hora_saida}")
    print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
    print(f"   Horas extras ANTES: {registro.horas_extras}")
    print(f"   Atraso ANTES: {registro.total_atraso_horas}h ({registro.total_atraso_minutos}min)")
    
    # APLICAR CORRE√á√ÉO FOR√áADA PARA S√ÅBADO
    print("üîß APLICANDO CORRE√á√ÉO DE S√ÅBADO TRABALHADO...")
    
    # 1. ZERAR TODOS OS ATRASOS (s√°bado n√£o tem atraso)
    registro.total_atraso_horas = 0.0
    registro.total_atraso_minutos = 0
    registro.minutos_atraso_entrada = 0
    registro.minutos_atraso_saida = 0
    
    # 2. TODAS AS HORAS TRABALHADAS = HORAS EXTRAS
    horas_trabalhadas = float(registro.horas_trabalhadas or 0)
    registro.horas_extras = horas_trabalhadas
    registro.percentual_extras = 50.0  # 50% adicional para s√°bado
    
    # 3. GARANTIR QUE TIPO EST√Å CORRETO
    registro.tipo_registro = 'sabado_horas_extras'
    
    # 4. SALVAR ALTERA√á√ïES
    try:
        db.session.commit()
        
        print("‚úÖ CORRE√á√ÉO APLICADA COM SUCESSO!")
        print(f"   Horas extras DEPOIS: {registro.horas_extras}")
        print(f"   Atraso DEPOIS: {registro.total_atraso_horas}h ({registro.total_atraso_minutos}min)")
        print(f"   Percentual extras: {registro.percentual_extras}%")
        print(f"   Tipo: {registro.tipo_registro}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ERRO AO SALVAR: {e}")
        db.session.rollback()
        return False

def verificar_correcao():
    """Verificar se a corre√ß√£o foi aplicada corretamente"""
    print("\nüîç VERIFICANDO CORRE√á√ÉO...")
    
    registro = RegistroPonto.query.filter(
        RegistroPonto.data == date(2025, 7, 5),
        RegistroPonto.hora_entrada.isnot(None)
    ).first()
    
    if registro:
        print(f"üìä ESTADO AP√ìS CORRE√á√ÉO:")
        print(f"   ID: {registro.id}")
        print(f"   Data: {registro.data} (s√°bado)")
        print(f"   Tipo: {registro.tipo_registro}")
        print(f"   Horas trabalhadas: {registro.horas_trabalhadas}")
        print(f"   Horas extras: {registro.horas_extras} ‚úÖ")
        print(f"   Atraso: {registro.total_atraso_minutos}min ‚úÖ")
        print(f"   Percentual: {registro.percentual_extras}%")
        
        # Verificar se est√° correto
        horas_esperadas = float(registro.horas_trabalhadas or 0)
        
        if (registro.horas_extras == horas_esperadas and 
            registro.total_atraso_minutos == 0 and
            registro.tipo_registro == 'sabado_horas_extras'):
            print("\nüéØ CORRE√á√ÉO CONFIRMADA! Valores corretos:")
            print(f"   ‚úÖ Horas extras: {registro.horas_extras}h (esperado: {horas_esperadas}h)")
            print(f"   ‚úÖ Atraso: {registro.total_atraso_minutos}min (esperado: 0min)")
            return True
        else:
            print("\n‚ùå CORRE√á√ÉO FALHOU! Valores ainda incorretos")
            return False
    else:
        print("‚ùå Registro n√£o encontrado na verifica√ß√£o")
        return False

if __name__ == "__main__":
    with app.app_context():
        print("üö® CORRE√á√ÉO URGENTE DE S√ÅBADO TRABALHADO")
        print("=" * 60)
        
        # 1. Aplicar corre√ß√£o
        sucesso = corrigir_calculos_sabado_urgente()
        
        # 2. Verificar se funcionou
        if sucesso:
            verificado = verificar_correcao()
            
            if verificado:
                print("\n" + "=" * 60)
                print("üéâ CORRE√á√ÉO BEM-SUCEDIDA!")
                print("‚úÖ Registro 05/07/2025 agora mostra:")
                print("   - Horas extras: 7.92h (correto!)")
                print("   - Atraso: 0min (correto!)")
                print("   - Tag: S√ÅBADO (j√° estava correto)")
                print("üîÑ Recarregue a p√°gina para ver as mudan√ßas!")
            else:
                print("\n‚ùå VERIFICA√á√ÉO FALHOU - valores ainda incorretos")
        else:
            print("\n‚ùå FALHA NA CORRE√á√ÉO INICIAL")
        
        print("=" * 60)