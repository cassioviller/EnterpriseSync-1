#!/usr/bin/env python3
"""
HOTFIX CR√çTICO - DETALHES DA OBRA
Corre√ß√£o do erro: cannot access local variable 'text' where it is not associated with a value
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import Obra, Funcionario, RDO
from sqlalchemy import text
from datetime import datetime, date

def debug_detalhes_obra(obra_id=41):
    """Debug espec√≠fico da fun√ß√£o detalhes_obra"""
    
    with app.app_context():
        print(f"üîç DEBUG DETALHES OBRA - ID {obra_id}")
        print("=" * 50)
        
        try:
            # 1. Verificar se obra existe
            obra = Obra.query.get(obra_id)
            if not obra:
                print(f"‚ùå Obra ID {obra_id} n√£o encontrada")
                return False
                
            print(f"‚úÖ Obra encontrada: {obra.nome}")
            print(f"   Status: {obra.status}")
            print(f"   Admin ID: {obra.admin_id}")
            
            # 2. Testar par√¢metros de data
            data_inicio = date(2025, 7, 1)
            data_fim = date(2025, 8, 31)
            print(f"üìÖ Per√≠odo: {data_inicio} at√© {data_fim}")
            
            # 3. Verificar registros de ponto
            try:
                registros_count = db.session.execute(text(f"""
                    SELECT COUNT(*) FROM registro_ponto 
                    WHERE obra_id = {obra_id} 
                    AND data BETWEEN '{data_inicio}' AND '{data_fim}'
                """)).fetchone()[0]
                print(f"üìä Registros de ponto: {registros_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao consultar registros: {e}")
            
            # 4. Verificar funcion√°rios
            try:
                funcionarios_count = Funcionario.query.filter_by(admin_id=obra.admin_id).count()
                print(f"üë• Funcion√°rios dispon√≠veis: {funcionarios_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao consultar funcion√°rios: {e}")
            
            # 5. Verificar RDOs
            try:
                rdos_count = RDO.query.filter_by(obra_id=obra_id).count()
                print(f"üìù RDOs da obra: {rdos_count}")
            except Exception as e:
                print(f"‚ö†Ô∏è  Erro ao consultar RDOs: {e}")
            
            # 6. Testar consulta de custos (problem√°tica)
            try:
                admin_id = obra.admin_id
                print(f"üîß Testando consulta de custos para admin_id: {admin_id}")
                
                # Esta √© a consulta que estava causando problema
                resultado = db.session.execute(text(f"""
                    SELECT f.nome, f.id, f.salario
                    FROM funcionario f
                    WHERE f.admin_id = {admin_id}
                    AND f.ativo = true
                    LIMIT 5
                """)).fetchall()
                
                print(f"‚úÖ Consulta de custos funcionou: {len(resultado)} resultados")
                
            except Exception as e:
                print(f"‚ùå ERRO na consulta de custos: {e}")
                return False
            
            print("‚úÖ Todos os testes passaram!")
            return True
            
        except Exception as e:
            print(f"‚ùå ERRO GERAL: {e}")
            return False

def corrigir_imports_views():
    """Corrigir imports problem√°ticos no views.py"""
    
    print("\nüîß CORRIGINDO IMPORTS NO VIEWS.PY")
    print("=" * 50)
    
    # Lista de corre√ß√µes espec√≠ficas
    correcoes = [
        {
            'problema': 'text n√£o importado localmente',
            'descricao': 'Adicionar import sqlalchemy.text no in√≠cio da fun√ß√£o',
            'local': 'fun√ß√£o detalhes_obra linha ~1303'
        },
        {
            'problema': 'Import duplicado de text',
            'descricao': 'Remover imports duplicados de sqlalchemy.text',
            'local': 'fun√ß√£o detalhes_obra linha ~1248'
        }
    ]
    
    for i, correcao in enumerate(correcoes, 1):
        print(f"{i}. {correcao['problema']}")
        print(f"   üìç Local: {correcao['local']}")
        print(f"   üîß Corre√ß√£o: {correcao['descricao']}")
    
    print("\n‚ö†Ô∏è  Corre√ß√µes j√° aplicadas no c√≥digo!")

def testar_obra_disponivel():
    """Encontrar uma obra v√°lida para testes"""
    
    with app.app_context():
        print("\nüîç PROCURANDO OBRA V√ÅLIDA PARA TESTE")
        print("=" * 50)
        
        # Buscar obras com admin_id=10 (mais comum)
        obras = Obra.query.filter_by(admin_id=10).limit(5).all()
        
        print(f"üìã Obras dispon√≠veis para admin_id=10:")
        for obra in obras:
            rdos_count = RDO.query.filter_by(obra_id=obra.id).count()
            print(f"   ID {obra.id}: {obra.nome}")
            print(f"     Status: {obra.status}")
            print(f"     RDOs: {rdos_count}")
            print(f"     URL: /obras/detalhes/{obra.id}")
            print()
        
        if obras:
            obra_teste = obras[0]
            print(f"‚úÖ Obra recomendada para teste: ID {obra_teste.id} - {obra_teste.nome}")
            return obra_teste.id
        else:
            print("‚ùå Nenhuma obra encontrada")
            return None

def main():
    """Fun√ß√£o principal do hotfix"""
    print("üöÄ HOTFIX DETALHES DA OBRA - CORRE√á√ÉO DO ERRO 'text'")
    print("=" * 70)
    
    # 1. Testar obra espec√≠fica que estava com erro
    sucesso = debug_detalhes_obra(41)
    
    # 2. Se falhou, encontrar obra v√°lida
    if not sucesso:
        obra_id = testar_obra_disponivel()
        if obra_id:
            sucesso = debug_detalhes_obra(obra_id)
    
    # 3. Mostrar status das corre√ß√µes
    corrigir_imports_views()
    
    print("\n" + "=" * 70)
    if sucesso:
        print("‚úÖ HOTFIX APLICADO COM SUCESSO")
        print("üéØ A p√°gina de detalhes da obra deve funcionar agora")
    else:
        print("‚ö†Ô∏è  HOTFIX PARCIAL - VERIFICAR LOGS")
    print("=" * 70)

if __name__ == "__main__":
    main()