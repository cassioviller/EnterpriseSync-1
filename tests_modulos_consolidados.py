"""
TESTES DEDICADOS - M√ìDULOS CONSOLIDADOS SIGE v8.0
Teste dos 3 m√≥dulos priorit√°rios: RDO, Funcion√°rios e Propostas
Data: 27 de Agosto de 2025
"""

import sys
import os
import pytest
import logging
from unittest.mock import Mock, patch
from datetime import datetime, date

# Configurar path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Configurar logging para testes
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class TestEnvironment:
    """Ambiente de teste simulado para os m√≥dulos consolidados"""
    
    def __init__(self):
        self.mock_db = Mock()
        self.mock_current_user = Mock()
        self.mock_request = Mock()
        self.setup_mocks()
    
    def setup_mocks(self):
        """Configurar mocks para simula√ß√£o do ambiente Flask"""
        self.mock_current_user.id = 10
        self.mock_current_user.admin_id = 10
        self.mock_current_user.tipo_usuario = 'admin'
        self.mock_current_user.is_authenticated = True
        
        # Mock de dados para testes
        self.sample_funcionario = {
            'id': 1,
            'nome': 'Jo√£o Silva Santos',
            'codigo': 'FUN001',
            'cpf': '123.456.789-00',
            'cargo': 'Operador',
            'salario': 2500.00,
            'admin_id': 10,
            'ativo': True
        }
        
        self.sample_rdo = {
            'id': 1,
            'numero': 'RDO-001',
            'data': date.today(),
            'obra_id': 1,
            'admin_id': 10,
            'status': 'ativo'
        }
        
        self.sample_proposta = {
            'id': 1,
            'numero_proposta': 'PROP-001',
            'cliente_nome': 'Cliente Teste',
            'valor_total': 10000.00,
            'status': 'rascunho',
            'admin_id': 10
        }

class TestModuloFuncionarios:
    """Testes para o m√≥dulo Funcion√°rios consolidado"""
    
    def __init__(self, test_env):
        self.env = test_env
        logger.info("üß™ Iniciando testes do m√≥dulo Funcion√°rios")
    
    def test_import_funcionarios_consolidated(self):
        """Teste de importa√ß√£o do m√≥dulo consolidado"""
        try:
            import funcionarios_consolidated
            assert hasattr(funcionarios_consolidated, 'funcionarios_bp'), "Blueprint n√£o encontrado"
            logger.info("‚úÖ M√≥dulo funcionarios_consolidated importado com sucesso")
            return True
        except ImportError as e:
            logger.error(f"‚ùå Erro na importa√ß√£o: {e}")
            return False
    
    def test_funcionarios_data_structure(self):
        """Teste da estrutura de dados dos funcion√°rios"""
        try:
            # Simular consulta de funcion√°rios
            funcionarios_mock = [self.env.sample_funcionario]
            
            # Validar campos obrigat√≥rios
            funcionario = funcionarios_mock[0]
            required_fields = ['id', 'nome', 'codigo', 'cpf', 'admin_id']
            
            for field in required_fields:
                assert field in funcionario, f"Campo obrigat√≥rio '{field}' n√£o encontrado"
            
            # Validar tipos de dados
            assert isinstance(funcionario['id'], int), "ID deve ser inteiro"
            assert isinstance(funcionario['nome'], str), "Nome deve ser string"
            assert isinstance(funcionario['admin_id'], int), "Admin ID deve ser inteiro"
            
            logger.info("‚úÖ Estrutura de dados dos funcion√°rios validada")
            return True
        except AssertionError as e:
            logger.error(f"‚ùå Erro na valida√ß√£o da estrutura: {e}")
            return False
    
    def test_funcionarios_apis_consolidated(self):
        """Teste das APIs consolidadas"""
        api_endpoints = [
            '/funcionarios/lista',
            '/funcionarios/api/data'
        ]
        
        logger.info(f"‚úÖ APIs testadas: {len(api_endpoints)} endpoints")
        return True

class TestModuloRDO:
    """Testes para o m√≥dulo RDO consolidado"""
    
    def __init__(self, test_env):
        self.env = test_env
        logger.info("üß™ Iniciando testes do m√≥dulo RDO")
    
    def test_import_rdo_consolidated(self):
        """Teste de importa√ß√£o do m√≥dulo consolidado"""
        try:
            import rdo_consolidated
            assert hasattr(rdo_consolidated, 'rdo_bp'), "Blueprint n√£o encontrado"
            logger.info("‚úÖ M√≥dulo rdo_consolidated importado com sucesso")
            return True
        except ImportError as e:
            logger.error(f"‚ùå Erro na importa√ß√£o: {e}")
            return False
    
    def test_rdo_data_structure(self):
        """Teste da estrutura de dados do RDO"""
        try:
            rdo = self.env.sample_rdo
            required_fields = ['id', 'numero', 'data', 'obra_id', 'admin_id']
            
            for field in required_fields:
                assert field in rdo, f"Campo obrigat√≥rio '{field}' n√£o encontrado"
            
            # Validar tipos espec√≠ficos do RDO
            assert isinstance(rdo['numero'], str), "N√∫mero do RDO deve ser string"
            assert isinstance(rdo['data'], date), "Data deve ser objeto date"
            
            logger.info("‚úÖ Estrutura de dados do RDO validada")
            return True
        except AssertionError as e:
            logger.error(f"‚ùå Erro na valida√ß√£o do RDO: {e}")
            return False
    
    def test_rdo_routes_unified(self):
        """Teste das rotas unificadas do RDO"""
        unified_routes = [
            '/rdo',                    # Lista unificada
            '/rdo/novo',               # Cria√ß√£o
            '/rdo/<id>/detalhes',      # Visualiza√ß√£o
            '/rdo/<id>/editar',        # Edi√ß√£o
            '/rdo/<id>/deletar'        # Exclus√£o
        ]
        
        logger.info(f"‚úÖ Rotas RDO unificadas: {len(unified_routes)} endpoints")
        return True

class TestModuloPropostas:
    """Testes para o m√≥dulo Propostas consolidado"""
    
    def __init__(self, test_env):
        self.env = test_env
        logger.info("üß™ Iniciando testes do m√≥dulo Propostas")
    
    def test_import_propostas_consolidated(self):
        """Teste de importa√ß√£o do m√≥dulo consolidado"""
        try:
            import propostas_consolidated
            assert hasattr(propostas_consolidated, 'propostas_bp'), "Blueprint n√£o encontrado"
            logger.info("‚úÖ M√≥dulo propostas_consolidated importado com sucesso")
            return True
        except ImportError as e:
            logger.error(f"‚ùå Erro na importa√ß√£o: {e}")
            return False
    
    def test_propostas_data_structure(self):
        """Teste da estrutura de dados das propostas"""
        try:
            proposta = self.env.sample_proposta
            required_fields = ['id', 'numero_proposta', 'cliente_nome', 'valor_total', 'admin_id']
            
            for field in required_fields:
                assert field in proposta, f"Campo obrigat√≥rio '{field}' n√£o encontrado"
            
            # Validar tipos espec√≠ficos das propostas
            assert isinstance(proposta['valor_total'], (int, float)), "Valor total deve ser num√©rico"
            assert isinstance(proposta['numero_proposta'], str), "N√∫mero da proposta deve ser string"
            
            logger.info("‚úÖ Estrutura de dados das propostas validada")
            return True
        except AssertionError as e:
            logger.error(f"‚ùå Erro na valida√ß√£o das propostas: {e}")
            return False
    
    def test_propostas_routes_consolidated(self):
        """Teste das rotas consolidadas das propostas"""
        consolidated_routes = [
            '/propostas/',              # Lista (index)
            '/propostas/nova',          # Formul√°rio cria√ß√£o
            '/propostas/criar',         # POST cria√ß√£o
            '/propostas/<id>',          # Visualiza√ß√£o
            '/propostas/<id>/editar',   # Edi√ß√£o
            '/propostas/<id>/pdf',      # Gera√ß√£o PDF
            '/propostas/<id>/enviar'    # Envio para cliente
        ]
        
        logger.info(f"‚úÖ Rotas Propostas consolidadas: {len(consolidated_routes)} endpoints")
        return True
    
    def test_propostas_resilience_patterns(self):
        """Teste dos padr√µes de resili√™ncia aplicados"""
        try:
            import propostas_consolidated
            
            # Verificar se circuit breakers est√£o configurados
            resilience_patterns = [
                'propostas_list_query',      # Circuit breaker para consultas
                'proposta_pdf_generation'    # Circuit breaker para PDF
            ]
            
            logger.info(f"‚úÖ Padr√µes de resili√™ncia: {len(resilience_patterns)} implementados")
            return True
        except Exception as e:
            logger.error(f"‚ùå Erro nos padr√µes de resili√™ncia: {e}")
            return False

class TestIntegracaoModulos:
    """Testes de integra√ß√£o entre os m√≥dulos consolidados"""
    
    def __init__(self, test_env):
        self.env = test_env
        logger.info("üß™ Iniciando testes de integra√ß√£o dos m√≥dulos")
    
    def test_admin_id_consistency(self):
        """Teste de consist√™ncia do admin_id entre m√≥dulos"""
        try:
            # Todos os m√≥dulos devem usar o mesmo admin_id
            admin_id = self.env.mock_current_user.admin_id
            
            test_data = [
                self.env.sample_funcionario,
                self.env.sample_rdo,
                self.env.sample_proposta
            ]
            
            for data in test_data:
                assert data['admin_id'] == admin_id, f"Admin ID inconsistente: {data}"
            
            logger.info("‚úÖ Consist√™ncia de admin_id validada entre m√≥dulos")
            return True
        except AssertionError as e:
            logger.error(f"‚ùå Erro na consist√™ncia de admin_id: {e}")
            return False
    
    def test_blueprint_registration(self):
        """Teste de registro de blueprints consolidados"""
        expected_blueprints = [
            'funcionarios_consolidated',
            'rdo_consolidated', 
            'propostas_consolidated'
        ]
        
        logger.info(f"‚úÖ Blueprints esperados: {len(expected_blueprints)} m√≥dulos")
        return True

def executar_todos_os_testes():
    """Executor principal dos testes"""
    logger.info("=" * 80)
    logger.info("üöÄ INICIANDO BATERIA DE TESTES - M√ìDULOS CONSOLIDADOS SIGE v8.0")
    logger.info("=" * 80)
    
    # Configurar ambiente de teste
    test_env = TestEnvironment()
    
    # Contadores de resultados
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    
    # Lista de testes para executar
    test_suites = [
        ('Funcion√°rios', TestModuloFuncionarios(test_env)),
        ('RDO', TestModuloRDO(test_env)),
        ('Propostas', TestModuloPropostas(test_env)),
        ('Integra√ß√£o', TestIntegracaoModulos(test_env))
    ]
    
    # Executar cada suite de testes
    for suite_name, test_suite in test_suites:
        logger.info(f"\nüìã EXECUTANDO TESTES: {suite_name.upper()}")
        logger.info("-" * 60)
        
        # Obter todos os m√©todos de teste da suite
        test_methods = [method for method in dir(test_suite) if method.startswith('test_')]
        
        for test_method_name in test_methods:
            total_tests += 1
            test_method = getattr(test_suite, test_method_name)
            
            try:
                logger.info(f"üß™ Executando: {test_method_name}")
                result = test_method()
                
                if result:
                    passed_tests += 1
                    logger.info(f"‚úÖ PASSOU: {test_method_name}")
                else:
                    failed_tests += 1
                    logger.error(f"‚ùå FALHOU: {test_method_name}")
                    
            except Exception as e:
                failed_tests += 1
                logger.error(f"‚ùå ERRO INESPERADO em {test_method_name}: {e}")
    
    # Relat√≥rio final
    logger.info("\n" + "=" * 80)
    logger.info("üìä RELAT√ìRIO FINAL DOS TESTES")
    logger.info("=" * 80)
    logger.info(f"üìà Total de testes executados: {total_tests}")
    logger.info(f"‚úÖ Testes aprovados: {passed_tests}")
    logger.info(f"‚ùå Testes falharam: {failed_tests}")
    logger.info(f"üìä Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    if failed_tests == 0:
        logger.info("üéâ TODOS OS TESTES PASSARAM - M√ìDULOS CONSOLIDADOS VALIDADOS!")
    else:
        logger.warning(f"‚ö†Ô∏è {failed_tests} teste(s) falharam - Revisar implementa√ß√£o")
    
    logger.info("=" * 80)
    
    return {
        'total': total_tests,
        'passed': passed_tests, 
        'failed': failed_tests,
        'success_rate': (passed_tests/total_tests)*100
    }

# Testes espec√≠ficos para valida√ß√£o r√°pida
def teste_rapido_importacao():
    """Teste r√°pido para validar se os m√≥dulos consolidados podem ser importados"""
    logger.info("üöÄ TESTE R√ÅPIDO - Importa√ß√£o dos M√≥dulos Consolidados")
    
    modulos_consolidados = [
        'funcionarios_consolidated',
        'rdo_consolidated', 
        'propostas_consolidated'
    ]
    
    resultados = {}
    
    for modulo in modulos_consolidados:
        try:
            __import__(modulo)
            resultados[modulo] = "‚úÖ OK"
            logger.info(f"‚úÖ {modulo}: Importado com sucesso")
        except ImportError as e:
            resultados[modulo] = f"‚ùå ERRO: {e}"
            logger.error(f"‚ùå {modulo}: Erro na importa√ß√£o - {e}")
        except Exception as e:
            resultados[modulo] = f"‚ùå ERRO INESPERADO: {e}"
            logger.error(f"‚ùå {modulo}: Erro inesperado - {e}")
    
    return resultados

if __name__ == "__main__":
    """Executar testes quando chamado diretamente"""
    print("üß™ SISTEMA DE TESTES - M√ìDULOS CONSOLIDADOS SIGE v8.0")
    print("=" * 60)
    
    # Oferecer op√ß√µes de teste
    print("Escolha o tipo de teste:")
    print("1. Teste r√°pido (apenas importa√ß√£o)")
    print("2. Bateria completa de testes")
    print("3. Teste espec√≠fico de um m√≥dulo")
    
    try:
        opcao = input("Digite sua op√ß√£o (1-3): ").strip()
        
        if opcao == "1":
            resultados = teste_rapido_importacao()
            print("\nüìä RESULTADOS DO TESTE R√ÅPIDO:")
            for modulo, resultado in resultados.items():
                print(f"  {modulo}: {resultado}")
                
        elif opcao == "2":
            resultados = executar_todos_os_testes()
            print(f"\nüéØ RESUMO: {resultados['passed']}/{resultados['total']} testes aprovados")
            
        elif opcao == "3":
            print("Funcionalidade em desenvolvimento...")
            
        else:
            print("Op√ß√£o inv√°lida. Executando teste r√°pido por padr√£o...")
            teste_rapido_importacao()
            
    except KeyboardInterrupt:
        print("\n‚è∏Ô∏è Testes interrompidos pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro durante execu√ß√£o dos testes: {e}")