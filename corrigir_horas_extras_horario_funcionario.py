#!/usr/bin/env python3
"""
CORRE√á√ÉO: C√°lculo de Horas Extras com Hor√°rio Espec√≠fico do Funcion√°rio
Sistema SIGE - Data: 05 de Agosto de 2025

PROBLEMA IDENTIFICADO:
- Sistema calculava horas extras fixas em 8h: horas_extras = horas_trabalhadas - 8.0
- INCORRETO: Deve usar o hor√°rio padr√£o espec√≠fico de cada funcion√°rio

CORRE√á√ÉO:
- Usar HorarioTrabalho.horas_diarias espec√≠fico de cada funcion√°rio
- Recalcular todos os registros com o hor√°rio correto
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app import app, db
from models import RegistroPonto, Funcionario, HorarioTrabalho
from sqlalchemy import text

def corrigir_calculo_horas_extras():
    """
    Corrige o c√°lculo de horas extras usando o hor√°rio espec√≠fico de cada funcion√°rio
    """
    print("üîß INICIANDO CORRE√á√ÉO: Horas Extras com Hor√°rio Espec√≠fico do Funcion√°rio")
    print("=" * 80)
    
    with app.app_context():
        # 1. Buscar todos os registros de ponto
        registros = db.session.query(RegistroPonto).join(Funcionario).all()
        
        registros_corrigidos = 0
        total_registros = len(registros)
        
        print(f"üìä Total de registros encontrados: {total_registros}")
        print()
        
        for registro in registros:
            funcionario = registro.funcionario_ref
            
            # 2. Obter hor√°rio de trabalho do funcion√°rio
            horario_funcionario = funcionario.horario_trabalho
            horas_padrao = 8.0  # Default se n√£o houver hor√°rio espec√≠fico
            
            if horario_funcionario and horario_funcionario.horas_diarias:
                horas_padrao = horario_funcionario.horas_diarias
            
            # 3. Recalcular horas extras
            horas_trabalhadas = registro.horas_trabalhadas or 0.0
            horas_extras_antigas = registro.horas_extras or 0.0
            
            # CORRE√á√ÉO: Usar hor√°rio espec√≠fico do funcion√°rio
            if registro.tipo_registro in ['trabalho_normal', 'trabalhado']:
                # Para trabalho normal, horas extras = trabalhadas - padr√£o
                horas_extras_novas = max(0, horas_trabalhadas - horas_padrao)
            elif registro.tipo_registro in ['sabado_trabalhado', 'domingo_horas_extras', 'feriado_trabalhado']:
                # Para s√°bado/domingo/feriado, todas as horas s√£o extras
                horas_extras_novas = horas_trabalhadas
            else:
                # Outros tipos mant√©m c√°lculo atual
                horas_extras_novas = horas_extras_antigas
            
            # 4. Atualizar apenas se houve mudan√ßa
            if abs(horas_extras_novas - horas_extras_antigas) > 0.01:  # Diferen√ßa > 1 cent√©simo
                registro.horas_extras = round(horas_extras_novas, 2)
                registros_corrigidos += 1
                
                # Log da corre√ß√£o
                print(f"‚úÖ ID {registro.id} - {funcionario.nome} ({registro.data})")
                print(f"   Hor√°rio padr√£o: {horas_padrao}h")
                print(f"   Horas trabalhadas: {horas_trabalhadas}h")
                print(f"   Horas extras: {horas_extras_antigas}h ‚Üí {horas_extras_novas}h")
                print(f"   Tipo: {registro.tipo_registro}")
                print()
        
        # 5. Salvar altera√ß√µes
        if registros_corrigidos > 0:
            db.session.commit()
            print(f"üíæ {registros_corrigidos} registros corrigidos e salvos!")
        else:
            print("‚ÑπÔ∏è Nenhuma corre√ß√£o necess√°ria - todos os c√°lculos j√° est√£o corretos!")
        
        print("=" * 80)
        print("üéØ CORRE√á√ÉO FINALIZADA COM SUCESSO!")
        
        # 6. Relat√≥rio final
        print(f"\nüìà RELAT√ìRIO FINAL:")
        print(f"   ‚Ä¢ Total analisado: {total_registros} registros")
        print(f"   ‚Ä¢ Registros corrigidos: {registros_corrigidos}")
        print(f"   ‚Ä¢ Taxa de corre√ß√£o: {(registros_corrigidos/total_registros*100):.1f}%")

if __name__ == "__main__":
    corrigir_calculo_horas_extras()