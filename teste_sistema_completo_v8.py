#!/usr/bin/env python3
"""
TESTE COMPLETO DO SISTEMA SIGE v8.0
Teste das melhorias implementadas: CalculadoraObra e KPIs Financeiros
"""

from app import app, db
from calculadora_obra import CalculadoraObra
from kpis_financeiros import KPIsFinanceiros, KPIsOperacionais
from models import Obra, Funcionario, RegistroPonto
from datetime import datetime, date
import sys

def executar_testes():
    """Executa bateria de testes das melhorias implementadas"""
    
    with app.app_context():
        print("=== TESTE COMPLETO SIGE v8.0 ===")
        print("Testando melhorias: CalculadoraObra + KPIs Financeiros")
        print()
        
        # Buscar obra para teste
        obra = Obra.query.first()
        if not obra:
            print("‚ùå Nenhuma obra encontrada no sistema")
            return False
        
        print(f"üìã Testando obra: {obra.nome} (ID: {obra.id})")
        print()
        
        # Testar CalculadoraObra
        print("üîß TESTE 1: Calculadora Obra Unificada")
        try:
            calc = CalculadoraObra(obra.id)
            custos = calc.calcular_custo_total()
            estatisticas = calc.obter_estatisticas_periodo()
            
            print("‚úÖ Calculadora criada com sucesso")
            print(f"   ‚Ä¢ Custo Total: R$ {custos['total']:,.2f}")
            print(f"   ‚Ä¢ M√£o de Obra: R$ {custos['mao_obra']:,.2f}")
            print(f"   ‚Ä¢ Transporte: R$ {custos['transporte']:,.2f}")
            print(f"   ‚Ä¢ Alimenta√ß√£o: R$ {custos['alimentacao']:,.2f}")
            print(f"   ‚Ä¢ Outros: R$ {custos['outros']:,.2f}")
            print(f"   ‚Ä¢ Funcion√°rios: {estatisticas['total_funcionarios']}")
            print(f"   ‚Ä¢ Registros: {estatisticas['total_registros']}")
            print()
            
        except Exception as e:
            print(f"‚ùå Erro na Calculadora: {e}")
            return False
        
        # Testar KPIs Financeiros
        print("üí∞ TESTE 2: KPIs Financeiros Avan√ßados")
        try:
            # Custo por m¬≤
            custo_m2 = KPIsFinanceiros.custo_por_m2(obra.id)
            if 'erro' not in custo_m2:
                print(f"‚úÖ Custo por m¬≤: R$ {custo_m2['valor']:.2f}")
                print(f"   ‚Ä¢ Status: {custo_m2['status']}")
            else:
                print(f"‚ö†Ô∏è  Custo por m¬≤: {custo_m2['erro']}")
            
            # Margem de lucro
            margem = KPIsFinanceiros.margem_lucro_realizada(obra.id)
            if 'erro' not in margem:
                print(f"‚úÖ Margem de Lucro: {margem['margem_percentual']:.1f}%")
                print(f"   ‚Ä¢ Classifica√ß√£o: {margem['classificacao']}")
            else:
                print(f"‚ö†Ô∏è  Margem de Lucro: {margem['erro']}")
            
            # Desvio or√ßament√°rio
            desvio = KPIsFinanceiros.desvio_orcamentario(obra.id)
            if 'erro' not in desvio:
                print(f"‚úÖ Desvio Or√ßament√°rio: {desvio['desvio_projetado']:.1f}%")
                print(f"   ‚Ä¢ Alerta: {desvio['alerta']}")
            else:
                print(f"‚ö†Ô∏è  Desvio Or√ßament√°rio: {desvio['erro']}")
            
            # ROI Projetado
            roi = KPIsFinanceiros.roi_projetado(obra.id)
            if 'erro' not in roi:
                print(f"‚úÖ ROI Projetado: {roi['roi_percentual']:.1f}%")
                print(f"   ‚Ä¢ Classifica√ß√£o: {roi['classificacao']}")
            else:
                print(f"‚ö†Ô∏è  ROI Projetado: {roi['erro']}")
            
            # Velocidade de queima
            velocidade = KPIsFinanceiros.velocidade_queima_orcamento(obra.id)
            if 'erro' not in velocidade:
                print(f"‚úÖ Velocidade de Queima: {velocidade['velocidade']:.2f}x")
                print(f"   ‚Ä¢ Status: {velocidade['status']}")
            else:
                print(f"‚ö†Ô∏è  Velocidade de Queima: {velocidade['erro']}")
            
            print()
            
        except Exception as e:
            print(f"‚ùå Erro nos KPIs Financeiros: {e}")
            return False
        
        # Testar KPIs Operacionais
        print("üìä TESTE 3: KPIs Operacionais")
        try:
            produtividade = KPIsOperacionais.indice_produtividade_obra(obra.id)
            if 'erro' not in produtividade:
                print(f"‚úÖ Produtividade da Obra: {produtividade['indice']:.2f}")
                print(f"   ‚Ä¢ Status: {produtividade['status']}")
                print(f"   ‚Ä¢ Progresso F√≠sico: {produtividade['progresso_fisico']:.1f}%")
                print(f"   ‚Ä¢ Progresso Cronol√≥gico: {produtividade['progresso_cronologico']:.1f}%")
            else:
                print(f"‚ö†Ô∏è  Produtividade: {produtividade['erro']}")
            print()
            
        except Exception as e:
            print(f"‚ùå Erro nos KPIs Operacionais: {e}")
            return False
        
        # Teste de Performance
        print("‚ö° TESTE 4: Performance dos C√°lculos")
        try:
            import time
            
            # Testar tempo de execu√ß√£o
            start_time = time.time()
            for i in range(5):  # 5 execu√ß√µes
                calc = CalculadoraObra(obra.id)
                custos = calc.calcular_custo_total()
            end_time = time.time()
            
            tempo_medio = (end_time - start_time) / 5
            print(f"‚úÖ Tempo m√©dio por c√°lculo: {tempo_medio:.3f}s")
            
            if tempo_medio < 1.0:
                print("‚úÖ Performance excelente (< 1s)")
            elif tempo_medio < 2.0:
                print("‚ö†Ô∏è  Performance boa (< 2s)")
            else:
                print("‚ùå Performance ruim (> 2s)")
            
            print()
            
        except Exception as e:
            print(f"‚ùå Erro no teste de performance: {e}")
            return False
        
        # Teste de Integridade dos Dados
        print("üîç TESTE 5: Integridade dos Dados")
        try:
            # Verificar se h√° funcion√°rios com registros
            funcionarios_com_registros = db.session.query(
                Funcionario.id
            ).join(RegistroPonto).filter(
                RegistroPonto.obra_id == obra.id
            ).distinct().count()
            
            print(f"‚úÖ Funcion√°rios com registros: {funcionarios_com_registros}")
            
            # Verificar consist√™ncia dos custos
            calc = CalculadoraObra(obra.id)
            custos = calc.calcular_custo_total()
            
            if custos['total'] == (custos['mao_obra'] + custos['transporte'] + 
                                  custos['alimentacao'] + custos['outros']):
                print("‚úÖ Soma dos custos consistente")
            else:
                print("‚ùå Inconsist√™ncia na soma dos custos")
                return False
            
            print()
            
        except Exception as e:
            print(f"‚ùå Erro no teste de integridade: {e}")
            return False
        
        # Resumo final
        print("üéØ RESUMO DOS TESTES")
        print("‚úÖ Calculadora Obra: Funcionando")
        print("‚úÖ KPIs Financeiros: Funcionando")
        print("‚úÖ KPIs Operacionais: Funcionando")
        print("‚úÖ Performance: Adequada")
        print("‚úÖ Integridade: Validada")
        print()
        print("üèÜ TODOS OS TESTES APROVADOS!")
        print("Sistema SIGE v8.0 validado e pronto para uso")
        
        return True

if __name__ == "__main__":
    sucesso = executar_testes()
    sys.exit(0 if sucesso else 1)