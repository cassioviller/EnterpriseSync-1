"""Update models structure

Revision ID: fa53b2005129
Revises: 1d6b0a059bdc
Create Date: 2025-07-24 10:52:05.522371

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'fa53b2005129'
down_revision = '1d6b0a059bdc'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('cliente')
    op.drop_table('fornecedor')
    op.drop_table('material')
    with op.batch_alter_table('custo_veiculo', schema=None) as batch_op:
        batch_op.alter_column('obra_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('funcionario', schema=None) as batch_op:
        batch_op.alter_column('codigo',
               existing_type=sa.VARCHAR(length=10),
               nullable=False)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('historico_produtividade_servico', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_historico_data'))
        batch_op.drop_index(batch_op.f('idx_historico_funcionario_id'))
        batch_op.drop_index(batch_op.f('idx_historico_obra_id'))
        batch_op.drop_index(batch_op.f('idx_historico_servico_id'))

    with op.batch_alter_table('obra', schema=None) as batch_op:
        batch_op.create_unique_constraint(None, ['codigo'])

    with op.batch_alter_table('ocorrencia', schema=None) as batch_op:
        batch_op.alter_column('tipo_ocorrencia_id',
               existing_type=sa.INTEGER(),
               nullable=False)
        batch_op.drop_column('tipo')

    with op.batch_alter_table('rdo', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('rdo_criado_por_id_fkey'), type_='foreignkey')
        batch_op.create_foreign_key(None, 'usuario', ['criado_por_id'], ['id'])

    with op.batch_alter_table('registro_ponto', schema=None) as batch_op:
        batch_op.drop_column('atraso')

    with op.batch_alter_table('servico', schema=None) as batch_op:
        batch_op.alter_column('categoria',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'geral'::character varying"))
        batch_op.alter_column('unidade_medida',
               existing_type=sa.VARCHAR(length=10),
               nullable=False,
               existing_server_default=sa.text("'un'::character varying"))

    with op.batch_alter_table('sub_atividade', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_sub_atividade_ordem'))
        batch_op.drop_index(batch_op.f('idx_sub_atividade_servico_id'))

    with op.batch_alter_table('uso_veiculo', schema=None) as batch_op:
        batch_op.alter_column('obra_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.alter_column('tipo_usuario',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('SUPER_ADMIN', 'ADMIN', 'FUNCIONARIO', name='tipousuario'),
               nullable=False,
               existing_server_default=sa.text("'funcionario'::character varying"))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('usuario', schema=None) as batch_op:
        batch_op.alter_column('tipo_usuario',
               existing_type=sa.Enum('SUPER_ADMIN', 'ADMIN', 'FUNCIONARIO', name='tipousuario'),
               type_=sa.VARCHAR(length=20),
               nullable=True,
               existing_server_default=sa.text("'funcionario'::character varying"))

    with op.batch_alter_table('uso_veiculo', schema=None) as batch_op:
        batch_op.alter_column('obra_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('sub_atividade', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_sub_atividade_servico_id'), ['servico_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_sub_atividade_ordem'), ['ordem_execucao'], unique=False)

    with op.batch_alter_table('servico', schema=None) as batch_op:
        batch_op.alter_column('unidade_medida',
               existing_type=sa.VARCHAR(length=10),
               nullable=True,
               existing_server_default=sa.text("'un'::character varying"))
        batch_op.alter_column('categoria',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'geral'::character varying"))

    with op.batch_alter_table('registro_ponto', schema=None) as batch_op:
        batch_op.add_column(sa.Column('atraso', sa.DOUBLE_PRECISION(precision=53), server_default=sa.text('0.0'), autoincrement=False, nullable=True))

    with op.batch_alter_table('rdo', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.create_foreign_key(batch_op.f('rdo_criado_por_id_fkey'), 'funcionario', ['criado_por_id'], ['id'])

    with op.batch_alter_table('ocorrencia', schema=None) as batch_op:
        batch_op.add_column(sa.Column('tipo', sa.VARCHAR(length=50), autoincrement=False, nullable=False))
        batch_op.alter_column('tipo_ocorrencia_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('obra', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='unique')

    with op.batch_alter_table('historico_produtividade_servico', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_historico_servico_id'), ['servico_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_historico_obra_id'), ['obra_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_historico_funcionario_id'), ['funcionario_id'], unique=False)
        batch_op.create_index(batch_op.f('idx_historico_data'), ['data_execucao'], unique=False)

    with op.batch_alter_table('funcionario', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True))
        batch_op.alter_column('codigo',
               existing_type=sa.VARCHAR(length=10),
               nullable=True)

    with op.batch_alter_table('custo_veiculo', schema=None) as batch_op:
        batch_op.alter_column('obra_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    op.create_table('material',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('descricao', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('unidade_medida', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('preco_unitario', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('estoque_minimo', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('estoque_atual', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('material_pkey'))
    )
    op.create_table('fornecedor',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cnpj_cpf', sa.VARCHAR(length=18), autoincrement=False, nullable=False),
    sa.Column('endereco', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('tipo_produto_servico', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('fornecedor_pkey')),
    sa.UniqueConstraint('cnpj_cpf', name=op.f('fornecedor_cnpj_cpf_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('cliente',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('nome', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('cnpj_cpf', sa.VARCHAR(length=18), autoincrement=False, nullable=False),
    sa.Column('endereco', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('telefone', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=120), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('cliente_pkey')),
    sa.UniqueConstraint('cnpj_cpf', name=op.f('cliente_cnpj_cpf_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
