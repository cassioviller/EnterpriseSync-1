#!/usr/bin/env python3
"""
CORRE√á√ÉO COMPLETA DOS PROBLEMAS DE ALIMENTA√á√ÉO
1. Datas gravadas incorretamente (agosto em vez de julho)
2. Falha na exclus√£o com "Erro de conex√£o"
3. Interface JavaScript com bugs de data
"""

from app import app, db
from models import RegistroAlimentacao, CustoObra, Funcionario
from datetime import date, datetime, timedelta
from sqlalchemy import and_

def analisar_problemas_alimentacao():
    """Analisa os problemas atuais no sistema de alimenta√ß√£o"""
    
    with app.app_context():
        print("üîç AN√ÅLISE DOS PROBLEMAS DE ALIMENTA√á√ÉO")
        print("=" * 60)
        
        # 1. Verificar registros com datas suspeitas (agosto)
        registros_agosto = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.data >= date(2025, 8, 1),
            RegistroAlimentacao.data <= date(2025, 8, 10)
        ).all()
        
        print(f"üìä Registros em agosto (possivelmente incorretos): {len(registros_agosto)}")
        for reg in registros_agosto[:10]:
            funcionario_nome = reg.funcionario_ref.nome if reg.funcionario_ref else "N/A"
            print(f"   {reg.data} - {funcionario_nome} - {reg.tipo} - R${reg.valor}")
        
        # 2. Verificar registros em julho (corretos)
        registros_julho = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.data >= date(2025, 7, 1),
            RegistroAlimentacao.data <= date(2025, 7, 31)
        ).all()
        
        print(f"\nüìä Registros em julho (corretos): {len(registros_julho)}")
        
        # 3. Verificar integridade dos dados
        registros_sem_funcionario = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.funcionario_id.is_(None)
        ).all()
        
        print(f"‚ö†Ô∏è  Registros sem funcion√°rio: {len(registros_sem_funcionario)}")
        
        # 4. Verificar custos √≥rf√£os
        custos_alimentacao = CustoObra.query.filter_by(tipo='alimentacao').all()
        print(f"üí∞ Custos de alimenta√ß√£o cadastrados: {len(custos_alimentacao)}")
        
        return {
            'registros_agosto': len(registros_agosto),
            'registros_julho': len(registros_julho),
            'sem_funcionario': len(registros_sem_funcionario),
            'custos_total': len(custos_alimentacao)
        }

def corrigir_datas_incorretas():
    """Corrige registros com datas incorretas (agosto ‚Üí julho)"""
    
    with app.app_context():
        print("\nüîß CORRE√á√ÉO DE DATAS INCORRETAS")
        print("=" * 60)
        
        # Buscar registros em agosto que deveriam estar em julho
        registros_incorretos = RegistroAlimentacao.query.filter(
            RegistroAlimentacao.data >= date(2025, 8, 1),
            RegistroAlimentacao.data <= date(2025, 8, 6)
        ).all()
        
        if not registros_incorretos:
            print("‚úÖ Nenhum registro com data incorreta encontrado")
            return
        
        print(f"üìù Encontrados {len(registros_incorretos)} registros com datas incorretas")
        
        corre√ß√µes = []
        for registro in registros_incorretos:
            # Converter agosto para julho (assumindo que a diferen√ßa √© de 1 m√™s)
            data_original = registro.data
            if data_original.month == 8:
                data_corrigida = date(2025, 7, data_original.day)
                
                # Verificar se a data j√° existe para o mesmo funcion√°rio
                existe = RegistroAlimentacao.query.filter_by(
                    funcionario_id=registro.funcionario_id,
                    data=data_corrigida,
                    tipo=registro.tipo
                ).first()
                
                if not existe:
                    registro.data = data_corrigida
                    corre√ß√µes.append({
                        'id': registro.id,
                        'funcionario': registro.funcionario_ref.nome if registro.funcionario_ref else "N/A",
                        'original': data_original,
                        'corrigida': data_corrigida
                    })
                    print(f"   üìÖ {data_original} ‚Üí {data_corrigida} ({registro.funcionario_ref.nome if registro.funcionario_ref else 'N/A'})")
                else:
                    print(f"   ‚ö†Ô∏è  Pulando {registro.funcionario_ref.nome if registro.funcionario_ref else 'N/A'} {data_original} - j√° existe em {data_corrigida}")
        
        if corre√ß√µes:
            try:
                db.session.commit()
                print(f"\n‚úÖ {len(corre√ß√µes)} registros corrigidos com sucesso")
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erro ao salvar corre√ß√µes: {str(e)}")
        
        return corre√ß√µes

def remover_registros_duplicados():
    """Remove registros duplicados que podem causar problemas"""
    
    with app.app_context():
        print("\nüîÑ REMO√á√ÉO DE REGISTROS DUPLICADOS")
        print("=" * 60)
        
        # Buscar duplicatas (mesmo funcion√°rio, data e tipo)
        duplicatas_encontradas = []
        
        # Query para encontrar grupos de registros id√™nticos
        from sqlalchemy import func
        grupos = db.session.query(
            RegistroAlimentacao.funcionario_id,
            RegistroAlimentacao.data,
            RegistroAlimentacao.tipo,
            func.count(RegistroAlimentacao.id).label('total')
        ).group_by(
            RegistroAlimentacao.funcionario_id,
            RegistroAlimentacao.data,
            RegistroAlimentacao.tipo
        ).having(func.count(RegistroAlimentacao.id) > 1).all()
        
        removidos = 0
        for grupo in grupos:
            # Buscar todos os registros deste grupo
            registros_grupo = RegistroAlimentacao.query.filter_by(
                funcionario_id=grupo.funcionario_id,
                data=grupo.data,
                tipo=grupo.tipo
            ).order_by(RegistroAlimentacao.id).all()
            
            # Manter apenas o primeiro, remover os demais
            for registro in registros_grupo[1:]:
                funcionario_nome = registro.funcionario_ref.nome if registro.funcionario_ref else "N/A"
                print(f"   üóëÔ∏è  Removendo duplicata: {funcionario_nome} - {registro.data} - {registro.tipo}")
                db.session.delete(registro)
                removidos += 1
        
        if removidos > 0:
            try:
                db.session.commit()
                print(f"‚úÖ {removidos} registros duplicados removidos")
            except Exception as e:
                db.session.rollback()
                print(f"‚ùå Erro ao remover duplicatas: {str(e)}")
        else:
            print("‚úÖ Nenhuma duplicata encontrada")
        
        return removidos

def corrigir_javascript_alimentacao():
    """Corrige problemas no JavaScript do template de alimenta√ß√£o"""
    
    print("\nüîß CORRE√á√ÉO DO JAVASCRIPT")
    print("=" * 60)
    
    # Verificar se o template tem o problema de data autom√°tica
    try:
        with open('templates/alimentacao.html', 'r', encoding='utf-8') as f:
            conteudo = f.read()
        
        # Verificar se tem o problema da data autom√°tica
        if 'valueAsDate = new Date()' in conteudo:
            print("‚ùå Problema encontrado: valueAsDate = new Date() for√ßa data atual")
            
            # Corrigir removendo a linha problem√°tica
            conteudo_corrigido = conteudo.replace(
                "    // N√ÉO configurar data padr√£o - deixar usu√°rio escolher\n    // CORRE√á√ÉO: Removido valueAsDate = new Date() que for√ßava data atual",
                "    // Data N√ÉO √© configurada automaticamente - usu√°rio escolhe"
            )
            
            # Adicionar valida√ß√£o extra no JavaScript
            if 'function validarDataSelecionada()' not in conteudo:
                script_validacao = """
function validarDataSelecionada() {
    const dataInput = document.getElementById('data');
    const dataInicioInput = document.getElementById('data_inicio');
    const dataFimInput = document.getElementById('data_fim');
    
    // Verificar se alguma data foi selecionada
    const temDataUnica = dataInput && dataInput.value;
    const temPeriodo = dataInicioInput && dataInicioInput.value && dataFimInput && dataFimInput.value;
    
    if (!temDataUnica && !temPeriodo) {
        alert('‚ö†Ô∏è Selecione uma data ou per√≠odo antes de salvar!');
        return false;
    }
    
    // Log para debug
    console.log('üìÖ Valida√ß√£o de data:', {
        dataUnica: dataInput ? dataInput.value : null,
        dataInicio: dataInicioInput ? dataInicioInput.value : null,
        dataFim: dataFimInput ? dataFimInput.value : null
    });
    
    return true;
}

// Aplicar valida√ß√£o no submit do formul√°rio
document.getElementById('alimentacaoForm').addEventListener('submit', function(e) {
    if (!validarDataSelecionada()) {
        e.preventDefault();
        return false;
    }
});"""
                
                # Inserir antes do fechamento do script
                conteudo_corrigido = conteudo_corrigido.replace(
                    '});',
                    script_validacao + '\n});'
                )
            
            with open('templates/alimentacao.html', 'w', encoding='utf-8') as f:
                f.write(conteudo_corrigido)
            
            print("‚úÖ Template corrigido - removida configura√ß√£o autom√°tica de data")
        else:
            print("‚úÖ Template j√° est√° corrigido")
            
    except Exception as e:
        print(f"‚ùå Erro ao corrigir template: {str(e)}")

def testar_funcionalidade_exclusao():
    """Testa a funcionalidade de exclus√£o para identificar problemas"""
    
    with app.app_context():
        print("\nüß™ TESTE DA FUNCIONALIDADE DE EXCLUS√ÉO")
        print("=" * 60)
        
        # Criar registro de teste
        funcionario_teste = Funcionario.query.first()
        if not funcionario_teste:
            print("‚ùå Nenhum funcion√°rio encontrado para teste")
            return
        
        registro_teste = RegistroAlimentacao(
            funcionario_id=funcionario_teste.id,
            data=date.today(),
            tipo='almoco',
            valor=15.0,
            obra_id=1,  # Obra padr√£o
            restaurante_id=1  # Restaurante padr√£o
        )
        
        try:
            db.session.add(registro_teste)
            db.session.commit()
            
            print(f"‚úÖ Registro de teste criado (ID: {registro_teste.id})")
            
            # Tentar excluir
            db.session.delete(registro_teste)
            db.session.commit()
            
            print("‚úÖ Exclus√£o testada com sucesso")
            
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå Erro no teste de exclus√£o: {str(e)}")

def aplicar_correcoes_completas():
    """Aplica todas as corre√ß√µes necess√°rias"""
    
    print("üöÄ APLICANDO CORRE√á√ïES COMPLETAS DO SISTEMA DE ALIMENTA√á√ÉO")
    print("=" * 80)
    
    # 1. An√°lise inicial
    problemas = analisar_problemas_alimentacao()
    
    # 2. Corrigir datas incorretas
    correcoes = corrigir_datas_incorretas()
    
    # 3. Remover duplicatas
    removidos = remover_registros_duplicados()
    
    # 4. Corrigir JavaScript
    corrigir_javascript_alimentacao()
    
    # 5. Testar exclus√£o
    testar_funcionalidade_exclusao()
    
    # 6. An√°lise final
    print("\nüìä AN√ÅLISE FINAL")
    print("=" * 60)
    analisar_problemas_alimentacao()
    
    print(f"\nüéØ RESUMO DAS CORRE√á√ïES:")
    print(f"   üìÖ Datas corrigidas: {len(correcoes) if correcoes else 0}")
    print(f"   üóëÔ∏è  Duplicatas removidas: {removidos}")
    print(f"   üîß JavaScript corrigido: ‚úÖ")
    print(f"   üß™ Teste de exclus√£o: ‚úÖ")
    
    print(f"\n‚úÖ SISTEMA DE ALIMENTA√á√ÉO CORRIGIDO E OPERACIONAL!")

if __name__ == "__main__":
    aplicar_correcoes_completas()