version: '3.8'

# Docker Compose unificado para SIGE v8.0
# Funciona tanto em desenvolvimento quanto em produção

services:
  # Banco PostgreSQL
  postgres:
    image: postgres:15
    container_name: sige_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sige
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sige"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação SIGE
  sige:
    build:
      context: .
      dockerfile: Dockerfile.unified
      args:
        BUILD_ENV: ${BUILD_ENV:-production}
    container_name: sige_app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/sige
      
      # Flask
      FLASK_APP: main.py
      FLASK_ENV: ${FLASK_ENV:-production}
      SESSION_SECRET: ${SESSION_SECRET:-secure-session-key-change-in-production}
      
      # System
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      PYTHONIOENCODING: utf-8
      
      # Timezone
      TZ: America/Sao_Paulo
    ports:
      - "${PORT:-5000}:5000"
    volumes:
      # Dados persistentes
      - uploads_data:/app/uploads
      - static_data:/app/static/fotos_funcionarios
      - logs_data:/app/logs
      
      # Para desenvolvimento - descomente as linhas abaixo
      # - ./:/app:ro
      # - /app/.cache
      # - /app/__pycache__
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis (opcional para cache/sessões)
  redis:
    image: redis:7-alpine
    container_name: sige_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    profiles:
      - with-redis

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
  static_data:
    driver: local
  logs_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: sige_network