#!/usr/bin/env python3
"""
üîß CORRE√á√ÉO DEFINITIVA: S√°bado com 0h trabalhadas, horas extras baseadas no hor√°rio normal
"""

from app import app, db
from models import RegistroPonto, Funcionario, HorarioTrabalho
from sqlalchemy import func, text
from datetime import date

def aplicar_logica_sabado_definitiva():
    """Aplicar l√≥gica: S√°bado = 0h trabalhadas, horas extras = horas do hor√°rio normal"""
    print("üîß CORRE√á√ÉO DEFINITIVA: L√≥gica S√°bado")
    print("=" * 60)
    
    # Buscar todos os s√°bados trabalhados que ainda t√™m horas trabalhadas
    sabados = db.session.execute(text("""
        SELECT 
            r.id,
            r.data,
            r.funcionario_id,
            f.nome,
            r.horas_trabalhadas,
            r.horas_extras,
            h.horas_diarias
        FROM registro_ponto r
        JOIN funcionario f ON r.funcionario_id = f.id
        LEFT JOIN horario_trabalho h ON f.horario_trabalho_id = h.id
        WHERE r.tipo_registro = 'sabado_trabalhado'
            AND r.data >= '2025-07-01' 
            AND r.data <= '2025-07-31'
            AND r.horas_trabalhadas > 0
        ORDER BY r.data, f.nome
    """)).fetchall()
    
    print(f"üìã CORRIGINDO {len(sabados)} S√ÅBADOS:")
    
    registros_corrigidos = 0
    
    for sabado in sabados:
        # L√≥gica: No s√°bado, 0h trabalhadas, mas horas extras = horas do expediente normal
        horas_expediente_normal = sabado.horas_diarias or 8.0  # Default 8h se n√£o tiver hor√°rio
        
        # Atualizar registro
        db.session.execute(text("""
            UPDATE registro_ponto 
            SET horas_trabalhadas = 0,
                horas_extras = :horas_extras,
                percentual_extras = 50
            WHERE id = :reg_id
        """), {
            'horas_extras': horas_expediente_normal,
            'reg_id': sabado.id
        })
        
        print(f"   {sabado.data} | {sabado.nome[:25]:<25} | "
              f"Era: {sabado.horas_trabalhadas:.1f}h trab + {sabado.horas_extras:.1f}h extras | "
              f"Agora: 0h trab + {horas_expediente_normal:.1f}h extras (baseado em {horas_expediente_normal:.1f}h normais)")
        
        registros_corrigidos += 1
    
    if registros_corrigidos > 0:
        db.session.commit()
        print(f"‚úÖ {registros_corrigidos} s√°bados corrigidos com nova l√≥gica")
    else:
        print(f"‚ÑπÔ∏è  Nenhum s√°bado precisava de corre√ß√£o")
    
    return registros_corrigidos

def verificar_resultado_correcao():
    """Verificar se a corre√ß√£o foi aplicada corretamente"""
    print(f"\nüîç VERIFICA√á√ÉO: Resultado da corre√ß√£o")
    print("=" * 60)
    
    # Verificar exemplo de s√°bados ap√≥s corre√ß√£o
    sabados_apos = db.session.execute(text("""
        SELECT 
            r.data,
            f.nome,
            r.horas_trabalhadas,
            r.horas_extras,
            r.percentual_extras,
            h.horas_diarias
        FROM registro_ponto r
        JOIN funcionario f ON r.funcionario_id = f.id
        LEFT JOIN horario_trabalho h ON f.horario_trabalho_id = h.id
        WHERE r.tipo_registro = 'sabado_trabalhado'
            AND r.data >= '2025-07-01' 
            AND r.data <= '2025-07-31'
        ORDER BY r.horas_extras DESC
        LIMIT 10
    """)).fetchall()
    
    print(f"üìã S√ÅBADOS AP√ìS CORRE√á√ÉO (top 10):")
    for sabado in sabados_apos:
        print(f"   {sabado.data} | {sabado.nome[:20]:<20} | "
              f"Trab: {sabado.horas_trabalhadas:.1f}h | "
              f"Extras: {sabado.horas_extras:.1f}h | "
              f"Hor√°rio: {sabado.horas_diarias or 8:.1f}h")
    
    # Verificar totais
    total_sabados = db.session.execute(text("""
        SELECT 
            COUNT(*) as registros,
            SUM(horas_trabalhadas) as total_trabalhadas,
            SUM(horas_extras) as total_extras
        FROM registro_ponto
        WHERE tipo_registro = 'sabado_trabalhado'
            AND data >= '2025-07-01' 
            AND data <= '2025-07-31'
    """)).fetchone()
    
    print(f"\nüìä TOTAIS S√ÅBADOS:")
    print(f"   Registros: {total_sabados.registros}")
    print(f"   Horas Trabalhadas: {total_sabados.total_trabalhadas:.1f}h (deve ser 0)")
    print(f"   Horas Extras: {total_sabados.total_extras:.1f}h")
    
    if total_sabados.total_trabalhadas == 0:
        print(f"   ‚úÖ CORRE√á√ÉO APLICADA! S√°bados t√™m 0h trabalhadas")
    else:
        print(f"   ‚ùå Ainda h√° {total_sabados.total_trabalhadas:.1f}h trabalhadas em s√°bados")
    
    return total_sabados

def testar_kpis_apos_correcao():
    """Testar KPIs ap√≥s aplicar a corre√ß√£o definitiva"""
    print(f"\nüß™ TESTE: KPIs ap√≥s corre√ß√£o definitiva")
    print("=" * 60)
    
    # Buscar funcion√°rio com mais horas extras
    func_teste = db.session.execute(text("""
        SELECT 
            f.id,
            f.nome,
            SUM(r.horas_extras) as total_extras
        FROM funcionario f
        JOIN registro_ponto r ON f.id = r.funcionario_id
        WHERE r.data >= '2025-07-01' 
            AND r.data <= '2025-07-31'
            AND r.horas_extras > 0
        GROUP BY f.id, f.nome
        ORDER BY total_extras DESC
        LIMIT 1
    """)).fetchone()
    
    if not func_teste:
        print("‚ùå Nenhum funcion√°rio com horas extras encontrado")
        return False
    
    print(f"üë§ {func_teste.nome} (ID: {func_teste.id})")
    print(f"üìä DB Total Extras: {func_teste.total_extras:.1f}h")
    
    # Testar KPI Engine
    from kpis_engine import KPIsEngine
    engine = KPIsEngine()
    
    try:
        kpis = engine.calcular_kpis_funcionario(
            func_teste.id,
            date(2025, 7, 1),
            date(2025, 7, 31)
        )
        
        print(f"ü§ñ KPI Horas Extras: {kpis['horas_extras']:.1f}h")
        print(f"üí∞ Valor Horas Extras: R$ {kpis['eficiencia']:.2f}")
        
        # Verificar s√°bados espec√≠ficos deste funcion√°rio
        sabados_func = db.session.execute(text("""
            SELECT COUNT(*), SUM(horas_extras)
            FROM registro_ponto
            WHERE funcionario_id = :func_id
                AND tipo_registro = 'sabado_trabalhado'
                AND data >= '2025-07-01' 
                AND data <= '2025-07-31'
        """), {'func_id': func_teste.id}).fetchone()
        
        print(f"üóìÔ∏è  S√°bados: {sabados_func[0] or 0} dias, {sabados_func[1] or 0:.1f}h extras")
        
        diferenca = abs(func_teste.total_extras - kpis['horas_extras'])
        if diferenca < 0.1:
            print(f"‚úÖ KPI CORRETO! Diferen√ßa: {diferenca:.2f}h")
            return True
        else:
            print(f"‚ùå KPI INCORRETO! Diferen√ßa: {diferenca:.2f}h")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO no KPI Engine: {e}")
        return False

if __name__ == "__main__":
    with app.app_context():
        print("üîß APLICANDO L√ìGICA DEFINITIVA DOS S√ÅBADOS")
        print("=" * 80)
        print("üìù REGRA: S√°bado = 0h trabalhadas + horas extras baseadas no expediente normal")
        print("=" * 80)
        
        # 1. Aplicar corre√ß√£o definitiva
        corrigidos = aplicar_logica_sabado_definitiva()
        
        # 2. Verificar resultado
        totais = verificar_resultado_correcao()
        
        # 3. Testar KPIs
        kpi_ok = testar_kpis_apos_correcao()
        
        print(f"\nüéØ RESULTADO FINAL:")
        print(f"   Registros corrigidos: {corrigidos}")
        print(f"   S√°bados com 0h trabalhadas: {'‚úÖ' if totais.total_trabalhadas == 0 else '‚ùå'}")
        print(f"   Total horas extras s√°bado: {totais.total_extras:.1f}h")
        print(f"   KPIs funcionando: {'‚úÖ' if kpi_ok else '‚ùå'}")
        
        if totais.total_trabalhadas == 0 and kpi_ok:
            print(f"\nüéâ CORRE√á√ÉO DEFINITIVA APLICADA COM SUCESSO!")
            print(f"üìä Agora os s√°bados seguem a regra correta:")
            print(f"   ‚Ä¢ 0h na coluna 'horas trabalhadas'")
            print(f"   ‚Ä¢ Horas extras baseadas no expediente normal")
            print(f"   ‚Ä¢ 50% de adicional aplicado corretamente")
        else:
            print(f"\n‚ùå AINDA H√Å PROBLEMAS NA CORRE√á√ÉO")
            print(f"   Verifique os logs acima para mais detalhes")