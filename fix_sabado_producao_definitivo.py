#!/usr/bin/env python3
"""
üîß FIX DEFINITIVO PRODU√á√ÉO: Problema espec√≠fico do Antonio com 7.9h s√°bado
Este script resolve especificamente o problema onde s√°bados est√£o em horas_trabalhadas mas n√£o em horas_extras
"""

from app import app, db
from models import RegistroPonto, Funcionario
from sqlalchemy import text, func
from datetime import date

def executar_correcao_completa_sabados():
    """Executar corre√ß√£o completa e definitiva dos s√°bados"""
    print("üîß CORRE√á√ÉO COMPLETA E DEFINITIVA - S√ÅBADOS")
    print("=" * 70)
    
    # 1. Identificar todos os s√°bados que precisam corre√ß√£o
    print("üìä FASE 1: Identificando registros que precisam corre√ß√£o...")
    
    sabados_problema = db.session.execute(text("""
        SELECT 
            r.id,
            r.data,
            r.funcionario_id,
            r.tipo_registro,
            r.horas_trabalhadas,
            r.horas_extras,
            f.nome,
            EXTRACT(DOW FROM r.data) as dia_semana
        FROM registro_ponto r
        JOIN funcionario f ON r.funcionario_id = f.id
        WHERE (
            -- Crit√©rio 1: Tipo sabado_trabalhado com horas < trabalhadas
            (r.tipo_registro = 'sabado_trabalhado' AND r.horas_trabalhadas > 0 AND (r.horas_extras IS NULL OR r.horas_extras < r.horas_trabalhadas))
            OR
            -- Crit√©rio 2: S√°bados (dia da semana 6) com qualquer tipo e horas trabalhadas > extras
            (EXTRACT(DOW FROM r.data) = 6 AND r.horas_trabalhadas > 0 AND (r.horas_extras IS NULL OR r.horas_extras < r.horas_trabalhadas))
        )
        AND r.data >= '2025-07-01' 
        AND r.data <= '2025-07-31'
        ORDER BY r.data, f.nome
    """)).fetchall()
    
    print(f"üìä REGISTROS ENCONTRADOS: {len(sabados_problema)}")
    
    if len(sabados_problema) == 0:
        print("‚úÖ Todos os s√°bados j√° est√£o corretos!")
        return 0
    
    # Mostrar alguns exemplos
    print("\nüìã EXEMPLOS QUE SER√ÉO CORRIGIDOS:")
    for i, reg in enumerate(sabados_problema[:10]):
        print(f"   {reg.data} | {reg.nome[:25]:<25} | {reg.tipo_registro:<20} | "
              f"Trab: {reg.horas_trabalhadas:>4.1f}h | Extras: {reg.horas_extras or 0:>4.1f}h")
    
    if len(sabados_problema) > 10:
        print(f"   ... e mais {len(sabados_problema) - 10} registros")
    
    # 2. Aplicar corre√ß√£o
    print(f"\nüîß FASE 2: Aplicando corre√ß√£o...")
    
    ids_para_corrigir = [reg.id for reg in sabados_problema]
    
    if ids_para_corrigir:
        # Converter lista para string para usar no SQL
        ids_str = ','.join(map(str, ids_para_corrigir))
        
        resultado = db.session.execute(text(f"""
            UPDATE registro_ponto 
            SET 
                horas_extras = horas_trabalhadas,
                percentual_extras = 50.0,
                tipo_registro = CASE 
                    WHEN EXTRACT(DOW FROM data) = 6 THEN 'sabado_trabalhado'
                    ELSE tipo_registro
                END
            WHERE id IN ({ids_str})
        """))
        
        db.session.commit()
        print(f"‚úÖ {resultado.rowcount} registros atualizados com sucesso!")
    
    return len(sabados_problema)

def verificar_antonio_especifico():
    """Verificar especificamente casos similares ao Antonio"""
    print(f"\nüîç VERIFICA√á√ÉO: Casos Similares ao Antonio")
    print("=" * 70)
    
    # Buscar funcion√°rios com registros de s√°bado em julho
    funcionarios_sabado = db.session.execute(text("""
        SELECT 
            f.id,
            f.nome,
            f.salario,
            COUNT(r.id) as total_registros,
            SUM(CASE WHEN EXTRACT(DOW FROM r.data) = 6 THEN r.horas_trabalhadas ELSE 0 END) as horas_sabado,
            SUM(CASE WHEN EXTRACT(DOW FROM r.data) = 6 THEN r.horas_extras ELSE 0 END) as extras_sabado,
            SUM(r.horas_extras) as total_extras
        FROM funcionario f
        JOIN registro_ponto r ON f.id = r.funcionario_id
        WHERE r.data >= '2025-07-01' 
            AND r.data <= '2025-07-31'
        GROUP BY f.id, f.nome, f.salario
        HAVING SUM(CASE WHEN EXTRACT(DOW FROM r.data) = 6 THEN r.horas_trabalhadas ELSE 0 END) > 0
        ORDER BY total_extras DESC
    """)).fetchall()
    
    print(f"üìä FUNCION√ÅRIOS COM S√ÅBADOS: {len(funcionarios_sabado)}")
    
    for i, func in enumerate(funcionarios_sabado[:5]):
        print(f"\nüë§ {func.nome}")
        print(f"   üí∞ Sal√°rio: R$ {func.salario:.2f}")
        print(f"   üìä Registros: {func.total_registros}")
        print(f"   üïê Horas S√°bado: {func.horas_sabado:.1f}h")
        print(f"   ‚ö° Extras S√°bado: {func.extras_sabado:.1f}h")
        print(f"   üìà Total Extras: {func.total_extras:.1f}h")
        
        if func.horas_sabado > func.extras_sabado:
            print(f"   ‚ö†Ô∏è  PROBLEMA: {func.horas_sabado - func.extras_sabado:.1f}h de s√°bado n√£o contabilizadas!")
        else:
            print(f"   ‚úÖ OK: S√°bados corretos")
    
    return funcionarios_sabado

def testar_kpi_final():
    """Teste final com KPIs"""
    print(f"\nüß™ TESTE FINAL: KPIs Ap√≥s Corre√ß√£o")
    print("=" * 70)
    
    # Pegar funcion√°rio com mais horas extras para testar
    funcionario = db.session.execute(text("""
        SELECT f.id, f.nome, f.salario, SUM(r.horas_extras) as total_extras
        FROM funcionario f
        JOIN registro_ponto r ON f.id = r.funcionario_id
        WHERE r.data >= '2025-07-01' 
            AND r.data <= '2025-07-31'
            AND r.horas_extras > 0
        GROUP BY f.id, f.nome, f.salario
        ORDER BY total_extras DESC
        LIMIT 1
    """)).fetchone()
    
    if not funcionario:
        print("‚ùå Nenhum funcion√°rio com horas extras encontrado")
        return
    
    print(f"üë§ Testando: {funcionario.nome}")
    print(f"üí∞ Sal√°rio: R$ {funcionario.salario:.2f}")
    print(f"üìä Horas Extras (DB): {funcionario.total_extras:.1f}h")
    
    # Calcular via KPI engine
    try:
        from kpis_engine import KPIsEngine
        engine = KPIsEngine()
        
        kpis = engine.calcular_kpis_funcionario(
            funcionario.id,
            date(2025, 7, 1),
            date(2025, 7, 31)
        )
        
        print(f"\nüìä RESULTADO KPI:")
        print(f"   Horas Trabalhadas: {kpis['horas_trabalhadas']:.1f}h")
        print(f"   Horas Extras: {kpis['horas_extras']:.1f}h")
        print(f"   Valor Horas Extras: R$ {kpis['eficiencia']:.2f}")
        
        # Comparar
        diferenca = abs(kpis['horas_extras'] - funcionario.total_extras)
        if diferenca < 0.1:
            print(f"‚úÖ KPI CORRETO! Diferen√ßa: {diferenca:.2f}h")
        else:
            print(f"‚ùå KPI INCORRETO! Diferen√ßa: {diferenca:.2f}h")
        
        return kpis
        
    except Exception as e:
        print(f"‚ùå ERRO ao calcular KPI: {e}")
        return None

def criar_resumo_final():
    """Criar resumo final da situa√ß√£o"""
    print(f"\nüìã RESUMO FINAL DA SITUA√á√ÉO")
    print("=" * 70)
    
    # Total geral
    totais = db.session.execute(text("""
        SELECT 
            COUNT(*) as registros,
            SUM(horas_trabalhadas) as total_trabalhadas,
            SUM(horas_extras) as total_extras
        FROM registro_ponto
        WHERE data >= '2025-07-01' 
            AND data <= '2025-07-31'
    """)).fetchone()
    
    # S√°bados espec√≠ficos
    sabados = db.session.execute(text("""
        SELECT 
            COUNT(*) as registros_sabado,
            SUM(horas_trabalhadas) as trab_sabado,
            SUM(horas_extras) as extras_sabado
        FROM registro_ponto
        WHERE EXTRACT(DOW FROM data) = 6
            AND data >= '2025-07-01' 
            AND data <= '2025-07-31'
            AND horas_trabalhadas > 0
    """)).fetchone()
    
    print(f"üìä TOTAIS GERAIS JULHO 2025:")
    print(f"   Registros: {totais.registros}")
    print(f"   Horas Trabalhadas: {totais.total_trabalhadas:.1f}h")
    print(f"   Horas Extras: {totais.total_extras:.1f}h")
    
    print(f"\nüìä S√ÅBADOS JULHO 2025:")
    print(f"   Registros: {sabados.registros_sabado}")
    print(f"   Horas Trabalhadas: {sabados.trab_sabado:.1f}h")
    print(f"   Horas Extras: {sabados.extras_sabado:.1f}h")
    
    if abs((sabados.trab_sabado or 0) - (sabados.extras_sabado or 0)) < 0.1:
        print(f"‚úÖ S√ÅBADOS EST√ÉO CORRETOS!")
    else:
        print(f"‚ùå AINDA H√Å PROBLEMA NOS S√ÅBADOS!")
        print(f"   Diferen√ßa: {(sabados.trab_sabado or 0) - (sabados.extras_sabado or 0):.1f}h")

if __name__ == "__main__":
    with app.app_context():
        print("üîß FIX DEFINITIVO PRODU√á√ÉO - ANTONIO S√ÅBADO 7.9H")
        print("=" * 80)
        
        # 1. Executar corre√ß√£o completa
        corrigidos = executar_correcao_completa_sabados()
        
        # 2. Verificar casos espec√≠ficos
        funcionarios = verificar_antonio_especifico()
        
        # 3. Testar KPI
        kpi_resultado = testar_kpi_final()
        
        # 4. Resumo final
        criar_resumo_final()
        
        print(f"\nüéØ CONCLUS√ÉO:")
        if corrigidos > 0:
            print(f"   ‚úÖ {corrigidos} registros corrigidos")
            print(f"   üîÑ Reinicie o servidor")
            print(f"   üì± Atualize a p√°gina do funcion√°rio")
            print(f"   üéâ As 7.9h de s√°bado devem aparecer nos KPIs!")
        else:
            print(f"   ‚úÖ Sistema j√° estava correto")
            print(f"   ü§î Problema pode ser no c√°lculo dos KPIs")
            print(f"   üìß Verifique se h√° filtros ou condi√ß√µes espec√≠ficas")