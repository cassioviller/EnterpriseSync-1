#!/usr/bin/env python3
"""
Script para corrigir problema de multi-tenancy no controle de ponto
PARA APLICAR EM PRODU√á√ÉO
"""

import os
import sys
import shutil
from datetime import datetime

def aplicar_correcao_producao():
    """Aplicar corre√ß√£o de multi-tenancy em produ√ß√£o"""
    
    print("üöÄ APLICANDO CORRE√á√ÉO DE MULTI-TENANCY EM PRODU√á√ÉO")
    print("=" * 60)
    
    # 1. Fazer backup do views.py atual
    backup_path = f"views_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
    
    if os.path.exists('views.py'):
        shutil.copy2('views.py', backup_path)
        print(f"‚úÖ Backup criado: {backup_path}")
    
    # 2. Verificar se a corre√ß√£o j√° foi aplicada
    print("\nüîç Verificando se corre√ß√£o j√° foi aplicada...")
    
    with open('views.py', 'r', encoding='utf-8') as f:
        conteudo = f.read()
    
    if 'Funcionario.admin_id == current_user.id' in conteudo and 'controle_ponto()' in conteudo:
        print("‚úÖ Corre√ß√£o J√Å APLICADA - Multi-tenancy implementado")
        
        # Verificar funcionalidades de exclus√£o em lote
        if '/ponto/preview-exclusao' in conteudo and '/ponto/excluir-periodo' in conteudo:
            print("‚úÖ Funcionalidades de exclus√£o em lote J√Å IMPLEMENTADAS")
        else:
            print("‚ö†Ô∏è Funcionalidades de exclus√£o em lote FALTANDO")
            return False
            
        return True
    else:
        print("‚ùå CORRE√á√ÉO N√ÉO APLICADA - Necess√°rio aplicar patch")
        return False

def testar_funcionalidades():
    """Testar se as funcionalidades est√£o funcionando"""
    
    print("\nüß™ TESTANDO FUNCIONALIDADES...")
    
    try:
        from app import app, db
        from models import RegistroPonto, Funcionario
        
        with app.app_context():
            # Contar registros totais
            total_registros = RegistroPonto.query.count()
            print(f"üìä Total de registros no banco: {total_registros}")
            
            # Contar por admin_id
            admin_4_count = RegistroPonto.query.join(Funcionario).filter(
                Funcionario.admin_id == 4
            ).count()
            
            print(f"üìä Registros do Admin ID 4: {admin_4_count}")
            
            if admin_4_count < total_registros:
                print("‚úÖ Multi-tenancy funcionando - filtros aplicados corretamente")
                return True
            else:
                print("‚ö†Ô∏è Poss√≠vel problema com multi-tenancy")
                return False
                
    except Exception as e:
        print(f"‚ùå Erro ao testar: {e}")
        return False

def verificar_templates():
    """Verificar se templates est√£o atualizados"""
    
    print("\nüìÑ VERIFICANDO TEMPLATES...")
    
    try:
        with open('templates/controle_ponto.html', 'r', encoding='utf-8') as f:
            template_content = f.read()
        
        if 'exclusaoLoteModal' in template_content:
            print("‚úÖ Template atualizado com modal de exclus√£o em lote")
        else:
            print("‚ùå Template N√ÉO atualizado - falta modal de exclus√£o")
            return False
            
        if 'previewExclusao()' in template_content:
            print("‚úÖ JavaScript de exclus√£o implementado")
        else:
            print("‚ùå JavaScript de exclus√£o FALTANDO")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar template: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    
    print("üîß CORRE√á√ÉO DE CONTROLE DE PONTO - PRODU√á√ÉO")
    print("Data:", datetime.now().strftime('%d/%m/%Y %H:%M:%S'))
    print()
    
    # Verificar corre√ß√µes aplicadas
    correcao_aplicada = aplicar_correcao_producao()
    
    # Verificar templates
    templates_ok = verificar_templates()
    
    # Testar funcionalidades
    funcionalidades_ok = testar_funcionalidades()
    
    print("\n" + "=" * 60)
    print("üìã RESUMO DA VERIFICA√á√ÉO:")
    print(f"‚úÖ Corre√ß√£o Multi-tenancy: {'OK' if correcao_aplicada else 'FALHA'}")
    print(f"‚úÖ Templates atualizados: {'OK' if templates_ok else 'FALHA'}")
    print(f"‚úÖ Funcionalidades testadas: {'OK' if funcionalidades_ok else 'FALHA'}")
    
    if all([correcao_aplicada, templates_ok, funcionalidades_ok]):
        print("\nüéâ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!")
        print("üöÄ Sistema pronto para produ√ß√£o")
        
        print("\nüì± INSTRU√á√ïES PARA O USU√ÅRIO:")
        print("1. Os registros de fim de semana agora aparecem corretamente")
        print("2. Use o bot√£o 'Excluir por Per√≠odo' para limpeza em lote")
        print("3. Multi-tenancy garante isolamento entre administradores")
        
        return True
    else:
        print("\n‚ö†Ô∏è ALGUMAS CORRE√á√ïES FALTANDO - Verificar logs acima")
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)