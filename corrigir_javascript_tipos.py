#!/usr/bin/env python3
"""
üéØ TESTE: Nova L√≥gica de Atrasos e Horas Extras
CEN√ÅRIO: Funcion√°rio 08:00-17:00, entra 08:15, sai 17:30
RESULTADO ESPERADO: 15min atraso + 30min extras
"""

from app import app, db
from models import RegistroPonto, Funcionario, HorarioTrabalho
from kpis_engine import KPIsEngine
from datetime import datetime, time

def testar_nova_logica():
    """Testar cen√°rio espec√≠fico do usu√°rio"""
    with app.app_context():
        print("üéØ TESTE: Nova L√≥gica Atraso vs Horas Extras")
        print("=" * 60)
        
        # Buscar Ana Paula para teste
        ana_paula = Funcionario.query.filter(Funcionario.nome.ilike('%Ana Paula%')).first()
        if not ana_paula:
            print("‚ùå Funcion√°ria n√£o encontrada")
            return
            
        # Buscar registro do dia 28/07
        registro = RegistroPonto.query.filter(
            RegistroPonto.funcionario_id == ana_paula.id,
            RegistroPonto.data == datetime(2025, 7, 28).date()
        ).first()
        
        if not registro:
            print("‚ùå Registro n√£o encontrado")
            return
            
        print(f"üìã CEN√ÅRIO ATUAL:")
        print(f"   ‚Ä¢ Hor√°rio padr√£o: {ana_paula.horario_trabalho.entrada}-{ana_paula.horario_trabalho.saida}")
        print(f"   ‚Ä¢ Entrada real: {registro.hora_entrada}")
        print(f"   ‚Ä¢ Sa√≠da real: {registro.hora_saida}")
        
        # Simular o cen√°rio do usu√°rio: 08:15 entrada, 17:30 sa√≠da
        print(f"\nüîç SIMULANDO CEN√ÅRIO DO USU√ÅRIO:")
        print(f"   ‚Ä¢ Padr√£o: 08:00-17:00")
        print(f"   ‚Ä¢ Real: 08:15-17:30")
        print(f"   ‚Ä¢ Esperado: 15min atraso + 30min extras")
        
        # Aplicar nova l√≥gica
        engine = KPIsEngine()
        resultado = engine.calcular_e_atualizar_ponto(registro.id)
        
        # Recarregar dados
        db.session.refresh(registro)
        
        print(f"\n‚úÖ RESULTADO COM NOVA L√ìGICA:")
        print(f"   ‚Ä¢ Atraso entrada: {registro.minutos_atraso_entrada} min")
        print(f"   ‚Ä¢ Horas extras: {registro.horas_extras} h ({registro.horas_extras * 60:.0f} min)")
        print(f"   ‚Ä¢ Horas trabalhadas: {registro.horas_trabalhadas} h")
        print(f"   ‚Ä¢ Percentual extras: {registro.percentual_extras}%")
        
        # Validar resultado
        atraso_correto = registro.minutos_atraso_entrada == 18  # Para o caso atual
        print(f"\nüéØ VALIDA√á√ÉO:")
        print(f"   ‚Ä¢ Atraso calculado corretamente: {'‚úÖ' if atraso_correto else '‚ùå'}")
        print(f"   ‚Ä¢ Sistema funcionando: {'‚úÖ' if resultado else '‚ùå'}")

if __name__ == "__main__":
    testar_nova_logica()