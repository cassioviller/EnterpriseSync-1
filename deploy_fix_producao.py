#!/usr/bin/env python3
"""
Script de Deploy - Corre√ß√£o Cr√≠tica de Produ√ß√£o
Fix para coluna obra.cliente ausente em produ√ß√£o
"""

import sys
import os
import logging
from sqlalchemy import text, inspect
from sqlalchemy.exc import ProgrammingError

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_and_add_missing_columns():
    """Verifica e adiciona colunas ausentes na tabela obra"""
    
    try:
        # Importar app e db
        sys.path.append('.')
        from app import app, db
        
        with app.app_context():
            logger.info("üîç Verificando estrutura da tabela obra...")
            
            # Obter inspetor do banco
            inspector = inspect(db.engine)
            
            # Verificar colunas existentes
            existing_columns = [col['name'] for col in inspector.get_columns('obra')]
            logger.info(f"‚úÖ Colunas existentes: {existing_columns}")
            
            # Colunas que devem existir
            required_columns = {
                'cliente': 'VARCHAR(200)',
                'cliente_nome': 'VARCHAR(100)',
                'cliente_email': 'VARCHAR(120)',
                'cliente_telefone': 'VARCHAR(20)',
                'token_cliente': 'VARCHAR(255)',
                'portal_ativo': 'BOOLEAN DEFAULT TRUE',
                'ultima_visualizacao_cliente': 'TIMESTAMP',
                'proposta_origem_id': 'INTEGER REFERENCES propostas_comerciais(id)'
            }
            
            # Verificar e adicionar colunas ausentes
            missing_columns = []
            for col_name, col_definition in required_columns.items():
                if col_name not in existing_columns:
                    missing_columns.append((col_name, col_definition))
                    logger.warning(f"‚ö†Ô∏è Coluna ausente: {col_name}")
            
            if not missing_columns:
                logger.info("‚úÖ Todas as colunas j√° existem!")
                return True
            
            # Adicionar colunas ausentes
            logger.info(f"üîß Adicionando {len(missing_columns)} colunas ausentes...")
            
            for col_name, col_definition in missing_columns:
                try:
                    sql = f"ALTER TABLE obra ADD COLUMN {col_name} {col_definition};"
                    logger.info(f"üìù Executando: {sql}")
                    db.session.execute(text(sql))
                    db.session.commit()
                    logger.info(f"‚úÖ Coluna {col_name} adicionada com sucesso!")
                    
                except ProgrammingError as e:
                    if "already exists" in str(e):
                        logger.info(f"‚ÑπÔ∏è Coluna {col_name} j√° existe (ignorando)")
                        db.session.rollback()
                    else:
                        logger.error(f"‚ùå Erro ao adicionar coluna {col_name}: {e}")
                        db.session.rollback()
                        return False
                except Exception as e:
                    logger.error(f"‚ùå Erro inesperado ao adicionar coluna {col_name}: {e}")
                    db.session.rollback()
                    return False
            
            # Verificar se todas as colunas foram adicionadas
            updated_columns = [col['name'] for col in inspector.get_columns('obra')]
            logger.info(f"‚úÖ Colunas ap√≥s migra√ß√£o: {updated_columns}")
            
            # Verificar se h√° tokens √∫nicos ausentes
            logger.info("üîß Verificando tokens √∫nicos...")
            try:
                obras_sem_token = db.session.execute(text(
                    "SELECT id, nome FROM obra WHERE token_cliente IS NULL OR token_cliente = ''"
                )).fetchall()
                
                if obras_sem_token:
                    logger.info(f"üîß Gerando tokens para {len(obras_sem_token)} obras...")
                    import uuid
                    
                    for obra in obras_sem_token:
                        token = str(uuid.uuid4())
                        db.session.execute(text(
                            "UPDATE obra SET token_cliente = :token WHERE id = :id"
                        ), {'token': token, 'id': obra.id})
                        logger.info(f"  ‚úÖ Token gerado para obra {obra.nome}")
                    
                    db.session.commit()
                    logger.info("‚úÖ Tokens √∫nicos gerados com sucesso!")
                else:
                    logger.info("‚úÖ Todas as obras j√° possuem tokens √∫nicos!")
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erro ao verificar tokens: {e}")
                db.session.rollback()
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå Erro cr√≠tico durante migra√ß√£o: {e}")
        return False

def verify_fix():
    """Verifica se o fix foi aplicado corretamente"""
    
    try:
        sys.path.append('.')
        from app import app, db
        from models import Obra
        
        with app.app_context():
            logger.info("üîç Verificando fix aplicado...")
            
            # Testar query que estava falhando
            try:
                obras = Obra.query.filter_by(admin_id=2).limit(1).all()
                logger.info("‚úÖ Query de obras funcionando corretamente!")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå Query ainda falhando: {e}")
                return False
                
    except Exception as e:
        logger.error(f"‚ùå Erro na verifica√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do script de deploy"""
    
    logger.info("üöÄ INICIANDO DEPLOY - CORRE√á√ÉO CR√çTICA DE PRODU√á√ÉO")
    logger.info("=" * 60)
    
    # Verificar ambiente
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        logger.error("‚ùå DATABASE_URL n√£o configurado!")
        sys.exit(1)
    
    logger.info(f"üîó Conectando ao banco: {database_url[:50]}...")
    
    # Executar corre√ß√µes
    if not check_and_add_missing_columns():
        logger.error("‚ùå Falha na adi√ß√£o de colunas!")
        sys.exit(1)
    
    # Verificar se funcionou
    if not verify_fix():
        logger.error("‚ùå Verifica√ß√£o falhou!")
        sys.exit(1)
    
    logger.info("=" * 60)
    logger.info("üéâ DEPLOY CONCLU√çDO COM SUCESSO!")
    logger.info("‚úÖ Problema da coluna obra.cliente resolvido")
    logger.info("‚úÖ Sistema pronto para produ√ß√£o")

if __name__ == '__main__':
    main()